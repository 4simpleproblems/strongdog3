var famobi_mgb_url = window.famobi.getMoreGamesButtonImage();

// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["openfl"] = $hx_exports["openfl"] || {};
$hx_exports["lime"] = $hx_exports["lime"] || {};
var $hxClasses = {},$estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var DisplayObjectContainerBatch = function() {
	this.parent = null;
	this.visible = true;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.childs = [];
	this.childVisibilities = new haxe_ds_ObjectMap();
	this.batchMatrix = new openfl_geom_Matrix();
};
$hxClasses["DisplayObjectContainerBatch"] = DisplayObjectContainerBatch;
DisplayObjectContainerBatch.__name__ = ["DisplayObjectContainerBatch"];
DisplayObjectContainerBatch.prototype = {
	batchMatrix: null
	,childs: null
	,childVisibilities: null
	,x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,visible: null
	,parent: null
	,set_parent: function(par) {
		this.parent = par;
		this.updateMatrix();
		return par;
	}
	,set_x: function(value) {
		this.x = value;
		this.updateMatrix();
		return value;
	}
	,set_y: function(value) {
		this.y = value;
		this.updateMatrix();
		return value;
	}
	,set_scaleX: function(value) {
		this.scaleX = value;
		this.updateMatrix();
		return value;
	}
	,set_scaleY: function(value) {
		this.scaleY = value;
		this.updateMatrix();
		return value;
	}
	,set_rotation: function(value) {
		this.rotation = value;
		this.updateMatrix();
		return value;
	}
	,set_visible: function(value) {
		if(this.visible == value) {
			return value;
		}
		this.visible = value;
		var _g = 0;
		var _g1 = this.childs;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(!value) {
				this.childVisibilities.set(child,child.visible);
				child.visible = value;
			} else if(this.childVisibilities.h.__keys__[child.__id__] != null) {
				child.visible = this.childVisibilities.h[child.__id__];
			}
		}
		return value;
	}
	,updateMatrix: function() {
		this.batchMatrix.identity();
		this.batchMatrix.scale(this.scaleX,this.scaleY);
		this.batchMatrix.rotate(this.rotation);
		this.batchMatrix.translate(this.x,this.y);
		if(this.parent != null) {
			this.batchMatrix.concat(this.parent.batchMatrix);
		}
	}
	,addChild: function(child) {
		child.parent = this;
		this.childs.push(child);
		if(!this.visible) {
			this.childVisibilities.set(child,child.visible);
			child.visible = false;
		}
		return child;
	}
	,removeChild: function(child) {
		if(child == null) {
			return null;
		}
		child.parent = null;
		HxOverrides.remove(this.childs,child);
		return child;
	}
	,__class__: DisplayObjectContainerBatch
	,__properties__: {set_parent:"set_parent",set_visible:"set_visible",set_rotation:"set_rotation",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_y:"set_y",set_x:"set_x"}
};
var AiThinkMC = function() {
	DisplayObjectContainerBatch.call(this);
	this.img0 = new DisplayObjectBatch(Main.current.batch,"clock_1");
	this.img0.tx = this.img0.get_width() / 2;
	this.img0.ty = this.img0.get_height() / 2;
	this.img1 = new DisplayObjectBatch(Main.current.batch,"clock_2");
	this.img1.tx = this.img1.get_width() / 2;
	this.img1.ty = this.img1.get_height() / 2;
	this.img2 = new DisplayObjectBatch(Main.current.batch,"clock_3");
	this.img2.tx = this.img2.get_width() / 2;
	this.img2.ty = this.img2.get_height() / 2;
	this.img0.parent = this;
	this.img1.parent = this;
	this.img2.parent = this;
	this.set_scaleX(this.set_scaleY(1));
	this.img0.scaleX = this.img0.scaleY = 1.5;
};
$hxClasses["AiThinkMC"] = AiThinkMC;
AiThinkMC.__name__ = ["AiThinkMC"];
AiThinkMC.__super__ = DisplayObjectContainerBatch;
AiThinkMC.prototype = $extend(DisplayObjectContainerBatch.prototype,{
	img0: null
	,img1: null
	,img2: null
	,update: function(frameTime) {
	}
	,render: function() {
		if(!this.visible || Desk.current.computerLevel < 4) {
			return;
		}
		this.img0.render();
		this.img1.render();
		this.img2.render();
	}
	,__class__: AiThinkMC
});
var ApplicationMain = function() { };
$hxClasses["ApplicationMain"] = ApplicationMain;
ApplicationMain.__name__ = ["ApplicationMain"];
ApplicationMain.config = null;
ApplicationMain.preloader = null;
ApplicationMain.create = function() {
	var app = new openfl_display_Application();
	app.create(ApplicationMain.config);
	ApplicationMain.preloader = new openfl_display_Preloader(new Preloader());
	app.setPreloader(ApplicationMain.preloader);
	ApplicationMain.preloader.onComplete.add(ApplicationMain.init);
	ApplicationMain.preloader.create(ApplicationMain.config);
	var urls = [];
	var types = [];
	urls.push("img/bg.jpg");
	types.push("IMAGE");
	urls.push("img/levels.json");
	types.push("TEXT");
	urls.push("img/MainAtlas.png");
	types.push("IMAGE");
	urls.push("img/MainAtlas.xml");
	types.push("TEXT");
	urls.push("img/MainFontNumeric.png");
	types.push("IMAGE");
	urls.push("img/MainFontNumeric1.png");
	types.push("IMAGE");
	urls.push(famobi_mgb_url);
	types.push("IMAGE");
	urls.push("img/More_Games600x253_onWhite.png");
	types.push("IMAGE");
	urls.push("img/TranspPixel.png");
	types.push("IMAGE");
	urls.push("null");
	types.push("FONT");
	urls.push("null");
	types.push("FONT");
	urls.push("Calibri-Regular");
	types.push("FONT");
	urls.push("Calibri-Regular");
	types.push("FONT");
	urls.push("snd/sprite.json");
	types.push("TEXT");
	if(ApplicationMain.config.assetsPrefix != null) {
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(types[i] != "FONT") {
				urls[i] = ApplicationMain.config.assetsPrefix + urls[i];
			}
		}
	}
	ApplicationMain.preloader.load(urls,types);
	app.exec();
};
ApplicationMain.init = function() {
	var loaded = 0;
	var total = 0;
	ApplicationMain.preloader = null;
	if(total == 0) {
		ApplicationMain.start();
	}
};
ApplicationMain.main = function() {
	ApplicationMain.config = { build : "828", company : "CaveOfWonders", file : "Backgammon", fps : 120, name : "Backgammon", orientation : "", packageName : "com.cawogames.Backgammon", version : "1.0.0", windows : [{ antialiasing : 0, background : 0, borderless : false, depthBuffer : false, display : 0, fullscreen : false, hardware : false, height : 0, parameters : "{}", resizable : true, stencilBuffer : true, title : "Backgammon", vsync : false, width : 0, x : null, y : null}]};
};
ApplicationMain.start = function() {
	var hasMain = false;
	var entryPoint = Type.resolveClass("Main");
	var _g = 0;
	var _g1 = Type.getClassFields(entryPoint);
	while(_g < _g1.length) {
		var methodName = _g1[_g];
		++_g;
		if(methodName == "main") {
			hasMain = true;
			break;
		}
	}
	lime_Assets.initialize();
	if(hasMain) {
		Reflect.field(entryPoint,"main").apply(entryPoint,[]);
	} else {
		Type.createInstance(DocumentClass,[]);
	}
	if(openfl_Lib.current.stage.window.__fullscreen) {
		openfl_Lib.current.stage.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
	}
	openfl_Lib.current.stage.dispatchEvent(new openfl_events_Event("resize",false,false));
};
var openfl_events_IEventDispatcher = function() { };
$hxClasses["openfl.events.IEventDispatcher"] = openfl_events_IEventDispatcher;
openfl_events_IEventDispatcher.__name__ = ["openfl","events","IEventDispatcher"];
openfl_events_IEventDispatcher.prototype = {
	addEventListener: null
	,dispatchEvent: null
	,hasEventListener: null
	,removeEventListener: null
	,willTrigger: null
	,__class__: openfl_events_IEventDispatcher
};
var openfl_events_EventDispatcher = function(target) {
	if(target != null) {
		this.__targetDispatcher = target;
	}
};
$hxClasses["openfl.events.EventDispatcher"] = openfl_events_EventDispatcher;
openfl_events_EventDispatcher.__name__ = ["openfl","events","EventDispatcher"];
openfl_events_EventDispatcher.__interfaces__ = [openfl_events_IEventDispatcher];
openfl_events_EventDispatcher.__sortByPriority = function(l1,l2) {
	if(l1.priority == l2.priority) {
		return 0;
	} else if(l1.priority > l2.priority) {
		return -1;
	} else {
		return 1;
	}
};
openfl_events_EventDispatcher.prototype = {
	__dispatching: null
	,__targetDispatcher: null
	,__eventMap: null
	,__newEventMap: null
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null) {
			this.__dispatching = new haxe_ds_StringMap();
			this.__eventMap = new haxe_ds_StringMap();
			this.__newEventMap = new haxe_ds_StringMap();
		}
		var _this = this.__eventMap;
		if(!(__map_reserved[type] != null?_this.existsReserved(type):_this.h.hasOwnProperty(type))) {
			var list = [];
			list.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			var _this1 = this.__eventMap;
			if(__map_reserved[type] != null) {
				_this1.setReserved(type,list);
			} else {
				_this1.h[type] = list;
			}
		} else {
			var list1;
			var _this2 = this.__dispatching;
			if((__map_reserved[type] != null?_this2.getReserved(type):_this2.h[type]) == true) {
				var _this3 = this.__newEventMap;
				if(!(__map_reserved[type] != null?_this3.existsReserved(type):_this3.h.hasOwnProperty(type))) {
					var _this4 = this.__eventMap;
					list1 = (__map_reserved[type] != null?_this4.getReserved(type):_this4.h[type]).slice();
					var _this5 = this.__newEventMap;
					if(__map_reserved[type] != null) {
						_this5.setReserved(type,list1);
					} else {
						_this5.h[type] = list1;
					}
				} else {
					var _this6 = this.__newEventMap;
					list1 = __map_reserved[type] != null?_this6.getReserved(type):_this6.h[type];
				}
			} else {
				var _this7 = this.__eventMap;
				list1 = __map_reserved[type] != null?_this7.getReserved(type):_this7.h[type];
			}
			var _g1 = 0;
			var _g = list1.length;
			while(_g1 < _g) if(Reflect.compareMethods(list1[_g1++].callback,listener)) {
				return;
			}
			list1.push(new openfl_events__$EventDispatcher_Listener(listener,useCapture,priority));
			list1.sort(openfl_events_EventDispatcher.__sortByPriority);
		}
	}
	,dispatchEvent: function(event) {
		if(this.__targetDispatcher != null) {
			event.target = this.__targetDispatcher;
		} else {
			event.target = this;
		}
		return this.__dispatchEvent(event);
	}
	,hasEventListener: function(type) {
		if(this.__eventMap == null) {
			return false;
		}
		var tmp;
		var _this = this.__dispatching;
		if((__map_reserved[type] != null?_this.getReserved(type):_this.h[type]) == true) {
			var _this1 = this.__newEventMap;
			if(__map_reserved[type] != null) {
				tmp = _this1.existsReserved(type);
			} else {
				tmp = _this1.h.hasOwnProperty(type);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this2 = this.__newEventMap;
			return (__map_reserved[type] != null?_this2.getReserved(type):_this2.h[type]).length > 0;
		} else {
			var _this3 = this.__eventMap;
			if(__map_reserved[type] != null) {
				return _this3.existsReserved(type);
			} else {
				return _this3.h.hasOwnProperty(type);
			}
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
		if(this.__eventMap == null) {
			return;
		}
		var _this = this.__eventMap;
		var list = __map_reserved[type] != null?_this.getReserved(type):_this.h[type];
		if(list == null) {
			return;
		}
		var _this1 = this.__dispatching;
		var dispatching = (__map_reserved[type] != null?_this1.getReserved(type):_this1.h[type]) == true;
		if(dispatching) {
			var _this2 = this.__newEventMap;
			if(!(__map_reserved[type] != null?_this2.existsReserved(type):_this2.h.hasOwnProperty(type))) {
				var _this3 = this.__eventMap;
				list = (__map_reserved[type] != null?_this3.getReserved(type):_this3.h[type]).slice();
				var _this4 = this.__newEventMap;
				if(__map_reserved[type] != null) {
					_this4.setReserved(type,list);
				} else {
					_this4.h[type] = list;
				}
			} else {
				var _this5 = this.__newEventMap;
				list = __map_reserved[type] != null?_this5.getReserved(type):_this5.h[type];
			}
		}
		var _g1 = 0;
		var _g = list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(list[i].match(listener,useCapture)) {
				list.splice(i,1);
				break;
			}
		}
		if(!dispatching) {
			if(list.length == 0) {
				this.__eventMap.remove(type);
			}
			var _this6 = this.__eventMap;
			if(!new haxe_ds__$StringMap_StringMapIterator(_this6,_this6.arrayKeys()).hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			}
		}
	}
	,toString: function() {
		var full = Type.getClassName(js_Boot.getClass(this));
		var $short = full.split(".").pop();
		return "[object " + $short + "]";
	}
	,willTrigger: function(type) {
		return this.hasEventListener(type);
	}
	,__dispatchEvent: function(event) {
		if(this.__eventMap == null || event == null) {
			return false;
		}
		var type = event.type;
		var list;
		var _this = this.__dispatching;
		if((__map_reserved[type] != null?_this.getReserved(type):_this.h[type]) == true) {
			var _this1 = this.__newEventMap;
			list = __map_reserved[type] != null?_this1.getReserved(type):_this1.h[type];
			if(list == null) {
				return false;
			}
			list = list.slice();
		} else {
			var _this2 = this.__eventMap;
			list = __map_reserved[type] != null?_this2.getReserved(type):_this2.h[type];
			if(list == null) {
				return false;
			}
			var _this3 = this.__dispatching;
			if(__map_reserved[type] != null) {
				_this3.setReserved(type,true);
			} else {
				_this3.h[type] = true;
			}
		}
		if(event.target == null) {
			if(this.__targetDispatcher != null) {
				event.target = this.__targetDispatcher;
			} else {
				event.target = this;
			}
		}
		event.currentTarget = this;
		var capture = event.eventPhase == 1;
		var index = 0;
		var listener;
		while(index < list.length) {
			listener = list[index];
			if(listener.useCapture == capture) {
				listener.callback(event);
				if(event.__isCanceledNow) {
					break;
				}
			}
			if(listener == list[index]) {
				++index;
			}
		}
		var tmp;
		if(this.__newEventMap != null) {
			var _this4 = this.__newEventMap;
			if(__map_reserved[type] != null) {
				tmp = _this4.existsReserved(type);
			} else {
				tmp = _this4.h.hasOwnProperty(type);
			}
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this5 = this.__newEventMap;
			var list1 = __map_reserved[type] != null?_this5.getReserved(type):_this5.h[type];
			if(list1.length > 0) {
				var _this6 = this.__eventMap;
				if(__map_reserved[type] != null) {
					_this6.setReserved(type,list1);
				} else {
					_this6.h[type] = list1;
				}
			} else {
				this.__eventMap.remove(type);
			}
			var _this7 = this.__eventMap;
			if(!new haxe_ds__$StringMap_StringMapIterator(_this7,_this7.arrayKeys()).hasNext()) {
				this.__eventMap = null;
				this.__newEventMap = null;
			} else {
				this.__newEventMap.remove(type);
			}
		}
		var _this8 = this.__dispatching;
		var key = event.type;
		if(__map_reserved[key] != null) {
			_this8.setReserved(key,false);
		} else {
			_this8.h[key] = false;
		}
		return true;
	}
	,__class__: openfl_events_EventDispatcher
};
var openfl_display_IBitmapDrawable = function() { };
$hxClasses["openfl.display.IBitmapDrawable"] = openfl_display_IBitmapDrawable;
openfl_display_IBitmapDrawable.__name__ = ["openfl","display","IBitmapDrawable"];
openfl_display_IBitmapDrawable.prototype = {
	__worldTransform: null
	,__worldColorTransform: null
	,__blendMode: null
	,__cacheAsBitmap: null
	,__renderCairo: null
	,__renderCairoMask: null
	,__renderCanvas: null
	,__renderCanvasMask: null
	,__renderGL: null
	,__updateChildren: null
	,__updateTransforms: null
	,__updateMask: null
	,__class__: openfl_display_IBitmapDrawable
};
var openfl_display_DisplayObject = function() {
	this.__cacheAsBitmapSmooth = true;
	this.__cacheAsBitmap = false;
	this.__maskCached = false;
	openfl_events_EventDispatcher.call(this);
	this.__alpha = 1;
	this.__transform = new openfl_geom_Matrix();
	this.__visible = true;
	this.__rotation = 0;
	this.__rotationSine = 0;
	this.__rotationCosine = 1;
	this.__renderTransform = new openfl_geom_Matrix();
	this.__offset = new openfl_geom_Point();
	this.__worldOffset = new openfl_geom_Point();
	this.__worldAlpha = 1;
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
	this.set_name("instance" + ++openfl_display_DisplayObject.__instanceCount);
};
$hxClasses["openfl.display.DisplayObject"] = openfl_display_DisplayObject;
openfl_display_DisplayObject.__name__ = ["openfl","display","DisplayObject"];
openfl_display_DisplayObject.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_DisplayObject.__super__ = openfl_events_EventDispatcher;
openfl_display_DisplayObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	blendMode: null
	,cacheAsBitmapBounds: null
	,loaderInfo: null
	,mouseX: null
	,mouseY: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,scale9Grid: null
	,shader: null
	,stage: null
	,__renderTransform: null
	,__worldColorTransform: null
	,__worldOffset: null
	,__worldTransform: null
	,__alpha: null
	,__blendMode: null
	,__cairo: null
	,__children: null
	,__filters: null
	,__graphics: null
	,__interactive: null
	,__isMask: null
	,__mask: null
	,__maskGraphics: null
	,__maskCached: null
	,__name: null
	,__objectTransform: null
	,__offset: null
	,__renderable: null
	,__renderDirty: null
	,__rotation: null
	,__rotationCosine: null
	,__rotationSine: null
	,__scrollRect: null
	,__shader: null
	,__transform: null
	,__transformDirty: null
	,__visible: null
	,__worldAlpha: null
	,__worldAlphaChanged: null
	,__worldClip: null
	,__worldClipChanged: null
	,__worldTransformCache: null
	,__worldTransformChanged: null
	,__worldVisible: null
	,__worldVisibleChanged: null
	,__worldZ: null
	,__cacheAsBitmap: null
	,__cacheAsBitmapMatrix: null
	,__cacheAsBitmapSmooth: null
	,__forceCacheAsBitmap: null
	,__updateCachedBitmap: null
	,__cachedBitmap: null
	,__cachedBitmapBounds: null
	,__cachedFilterBounds: null
	,__cacheGLMatrix: null
	,__updateFilters: null
	,__canvas: null
	,__context: null
	,__style: null
	,getBounds: function(targetCoordinateSpace) {
		var matrix;
		if(targetCoordinateSpace != null) {
			matrix = this.__getWorldTransform().clone();
			matrix.concat(targetCoordinateSpace.__getWorldTransform().clone().invert());
		} else {
			matrix = openfl_geom_Matrix.__temp;
			matrix.identity();
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,matrix);
		return bounds;
	}
	,getRect: function(targetCoordinateSpace) {
		return this.getBounds(targetCoordinateSpace);
	}
	,globalToLocal: function(pos) {
		pos = pos.clone();
		var _this = this.__getWorldTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			pos.x = -_this.tx;
			pos.y = -_this.ty;
		} else {
			var px = 1.0 / norm * (_this.c * (_this.ty - pos.y) + _this.d * (pos.x - _this.tx));
			pos.y = 1.0 / norm * (_this.a * (pos.y - _this.ty) + _this.b * (_this.tx - pos.x));
			pos.x = px;
		}
		return pos;
	}
	,hitTestObject: function(obj) {
		if(obj != null && obj.parent != null && this.parent != null) {
			return this.getBounds(this).intersects(obj.getBounds(this));
		}
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		if(this.parent != null) {
			var bounds = new openfl_geom_Rectangle();
			this.__getBounds(bounds,this.__getWorldTransform());
			return bounds.containsPoint(new openfl_geom_Point(x,y));
		}
		return false;
	}
	,localToGlobal: function(point) {
		return this.__getWorldTransform().transformPoint(point);
	}
	,__broadcast: function(event,notifyChilden) {
		if(this.__eventMap != null && this.hasEventListener(event.type)) {
			var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
			if(event.__isCanceled) {
				return true;
			}
			return result;
		}
		return false;
	}
	,__dispatchEvent: function(event) {
		var result = openfl_events_EventDispatcher.prototype.__dispatchEvent.call(this,event);
		if(event.__isCanceled) {
			return true;
		}
		if(event.bubbles && this.parent != null && this.parent != this) {
			event.eventPhase = 3;
			if(event.target == null) {
				event.target = this;
			}
			this.parent.__dispatchEvent(event);
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
	}
	,__getBounds: function(rect,matrix) {
		if(this.__graphics != null) {
			this.__graphics.__getBounds(rect,matrix);
		}
	}
	,__getCursor: function() {
		return null;
	}
	,__getInteractive: function(stack) {
		return false;
	}
	,__getLocalBounds: function(rect) {
		this.__getBounds(rect,this.__transform);
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect == null) {
			this.__getBounds(rect,matrix);
		} else {
			var r = openfl_geom_Rectangle.__temp;
			r.copyFrom(this.__scrollRect);
			r.__transform(r,matrix);
			rect.__expand(matrix.tx,matrix.ty,r.width,r.height);
		}
	}
	,__getWorldTransform: function() {
		if(this.__transformDirty || openfl_display_DisplayObject.__worldTransformDirty > 0) {
			var list = [];
			var current = this;
			var transformDirty = this.__transformDirty;
			if(this.parent == null) {
				if(transformDirty) {
					this.__update(true,false);
				}
			} else {
				while(current.parent != null) {
					list.push(current);
					current = current.parent;
					if(current.__transformDirty) {
						transformDirty = true;
					}
				}
			}
			if(transformDirty) {
				var i = list.length;
				while(--i >= 0) list[i].__update(true,false);
			}
		}
		return this.__worldTransform;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.__graphics != null) {
			if(!hitObject.get_visible() || this.__isMask) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null && !interactiveOnly) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.__graphics != null) {
			if(this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) {
				return true;
			}
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoShape.render(this,renderSession);
		}
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(this.__graphics != null) {
			if(!(!this.__renderable || this.__worldAlpha <= 0)) {
				var graphics = this.__graphics;
				if(graphics != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
					if(graphics.__canvas != null) {
						var context = renderSession.context;
						var scrollRect = this.get_scrollRect();
						if(graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
							if(this.__mask != null) {
								renderSession.maskManager.pushMask(this.__mask);
							}
							context.globalAlpha = this.__worldAlpha;
							var transform = this.__renderTransform;
							if(renderSession.roundPixels) {
								context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
							} else {
								context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
							}
							if(scrollRect == null) {
								context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y);
							} else {
								context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
							}
							if(this.__mask != null) {
								renderSession.maskManager.popMask();
							}
						}
					}
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		if(this.__graphics != null) {
			var graphics = this.__graphics;
			if(this.stage != null && this.__worldVisible && this.__renderable && graphics != null) {
				if(graphics.__dirty || this.__worldAlphaChanged || this.__canvas == null && graphics.__canvas != null) {
					openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
					if(graphics.__canvas != null) {
						if(this.__canvas == null) {
							this.__canvas = window.document.createElement("canvas");
							this.__context = this.__canvas.getContext("2d");
							openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
						}
						this.__canvas.width = graphics.__canvas.width;
						this.__canvas.height = graphics.__canvas.height;
						this.__context.globalAlpha = this.__worldAlpha;
						this.__context.drawImage(graphics.__canvas,0,0);
					} else if(this.__canvas != null) {
						renderSession.element.removeChild(this.__canvas);
						this.__canvas = null;
						this.__style = null;
					}
				}
				if(this.__canvas != null) {
					if(this.__worldTransformChanged || graphics.__transformDirty) {
						graphics.__transformDirty = false;
						var transform = openfl_geom_Matrix.__temp;
						transform.identity();
						transform.translate(graphics.__bounds.x,graphics.__bounds.y);
						transform.concat(this.__worldTransform);
						this.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
					}
					openfl__$internal_renderer_dom_DOMRenderer.applyStyle(this,renderSession,false,false,true);
				}
			} else if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		if(this.__cacheAsBitmap) {
			var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
			var x = this.__cachedBitmapBounds.x;
			var y = this.__cachedBitmapBounds.y;
			var w = this.__cachedBitmapBounds.width;
			var h = this.__cachedBitmapBounds.height;
			if(this.__cacheGLMatrix == null) {
				this.__cacheGLMatrix = new openfl_geom_Matrix();
			}
			if(hasCacheMatrix) {
				var bmpBounds = openfl_geom_Rectangle.__temp;
				this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
				x = bmpBounds.x;
				y = bmpBounds.y;
				w = bmpBounds.width;
				h = bmpBounds.height;
				this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
			} else {
				this.__cacheGLMatrix.identity();
			}
			if(!(w <= 0 && h <= 0)) {
				if(this.__updateCachedBitmap || this.__updateFilters) {
					if(this.__cachedFilterBounds != null) {
						w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
						h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
					}
					if(this.__cachedBitmap == null) {
						this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
					}
					this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
					var m = this.__cacheGLMatrix.clone();
					m.translate(-x,-y);
					var shader = this.__shader;
					this.__shader = null;
					this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
					this.__shader = shader;
					this.__updateCachedBitmap = false;
				}
				if(this.__updateFilters) {
					openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
					this.__updateFilters = false;
				}
				this.__cacheGLMatrix.invert();
				var _this = this.__cacheGLMatrix;
				_this.tx = x * _this.a + y * _this.c + _this.tx;
				_this.ty = x * _this.b + y * _this.d + _this.ty;
				this.__cacheGLMatrix.concat(this.__renderTransform);
				this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
				renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,0);
			}
			return;
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.pushMask(this);
		}
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) {
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession);
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.popMask();
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.popRect();
		}
	}
	,__drawGraphicsGL: function(renderSession) {
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) {
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession);
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
	}
	,__preRenderGL: function(renderSession) {
		if(this.__scrollRect != null) {
			renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.pushMask(this);
		}
	}
	,__postRenderGL: function(renderSession) {
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.popMask();
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.popRect();
		}
	}
	,__cacheGL: function(renderSession) {
		var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
		var x = this.__cachedBitmapBounds.x;
		var y = this.__cachedBitmapBounds.y;
		var w = this.__cachedBitmapBounds.width;
		var h = this.__cachedBitmapBounds.height;
		if(this.__cacheGLMatrix == null) {
			this.__cacheGLMatrix = new openfl_geom_Matrix();
		}
		if(hasCacheMatrix) {
			var bmpBounds = openfl_geom_Rectangle.__temp;
			this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
			x = bmpBounds.x;
			y = bmpBounds.y;
			w = bmpBounds.width;
			h = bmpBounds.height;
			this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
		} else {
			this.__cacheGLMatrix.identity();
		}
		if(w <= 0 && h <= 0) {
			return;
		}
		if(this.__updateCachedBitmap || this.__updateFilters) {
			if(this.__cachedFilterBounds != null) {
				w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
				h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
			}
			if(this.__cachedBitmap == null) {
				this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
			}
			this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
			var m = this.__cacheGLMatrix.clone();
			m.translate(-x,-y);
			var shader = this.__shader;
			this.__shader = null;
			this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
			this.__shader = shader;
			this.__updateCachedBitmap = false;
		}
		if(this.__updateFilters) {
			openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
			this.__updateFilters = false;
		}
		this.__cacheGLMatrix.invert();
		var _this = this.__cacheGLMatrix;
		_this.tx = x * _this.a + y * _this.c + _this.tx;
		_this.ty = x * _this.b + y * _this.d + _this.ty;
		this.__cacheGLMatrix.concat(this.__renderTransform);
		this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
		renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,0);
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				if(this.stage.get_focus() == this) {
					this.stage.set_focus(null);
				}
				this.dispatchEvent(new openfl_events_Event("removedFromStage",false,false));
			}
			this.stage = stage;
			if(stage != null) {
				this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
			}
		}
	}
	,__setRenderDirty: function() {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
	}
	,__setTransformDirty: function() {
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		this.__updateTransforms();
		if(this.parent != null && this.__isMask) {
			this.__maskCached = false;
		}
		if(updateChildren && this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
		if(!transformOnly && this.__mask != null && !this.__mask.__maskCached) {
			if(this.__maskGraphics == null) {
				this.__maskGraphics = new openfl_display_Graphics();
			}
			this.__maskGraphics.clear();
			this.__mask.__update(true,true,this.__maskGraphics);
			this.__mask.__maskCached = true;
		}
		if(maskGraphics != null) {
			this.__updateMask(maskGraphics);
		}
		if(!transformOnly && this.__cacheAsBitmap) {
			if(this.__updateCachedBitmap || this.__updateFilters) {
				if(this.__cachedBitmapBounds == null) {
					this.__cachedBitmapBounds = new openfl_geom_Rectangle();
				}
				if(this.cacheAsBitmapBounds != null) {
					this.__cachedBitmapBounds.copyFrom(this.cacheAsBitmapBounds);
				} else {
					this.__cachedBitmapBounds.setEmpty();
					this.__getRenderBounds(this.__cachedBitmapBounds,openfl_geom_Matrix.__identity);
				}
				if(this.__filters != null) {
					if(this.__cachedFilterBounds == null) {
						this.__cachedFilterBounds = new openfl_geom_Rectangle();
					}
					this.__cachedFilterBounds.setEmpty();
					openfl_filters_BitmapFilter.__expandBounds(this.__filters,this.__cachedFilterBounds,openfl_geom_Matrix.__identity);
					this.__cachedBitmapBounds.x += this.__cachedFilterBounds.x;
					this.__cachedBitmapBounds.y += this.__cachedFilterBounds.y;
				}
			}
		}
		if(!transformOnly) {
			if(!this.__worldColorTransform.__equals(this.get_transform().get_colorTransform())) {
				this.__worldColorTransform = this.get_transform().get_colorTransform().__clone();
			}
			if(this.parent != null) {
				this.__worldAlpha = this.get_alpha() * this.parent.__worldAlpha;
				this.__worldColorTransform.__combine(this.parent.__worldColorTransform);
				if(this.blendMode == null || this.blendMode == 10) {
					this.__blendMode = this.parent.__blendMode;
				}
				if(this.shader == null) {
					this.__shader = this.parent.__shader;
				}
			} else {
				this.__worldAlpha = this.get_alpha();
			}
			if(updateChildren && this.__renderDirty) {
				this.__renderDirty = false;
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		this.__renderable = this.get_visible() && this.get_scaleX() != 0 && this.get_scaleY() != 0 && !this.__isMask;
		if(!this.__renderable && !this.__isMask) {
			return;
		}
		this.__worldAlpha = this.get_alpha();
		if(this.__transformDirty) {
			this.__transformDirty = false;
			openfl_display_DisplayObject.__worldTransformDirty--;
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.__graphics != null) {
			maskGraphics.__commands.overrideMatrix(this.__worldTransform);
			maskGraphics.__commands.append(this.__graphics.__commands);
			maskGraphics.set___dirty(true);
			maskGraphics.__visible = true;
			if(maskGraphics.__bounds == null) {
				maskGraphics.__bounds = new openfl_geom_Rectangle();
			}
			this.__graphics.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		}
	}
	,__updateTransforms: function(overrideTransform) {
		var overrided = overrideTransform != null;
		var local = overrided?overrideTransform.clone():this.__transform;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		if(!overrided && this.parent != null) {
			var parentTransform = this.parent.__worldTransform;
			this.__worldTransform.a = local.a * parentTransform.a + local.b * parentTransform.c;
			this.__worldTransform.b = local.a * parentTransform.b + local.b * parentTransform.d;
			this.__worldTransform.c = local.c * parentTransform.a + local.d * parentTransform.c;
			this.__worldTransform.d = local.c * parentTransform.b + local.d * parentTransform.d;
			this.__worldTransform.tx = local.tx * parentTransform.a + local.ty * parentTransform.c + parentTransform.tx;
			this.__worldTransform.ty = local.tx * parentTransform.b + local.ty * parentTransform.d + parentTransform.ty;
			this.__worldOffset.copyFrom(this.parent.__worldOffset);
		} else {
			this.__worldTransform.copyFrom(local);
			this.__worldOffset.setTo(0,0);
		}
		if(this.__scrollRect != null) {
			this.__offset = this.__worldTransform.deltaTransformPoint(this.__scrollRect.get_topLeft());
			this.__worldOffset.offset(this.__offset.x,this.__offset.y);
		} else {
			this.__offset.setTo(0,0);
		}
		this.__renderTransform.copyFrom(this.__worldTransform);
		this.__renderTransform.translate(-this.__worldOffset.x,-this.__worldOffset.y);
	}
	,get_alpha: function() {
		return this.__alpha;
	}
	,set_alpha: function(value) {
		if(value > 1.0) {
			value = 1.0;
		}
		if(value != this.__alpha) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__alpha = value;
	}
	,set_blendMode: function(value) {
		this.__blendMode = value;
		return this.blendMode = value;
	}
	,set_shader: function(value) {
		this.__shader = value;
		return this.shader = value;
	}
	,get_cacheAsBitmap: function() {
		return this.__cacheAsBitmap;
	}
	,set_cacheAsBitmap: function(value) {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmap = this.__forceCacheAsBitmap?true:value;
	}
	,get_cacheAsBitmapMatrix: function() {
		return this.__cacheAsBitmapMatrix;
	}
	,set_cacheAsBitmapMatrix: function(value) {
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return this.__cacheAsBitmapMatrix = value.clone();
	}
	,get_cacheAsBitmapSmooth: function() {
		return this.__cacheAsBitmapSmooth;
	}
	,set_cacheAsBitmapSmooth: function(value) {
		return this.__cacheAsBitmapSmooth = value;
	}
	,get_filters: function() {
		if(this.__filters == null) {
			return [];
		} else {
			return this.__filters.slice();
		}
	}
	,set_filters: function(value) {
		if(value != null && value.length > 0) {
			this.__filters = value;
			this.__forceCacheAsBitmap = true;
			this.__cacheAsBitmap = true;
			this.__updateFilters = true;
		} else {
			this.__filters = null;
			this.__forceCacheAsBitmap = false;
			this.__cacheAsBitmap = false;
			this.__updateFilters = false;
		}
		if(!this.__renderDirty) {
			this.__updateCachedBitmap = true;
			this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
			this.__renderDirty = true;
			openfl_display_DisplayObject.__worldRenderDirty++;
		}
		return value;
	}
	,get_height: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.height;
	}
	,set_height: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.height) {
			this.set_scaleY(value / bounds.height);
		} else {
			this.set_scaleY(1);
		}
		return value;
	}
	,get_mask: function() {
		return this.__mask;
	}
	,set_mask: function(value) {
		if(value != this.__mask) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__mask != null) {
			this.__mask.__isMask = false;
			this.__mask.__maskCached = false;
			var _this = this.__mask;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			var _this1 = this.__mask;
			if(!_this1.__renderDirty) {
				_this1.__updateCachedBitmap = true;
				_this1.__updateFilters = _this1.get_filters() != null && _this1.get_filters().length > 0;
				_this1.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			this.__maskGraphics = null;
		}
		if(value != null) {
			value.__isMask = true;
		}
		return this.__mask = value;
	}
	,get_mouseX: function() {
		var mouseX = this.stage != null?this.stage.__mouseX:openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null?this.stage.__mouseY:openfl_Lib.current.stage.__mouseY;
		var _this = this.__getWorldTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.tx;
		} else {
			return 1.0 / norm * (_this.c * (_this.ty - mouseY) + _this.d * (mouseX - _this.tx));
		}
	}
	,get_mouseY: function() {
		var mouseX = this.stage != null?this.stage.__mouseX:openfl_Lib.current.stage.__mouseX;
		var mouseY = this.stage != null?this.stage.__mouseY:openfl_Lib.current.stage.__mouseY;
		var _this = this.__getWorldTransform();
		var norm = _this.a * _this.d - _this.b * _this.c;
		if(norm == 0) {
			return -_this.ty;
		} else {
			return 1.0 / norm * (_this.a * (mouseY - _this.ty) + _this.b * (_this.tx - mouseX));
		}
	}
	,get_name: function() {
		return this.__name;
	}
	,set_name: function(value) {
		return this.__name = value;
	}
	,get_root: function() {
		if(this.stage != null) {
			return openfl_Lib.current;
		}
		return null;
	}
	,get_rotation: function() {
		return this.__rotation;
	}
	,set_rotation: function(value) {
		if(value != this.__rotation) {
			this.__rotation = value;
			var radians = this.__rotation * (Math.PI / 180);
			this.__rotationSine = Math.sin(radians);
			this.__rotationCosine = Math.cos(radians);
			var __scaleX = this.get_scaleX();
			var __scaleY = this.get_scaleY();
			this.__transform.a = this.__rotationCosine * __scaleX;
			this.__transform.b = this.__rotationSine * __scaleX;
			this.__transform.c = -this.__rotationSine * __scaleY;
			this.__transform.d = this.__rotationCosine * __scaleY;
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_scaleX: function() {
		if(this.__transform.b == 0) {
			return this.__transform.a;
		} else {
			return Math.sqrt(this.__transform.a * this.__transform.a + this.__transform.b * this.__transform.b);
		}
	}
	,set_scaleX: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.a) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = value;
		} else {
			var a = this.__rotationCosine * value;
			var b = this.__rotationSine * value;
			if(this.__transform.a != a || this.__transform.b != b) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.a = a;
			this.__transform.b = b;
		}
		return value;
	}
	,get_scaleY: function() {
		if(this.__transform.c == 0) {
			return this.__transform.d;
		} else {
			return Math.sqrt(this.__transform.c * this.__transform.c + this.__transform.d * this.__transform.d);
		}
	}
	,set_scaleY: function(value) {
		if(this.__transform.c == 0) {
			if(value != this.__transform.d) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.d = value;
		} else {
			var c = -this.__rotationSine * value;
			var d = this.__rotationCosine * value;
			if(this.__transform.d != d || this.__transform.c != c) {
				if(!this.__transformDirty) {
					this.__transformDirty = true;
					openfl_display_DisplayObject.__worldTransformDirty++;
				}
			}
			this.__transform.c = c;
			this.__transform.d = d;
		}
		return value;
	}
	,get_scrollRect: function() {
		if(this.__scrollRect == null) {
			return null;
		}
		return this.__scrollRect.clone();
	}
	,set_scrollRect: function(value) {
		if(value != this.__scrollRect) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__scrollRect = value;
	}
	,get_transform: function() {
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		return this.__objectTransform;
	}
	,set_transform: function(value) {
		if(value == null) {
			throw new js__$Boot_HaxeError(new openfl_errors_TypeError("Parameter transform must be non-null."));
		}
		if(this.__objectTransform == null) {
			this.__objectTransform = new openfl_geom_Transform(this);
		}
		if(!this.__transformDirty) {
			this.__transformDirty = true;
			openfl_display_DisplayObject.__worldTransformDirty++;
		}
		this.__objectTransform.set_matrix(value.get_matrix());
		this.__objectTransform.set_colorTransform(value.get_colorTransform().__clone());
		return this.__objectTransform;
	}
	,get_visible: function() {
		return this.__visible;
	}
	,set_visible: function(value) {
		if(value != this.__visible) {
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__visible = value;
	}
	,get_width: function() {
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		return bounds.width;
	}
	,set_width: function(value) {
		var bounds = new openfl_geom_Rectangle();
		var matrix = openfl_geom_Matrix.__temp;
		matrix.identity();
		this.__getBounds(bounds,matrix);
		if(value != bounds.width) {
			this.set_scaleX(value / bounds.width);
		} else {
			this.set_scaleX(1);
		}
		return value;
	}
	,get_x: function() {
		return this.__transform.tx;
	}
	,set_x: function(value) {
		if(value != this.__transform.tx) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.tx = value;
	}
	,get_y: function() {
		return this.__transform.ty;
	}
	,set_y: function(value) {
		if(value != this.__transform.ty) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return this.__transform.ty = value;
	}
	,__class__: openfl_display_DisplayObject
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_visible:"set_visible",get_visible:"get_visible",set_transform:"set_transform",get_transform:"get_transform",set_shader:"set_shader",set_scrollRect:"set_scrollRect",get_scrollRect:"get_scrollRect",set_scaleY:"set_scaleY",get_scaleY:"get_scaleY",set_scaleX:"set_scaleX",get_scaleX:"get_scaleX",set_rotation:"set_rotation",get_rotation:"get_rotation",get_root:"get_root",set_name:"set_name",get_name:"get_name",get_mouseY:"get_mouseY",get_mouseX:"get_mouseX",set_mask:"set_mask",get_mask:"get_mask",set_height:"set_height",get_height:"get_height",set_filters:"set_filters",get_filters:"get_filters",set_cacheAsBitmapSmooth:"set_cacheAsBitmapSmooth",get_cacheAsBitmapSmooth:"get_cacheAsBitmapSmooth",set_cacheAsBitmapMatrix:"set_cacheAsBitmapMatrix",get_cacheAsBitmapMatrix:"get_cacheAsBitmapMatrix",set_cacheAsBitmap:"set_cacheAsBitmap",get_cacheAsBitmap:"get_cacheAsBitmap",set_blendMode:"set_blendMode",set_alpha:"set_alpha",get_alpha:"get_alpha"}
});
var openfl_display_InteractiveObject = function() {
	openfl_display_DisplayObject.call(this);
	this.doubleClickEnabled = false;
	this.mouseEnabled = true;
	this.needsSoftKeyboard = false;
	this.__tabEnabled = false;
	this.tabIndex = -1;
};
$hxClasses["openfl.display.InteractiveObject"] = openfl_display_InteractiveObject;
openfl_display_InteractiveObject.__name__ = ["openfl","display","InteractiveObject"];
openfl_display_InteractiveObject.__super__ = openfl_display_DisplayObject;
openfl_display_InteractiveObject.prototype = $extend(openfl_display_DisplayObject.prototype,{
	doubleClickEnabled: null
	,focusRect: null
	,mouseEnabled: null
	,needsSoftKeyboard: null
	,softKeyboardInputAreaOfInterest: null
	,tabIndex: null
	,__tabEnabled: null
	,requestSoftKeyboard: function() {
		openfl_Lib.notImplemented("InteractiveObject.requestSoftKeyboard");
		return false;
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
			if(this.parent != null) {
				this.parent.__getInteractive(stack);
			}
		}
		return true;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		return openfl_display_DisplayObject.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject);
	}
	,get_tabEnabled: function() {
		return this.__tabEnabled;
	}
	,set_tabEnabled: function(value) {
		return this.__tabEnabled = value;
	}
	,__class__: openfl_display_InteractiveObject
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_tabEnabled:"set_tabEnabled",get_tabEnabled:"get_tabEnabled"})
});
var openfl_display_DisplayObjectContainer = function() {
	openfl_display_InteractiveObject.call(this);
	this.mouseChildren = true;
	this.__children = [];
	this.__removedChildren = [];
};
$hxClasses["openfl.display.DisplayObjectContainer"] = openfl_display_DisplayObjectContainer;
openfl_display_DisplayObjectContainer.__name__ = ["openfl","display","DisplayObjectContainer"];
openfl_display_DisplayObjectContainer.__super__ = openfl_display_InteractiveObject;
openfl_display_DisplayObjectContainer.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	mouseChildren: null
	,numChildren: null
	,tabChildren: null
	,__removedChildren: null
	,addChild: function(child) {
		if(child != null) {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			this.__children.push(child);
			child.parent = this;
			if(this.stage != null) {
				child.__setStageReference(this.stage);
			}
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		return child;
	}
	,addChildAt: function(child,index) {
		if(index > this.__children.length || index < 0) {
			throw new js__$Boot_HaxeError("Invalid index position " + index);
		}
		if(child.parent == this) {
			HxOverrides.remove(this.__children,child);
		} else {
			if(child.parent != null) {
				child.parent.removeChild(child);
			}
			child.parent = this;
			if(this.stage != null) {
				child.__setStageReference(this.stage);
			}
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			var event = new openfl_events_Event("added",true);
			event.target = child;
			child.__dispatchEvent(event);
		}
		this.__children.splice(index,0,child);
		return child;
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		while(child != this && child != null) child = child.parent;
		return child == this;
	}
	,getChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.__children[index];
		}
		return null;
	}
	,getChildByName: function(name) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == name) {
				return child;
			}
		}
		return null;
	}
	,getChildIndex: function(child) {
		var _g1 = 0;
		var _g = this.__children.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__children[i] == child) {
				return i;
			}
		}
		return -1;
	}
	,getObjectsUnderPoint: function(point) {
		var stack = [];
		this.__hitTest(point.x,point.y,false,stack,false,this);
		stack.reverse();
		return stack;
	}
	,removeChild: function(child) {
		if(child != null && child.parent == this) {
			child.__dispatchEvent(new openfl_events_Event("removed",true));
			if(this.stage != null) {
				child.__setStageReference(null);
			}
			child.parent = null;
			HxOverrides.remove(this.__children,child);
			this.__removedChildren.push(child);
			if(!child.__transformDirty) {
				child.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!child.__renderDirty) {
				child.__updateCachedBitmap = true;
				child.__updateFilters = child.get_filters() != null && child.get_filters().length > 0;
				child.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return child;
	}
	,removeChildAt: function(index) {
		if(index >= 0 && index < this.__children.length) {
			return this.removeChild(this.__children[index]);
		}
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(endIndex == 2147483647) {
			endIndex = this.__children.length - 1;
			if(endIndex < 0) {
				return;
			}
		}
		if(beginIndex > this.__children.length - 1) {
			return;
		} else if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__children.length) {
			throw new js__$Boot_HaxeError(new openfl_errors_RangeError("The supplied index is out of bounds."));
		}
		var numRemovals = endIndex - beginIndex;
		while(numRemovals >= 0) {
			this.removeChildAt(beginIndex);
			--numRemovals;
		}
	}
	,resolve: function(fieldName) {
		if(this.__children == null) {
			return null;
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_name() == fieldName) {
				return child;
			}
		}
		return null;
	}
	,setChildIndex: function(child,index) {
		if(index >= 0 && index <= this.__children.length && child.parent == this) {
			HxOverrides.remove(this.__children,child);
			this.__children.splice(index,0,child);
		}
	}
	,swapChildren: function(child1,child2) {
		if(child1.parent == this && child2.parent == this) {
			var index1 = this.__children.indexOf(child1);
			var index2 = this.__children.indexOf(child2);
			this.__children[index1] = child2;
			this.__children[index2] = child1;
		}
	}
	,swapChildrenAt: function(index1,index2) {
		var swap = this.__children[index1];
		this.__children[index1] = this.__children[index2];
		this.__children[index2] = swap;
		swap = null;
	}
	,__broadcast: function(event,notifyChilden) {
		if(event.target == null) {
			event.target = this;
		}
		var result = openfl_display_InteractiveObject.prototype.__broadcast.call(this,event,notifyChilden);
		if(!event.__isCanceled && notifyChilden) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__broadcast(event,true);
				if(event.__isCanceled) {
					return true;
				}
			}
		}
		return result;
	}
	,__enterFrame: function(deltaTime) {
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__enterFrame(deltaTime);
		}
	}
	,__getBounds: function(rect,matrix) {
		openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0) {
				continue;
			}
			child.__getBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__getRenderBounds: function(rect,matrix) {
		if(this.__scrollRect != null) {
			openfl_display_InteractiveObject.prototype.__getRenderBounds.call(this,rect,matrix);
			return;
		} else {
			openfl_display_InteractiveObject.prototype.__getBounds.call(this,rect,matrix);
		}
		if(this.__children.length == 0) {
			return;
		}
		if(matrix != null) {
			this.__updateTransforms(matrix);
			this.__updateChildren(true);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.get_scaleX() == 0 || child.get_scaleY() == 0 || child.__isMask) {
				continue;
			}
			child.__getRenderBounds(rect,child.__worldTransform);
		}
		if(matrix != null) {
			this.__updateTransforms();
			this.__updateChildren(true);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		if(this.get_scrollRect() != null && !this.get_scrollRect().containsPoint(this.globalToLocal(new openfl_geom_Point(x,y)))) {
			return false;
		}
		var i = this.__children.length;
		if(interactiveOnly) {
			if(stack == null || !this.mouseChildren) {
				while(--i >= 0) if(this.__children[i].__hitTest(x,y,shapeFlag,null,true,this.__children[i])) {
					if(stack != null) {
						stack.push(hitObject);
					}
					return true;
				}
			} else if(stack != null) {
				var length = stack.length;
				var interactive = false;
				var hitTest = false;
				while(--i >= 0) {
					interactive = this.__children[i].__getInteractive(null);
					if(interactive || this.mouseEnabled && !hitTest) {
						if(this.__children[i].__hitTest(x,y,shapeFlag,stack,true,this.__children[i])) {
							hitTest = true;
							if(interactive) {
								break;
							}
						}
					}
				}
				if(hitTest) {
					stack.splice(length,0,hitObject);
					return true;
				}
			}
		} else {
			while(--i >= 0) this.__children[i].__hitTest(x,y,shapeFlag,stack,false,this.__children[i]);
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		var i = this.__children.length;
		while(--i >= 0) if(this.__children[i].__hitTestMask(x,y)) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
		if(this.get_scrollRect() != null) {
			renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		}
		if(this.__mask != null) {
			renderSession.maskManager.pushMask(this.__mask);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairo(renderSession);
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		if(this.__mask != null) {
			renderSession.maskManager.popMask();
		}
		if(this.get_scrollRect() != null) {
			renderSession.maskManager.popRect();
		}
	}
	,__renderCairoMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_cairo_CairoGraphics.renderMask(this.__graphics,renderSession);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCairoMask(renderSession);
		}
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		if(this.get_scrollRect() != null) {
			renderSession.maskManager.pushRect(this.get_scrollRect(),this.__worldTransform);
		}
		if(this.__mask != null) {
			renderSession.maskManager.pushMask(this.__mask);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderCanvas(renderSession);
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		if(this.__mask != null) {
			renderSession.maskManager.popMask();
		}
		if(this.get_scrollRect() != null) {
			renderSession.maskManager.popRect();
		}
	}
	,__renderCanvasMask: function(renderSession) {
		if(this.__graphics != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.renderMask(this.__graphics,renderSession);
		}
		var bounds = new openfl_geom_Rectangle();
		this.__getBounds(bounds,this.__transform);
		renderSession.context.rect(0,0,bounds.width,bounds.height);
	}
	,__renderDOM: function(renderSession) {
		openfl_display_InteractiveObject.prototype.__renderDOM.call(this,renderSession);
		if(this.__mask != null) {
			renderSession.maskManager.pushMask(this.__mask);
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderDOM(renderSession);
		}
		var _g2 = 0;
		var _g11 = this.__removedChildren;
		while(_g2 < _g11.length) {
			var orphan = _g11[_g2];
			++_g2;
			if(orphan.stage == null) {
				orphan.__renderDOM(renderSession);
			}
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
		if(this.__mask != null) {
			renderSession.maskManager.popMask();
		}
	}
	,__renderGL: function(renderSession) {
		if(!this.__renderable || this.__worldAlpha <= 0) {
			return;
		}
		if(this.__cacheAsBitmap) {
			var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
			var x = this.__cachedBitmapBounds.x;
			var y = this.__cachedBitmapBounds.y;
			var w = this.__cachedBitmapBounds.width;
			var h = this.__cachedBitmapBounds.height;
			if(this.__cacheGLMatrix == null) {
				this.__cacheGLMatrix = new openfl_geom_Matrix();
			}
			if(hasCacheMatrix) {
				var bmpBounds = openfl_geom_Rectangle.__temp;
				this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
				x = bmpBounds.x;
				y = bmpBounds.y;
				w = bmpBounds.width;
				h = bmpBounds.height;
				this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
			} else {
				this.__cacheGLMatrix.identity();
			}
			if(!(w <= 0 && h <= 0)) {
				if(this.__updateCachedBitmap || this.__updateFilters) {
					if(this.__cachedFilterBounds != null) {
						w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
						h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
					}
					if(this.__cachedBitmap == null) {
						this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
					}
					this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
					var m = this.__cacheGLMatrix.clone();
					m.translate(-x,-y);
					var shader = this.__shader;
					this.__shader = null;
					this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
					this.__shader = shader;
					this.__updateCachedBitmap = false;
				}
				if(this.__updateFilters) {
					openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
					this.__updateFilters = false;
				}
				this.__cacheGLMatrix.invert();
				var _this = this.__cacheGLMatrix;
				_this.tx = x * _this.a + y * _this.c + _this.tx;
				_this.ty = x * _this.b + y * _this.d + _this.ty;
				this.__cacheGLMatrix.concat(this.__renderTransform);
				this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
				renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,0);
			}
			return;
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.pushMask(this);
		}
		if(this.__graphics != null) {
			if(this.__graphics.__hardware) {
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render(this,renderSession);
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.render(this.__graphics,renderSession);
				openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession);
			}
		}
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__renderGL(renderSession);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.popMask();
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.popRect();
		}
		if(this.__removedChildren.length > 0) {
			this.__removedChildren.splice(0,this.__removedChildren.length);
		}
	}
	,__setStageReference: function(stage) {
		if(this.stage != stage) {
			if(this.stage != null) {
				this.__dispatchEvent(new openfl_events_Event("removedFromStage",false,false));
			}
			this.stage = stage;
			if(stage != null) {
				this.__dispatchEvent(new openfl_events_Event("addedToStage",false,false));
			}
			if(this.__children != null) {
				var _g = 0;
				var _g1 = this.__children;
				while(_g < _g1.length) {
					var child = _g1[_g];
					++_g;
					child.__setStageReference(stage);
				}
			}
		}
	}
	,__update: function(transformOnly,updateChildren,maskGraphics) {
		openfl_display_InteractiveObject.prototype.__update.call(this,transformOnly,updateChildren,maskGraphics);
		if(!this.__renderable && !this.__isMask) {
			return;
		}
		if(updateChildren) {
			var _g = 0;
			var _g1 = this.__children;
			while(_g < _g1.length) {
				var child = _g1[_g];
				++_g;
				child.__update(transformOnly,true,maskGraphics);
			}
		}
	}
	,__updateChildren: function(transformOnly) {
		openfl_display_InteractiveObject.prototype.__updateChildren.call(this,transformOnly);
		var _g = 0;
		var _g1 = this.__children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			child.__update(transformOnly,true);
		}
	}
	,get_numChildren: function() {
		return this.__children.length;
	}
	,__class__: openfl_display_DisplayObjectContainer
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{get_numChildren:"get_numChildren"})
});
var openfl_display_Sprite = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.buttonMode = false;
	this.useHandCursor = true;
	this.loaderInfo = openfl_display_LoaderInfo.create(null);
};
$hxClasses["openfl.display.Sprite"] = openfl_display_Sprite;
openfl_display_Sprite.__name__ = ["openfl","display","Sprite"];
openfl_display_Sprite.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Sprite.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	buttonMode: null
	,graphics: null
	,hitArea: null
	,useHandCursor: null
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
		if(this.stage != null) {
			this.stage.__startDrag(this,lockCenter,bounds);
		}
	}
	,stopDrag: function() {
		if(this.stage != null) {
			this.stage.__stopDrag(this);
		}
	}
	,__getCursor: function() {
		if(this.buttonMode && this.useHandCursor) {
			return lime_ui_MouseCursor.POINTER;
		} else {
			return null;
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(this.hitArea != null) {
			if(!this.hitArea.mouseEnabled) {
				this.hitArea.mouseEnabled = true;
				var hitTest = this.hitArea.__hitTest(x,y,shapeFlag,null,true,hitObject);
				this.hitArea.mouseEnabled = false;
				if(hitTest) {
					stack[stack.length] = hitObject;
				}
				return hitTest;
			}
		} else {
			if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled && !this.mouseChildren) {
				return false;
			}
			if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
				return false;
			}
			if(openfl_display_DisplayObjectContainer.prototype.__hitTest.call(this,x,y,shapeFlag,stack,interactiveOnly,hitObject)) {
				return interactiveOnly;
			} else if((!interactiveOnly || this.mouseEnabled) && this.__graphics != null && this.__graphics.__hitTest(x,y,shapeFlag,this.__getWorldTransform())) {
				if(stack != null) {
					stack.push(hitObject);
				}
				return true;
			}
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(openfl_display_DisplayObjectContainer.prototype.__hitTestMask.call(this,x,y)) {
			return true;
		} else if(this.__graphics != null && this.__graphics.__hitTest(x,y,true,this.__getWorldTransform())) {
			return true;
		}
		return false;
	}
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,get_tabEnabled: function() {
		if(!this.__tabEnabled) {
			return this.buttonMode;
		} else {
			return true;
		}
	}
	,__class__: openfl_display_Sprite
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{get_graphics:"get_graphics"})
});
var Main = function() {
	this.maxDrawCalls = 0;
	this.curFrameDrawCalls = 0;
	this.wasMuted1 = false;
	this.wasMuted = false;
	this.fullStop = false;
	this._mouseY = 0;
	this._mouseX = 0;
	this.movieClips = [];
	this.sortObjects = [];
	this.mostTopObjects = [];
	this.topObjects = [];
	this.bottomObjects = [];
	this.canvasIsOn = true;
	this.clearedCanvas = true;
	this.thisIsLogInSocial = false;
	this.thisAddedToStage = false;
	this.overlayMaker = null;
	this.isPlayingMusic = false;
	this.isMouseDown = false;
	this.isPausedByOrientation = false;
	this.isMobileBrowser = false;
	this.inputType = "";
	this.minUpdateTime = 1;
	this.lastTime = 0;
	this.N = 1;
	this.paused = true;
	this.atlases = [];
	this.isFpsEnabled = true;
	this.inited = false;
	openfl_display_Sprite.call(this);
	this.soundsSpritesStartedThisFrame = [];
	this.objectsToUpdate = [];
	this.numericFont = new NumericFont("MainFontNumeric",21);
	this.numericFontFps = new NumericFont("MainFontNumeric1",21);
	Main.current = this;
	this.config = new Config();
	this.musicSounds = [];
	this.isMobileBrowser = this.config.getIsMobileBrowser();
	this.addEventListener("addedToStage",$bind(this,this.added));
	this.batch = new Batching(null,0,0,"img/MainAtlas.png","img/MainAtlas.xml");
	this.atlases.push(this.batch);
	this.batch.main = this;
	var imName = "img/bg.jpg";
	var bgBitmap = openfl_Assets.getBitmapData(imName);
	this.bgBatch = new Batching([imName],bgBitmap.width,bgBitmap.height);
	this.atlases.push(this.bgBatch);
	this.bgBatch.main = this;
	//new GATrack("Chess");
	window.famobi_onPauseRequested = $bind(this,this.pausePublisherApi);
	window.famobi_onResumeRequested = $bind(this,this.resumePublisherApi);
};
$hxClasses["Main"] = Main;
Main.__name__ = ["Main"];
Main.current = null;
Main.openMoreGames = function() {
	Config.openMoreGames();
};
Main.main = function() {
	if(Main.created) {
		return;
	}
	openfl_Lib.current.stage.align = 6;
	openfl_Lib.current.stage.scaleMode = 2;
	openfl_Lib.current.addChildAt(new Main(),0);
	Main.created = true;
	Preloader.remove();
};
Main.__super__ = openfl_display_Sprite;
Main.prototype = $extend(openfl_display_Sprite.prototype,{
	inited: null
	,isFpsEnabled: null
	,fps: null
	,config: null
	,sWidth: null
	,sHeight: null
	,objectsToUpdate: null
	,atlases: null
	,batch: null
	,bgBatch: null
	,menuBatch: null
	,lastBatch: null
	,canvas: null
	,rotateScreenWindow: null
	,paused: null
	,N: null
	,lastTime: null
	,minUpdateTime: null
	,inputType: null
	,isMobileBrowser: null
	,isPausedByOrientation: null
	,isMouseDown: null
	,sounds: null
	,isPlayingMusic: null
	,musicSounds: null
	,hp: null
	,keyCodesDown: null
	,overlayMaker: null
	,soundsSpritesStartedThisFrame: null
	,overlay: null
	,numericFont: null
	,numericFontFps: null
	,thisAddedToStage: null
	,thisIsLogInSocial: null
	,clearedCanvas: null
	,canvasIsOn: null
	,bottomObjects: null
	,topObjects: null
	,mostTopObjects: null
	,sortObjects: null
	,movieClips: null
	,_mouseX: null
	,_mouseY: null
	,desk: null
	,ingameMenu: null
	,resize: function(e) {
		if(!this.inited) {
			this.init();
			return;
		}
		this.config.resizeSet(this.inited);
		this.config.initSize(true);
		this.sWidth = this.config.sWidth;
		this.sHeight = this.config.sHeight;
		this.N = this.config.N;
		if(this.canvas != null) {
			this.canvas.resize();
			if(this.desk != null) {
				this.desk.onResize();
			}
			this.update(null);
		}
	}
	,fullStop: null
	,set_fullStop: function(val) {
		this.fullStop = val;
		return val;
	}
	,wasMuted: null
	,wasMuted1: null
	,pausePublisherApi: function() {
		this.set_fullStop(true);
	}
	,resumePublisherApi: function() {
		this.set_fullStop(false);
	}
	,soundOnPublisherApi: function() {
		if(!this.wasMuted1) {
			this.unMute();
		}
	}
	,soundOfPublisherApi: function() {
		this.wasMuted1 = this.sounds.muted;
		this.mute();
	}
	,getObjByName: function(name) {
		var _g1 = 0;
		var _g = this.sortObjects.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sortObjects[i].name == name) {
				return this.sortObjects[i];
			}
		}
		return null;
	}
	,setVisObjByName: function(name,vis) {
		var _g1 = 0;
		var _g = this.sortObjects.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.sortObjects[i].name == name) {
				this.sortObjects[i].visible = vis;
				return this.sortObjects[i];
			}
		}
		var _g11 = 0;
		var _g2 = this.bottomObjects.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			if(this.bottomObjects[i1].name == name) {
				this.bottomObjects[i1].visible = vis;
				return this.bottomObjects[i1];
			}
		}
		var _g12 = 0;
		var _g3 = this.topObjects.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			if(this.topObjects[i2].name == name) {
				this.topObjects[i2].visible = vis;
				return this.topObjects[i2];
			}
		}
		var _g13 = 0;
		var _g4 = this.mostTopObjects.length;
		while(_g13 < _g4) {
			var i3 = _g13++;
			if(!js_Boot.__instanceof(this.mostTopObjects[i3],BitmapNumFont) && this.mostTopObjects[i3].name == name) {
				this.mostTopObjects[i3].visible = vis;
				return this.mostTopObjects[i3];
			}
		}
		return null;
	}
	,added: function(e) {
		this.removeEventListener("addedToStage",$bind(this,this.added));
		this.stage.addEventListener("resize",$bind(this,this.resize));
		this.thisAddedToStage = true;
		this.init();
		this.stage.__transparent = true;
	}
	,playSpriteSound: function(spriteName,loop) {
		if(loop == null) {
			loop = false;
		}
		if(this.soundsSpritesStartedThisFrame.indexOf(spriteName) != -1) {
			return;
		}
		this.soundsSpritesStartedThisFrame.push(spriteName);
		this.sounds.playSound("sprite",spriteName,loop,false,false,"sound");
	}
	,stopSpriteSound: function(spriteName,loop) {
		if(loop == null) {
			loop = false;
		}
		this.sounds.stopSound("sprite",spriteName);
	}
	,playSpriteMusicE: function(spriteName,loop,stopAllPlayingMusics) {
		if(stopAllPlayingMusics == null) {
			stopAllPlayingMusics = true;
		}
		if(loop == null) {
			loop = false;
		}
		if(stopAllPlayingMusics) {
			this.stopAllMusics();
		}
		this.sounds.stopSound("sprite",spriteName);
		this.sounds.playSound("sprite",spriteName,loop,false,false,"music");
		if(this.musicSounds.indexOf(spriteName) != -1) {
			this.musicSounds.push(spriteName);
		}
		this.isPlayingMusic = true;
	}
	,stopSpriteMusic: function(spriteName) {
		this.sounds.stopSound("sprite",spriteName);
		this.isPlayingMusic = false;
	}
	,setMusicVolume: function(volume) {
	}
	,setSoundVolume: function(volume) {
	}
	,stopAllMusics: function() {
		return;
	}
	,mute: function() {
		this.sounds.mute();
	}
	,unMute: function(playBgMusic) {
		if(playBgMusic == null) {
			playBgMusic = false;
		}
		this.sounds.unMute();
		if(playBgMusic) {
			this.playSpriteMusicE("BackgroundSound",true,true);
		}
	}
	,init: function() {
		if(this.inited) {
			return;
		}
		this.inited = true;
		this.config.checkSiteLock();
		if(this.config.initSize()) {
			this.inited = false;
			return;
		}
		this.sWidth = this.config.sWidth;
		this.sHeight = this.config.sHeight;
		this.N = this.config.N;
		this.sounds = this.config.initSounds();
		if(this.canvas == null) {
			this.canvas = new BatchCanvas();
		}
		this.addChild(this.canvas);
		this.desk = new Desk();
		this.ingameMenu = new IngameMenu();
		this.addChild(this.ingameMenu);
		this.addChild(new MainMenu());
		this.paused = true;
		this.addEventListener("enterFrame",$bind(this,this.update));
		this.lastTime = openfl_Lib.getTimer();
		this.keyCodesDown = [];
		this.stage.addEventListener("keyDown",$bind(this,this.keyDown));
		this.stage.addEventListener("keyUp",$bind(this,this.keyUp));
		if(this.inputType == "click" || this.inputType == "") {
			this.stage.addEventListener("mouseDown",$bind(this,this.mDown));
			this.stage.addEventListener("mouseMove",$bind(this,this.mMove));
			this.stage.addEventListener("mouseUp",$bind(this,this.mUp));
		} else {
			this.stage.addEventListener("touchBegin",$bind(this,this.mDown));
			this.stage.addEventListener("touchMove",$bind(this,this.mMove));
			this.stage.addEventListener("touchEnd",$bind(this,this.mUp));
		}
		this.config.sendToTopTapToStart();
	}
	,playFonSound: function() {
	}
	,onSocialLogin: function() {
		this.thisIsLogInSocial = true;
	}
	,cb: function(e) {
	}
	,keyDown: function(e) {
		var _g1 = 0;
		var _g = this.keyCodesDown.length;
		while(_g1 < _g) if(this.keyCodesDown[_g1++] == e.keyCode) {
			return;
		}
		this.keyCodesDown.push(e.keyCode);
	}
	,keyUp: function(e) {
		HxOverrides.remove(this.keyCodesDown,e.keyCode);
	}
	,createMenus: function() {
	}
	,tapToStartClick: function(e) {
		this.inputType = e.type;
		this.createMenus();
	}
	,mDown: function(e) {
		this._mouseX = openfl_Lib.current.stage.__mouseX / this.get_scaleX();
		this._mouseY = openfl_Lib.current.stage.__mouseY / this.get_scaleY();
		this.isMouseDown = true;
	}
	,mMove: function(e) {
		this._mouseX = openfl_Lib.current.stage.__mouseX / this.get_scaleX();
		this._mouseY = openfl_Lib.current.stage.__mouseY / this.get_scaleY();
	}
	,mUp: function(e) {
		this._mouseX = openfl_Lib.current.stage.__mouseX / this.get_scaleX();
		this._mouseY = openfl_Lib.current.stage.__mouseY / this.get_scaleY();
		this.isMouseDown = false;
	}
	,pauseGame: function(e) {
		return;
	}
	,newGame: function(startNewGame) {

		window.cmgGameEvent("start");

		if(startNewGame == null) {
			startNewGame = false;
		}
		this.desk.newGame(startNewGame);
		this.paused = false;
	}
	,isKeyDown: function(keyCode) {
		var _g1 = 0;
		var _g = this.keyCodesDown.length;
		while(_g1 < _g) if(this.keyCodesDown[_g1++] == keyCode) {
			return true;
		}
		return false;
	}
	,sortFun: function(obj1,obj2) {
		if(obj1.y > obj2.y) {
			return 1;
		} else if(obj1.y == obj2.y) {
			return 0;
		} else {
			return -1;
		}
	}
	,sortY: function(obj1,obj2) {
		if(obj1.y > obj2.y) {
			return 1;
		} else {
			return -1;
		}
	}
	,curFrameDrawCalls: null
	,maxDrawCalls: null
	,checkDrawCall: function(batch) {
		if(this.lastBatch != null && this.lastBatch != batch) {
			var _this = this.lastBatch;
			var canvas = this.canvas;
			var clearCanvas = !this.clearedCanvas;
			var ctx = canvas.bmCanvas.bitmapData.image.buffer.__srcContext;
			if(clearCanvas) {
				ctx.clearRect(0,0,canvas.bmCanvas.bitmapData.width,canvas.bmCanvas.bitmapData.height);
			}
			var alpha = 1;
			var tx = 0;
			var ty = 0;
			var batchId = 0;
			var a = 1;
			var b = 0;
			var c = 0;
			var d = 1;
			var dRect;
			var drawSource = _this.bmd.image.buffer.get_src();
			var i = 0;
			while(i < _this.drawArr.length) {
				tx = _this.drawArr[i];
				ty = _this.drawArr[i + 1];
				batchId = _this.drawArr[i + 2] | 0;
				a = _this.drawArr[i + 3];
				b = _this.drawArr[i + 4];
				c = _this.drawArr[i + 5];
				d = _this.drawArr[i + 6];
				alpha = _this.drawArr[i + 7];
				i += 8;
				dRect = _this.tileSheet.__tileRects[batchId];
				if(alpha == 1 && a == 1 && b == 0 && c == 0 && d == 1) {
					ctx.drawImage(drawSource,dRect.x,dRect.y,dRect.width,dRect.height,tx,ty,dRect.width,dRect.height);
				} else {
					ctx.save();
					if(alpha != 1) {
						ctx.globalAlpha = alpha;
					}
					if(a != 1 || b != 0 || c != 0 || d != 1) {
						ctx.setTransform(a,b,c,d,tx,ty);
						tx = 0;
						ty = 0;
					}
					ctx.drawImage(drawSource,dRect.x,dRect.y,dRect.width,dRect.height,tx,ty,dRect.width,dRect.height);
					ctx.restore();
				}
			}
			while(_this.drawArr.length > 0) _this.drawArr.pop();
			this.clearedCanvas = true;
			this.curFrameDrawCalls++;
		}
		this.lastBatch = batch;
	}
	,get_mouseX: function() {
		return this._mouseX;
	}
	,get_mouseY: function() {
		return this._mouseY;
	}
	,disableCanvas: function() {
		if(!this.canvasIsOn) {
			return;
		}
	}
	,enableCanvas: function() {
		if(this.canvasIsOn) {
			return;
		}
	}
	,update: function(e) {
		this._mouseX = openfl_Lib.current.stage.__mouseX / this.get_scaleX();
		this._mouseY = openfl_Lib.current.stage.__mouseY / this.get_scaleY();
		var t = openfl_Lib.getTimer();
		var frameTime = t - this.lastTime;
		if(frameTime >= this.minUpdateTime) {
			this.lastTime = t;
		} else {
			return;
		}
		if(this.fullStop) {
			return;
		}
		var _g1 = 0;
		var _g = this.movieClips.length;
		while(_g1 < _g) this.movieClips[_g1++].update();
		while(this.soundsSpritesStartedThisFrame.length > 0) this.soundsSpritesStartedThisFrame.pop();
		var _g11 = 0;
		var _g2 = this.objectsToUpdate.length;
		while(_g11 < _g2) this.objectsToUpdate[_g11++].update(frameTime);
		if(this.isFpsEnabled && this.fps != null) {
			this.fps.update(frameTime);
		}
		if(this.paused) {
			return;
		}
		this.desk.update(frameTime);
		this.desk.render();
		if(this.lastBatch != null) {
			var _this = this.lastBatch;
			var canvas = this.canvas;
			var clearCanvas = !this.clearedCanvas;
			var ctx = canvas.bmCanvas.bitmapData.image.buffer.__srcContext;
			if(clearCanvas) {
				ctx.clearRect(0,0,canvas.bmCanvas.bitmapData.width,canvas.bmCanvas.bitmapData.height);
			}
			var alpha = 1;
			var tx = 0;
			var ty = 0;
			var batchId = 0;
			var a = 1;
			var b = 0;
			var c = 0;
			var d = 1;
			var dRect;
			var drawSource = _this.bmd.image.buffer.get_src();
			var i = 0;
			while(i < _this.drawArr.length) {
				tx = _this.drawArr[i];
				ty = _this.drawArr[i + 1];
				batchId = _this.drawArr[i + 2] | 0;
				a = _this.drawArr[i + 3];
				b = _this.drawArr[i + 4];
				c = _this.drawArr[i + 5];
				d = _this.drawArr[i + 6];
				alpha = _this.drawArr[i + 7];
				i += 8;
				dRect = _this.tileSheet.__tileRects[batchId];
				if(alpha == 1 && a == 1 && b == 0 && c == 0 && d == 1) {
					ctx.drawImage(drawSource,dRect.x,dRect.y,dRect.width,dRect.height,tx,ty,dRect.width,dRect.height);
				} else {
					ctx.save();
					if(alpha != 1) {
						ctx.globalAlpha = alpha;
					}
					if(a != 1 || b != 0 || c != 0 || d != 1) {
						ctx.setTransform(a,b,c,d,tx,ty);
						tx = 0;
						ty = 0;
					}
					ctx.drawImage(drawSource,dRect.x,dRect.y,dRect.width,dRect.height,tx,ty,dRect.width,dRect.height);
					ctx.restore();
				}
			}
			while(_this.drawArr.length > 0) _this.drawArr.pop();
		}
		this.lastBatch = null;
		this.clearedCanvas = false;
		if(this.curFrameDrawCalls > this.maxDrawCalls) {
			this.maxDrawCalls = this.curFrameDrawCalls;
		}
		this.curFrameDrawCalls = 0;
	}
	,__class__: Main
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_fullStop:"set_fullStop"})
});
var DocumentClass = function() {
	openfl_Lib.current.addChild(this);
	Main.call(this);
	this.dispatchEvent(new openfl_events_Event("addedToStage",false,false));
};
$hxClasses["DocumentClass"] = DocumentClass;
DocumentClass.__name__ = ["DocumentClass"];
DocumentClass.__super__ = Main;
DocumentClass.prototype = $extend(Main.prototype,{
	__class__: DocumentClass
});
var BatchCanvas = function(_width,_height) {
	if(_height == null) {
		_height = 0;
	}
	if(_width == null) {
		_width = 0;
	}
	this.wasSH = -1;
	this.wasSW = -1;
	this.wasMainSY = -1;
	this.wasMainSX = -1;
	this.isOpenGLSupported = false;
	openfl_display_Sprite.call(this);
	this.main = Main.current;
	if(_width == 0) {
		_width = Math.ceil(Main.current.sWidth);
	}
	if(_height == 0) {
		_height = Math.ceil(Main.current.sHeight);
	}
	this.bmCanvas = new openfl_display_Bitmap(new openfl_display_BitmapData(_width,_height,true,0),1,true);
	this.addChild(this.bmCanvas);
};
$hxClasses["BatchCanvas"] = BatchCanvas;
BatchCanvas.__name__ = ["BatchCanvas"];
BatchCanvas.__super__ = openfl_display_Sprite;
BatchCanvas.prototype = $extend(openfl_display_Sprite.prototype,{
	bmCanvas: null
	,isOpenGLSupported: null
	,main: null
	,wasMainSX: null
	,wasMainSY: null
	,wasSW: null
	,wasSH: null
	,resize: function() {
		if(this.bmCanvas != null) {
			this.bmCanvas.bitmapData = new openfl_display_BitmapData(Math.ceil(Main.current.sWidth),Math.ceil(Main.current.sHeight),true,0);
		}
	}
	,destroy: function() {
		this.main = null;
		if(this.bmCanvas != null && this.bmCanvas.parent != null) {
			this.bmCanvas.parent.removeChild(this.bmCanvas);
		}
		this.bmCanvas = null;
	}
	,__class__: BatchCanvas
});
var Batching = function(imgsArr,spriteWidth,spriteHeight,atlasImgPath,atlasXmlPath) {
	if(spriteHeight == null) {
		spriteHeight = 1024;
	}
	if(spriteWidth == null) {
		spriteWidth = 1024;
	}
	this.bgBmdHeight = 0;
	this.bgBmdWidth = 0;
	this.imName = "";
	this.scale = 1;
	this.getBitmapDataCache = new haxe_ds_StringMap();
	this.maxHeight = 0;
	this.curY = 0;
	this.curX = 0;
	this.atlasImgPath = atlasImgPath;
	this.atlasXmlPath = atlasXmlPath;
	this.drawArr = [];
	Batching.instances.h[Batching.count] = this;
	this.tileSheetId = Batching.count;
	Batching.count++;
	this.zonesMap = new haxe_ds_StringMap();
	this.mapZones = new haxe_ds_IntMap();
	this.rects = new haxe_ds_StringMap();
	this.frames = new haxe_ds_StringMap();
	this.framesByInd = [];
	this.frameM = new openfl_geom_Matrix();
	this.hm = new openfl_geom_Matrix();
	this.p = new openfl_geom_Point();
	this.ct = new openfl_geom_ColorTransform();
	this.hmm1 = new openfl_geom_Matrix();
	this.hmm2 = new openfl_geom_Matrix();
	if(atlasImgPath == null) {
		this.bmd = new openfl_display_BitmapData(spriteWidth,spriteHeight,true,0);
	}
	if(atlasImgPath != null) {
		this.parseAtlas();
		return;
	}
	var tBmd = null;
	var hp = new openfl_geom_Point();
	var baseName;
	while(imgsArr.length > 0) {
		baseName = imgsArr.pop();
		tBmd = openfl_Assets.getBitmapData(baseName);
		if(this.curX + tBmd.width > this.bmd.width) {
			this.curX = 0;
			this.curY += this.maxHeight + 1;
			this.maxHeight = 0;
		}
		if(this.maxHeight < tBmd.height) {
			this.maxHeight = tBmd.height;
		}
		hp.x = this.curX;
		hp.y = this.curY;
		this.bmd.copyPixels(tBmd,tBmd.rect,hp);
		var value = new openfl_geom_Rectangle(hp.x,hp.y,tBmd.width,tBmd.height);
		var _this = this.rects;
		if(__map_reserved[baseName] != null) {
			_this.setReserved(baseName,value);
		} else {
			_this.h[baseName] = value;
		}
		this.curX += tBmd.width + 1;
	}
	this.tileSheet = new openfl_display_Tilesheet(this.bmd);
	var ind;
	new openfl_geom_Rectangle();
	var tmp = this.rects.keys();
	while(tmp.hasNext()) {
		var j = tmp.next();
		var _this1 = this.rects;
		ind = this.tileSheet.addTileRect(__map_reserved[j] != null?_this1.getReserved(j):_this1.h[j]);
		var _this2 = this.zonesMap;
		if(__map_reserved[j] != null) {
			_this2.setReserved(j,ind);
		} else {
			_this2.h[j] = ind;
		}
		this.mapZones.h[ind] = j;
	}
	this.main = Main.current;
};
$hxClasses["Batching"] = Batching;
Batching.__name__ = ["Batching"];
Batching.prototype = {
	tileSheetId: null
	,curX: null
	,curY: null
	,maxHeight: null
	,zonesMap: null
	,mapZones: null
	,rects: null
	,frames: null
	,framesByInd: null
	,bmd: null
	,tileSheet: null
	,atlasImgPath: null
	,atlasXmlPath: null
	,hm: null
	,hmm1: null
	,hmm2: null
	,p: null
	,ct: null
	,frameM: null
	,drawArr: null
	,getBitmapDataCache: null
	,main: null
	,scale: null
	,imName: null
	,bgBmdWidth: null
	,bgBmdHeight: null
	,parseAtlas: function() {
		var atlasBmd = openfl_Assets.getBitmapData(this.atlasImgPath);
		var atlasXml = null;
		atlasXml = Xml.parse(openfl_Assets.getText(this.atlasXmlPath));
		var bounds;
		var tmp = atlasXml.firstElement().elementsNamed("SubTexture");
		while(tmp.hasNext()) {
			var subTexture = tmp.next();
			var x = subTexture.get("x");
			var tmp1 = parseFloat(x);
			var x1 = subTexture.get("y");
			var tmp2 = parseFloat(x1);
			var x2 = subTexture.get("width");
			var tmp3 = parseFloat(x2);
			var x3 = subTexture.get("height");
			bounds = new openfl_geom_Rectangle(tmp1,tmp2,tmp3,parseFloat(x3));
			var key = subTexture.get("name");
			var _this = this.rects;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,bounds);
			} else {
				_this.h[key] = bounds;
			}
			var x4 = subTexture.get("frameX");
			var f = parseFloat(x4);
			if(!isNaN(f)) {
				var x5 = subTexture.get("frameX");
				var tmp4 = parseFloat(x5);
				var x6 = subTexture.get("frameY");
				var tmp5 = parseFloat(x6);
				var x7 = subTexture.get("frameWidth");
				var tmp6 = parseFloat(x7);
				var x8 = subTexture.get("frameHeight");
				bounds = new openfl_geom_Rectangle(tmp4,tmp5,tmp6,parseFloat(x8));
				var key1 = subTexture.get("name");
				var _this1 = this.frames;
				if(__map_reserved[key1] != null) {
					_this1.setReserved(key1,bounds);
				} else {
					_this1.h[key1] = bounds;
				}
			}
		}
		this.bmd = atlasBmd;
		this.tileSheet = new openfl_display_Tilesheet(this.bmd);
		var ind;
		new openfl_geom_Rectangle();
		var tmp7 = this.rects.keys();
		while(tmp7.hasNext()) {
			var j = tmp7.next();
			var _this2 = this.rects;
			ind = this.tileSheet.addTileRect(__map_reserved[j] != null?_this2.getReserved(j):_this2.h[j]);
			var _this3 = this.zonesMap;
			if(__map_reserved[j] != null) {
				_this3.setReserved(j,ind);
			} else {
				_this3.h[j] = ind;
			}
			this.mapZones.h[ind] = j;
			var _this4 = this.frames;
			this.framesByInd[ind] = __map_reserved[j] != null?_this4.getReserved(j):_this4.h[j];
		}
	}
	,getImgId: function(imgName) {
		var _this = this.zonesMap;
		var retVal = __map_reserved[imgName] != null?_this.getReserved(imgName):_this.h[imgName];
		if(retVal == null) {
			return -1;
		}
		return retVal;
	}
	,searchImgId: function(imgName) {
		var tmp = this.zonesMap.keys();
		while(tmp.hasNext()) {
			var i = tmp.next();
			if(i.indexOf(imgName) != -1) {
				var _this = this.zonesMap;
				return __map_reserved[i] != null?_this.getReserved(i):_this.h[i];
			}
		}
		return -1;
	}
	,getImgRect: function(imgName) {
		var retRect;
		var _this = this.frames;
		if(__map_reserved[imgName] != null?_this.existsReserved(imgName):_this.h.hasOwnProperty(imgName)) {
			var _this1 = this.frames;
			retRect = (__map_reserved[imgName] != null?_this1.getReserved(imgName):_this1.h[imgName]).clone();
		} else {
			var _this2 = this.rects;
			retRect = (__map_reserved[imgName] != null?_this2.getReserved(imgName):_this2.h[imgName]).clone();
		}
		return retRect;
	}
	,getBitmapData: function(imName,dontCache) {
		if(dontCache == null) {
			dontCache = true;
		}
		if(this.getImgId(imName) == -1) {
			return null;
		}
		var rr = this.getImgRect(imName);
		var frame;
		var _this = this.frames;
		if(__map_reserved[imName] != null?_this.existsReserved(imName):_this.h.hasOwnProperty(imName)) {
			var _this1 = this.frames;
			frame = __map_reserved[imName] != null?_this1.getReserved(imName):_this1.h[imName];
		} else {
			frame = null;
		}
		if(!dontCache) {
			var _this2 = this.getBitmapDataCache;
			if(__map_reserved[imName] != null?_this2.existsReserved(imName):_this2.h.hasOwnProperty(imName)) {
				var _this3 = this.getBitmapDataCache;
				return __map_reserved[imName] != null?_this3.getReserved(imName):_this3.h[imName];
			}
		}
		var retBmd = frame != null?new openfl_display_BitmapData(Math.ceil(frame.width),Math.ceil(frame.height),true,0):new openfl_display_BitmapData(Math.ceil(rr.width),Math.ceil(rr.height),true,0);
		var tx = frame != null?-frame.x:0;
		var ty = frame != null?-frame.y:0;
		var dRect = this.tileSheet.__tileRects[this.getImgId(imName)];
		this.p.x = tx;
		this.p.y = ty;
		retBmd.copyPixels(this.bmd,dRect,this.p,null,null,true);
		var tmp;
		if(!dontCache) {
			var _this4 = this.getBitmapDataCache;
			tmp = !(__map_reserved[imName] != null?_this4.existsReserved(imName):_this4.h.hasOwnProperty(imName));
		} else {
			tmp = false;
		}
		if(tmp) {
			var _this5 = this.getBitmapDataCache;
			if(__map_reserved[imName] != null) {
				_this5.setReserved(imName,retBmd);
			} else {
				_this5.h[imName] = retBmd;
			}
		}
		return retBmd;
	}
	,hittestPoint: function(imName,px,py,thereshold) {
		if(thereshold == null) {
			thereshold = 255;
		}
		if(this.getImgId(imName) == -1) {
			return false;
		}
		var frame;
		var _this = this.frames;
		if(__map_reserved[imName] != null?_this.existsReserved(imName):_this.h.hasOwnProperty(imName)) {
			var _this1 = this.frames;
			frame = __map_reserved[imName] != null?_this1.getReserved(imName):_this1.h[imName];
		} else {
			frame = null;
		}
		var tx = frame != null?-frame.x:0;
		var ty = frame != null?-frame.y:0;
		var dRect = this.tileSheet.__tileRects[this.getImgId(imName)];
		if((this.bmd.getPixel32(Math.round(px + dRect.x + tx),Math.round(py + dRect.y + ty)) >> 24 & 255) >= thereshold) {
			return true;
		}
		return false;
	}
	,hittestObject: function(imgName1,imgName2,m1,m2,width,height,intersBoundsX,intersBoundsY,thereshold,step) {
		if(step == null) {
			step = 1;
		}
		if(thereshold == null) {
			thereshold = 255;
		}
		if(intersBoundsY == null) {
			intersBoundsY = 0;
		}
		if(intersBoundsX == null) {
			intersBoundsX = 0;
		}
		var mp1X = 0;
		var mp1Y = 0;
		var mp2X = 0;
		var mp2Y = 0;
		this.hmm1.a = m1.a;
		this.hmm1.b = m1.b;
		this.hmm1.c = m1.c;
		this.hmm1.d = m1.d;
		this.hmm1.tx = m1.tx;
		this.hmm1.ty = m1.ty;
		this.hmm2.a = m2.a;
		this.hmm2.b = m2.b;
		this.hmm2.c = m2.c;
		this.hmm2.d = m2.d;
		this.hmm2.tx = m2.tx;
		this.hmm2.ty = m2.ty;
		this.hmm1.invert();
		this.hmm2.invert();
		var dr1 = this.tileSheet.__tileRects[this.getImgId(imgName1)];
		var dr2 = this.tileSheet.__tileRects[this.getImgId(imgName2)];
		var frame;
		var _this = this.frames;
		if(__map_reserved[imgName1] != null?_this.existsReserved(imgName1):_this.h.hasOwnProperty(imgName1)) {
			var _this1 = this.frames;
			frame = __map_reserved[imgName1] != null?_this1.getReserved(imgName1):_this1.h[imgName1];
		} else {
			frame = null;
		}
		var tx1 = frame != null?-frame.x:0;
		var ty1 = frame != null?-frame.y:0;
		var _this2 = this.frames;
		if(__map_reserved[imgName2] != null?_this2.existsReserved(imgName2):_this2.h.hasOwnProperty(imgName2)) {
			var _this3 = this.frames;
			frame = __map_reserved[imgName1] != null?_this3.getReserved(imgName1):_this3.h[imgName1];
		} else {
			frame = null;
		}
		var tx2 = frame != null?-frame.x:0;
		var ty2 = frame != null?-frame.y:0;
		var w = Math.floor(width);
		var h = Math.floor(height);
		var __x = 0;
		var __y = 0;
		var i = 0;
		var j = 0;
		while(i < w) {
			while(j < h) {
				__x = i + intersBoundsX;
				__y = j + intersBoundsY;
				mp1X = Math.round(__x * this.hmm1.a + __y * this.hmm1.c + this.hmm1.tx + dr1.x + tx1);
				mp1Y = Math.round(__x * this.hmm1.b + __y * this.hmm1.d + this.hmm1.ty + dr1.y + ty1);
				mp2X = Math.round(__x * this.hmm2.a + __y * this.hmm2.c + this.hmm2.tx + dr2.x + tx2);
				mp2Y = Math.round(__x * this.hmm2.b + __y * this.hmm2.d + this.hmm2.ty + dr2.y + ty2);
				if((this.bmd.getPixel32(mp1X,mp1Y) >> 24 & 255) >= thereshold && (this.bmd.getPixel32(mp2X,mp2Y) >> 24 & 255) >= thereshold) {
					return true;
				}
				j += step;
			}
			j = 0;
			i += step;
		}
		return false;
	}
	,drawImageTo: function(imName,canvas,transform) {
		if(this.getImgId(imName) == -1) {
			return;
		}
		var frame;
		var _this = this.frames;
		if(__map_reserved[imName] != null?_this.existsReserved(imName):_this.h.hasOwnProperty(imName)) {
			var _this1 = this.frames;
			frame = __map_reserved[imName] != null?_this1.getReserved(imName):_this1.h[imName];
		} else {
			frame = null;
		}
		var dRect = this.tileSheet.__tileRects[this.getImgId(imName)].clone();
		var matrix = new openfl_geom_Matrix();
		matrix.translate(-dRect.x,-dRect.y);
		matrix.concat(transform);
		canvas.draw(this.bmd,matrix,null,null,dRect);
	}
	,addDraw: function(ind,matrix,alpha,ignoreDrawCalls) {
		if(ignoreDrawCalls == null) {
			ignoreDrawCalls = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(!ignoreDrawCalls) {
			this.main.checkDrawCall(this);
		}
		if(this.scale == 1) {
			this.hm.a = matrix.a;
			this.hm.b = matrix.b;
			this.hm.c = matrix.c;
			this.hm.d = matrix.d;
			this.hm.tx = matrix.tx;
			this.hm.ty = matrix.ty;
		} else {
			this.hm.a = 1;
			this.hm.b = 0;
			this.hm.c = 0;
			this.hm.d = 1;
			this.hm.tx = 0;
			this.hm.ty = 0;
			this.hm.scale(this.scale,this.scale);
			this.hm.concat(matrix);
		}
		var frame = this.framesByInd[ind] != null?this.framesByInd[ind]:null;
		if(frame != null) {
			this.frameM.a = 1;
			this.frameM.b = 0;
			this.frameM.c = 0;
			this.frameM.d = 1;
			this.frameM.tx = -frame.x;
			this.frameM.ty = -frame.y;
			this.frameM.concat(this.hm);
			this.drawArr.push(this.frameM.tx);
			this.drawArr.push(this.frameM.ty);
			this.drawArr.push(ind);
			this.drawArr.push(this.frameM.a);
			this.drawArr.push(this.frameM.b);
			this.drawArr.push(this.frameM.c);
			this.drawArr.push(this.frameM.d);
			this.drawArr.push(alpha);
		} else {
			this.drawArr.push(this.hm.tx);
			this.drawArr.push(this.hm.ty);
			this.drawArr.push(ind);
			this.drawArr.push(this.hm.a);
			this.drawArr.push(this.hm.b);
			this.drawArr.push(this.hm.c);
			this.drawArr.push(this.hm.d);
			this.drawArr.push(alpha);
		}
	}
	,render: function(canvas,clearCanvas) {
		if(clearCanvas == null) {
			clearCanvas = true;
		}
		var ctx = canvas.bmCanvas.bitmapData.image.buffer.__srcContext;
		if(clearCanvas) {
			ctx.clearRect(0,0,canvas.bmCanvas.bitmapData.width,canvas.bmCanvas.bitmapData.height);
		}
		var alpha = 1;
		var tx = 0;
		var ty = 0;
		var batchId = 0;
		var a = 1;
		var b = 0;
		var c = 0;
		var d = 1;
		var dRect;
		var drawSource = this.bmd.image.buffer.get_src();
		var i = 0;
		while(i < this.drawArr.length) {
			tx = this.drawArr[i];
			ty = this.drawArr[i + 1];
			batchId = this.drawArr[i + 2] | 0;
			a = this.drawArr[i + 3];
			b = this.drawArr[i + 4];
			c = this.drawArr[i + 5];
			d = this.drawArr[i + 6];
			alpha = this.drawArr[i + 7];
			i += 8;
			dRect = this.tileSheet.__tileRects[batchId];
			if(alpha == 1 && a == 1 && b == 0 && c == 0 && d == 1) {
				ctx.drawImage(drawSource,dRect.x,dRect.y,dRect.width,dRect.height,tx,ty,dRect.width,dRect.height);
			} else {
				ctx.save();
				if(alpha != 1) {
					ctx.globalAlpha = alpha;
				}
				if(a != 1 || b != 0 || c != 0 || d != 1) {
					ctx.setTransform(a,b,c,d,tx,ty);
					tx = 0;
					ty = 0;
				}
				ctx.drawImage(drawSource,dRect.x,dRect.y,dRect.width,dRect.height,tx,ty,dRect.width,dRect.height);
				ctx.restore();
			}
		}
		while(this.drawArr.length > 0) this.drawArr.pop();
	}
	,destroy: function() {
		this.zonesMap = null;
		this.mapZones = null;
		this.rects = null;
		this.frames = null;
		this.framesByInd = null;
		this.bmd = null;
		this.tileSheet = null;
		this.atlasImgPath = null;
		this.atlasXmlPath = null;
		this.hm = null;
		this.hmm1 = null;
		this.hmm2 = null;
		this.p = null;
		this.ct = null;
		this.frameM = null;
		this.drawArr = null;
		this.getBitmapDataCache = null;
		this.main = null;
	}
	,__class__: Batching
};
var BitmapNumFont = function(batch,prefix) {
	this.pool = [];
	this.displayObjects = [];
	this.visible = true;
	this.gapX = 0;
	this.text = "";
	this.align = "LEFT";
	this.height = 0;
	this.width = 0;
	this.y = 0;
	this.x = 0;
	this.batch = batch;
	this.prefix = prefix;
};
$hxClasses["BitmapNumFont"] = BitmapNumFont;
BitmapNumFont.__name__ = ["BitmapNumFont"];
BitmapNumFont.prototype = {
	batch: null
	,prefix: null
	,x: null
	,y: null
	,width: null
	,height: null
	,align: null
	,text: null
	,gapX: null
	,visible: null
	,displayObjects: null
	,pool: null
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.updateText();
		return value;
	}
	,set_align: function(value) {
		if(value == this.align) {
			return value;
		}
		this.align = value;
		this.updateText();
		return value;
	}
	,set_width: function(value) {
		if(value == this.width) {
			return value;
		}
		this.width = value;
		this.updateText();
		return value;
	}
	,set_gapX: function(value) {
		if(value == this.gapX) {
			return value;
		}
		this.gapX = value;
		this.updateText();
		return value;
	}
	,updateText: function() {
		while(this.displayObjects.length > 0) this.pool.push(this.displayObjects.pop());
		var dObj;
		var curX = 0;
		var totWidth = 0;
		var ind;
		var imName;
		var _g1 = 0;
		var _g = this.text.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.text.charAt(i) == ":") {
				ind = 11;
			} else {
				ind = Std.parseInt(this.text.charAt(i)) + 1;
			}
			imName = (ind < 10?this.prefix + "0":this.prefix) + ind;
			if(this.pool.length > 0) {
				dObj = this.pool.pop();
				dObj.setBatchId(imName);
			} else {
				dObj = new DisplayObjectBatch(this.batch,imName);
			}
			this.displayObjects.push(dObj);
			dObj.x = curX;
			dObj.y = this.y;
			curX += dObj.get_width() + this.gapX;
		}
		totWidth = curX - this.gapX;
		var offsetX = 0;
		if(this.align == "LEFT") {
			offsetX = this.x;
		} else if(this.align == "CENTER") {
			offsetX = this.width / 2 - totWidth / 2 + this.x;
		} else if(this.align == "RIGHT") {
			offsetX = this.width - totWidth + this.x;
		}
		var _g11 = 0;
		var _g2 = this.displayObjects.length;
		while(_g11 < _g2) this.displayObjects[_g11++].x += offsetX;
	}
	,update: function() {
	}
	,render: function() {
		if(!this.visible) {
			return;
		}
		var _g1 = 0;
		var _g = this.displayObjects.length;
		while(_g1 < _g) this.displayObjects[_g1++].render();
	}
	,destroy: function() {
		while(this.displayObjects.length > 0) this.displayObjects.pop().destroy();
		while(this.pool.length > 0) this.pool.pop().destroy();
		this.displayObjects = null;
		this.pool = null;
		this.batch = null;
	}
	,__class__: BitmapNumFont
	,__properties__: {set_gapX:"set_gapX",set_text:"set_text",set_align:"set_align",set_width:"set_width"}
};
var DisplayObjectBatch = function(batch,imgName) {
	this.ignoreDrawCalls = false;
	this.name = "";
	this.parent = null;
	this.visible = true;
	this.alpha = 1;
	this.__height = 0;
	this.__width = 0;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.ty = 0;
	this.tx = 0;
	this.addonY = 0;
	this.addonX = 0;
	this.y = 0;
	this.x = 0;
	this.main = Main.current;
	if(imgName != "") {
		this.imgName = imgName;
		this.batchAtlas = batch;
		this.batchId = batch.getImgId(imgName);
		this.bounds = batch.getImgRect(imgName);
		this.bounds.x = this.bounds.y = 0;
		this.__width = this.bounds.width;
		this.__height = this.bounds.height;
	}
	this.mHm = new openfl_geom_Matrix();
	this.mHm1 = new openfl_geom_Matrix();
	this.mHr = new openfl_geom_Rectangle();
	this.mHp = new openfl_geom_Point();
};
$hxClasses["DisplayObjectBatch"] = DisplayObjectBatch;
DisplayObjectBatch.__name__ = ["DisplayObjectBatch"];
DisplayObjectBatch.prototype = {
	x: null
	,y: null
	,addonX: null
	,addonY: null
	,tx: null
	,ty: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,__width: null
	,__height: null
	,alpha: null
	,visible: null
	,parent: null
	,bounds: null
	,main: null
	,batchAtlas: null
	,imgName: null
	,batchId: null
	,mHm: null
	,mHm1: null
	,mHr: null
	,mHp: null
	,name: null
	,ignoreDrawCalls: null
	,setBatchId: function(imgName,batch) {
		if(batch != null && batch != this.batchAtlas) {
			this.batchAtlas = batch;
		}
		this.imgName = imgName;
		this.batchId = this.batchAtlas.getImgId(imgName);
		this.bounds = this.batchAtlas.getImgRect(imgName);
		this.bounds.x = this.bounds.y = 0;
		this.__width = this.bounds.width;
		this.__height = this.bounds.height;
		return this.batchId;
	}
	,hitTestPointSimple: function(_x,_y) {
		this.mHp.x = _x;
		this.mHp.y = _y;
		this.getBoundsAfterTransformation();
		return this.mHr.containsPoint(this.mHp);
	}
	,get_width: function() {
		return this.__width * this.scaleX;
	}
	,get_height: function() {
		return this.__height * this.scaleY;
	}
	,set_width: function(val) {
		this.scaleX = val / this.__width;
		return val;
	}
	,set_height: function(val) {
		this.scaleY = val / this.__height;
		return val;
	}
	,render: function() {
		if(!this.visible || this.alpha == 0 || this.mHm == null) {
			return;
		}
		this.prepareTransformMatrix();
		this.batchAtlas.addDraw(this.batchId,this.mHm,this.alpha,this.ignoreDrawCalls);
	}
	,renderWithMatrix: function(m) {
		if(!this.visible || this.alpha == 0) {
			return;
		}
		this.batchAtlas.addDraw(this.batchId,m,this.alpha,this.ignoreDrawCalls);
	}
	,prepareTransformMatrix: function() {
		var px = 0;
		var py = 0;
		var parMatrix = null;
		if(this.parent != null) {
			if(js_Boot.__instanceof(this.parent,openfl_display_DisplayObject)) {
				var pt = this.parent;
				px = pt.get_x();
				py = pt.get_y();
			} else if(js_Boot.__instanceof(this.parent,DisplayObjectContainerBatch)) {
				var pt1 = this.parent;
				pt1.updateMatrix();
				parMatrix = pt1.batchMatrix;
			} else {
				px = this.parent.x;
				py = this.parent.y;
			}
		}
		px += this.addonX;
		py += this.addonY;
		this.mHm.identity();
		if(this.scaleX == 1 && this.scaleY == 1 && this.rotation == 0 && this.tx == 0 && this.ty == 0) {
			this.mHm.tx = this.x + px;
			this.mHm.ty = this.y + py;
		} else if(this.tx == 0 && this.ty == 0 && this.rotation == 0) {
			this.mHm.scale(this.scaleX,this.scaleY);
			this.mHm1.identity();
			this.mHm1.tx = this.x + px;
			this.mHm1.ty = this.y + py;
			this.mHm.concat(this.mHm1);
		} else if(this.rotation == 0) {
			this.mHm.a = this.scaleX;
			this.mHm.b = 0;
			this.mHm.c = 0;
			this.mHm.d = this.scaleY;
			this.mHm.tx = this.x + px - this.tx * this.scaleX;
			this.mHm.ty = this.y + py - this.ty * this.scaleY;
		} else if(this.rotation != 0) {
			var cos = Math.cos(this.rotation);
			var sin = Math.sin(this.rotation);
			this.mHm.a = this.scaleX * cos;
			this.mHm.b = this.scaleX * sin;
			this.mHm.c = this.scaleY * -sin;
			this.mHm.d = this.scaleY * cos;
			this.mHm.tx = this.x + px - this.tx * this.mHm.a - this.ty * this.mHm.c;
			this.mHm.ty = this.y + py - this.tx * this.mHm.b - this.ty * this.mHm.d;
		}
		if(parMatrix != null) {
			this.mHm.concat(parMatrix);
		}
	}
	,getBoundsAfterTransformation: function() {
		this.mHr.x = 0;
		this.mHr.y = 0;
		this.mHr.width = this.bounds.width;
		this.mHr.height = this.bounds.height;
		this.prepareTransformMatrix();
		var topLeft = this.mHm.transformPoint(this.mHr.get_topLeft());
		var topRight = this.mHm.transformPoint(new openfl_geom_Point(this.mHr.get_right(),this.mHr.get_top()));
		var bottomRight = this.mHm.transformPoint(this.mHr.get_bottomRight());
		var bottomLeft = this.mHm.transformPoint(new openfl_geom_Point(this.mHr.get_left(),this.mHr.get_bottom()));
		var left = Math.min(Math.min(topLeft.x,topRight.x),Math.min(bottomRight.x,bottomLeft.x));
		var top = Math.min(Math.min(topLeft.y,topRight.y),Math.min(bottomRight.y,bottomLeft.y));
		var right = Math.max(Math.max(topLeft.x,topRight.x),Math.max(bottomRight.x,bottomLeft.x));
		var bottom = Math.max(Math.max(topLeft.y,topRight.y),Math.max(bottomRight.y,bottomLeft.y));
		this.mHr.x = left;
		this.mHr.y = top;
		this.mHr.width = right - left;
		this.mHr.height = bottom - top;
	}
	,getBounds: function() {
		this.getBoundsAfterTransformation();
		return this.mHr;
	}
	,hittestObject: function(object,thereshold) {
		if(thereshold == null) {
			thereshold = 255;
		}
		var intersectBounds = this.getBounds().intersection(object.getBounds());
		if(intersectBounds.width < 1 || intersectBounds.height < 1) {
			return false;
		}
		var bmd1 = new openfl_display_BitmapData(Math.floor(intersectBounds.width),Math.floor(intersectBounds.height),true,0);
		var bmd2 = new openfl_display_BitmapData(Math.floor(intersectBounds.height),Math.floor(intersectBounds.width),true,0);
		this.mHm1.a = this.mHm.a;
		this.mHm1.b = this.mHm.b;
		this.mHm1.c = this.mHm.c;
		this.mHm1.d = this.mHm.d;
		this.mHm1.tx = this.mHm.tx;
		this.mHm1.ty = this.mHm.ty;
		this.mHm1.translate(-intersectBounds.x,-intersectBounds.y);
		this.batchAtlas.drawImageTo(this.imgName,bmd1,this.mHm1);
		object.prepareTransformMatrix();
		this.mHm1 = object.mHm.clone();
		this.mHm1.translate(-intersectBounds.x,-intersectBounds.y);
		object.batchAtlas.drawImageTo(object.imgName,bmd2,this.mHm1);
		var res = false;
		var breakIt = false;
		var _g1 = 0;
		var _g = bmd1.width;
		while(_g1 < _g) {
			var i = _g1++;
			if(breakIt) {
				break;
			}
			var _g3 = 0;
			var _g2 = bmd1.height;
			while(_g3 < _g2) {
				var j = _g3++;
				if((bmd1.getPixel32(i,j) >> 24 & 255) >= thereshold && (bmd2.getPixel32(i,j) >> 24 & 255) >= thereshold) {
					res = true;
					breakIt = true;
					break;
				}
			}
		}
		bmd1.dispose();
		bmd2.dispose();
		return res;
	}
	,hitTestPoint: function(_x,_y,thereshold) {
		if(thereshold == null) {
			thereshold = 255;
		}
		if(this.mHm == null || !this.hitTestPointSimple(_x,_y)) {
			return false;
		}
		this.mHm1 = this.mHm.clone();
		this.mHm1.invert();
		this.mHp.x = _x * this.mHm1.a + _y * this.mHm1.c + this.mHm1.tx;
		this.mHp.y = _x * this.mHm1.b + _y * this.mHm1.d + this.mHm1.ty;
		return this.batchAtlas.hittestPoint(this.imgName,this.mHp.x,this.mHp.y,thereshold);
	}
	,destroy: function() {
		this.parent = null;
		this.bounds = null;
		this.main = null;
		this.batchAtlas = null;
		this.mHm = null;
		this.mHm1 = null;
		this.mHr = null;
		this.mHp = null;
	}
	,Destroy: function() {
		this.destroy();
	}
	,__class__: DisplayObjectBatch
	,__properties__: {set_height:"set_height",get_height:"get_height",set_width:"set_width",get_width:"get_width"}
};
var Chip = function(stone) {
	this.isBear = false;
	this.isAnimatingMove = false;
	this.positionsToAnims = [];
	this.isActive = true;
	this.type = 0;
	this.themeType = 1;
	this.stone = stone;
	this.type = stone.color == backgammon_model_enum1_Color.White?1:0;
	DisplayObjectBatch.call(this,Main.current.batch,"");
	this.batchAtlas = Main.current.batch;
	this.desk = Desk.current;
	this.parent = this.desk;
	this.init(stone);
};
$hxClasses["Chip"] = Chip;
Chip.__name__ = ["Chip"];
Chip.__super__ = DisplayObjectBatch;
Chip.prototype = $extend(DisplayObjectBatch.prototype,{
	themeType: null
	,type: null
	,isActive: null
	,set_isActive: function(value) {
		this.isActive = value;
		this.visible = value;
		if(!value) {
			motion_Actuate.stop(this);
		}
		return this.isActive;
	}
	,desk: null
	,stone: null
	,positionsToAnims: null
	,isAnimatingMove: null
	,isBear: null
	,init: function(stone) {
		if(stone != null) {
			this.stone = stone;
		}
		this.type = stone.color == backgammon_model_enum1_Color.White?1:0;
		motion_Actuate.stop(this);
		this.isAnimatingMove = false;
		while(this.positionsToAnims.length > 0) this.positionsToAnims.pop();
		this.updateTheme();
		this.updatePos(false);
	}
	,fullUpdate: function() {
		var pos = this.desk.getPosition(this.stone);
		this.x = pos.x;
		this.y = pos.y;
		this.type = this.stone.color == backgammon_model_enum1_Color.White?1:0;
		this.set_isBear(this.desk.game.board.endZone1.stones.contains(this.stone) || this.desk.game.board.endZone2.stones.contains(this.stone));
	}
	,updatePos: function(withAnim) {
		if(withAnim == null) {
			withAnim = true;
		}
		var pos = this.desk.getPosition(this.stone);
		if(pos == null) {
			this.visible = false;
			if(withAnim) {
				Desk.current.chipAnimEnd();
			}
			return;
		} else {
			this.visible = true;
		}
		if(!withAnim) {
			motion_Actuate.stop(this);
			this.x = pos.x;
			this.y = pos.y;
		} else if(this.isAnimatingMove) {
			this.positionsToAnims.push(pos.clone());
		} else {
			motion_Actuate.tween(this,0.7,{ x : pos.x, y : pos.y}).onComplete($bind(this,this.animMoveEnd));
		}
	}
	,animMoveEnd: function() {
		if(this.positionsToAnims.length == 0) {
			this.isAnimatingMove = false;
		} else {
			motion_Actuate.tween(this,0.7,{ x : this.positionsToAnims[0].x, y : this.positionsToAnims[0].y}).onComplete($bind(this,this.animMoveEnd));
			this.positionsToAnims.shift();
		}
		Desk.current.chipAnimEnd();
	}
	,updateTheme: function() {
		this.set_themeType(this.desk.curThemeChess);
	}
	,set_themeType: function(theme) {
		var realType = this.type;
		if(Desk.current.inversedColors) {
			realType = 1 - realType;
		}
		if(this.isBear) {
			this.setBatchId("beared_" + (Desk.current.inversedColors?realType == 1?"black":"white":this.type != 0?"black":"white") + "_" + theme);
			this.tx = this.get_width() / 2;
			this.ty = this.get_height();
		} else {
			this.tx = this.ty = 0;
			this.rotation = 0;
			this.setBatchId("chip_" + (Desk.current.inversedColors?realType == 1?"black":"white":this.type != 0?"black":"white") + "_" + theme);
		}
		this.themeType = theme;
		return theme;
	}
	,set_isBear: function(val) {
		this.isBear = val;
		this.set_themeType(this.themeType);
		return this.isBear;
	}
	,destroy: function() {
		motion_Actuate.stop(this);
		DisplayObjectBatch.prototype.destroy.call(this);
	}
	,__class__: Chip
	,__properties__: $extend(DisplayObjectBatch.prototype.__properties__,{set_isBear:"set_isBear",set_isActive:"set_isActive",set_themeType:"set_themeType"})
});
var Config = function() {
	this.debTxt = null;
	this.isPausedByOrientation = false;
	this.N = 1;
	this.realStageHeight = -1;
	this.realStageWidth = -1;
	this.sHeight = 0;
	this.sWidth = 0;
	this.wasLandscape = false;
	this.wasPortrait = false;
	this.minSizeCoefHTML5SimpBrowser = 0.8;
	this.initSHeight = 640;
	this.initSWidth = 640;
	this.isPortrait = true;
	this.isSiteLocked = false;
	this.gameName = "new game name";
	this.main = Main.current;
	this.iOSjs = eval("iOSjs");
	this.iOSjs.setResFunction($bind(this,this.iosRes));
};
$hxClasses["Config"] = Config;
Config.__name__ = ["Config"];
Config.logTxt = null;
Config.openMoreGames = function() {
	//window.open("http://cawogames.com","_blank").focus();
};
Config.prototype = {
	gameName: null
	,isSiteLocked: null
	,isPortrait: null
	,initSWidth: null
	,initSHeight: null
	,minSizeCoefHTML5SimpBrowser: null
	,wasPortrait: null
	,wasLandscape: null
	,sWidth: null
	,sHeight: null
	,realStageWidth: null
	,realStageHeight: null
	,sounds: null
	,N: null
	,tapToStartWin: null
	,rotateScreenWindow: null
	,iOSjs: null
	,main: null
	,gaTrack: null
	,isPausedByOrientation: null
	,iosRes: function() {
		this.main.resize(null);
	}
	,initSounds: function() {
		if(this.sounds != null) {
			return this.sounds;
		}
		[];
		this.sounds = new Sounds();
		return this.sounds;
	}
	,getIsMobileBrowser: function() {
		var isMobileBrowser = false;
		isMobileBrowser = eval("/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone|IEMobile|Opera Mini/i.test(navigator.userAgent)");
		if(!isMobileBrowser) {
			eval("document.getElementById('openfl-content').style.overflow = 'hidden'");
		}
		return isMobileBrowser;
	}
	,checkSiteLock: function() {
	}
	,updateStageSizes: function() {
	}
	,setRotateWin: function(visible) {
		if(visible == null) {
			visible = true;
		}
		return;
	}
	,resizeMain: function() {
		this.getCurSize();
		var viewPort = this.getCurSize();
		if(this.getIsMobileBrowser()) {
			this.main.set_scaleX(this.main.set_scaleY(this.isPortrait?viewPort.width / this.sWidth:viewPort.height / this.sHeight));
		} else {
			this.main.set_scaleX(this.main.set_scaleY(this.isPortrait?viewPort.width / this.sWidth:viewPort.height / this.sHeight));
			if(this.isPortrait && viewPort.width > viewPort.height) {
				this.main.set_scaleX(this.main.set_scaleY(viewPort.height / this.sHeight));
			}
		}
		if(!this.isPortrait) {
			this.main.set_x(viewPort.width / 2 - this.sWidth * this.main.get_scaleY() / 2);
			if(!this.getIsMobileBrowser()) {
				this.main.set_x(viewPort.width / 2 - this.sWidth * this.main.get_scaleY() / 2);
			}
		}
		var tmp = this.sWidth * this.main.get_scaleX();
		eval("document.getElementById('openfl-content').style.width = '" + tmp + "px'");
		eval("document.getElementById('openfl-content').style.top = '" + 0 + "px'");
		eval("document.getElementById('openfl-content').style.left = '" + 0 + "px'");
		var tmp1 = this.sHeight * this.main.get_scaleY();
		eval("document.getElementById('openfl-content').style.height = '" + tmp1 + "px'");
		eval("document.getElementById('openfl-content').style.margin = 'auto'");
		window.scroll(0,0);
		window.scrollTo(0,0);
		window.document.body.scrollTop = 0;
		var code = "document.body.style.backgroundColor = '" + "#" + StringTools.hex(openfl_Lib.current.stage.get_color(),6) + "'";
		eval(code);
	}
	,debTxt: null
	,log: function(txt) {
	}
	,resizeSet: function(inited) {
		return false;
	}
	,getCurSize: function() {
		return this.iOSjs.getCurSize();
	}
	,initSize: function(isReinit) {
		if(isReinit == null) {
			isReinit = false;
		}
		var isw = this.initSWidth;
		var ish = this.initSHeight;
		var viewPort = this.iOSjs.getCurSize();
		if(viewPort.height / viewPort.width > 1.4) {
			ish *= viewPort.height / viewPort.width;
			isw = Math.round(isw);
			ish = Math.round(ish);
			this.main.set_scaleX(this.main.set_scaleY(viewPort.height / ish));
		} else {
			var wsize = 806;
			var whCoef = viewPort.width / viewPort.height;
			if(650 * whCoef > wsize) {
				ish = 650;
			} else {
				ish = wsize / whCoef;
			}
			isw = ish;
			isw *= viewPort.width / viewPort.height;
			isw = Math.round(isw);
			ish = Math.round(ish);
			this.main.set_scaleX(this.main.set_scaleY(this.main.set_scaleX(this.main.set_scaleY(viewPort.width / isw))));
		}
		this.sWidth = isw;
		this.sHeight = ish;
		this.N = 30 / openfl_Lib.current.stage.get_frameRate();
		var tmp = this.sWidth * this.main.get_scaleX();
		eval("document.getElementById('openfl-content').style.width = '" + tmp + "px'");
		eval("document.getElementById('openfl-content').style.top = '" + 0 + "px'");
		eval("document.getElementById('openfl-content').style.left = '" + 0 + "px'");
		var tmp1 = this.sHeight * this.main.get_scaleY();
		eval("document.getElementById('openfl-content').style.height = '" + tmp1 + "px'");
		eval("document.getElementById('openfl-content').style.margin = 'auto'");
		window.scroll(0,0);
		window.scrollTo(0,0);
		window.document.body.scrollTop = 0;
		var code = "document.body.style.backgroundColor = '" + "#" + StringTools.hex(openfl_Lib.current.stage.get_color(),6) + "'";
		eval(code);
		if(!isReinit) {
			openfl_Lib.current.stage.addEventListener("touchEnd",$bind(this,this.tapToStartClick));
			openfl_Lib.current.stage.addEventListener("click",$bind(this,this.tapToStartClick));
		}
		return false;
	}
	,sendToTopTapToStart: function() {
	}
	,tapToStartClick: function(e) {
		openfl_Lib.current.stage.removeEventListener("touchEnd",$bind(this,this.tapToStartClick));
		openfl_Lib.current.stage.removeEventListener("click",$bind(this,this.tapToStartClick));
		if(this.tapToStartWin != null && this.tapToStartWin.parent != null) {
			this.tapToStartWin.parent.removeChild(this.tapToStartWin);
		}
		if(this.tapToStartWin != null) {
			this.tapToStartWin.close();
		}
		this.tapToStartWin = null;
		this.main.tapToStartClick(e);
	}
	,__class__: Config
};
var lime_AssetLibrary = function() {
	this.onChange = new lime_app_Event_$Void_$Void();
};
$hxClasses["lime.AssetLibrary"] = lime_AssetLibrary;
lime_AssetLibrary.__name__ = ["lime","AssetLibrary"];
lime_AssetLibrary.prototype = {
	onChange: null
	,exists: function(id,type) {
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		return null;
	}
	,getFont: function(id) {
		return null;
	}
	,getImage: function(id) {
		return null;
	}
	,getPath: function(id) {
		return null;
	}
	,getText: function(id) {
		var bytes = this.getBytes(id);
		if(bytes == null) {
			return null;
		} else {
			return bytes.getString(0,bytes.length);
		}
	}
	,isLocal: function(id,type) {
		return true;
	}
	,list: function(type) {
		return null;
	}
	,load: function() {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis;
		});
	}
	,loadAudioBuffer: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getAudioBuffer(id);
		});
	}
	,loadBytes: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getBytes(id);
		});
	}
	,loadFont: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getFont(id);
		});
	}
	,loadImage: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getImage(id);
		});
	}
	,loadText: function(id) {
		return this.loadBytes(id).then(function(bytes) {
			return new lime_app_Future(function() {
				if(bytes == null) {
					return null;
				} else {
					return bytes.getString(0,bytes.length);
				}
			});
		});
	}
	,unload: function() {
	}
	,__class__: lime_AssetLibrary
};
var DefaultAssetLibrary = function() {
	this.type = new haxe_ds_StringMap();
	this.path = new haxe_ds_StringMap();
	this.className = new haxe_ds_StringMap();
	lime_AssetLibrary.call(this);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$eot);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$svg);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$ttf);
	openfl_text_Font.registerFont(_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$woff);
	var _this = this.path;
	if(__map_reserved["img/bg.jpg"] != null) {
		_this.setReserved("img/bg.jpg","img/bg.jpg");
	} else {
		_this.h["img/bg.jpg"] = "img/bg.jpg";
	}
	var _this1 = this.type;
	var value = "IMAGE";
	if(__map_reserved["img/bg.jpg"] != null) {
		_this1.setReserved("img/bg.jpg",value);
	} else {
		_this1.h["img/bg.jpg"] = value;
	}
	var _this2 = this.path;
	if(__map_reserved["img/levels.json"] != null) {
		_this2.setReserved("img/levels.json","img/levels.json");
	} else {
		_this2.h["img/levels.json"] = "img/levels.json";
	}
	var _this3 = this.type;
	var value1 = "TEXT";
	if(__map_reserved["img/levels.json"] != null) {
		_this3.setReserved("img/levels.json",value1);
	} else {
		_this3.h["img/levels.json"] = value1;
	}
	var _this4 = this.path;
	if(__map_reserved["img/MainAtlas.png"] != null) {
		_this4.setReserved("img/MainAtlas.png","img/MainAtlas.png");
	} else {
		_this4.h["img/MainAtlas.png"] = "img/MainAtlas.png";
	}
	var _this5 = this.type;
	var value2 = "IMAGE";
	if(__map_reserved["img/MainAtlas.png"] != null) {
		_this5.setReserved("img/MainAtlas.png",value2);
	} else {
		_this5.h["img/MainAtlas.png"] = value2;
	}
	var _this6 = this.path;
	if(__map_reserved["img/MainAtlas.xml"] != null) {
		_this6.setReserved("img/MainAtlas.xml","img/MainAtlas.xml");
	} else {
		_this6.h["img/MainAtlas.xml"] = "img/MainAtlas.xml";
	}
	var _this7 = this.type;
	var value3 = "TEXT";
	if(__map_reserved["img/MainAtlas.xml"] != null) {
		_this7.setReserved("img/MainAtlas.xml",value3);
	} else {
		_this7.h["img/MainAtlas.xml"] = value3;
	}
	var _this8 = this.path;
	if(__map_reserved["img/MainFontNumeric.png"] != null) {
		_this8.setReserved("img/MainFontNumeric.png","img/MainFontNumeric.png");
	} else {
		_this8.h["img/MainFontNumeric.png"] = "img/MainFontNumeric.png";
	}
	var _this9 = this.type;
	var value4 = "IMAGE";
	if(__map_reserved["img/MainFontNumeric.png"] != null) {
		_this9.setReserved("img/MainFontNumeric.png",value4);
	} else {
		_this9.h["img/MainFontNumeric.png"] = value4;
	}
	var _this10 = this.path;
	if(__map_reserved["img/MainFontNumeric1.png"] != null) {
		_this10.setReserved("img/MainFontNumeric1.png","img/MainFontNumeric1.png");
	} else {
		_this10.h["img/MainFontNumeric1.png"] = "img/MainFontNumeric1.png";
	}
	var _this11 = this.type;
	var value5 = "IMAGE";
	if(__map_reserved["img/MainFontNumeric1.png"] != null) {
		_this11.setReserved("img/MainFontNumeric1.png",value5);
	} else {
		_this11.h["img/MainFontNumeric1.png"] = value5;
	}
	var _this12 = this.path;
	if(__map_reserved[famobi_mgb_url] != null) {
		_this12.setReserved(famobi_mgb_url,famobi_mgb_url);
	} else {
		_this12.h[famobi_mgb_url] = famobi_mgb_url;
	}
	var _this13 = this.type;
	var value6 = "IMAGE";
	if(__map_reserved[famobi_mgb_url] != null) {
		_this13.setReserved(famobi_mgb_url,value6);
	} else {
		_this13.h[famobi_mgb_url] = value6;
	}
	var _this16 = this.path;
	if(__map_reserved["img/TranspPixel.png"] != null) {
		_this16.setReserved("img/TranspPixel.png","img/TranspPixel.png");
	} else {
		_this16.h["img/TranspPixel.png"] = "img/TranspPixel.png";
	}
	var _this17 = this.type;
	var value8 = "IMAGE";
	if(__map_reserved["img/TranspPixel.png"] != null) {
		_this17.setReserved("img/TranspPixel.png",value8);
	} else {
		_this17.h["img/TranspPixel.png"] = value8;
	}
	var _this18 = this.className;
	var value9 = _$_$ASSET_$_$fonts_$calibri_$gdi_$eot;
	if(__map_reserved["fonts/Calibri_gdi.eot"] != null) {
		_this18.setReserved("fonts/Calibri_gdi.eot",value9);
	} else {
		_this18.h["fonts/Calibri_gdi.eot"] = value9;
	}
	var _this19 = this.type;
	var value10 = "FONT";
	if(__map_reserved["fonts/Calibri_gdi.eot"] != null) {
		_this19.setReserved("fonts/Calibri_gdi.eot",value10);
	} else {
		_this19.h["fonts/Calibri_gdi.eot"] = value10;
	}
	var _this20 = this.className;
	var value11 = _$_$ASSET_$_$fonts_$calibri_$gdi_$svg;
	if(__map_reserved["fonts/Calibri_gdi.svg"] != null) {
		_this20.setReserved("fonts/Calibri_gdi.svg",value11);
	} else {
		_this20.h["fonts/Calibri_gdi.svg"] = value11;
	}
	var _this21 = this.type;
	var value12 = "FONT";
	if(__map_reserved["fonts/Calibri_gdi.svg"] != null) {
		_this21.setReserved("fonts/Calibri_gdi.svg",value12);
	} else {
		_this21.h["fonts/Calibri_gdi.svg"] = value12;
	}
	var _this22 = this.className;
	var value13 = _$_$ASSET_$_$fonts_$calibri_$gdi_$ttf;
	if(__map_reserved["fonts/Calibri_gdi.ttf"] != null) {
		_this22.setReserved("fonts/Calibri_gdi.ttf",value13);
	} else {
		_this22.h["fonts/Calibri_gdi.ttf"] = value13;
	}
	var _this23 = this.type;
	var value14 = "FONT";
	if(__map_reserved["fonts/Calibri_gdi.ttf"] != null) {
		_this23.setReserved("fonts/Calibri_gdi.ttf",value14);
	} else {
		_this23.h["fonts/Calibri_gdi.ttf"] = value14;
	}
	var _this24 = this.className;
	var value15 = _$_$ASSET_$_$fonts_$calibri_$gdi_$woff;
	if(__map_reserved["fonts/Calibri_gdi.woff"] != null) {
		_this24.setReserved("fonts/Calibri_gdi.woff",value15);
	} else {
		_this24.h["fonts/Calibri_gdi.woff"] = value15;
	}
	var _this25 = this.type;
	var value16 = "FONT";
	if(__map_reserved["fonts/Calibri_gdi.woff"] != null) {
		_this25.setReserved("fonts/Calibri_gdi.woff",value16);
	} else {
		_this25.h["fonts/Calibri_gdi.woff"] = value16;
	}
	var _this26 = this.path;
	if(__map_reserved["snd/sprite.ac3"] != null) {
		_this26.setReserved("snd/sprite.ac3","snd/sprite.ac3");
	} else {
		_this26.h["snd/sprite.ac3"] = "snd/sprite.ac3";
	}
	var _this27 = this.type;
	var value17 = "BINARY";
	if(__map_reserved["snd/sprite.ac3"] != null) {
		_this27.setReserved("snd/sprite.ac3",value17);
	} else {
		_this27.h["snd/sprite.ac3"] = value17;
	}
	var _this28 = this.path;
	if(__map_reserved["snd/sprite.json"] != null) {
		_this28.setReserved("snd/sprite.json","snd/sprite.json");
	} else {
		_this28.h["snd/sprite.json"] = "snd/sprite.json";
	}
	var _this29 = this.type;
	var value18 = "TEXT";
	if(__map_reserved["snd/sprite.json"] != null) {
		_this29.setReserved("snd/sprite.json",value18);
	} else {
		_this29.h["snd/sprite.json"] = value18;
	}
	var _this30 = this.path;
	if(__map_reserved["snd/sprite.m4a"] != null) {
		_this30.setReserved("snd/sprite.m4a","snd/sprite.m4a");
	} else {
		_this30.h["snd/sprite.m4a"] = "snd/sprite.m4a";
	}
	var _this31 = this.type;
	var value19 = "SOUND";
	if(__map_reserved["snd/sprite.m4a"] != null) {
		_this31.setReserved("snd/sprite.m4a",value19);
	} else {
		_this31.h["snd/sprite.m4a"] = value19;
	}
	var _this32 = this.path;
	if(__map_reserved["snd/sprite.mp3"] != null) {
		_this32.setReserved("snd/sprite.mp3","snd/sprite.mp3");
	} else {
		_this32.h["snd/sprite.mp3"] = "snd/sprite.mp3";
	}
	var _this33 = this.type;
	var value20 = "MUSIC";
	if(__map_reserved["snd/sprite.mp3"] != null) {
		_this33.setReserved("snd/sprite.mp3",value20);
	} else {
		_this33.h["snd/sprite.mp3"] = value20;
	}
	var _this34 = this.path;
	if(__map_reserved["snd/sprite.ogg"] != null) {
		_this34.setReserved("snd/sprite.ogg","snd/sprite.ogg");
	} else {
		_this34.h["snd/sprite.ogg"] = "snd/sprite.ogg";
	}
	var _this35 = this.type;
	var value21 = "SOUND";
	if(__map_reserved["snd/sprite.ogg"] != null) {
		_this35.setReserved("snd/sprite.ogg",value21);
	} else {
		_this35.h["snd/sprite.ogg"] = value21;
	}
	var _this36 = this.path;
	if(__map_reserved["snd/sprite.json"] != null) {
		_this36.setReserved("snd/sprite.json","snd/sprite.json");
	} else {
		_this36.h["snd/sprite.json"] = "snd/sprite.json";
	}
	var _this37 = this.type;
	var value22 = "TEXT";
	if(__map_reserved["snd/sprite.json"] != null) {
		_this37.setReserved("snd/sprite.json",value22);
	} else {
		_this37.h["snd/sprite.json"] = value22;
	}
	var assetsPrefix = null;
	if(ApplicationMain.config != null && Object.prototype.hasOwnProperty.call(ApplicationMain.config,"assetsPrefix")) {
		assetsPrefix = ApplicationMain.config.assetsPrefix;
	}
	if(assetsPrefix != null) {
		var tmp = this.path.keys();
		while(tmp.hasNext()) {
			var k = tmp.next();
			var _this38 = this.path;
			var value23 = assetsPrefix + (__map_reserved[k] != null?_this38.getReserved(k):_this38.h[k]);
			var _this39 = this.path;
			if(__map_reserved[k] != null) {
				_this39.setReserved(k,value23);
			} else {
				_this39.h[k] = value23;
			}
		}
	}
};
$hxClasses["DefaultAssetLibrary"] = DefaultAssetLibrary;
DefaultAssetLibrary.__name__ = ["DefaultAssetLibrary"];
DefaultAssetLibrary.__super__ = lime_AssetLibrary;
DefaultAssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	className: null
	,path: null
	,type: null
	,lastModified: null
	,timer: null
	,exists: function(id,type) {
		var requestedType = type != null?js_Boot.__cast(type , String):null;
		var _this = this.type;
		var assetType = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
		if(assetType != null) {
			if(assetType == requestedType || (requestedType == "SOUND" || requestedType == "MUSIC") && (assetType == "MUSIC" || assetType == "SOUND")) {
				return true;
			}
			if(requestedType == "BINARY" || requestedType == null || assetType == "BINARY" && requestedType == "TEXT") {
				return true;
			}
		}
		return false;
	}
	,getAudioBuffer: function(id) {
		return null;
	}
	,getBytes: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
		var _this1 = lime_app_Preloader.loaders;
		var loader = __map_reserved[key] != null?_this1.getReserved(key):_this1.h[key];
		if(loader == null) {
			return null;
		}
		var bytes = loader.bytes;
		if(bytes != null) {
			return bytes;
		} else {
			return null;
		}
	}
	,getFont: function(id) {
		var _this = this.className;
		return js_Boot.__cast(Type.createInstance(__map_reserved[id] != null?_this.getReserved(id):_this.h[id],[]) , lime_text_Font);
	}
	,getImage: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
		var _this1 = lime_app_Preloader.images;
		return lime_graphics_Image.fromImageElement(__map_reserved[key] != null?_this1.getReserved(key):_this1.h[key]);
	}
	,getPath: function(id) {
		var _this = this.path;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getText: function(id) {
		var _this = this.path;
		var key = __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
		var _this1 = lime_app_Preloader.loaders;
		var loader = __map_reserved[key] != null?_this1.getReserved(key):_this1.h[key];
		if(loader == null) {
			return null;
		}
		var bytes = loader.bytes;
		if(bytes != null) {
			return bytes.getString(0,bytes.length);
		} else {
			return null;
		}
	}
	,isLocal: function(id,type) {
		if(type != null) {
			js_Boot.__cast(type , String);
		}
		return true;
	}
	,list: function(type) {
		var requestedType = type != null?js_Boot.__cast(type , String):null;
		var items = [];
		var tmp = this.type.keys();
		while(tmp.hasNext()) {
			var id = tmp.next();
			if(requestedType == null || this.exists(id,type)) {
				items.push(id);
			}
		}
		return items;
	}
	,loadAudioBuffer: function(id) {
		var _gthis = this;
		var promise = new lime_app_Promise();
		promise.completeWith(new lime_app_Future(function() {
			return _gthis.getAudioBuffer(id);
		}));
		return promise.future;
	}
	,loadBytes: function(id) {
		var promise = new lime_app_Promise();
		var _this = this.path;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var request = new lime_net_HTTPRequest();
			var _this1 = this.path;
			promise.completeWith(request.load((__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]) + "?" + lime_Assets.cache.version));
		} else {
			promise.complete(this.getBytes(id));
		}
		return promise.future;
	}
	,loadImage: function(id) {
		var promise = new lime_app_Promise();
		var _this = this.path;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var image = new Image();
			image.onload = function(_) {
				promise.complete(lime_graphics_Image.fromImageElement(image));
			};
			image.onerror = $bind(promise,promise.error);
			var _this1 = this.path;
			image.src = (__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]) + "?" + lime_Assets.cache.version;
		} else {
			promise.complete(this.getImage(id));
		}
		return promise.future;
	}
	,loadText: function(id) {
		var promise = new lime_app_Promise();
		var _this = this.path;
		if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
			var request = new lime_net_HTTPRequest();
			var _this1 = this.path;
			var future = request.load((__map_reserved[id] != null?_this1.getReserved(id):_this1.h[id]) + "?" + lime_Assets.cache.version);
			future.onProgress(function(progress) {
				promise.progress(progress);
			});
			future.onError(function(msg) {
				promise.error(msg);
			});
			future.onComplete(function(bytes) {
				promise.complete(bytes.getString(0,bytes.length));
			});
		} else {
			promise.complete(this.getText(id));
		}
		return promise.future;
	}
	,__class__: DefaultAssetLibrary
});
var lime_text_Font = function(name) {
	if(name != null) {
		this.name = name;
	}
	if(this.__fontPath != null) {
		this.__fromFile(this.__fontPath);
	}
};
$hxClasses["lime.text.Font"] = lime_text_Font;
lime_text_Font.__name__ = ["lime","text","Font"];
lime_text_Font.fromBytes = function(bytes) {
	var font = new lime_text_Font();
	font.__fromBytes(bytes);
	return font;
};
lime_text_Font.fromFile = function(path) {
	var font = new lime_text_Font();
	font.__fromFile(path);
	return font;
};
lime_text_Font.prototype = {
	ascender: null
	,descender: null
	,height: null
	,name: null
	,numGlyphs: null
	,src: null
	,underlinePosition: null
	,underlineThickness: null
	,unitsPerEM: null
	,__fontPath: null
	,decompose: function() {
		return null;
	}
	,getGlyph: function(character) {
		return -1;
	}
	,getGlyphs: function(characters) {
		if(characters == null) {
			characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^`'\"/\\&*()[]{}<>|:;_-+=?,. ";
		}
		return null;
	}
	,getGlyphMetrics: function(glyph) {
		return null;
	}
	,renderGlyph: function(glyph,fontSize) {
		return null;
	}
	,renderGlyphs: function(glyphs,fontSize) {
		return null;
	}
	,__fromBytes: function(bytes) {
		this.__fontPath = null;
	}
	,__fromFile: function(path) {
		this.__fontPath = path;
	}
	,__setSize: function(size) {
	}
	,get_ascender: function() {
		return 0;
	}
	,get_descender: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,get_numGlyphs: function() {
		return 0;
	}
	,get_underlinePosition: function() {
		return 0;
	}
	,get_underlineThickness: function() {
		return 0;
	}
	,get_unitsPerEM: function() {
		return 0;
	}
	,__class__: lime_text_Font
	,__properties__: {get_unitsPerEM:"get_unitsPerEM",get_underlineThickness:"get_underlineThickness",get_underlinePosition:"get_underlinePosition",get_numGlyphs:"get_numGlyphs",get_height:"get_height",get_descender:"get_descender",get_ascender:"get_ascender"}
};
var _$_$ASSET_$_$fonts_$calibri_$gdi_$eot = function() {
	lime_text_Font.call(this);
	this.name = "null";
};
$hxClasses["__ASSET__fonts_calibri_gdi_eot"] = _$_$ASSET_$_$fonts_$calibri_$gdi_$eot;
_$_$ASSET_$_$fonts_$calibri_$gdi_$eot.__name__ = ["__ASSET__fonts_calibri_gdi_eot"];
_$_$ASSET_$_$fonts_$calibri_$gdi_$eot.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$calibri_$gdi_$eot.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$calibri_$gdi_$eot
});
var _$_$ASSET_$_$fonts_$calibri_$gdi_$svg = function() {
	lime_text_Font.call(this);
	this.name = "null";
};
$hxClasses["__ASSET__fonts_calibri_gdi_svg"] = _$_$ASSET_$_$fonts_$calibri_$gdi_$svg;
_$_$ASSET_$_$fonts_$calibri_$gdi_$svg.__name__ = ["__ASSET__fonts_calibri_gdi_svg"];
_$_$ASSET_$_$fonts_$calibri_$gdi_$svg.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$calibri_$gdi_$svg.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$calibri_$gdi_$svg
});
var _$_$ASSET_$_$fonts_$calibri_$gdi_$ttf = function() {
	lime_text_Font.call(this);
	this.name = "Calibri-Regular";
};
$hxClasses["__ASSET__fonts_calibri_gdi_ttf"] = _$_$ASSET_$_$fonts_$calibri_$gdi_$ttf;
_$_$ASSET_$_$fonts_$calibri_$gdi_$ttf.__name__ = ["__ASSET__fonts_calibri_gdi_ttf"];
_$_$ASSET_$_$fonts_$calibri_$gdi_$ttf.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$calibri_$gdi_$ttf.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$calibri_$gdi_$ttf
});
var _$_$ASSET_$_$fonts_$calibri_$gdi_$woff = function() {
	lime_text_Font.call(this);
	this.name = "Calibri-Regular";
};
$hxClasses["__ASSET__fonts_calibri_gdi_woff"] = _$_$ASSET_$_$fonts_$calibri_$gdi_$woff;
_$_$ASSET_$_$fonts_$calibri_$gdi_$woff.__name__ = ["__ASSET__fonts_calibri_gdi_woff"];
_$_$ASSET_$_$fonts_$calibri_$gdi_$woff.__super__ = lime_text_Font;
_$_$ASSET_$_$fonts_$calibri_$gdi_$woff.prototype = $extend(lime_text_Font.prototype,{
	__class__: _$_$ASSET_$_$fonts_$calibri_$gdi_$woff
});
var openfl_text_Font = function(name) {
	lime_text_Font.call(this,name);
};
$hxClasses["openfl.text.Font"] = openfl_text_Font;
openfl_text_Font.__name__ = ["openfl","text","Font"];
openfl_text_Font.enumerateFonts = function(enumerateDeviceFonts) {
	if(enumerateDeviceFonts == null) {
		enumerateDeviceFonts = false;
	}
	return openfl_text_Font.__registeredFonts;
};
openfl_text_Font.fromBytes = function(bytes) {
	var font = new openfl_text_Font();
	font.__fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes));
	return font;
};
openfl_text_Font.fromFile = function(path) {
	var font = new openfl_text_Font();
	font.__fromFile(path);
	return font;
};
openfl_text_Font.registerFont = function(font) {
	var instance = js_Boot.__cast(Type.createInstance(font,[]) , openfl_text_Font);
	if(instance != null) {
		openfl_text_Font.__registeredFonts.push(instance);
	}
};
openfl_text_Font.__fromLimeFont = function(value) {
	var font = new openfl_text_Font();
	font.name = value.name;
	font.src = value.src;
	return font;
};
openfl_text_Font.__super__ = lime_text_Font;
openfl_text_Font.prototype = $extend(lime_text_Font.prototype,{
	fontStyle: null
	,fontType: null
	,get_fontName: function() {
		return this.name;
	}
	,set_fontName: function(value) {
		return this.name = value;
	}
	,__class__: openfl_text_Font
	,__properties__: $extend(lime_text_Font.prototype.__properties__,{set_fontName:"set_fontName",get_fontName:"get_fontName"})
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$eot = function() {
	var font = new _$_$ASSET_$_$fonts_$calibri_$gdi_$eot();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_calibri_gdi_eot"] = _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$eot;
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$eot.__name__ = ["__ASSET__OPENFL__fonts_calibri_gdi_eot"];
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$eot.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$eot.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$eot
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$svg = function() {
	var font = new _$_$ASSET_$_$fonts_$calibri_$gdi_$svg();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_calibri_gdi_svg"] = _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$svg;
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$svg.__name__ = ["__ASSET__OPENFL__fonts_calibri_gdi_svg"];
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$svg.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$svg.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$svg
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$ttf = function() {
	var font = new _$_$ASSET_$_$fonts_$calibri_$gdi_$ttf();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_calibri_gdi_ttf"] = _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$ttf;
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$ttf.__name__ = ["__ASSET__OPENFL__fonts_calibri_gdi_ttf"];
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$ttf.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$ttf.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$ttf
});
var _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$woff = function() {
	var font = new _$_$ASSET_$_$fonts_$calibri_$gdi_$woff();
	this.src = font.src;
	this.name = font.name;
	openfl_text_Font.call(this);
};
$hxClasses["__ASSET__OPENFL__fonts_calibri_gdi_woff"] = _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$woff;
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$woff.__name__ = ["__ASSET__OPENFL__fonts_calibri_gdi_woff"];
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$woff.__super__ = openfl_text_Font;
_$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$woff.prototype = $extend(openfl_text_Font.prototype,{
	__class__: _$_$ASSET_$_$OPENFL_$_$fonts_$calibri_$gdi_$woff
});
var Desk = function() {
	this.legalMoves = [];
	this.x2IsOn = false;
	this.curUndoSaves = [];
	this.gameFinished = false;
	this.movesStack = [];
	this.maxNumNoCompress = 0;
	this.winPoints = 5;
	this.curRound = 0;
	this.numPointsRound = [0,0];
	this.numPoints = [0,0];
	this.chipsAnimEndFun = null;
	this.diesAnimEndFun = null;
	this.die2Time = 0;
	this.die1Time = 0;
	this.die2Frames = [];
	this.die1Frames = [];
	this.isDiesAnim = false;
	this.isHor = false;
	this.bearsVert = [];
	this.bearsHor = [];
	this.turnNumMoves = 0;
	this.numMovesRemain = 0;
	this.selectedChip = null;
	this.diesRolled = false;
	this.isChipAnimation = false;
	this.chipsAwayitingAnim = [];
	this.chipsAnimStack = [];
	this.die4Pos = new openfl_geom_Point(542,289);
	this.die3Pos = new openfl_geom_Point(472,289);
	this.die2Pos = new openfl_geom_Point(402,289);
	this.die1Pos = new openfl_geom_Point(332,289);
	this.isDeal = true;
	this.cellsCoords = [];
	this.barRect = new openfl_geom_Rectangle(305,21,29,600);
	this.centerBarWidth = 27;
	this.lineChessGapY = 48;
	this.centerHeight = 45;
	this.bersChipsHeight = 12;
	this.vertBarRect = new openfl_geom_Rectangle(15,20,52,182);
	this.horBarRect = new openfl_geom_Rectangle(20,15,182,52);
	this.rightFieldRect = new openfl_geom_Rectangle(335.5,26,286,594);
	this.leftFieldRect = new openfl_geom_Rectangle(17.5,26,286,594);
	this.fieldRect = new openfl_geom_Rectangle(15,23,610,597);
	this.cellRect = new openfl_geom_Rectangle(0,0,49,290);
	this.cellWidth = 0;
	this.oy = 0;
	this.ox = 0;
	this.startTime = 0;
	this.curDrawAiAskWait = 0;
	this.maxDrawAiAskWait = 30;
	this.minDrawAiAskWait = 10;
	this.hideHints = false;
	this.twoPlayersViewOption = 1;
	this.inversedColors = false;
	this.movingChess = null;
	this.computerLevel = 2;
	this.playersType = ["human","computer"];
	this.isBusy = true;
	this._isBusy = true;
	this.legalMovesHighlights = [];
	this.isMDown = false;
	this.hp = new openfl_geom_Point();
	this.chips = [];
	this.bgsArr = [];
	this.curThemeChess = 1;
	this.curTheme = 1;
	DisplayObjectContainerBatch.call(this);
	Desk.current = this;
	this.main = Main.current;
	this.die1Display = new Die();
	this.die2Display = new Die();
	this.die3Display = new Die();
	this.die4Display = new Die();
	this.die1Display.parent = this;
	this.die2Display.parent = this;
	this.die3Display.parent = this;
	this.die4Display.parent = this;
	this.die1Display.x = this.die1Pos.x;
	this.die1Display.y = this.die1Pos.y;
	this.die2Display.x = this.die2Pos.x;
	this.die2Display.y = this.die2Pos.y;
	this.die3Display.x = this.die3Pos.x;
	this.die3Display.y = this.die3Pos.y;
	this.die4Display.x = this.die4Pos.x;
	this.die4Display.y = this.die4Pos.y;
	this.deskImg = new DisplayObjectBatch(this.main.batch,"desk_" + this.curTheme);
	this.deskImg.parent = this;
	this.rollBtn = new DisplayObjectBatch(this.main.batch,"RollDiceBtn");
	this.x2Btn = new DisplayObjectBatch(this.main.batch,"x2Btn");
	this.rollBtn.parent = this;
	this.x2Btn.parent = this;
	this.rollBtn.visible = this.x2Btn.visible = false;
	this.rollBtn.x = this.deskImg.x + this.leftFieldRect.x + this.leftFieldRect.width / 2 - this.rollBtn.get_width() / 2;
	this.rollBtn.y = this.deskImg.y + this.leftFieldRect.y + this.leftFieldRect.height / 2 - this.rollBtn.get_height() / 2;
	this.x2Btn.x = this.deskImg.x + this.rightFieldRect.x + this.rightFieldRect.width / 2 - this.rollBtn.get_width() / 2;
	this.x2Btn.y = this.deskImg.y + this.rightFieldRect.y + this.rightFieldRect.height / 2 - this.rollBtn.get_height() / 2;
	this.aiThinkingMC = new AiThinkMC();
	this.aiThinkingMC.set_visible(false);
	this.aiThinkingMC.set_parent(this);
	this.chipRect = this.main.batch.getImgRect("chip_white_1");
	this.selectedChipHighlight = new DisplayObjectBatch(this.main.batch,"chip_highlight");
	this.selectedChipHighlight.visible = false;
	this.selectedChipHighlight.parent = this;
	var sizeX = this.leftFieldRect.width / 6;
	this.cellWidth = sizeX;
	var p;
	var isTop = false;
	var isLeft = false;
	var _g = 0;
	while(_g < 24) {
		var i = _g++;
		p = new openfl_geom_Point();
		isTop = i > 11;
		if(i > 5) {
			isLeft = i < 18;
		} else {
			isLeft = false;
		}
		if(isTop) {
			if(isLeft) {
				p.x = this.leftFieldRect.x + sizeX / 2 + sizeX * (i - 12);
			} else {
				p.x = this.rightFieldRect.x + sizeX / 2 + sizeX * (i - 18);
			}
			p.y = this.leftFieldRect.y;
		} else {
			if(isLeft) {
				p.x = this.leftFieldRect.get_right() - sizeX / 2 - sizeX * (i - 6);
			} else {
				p.x = this.rightFieldRect.get_right() - sizeX / 2 - sizeX * i;
			}
			p.y = this.leftFieldRect.get_bottom();
		}
		this.cellsCoords.push(p);
	}
	if(!this.inversedColors) {
		this.cellsCoords.reverse();
	}
	var legalHighlight;
	var _g1 = 0;
	while(_g1 < 24) {
		var i1 = _g1++;
		legalHighlight = new DisplayObjectBatch(this.main.batch,"highlight");
		legalHighlight.tx = legalHighlight.get_width() / 2;
		legalHighlight.ty = legalHighlight.get_height();
		if(i1 > 11) {
			legalHighlight.scaleY = -1;
			legalHighlight.y += 2;
		}
		legalHighlight.x = this.cellsCoords[i1].x;
		legalHighlight.y = this.cellsCoords[i1].y;
		legalHighlight.parent = this;
		this.legalMovesHighlights.push(legalHighlight);
	}
	var dobj = new DisplayObjectBatch(this.main.batch,"bar_vert");
	dobj.parent = this;
	dobj.x = this.deskImg.x + this.deskImg.get_width();
	dobj.y = this.deskImg.y;
	this.bearsHor.push(dobj);
	dobj = new DisplayObjectBatch(this.main.batch,"bar_vert");
	dobj.parent = this;
	dobj.x = this.deskImg.x + this.deskImg.get_width();
	dobj.y = this.deskImg.y + this.deskImg.get_height() - dobj.get_height() - 15;
	this.bearsHor.push(dobj);
	dobj = new DisplayObjectBatch(this.main.batch,"bear_highlight_vert_1");
	dobj.parent = this;
	dobj.tx = dobj.get_width() / 2;
	dobj.ty = dobj.get_height() / 2;
	dobj.x = this.bearsHor[0].x + this.bearsHor[0].get_width() / 2;
	dobj.y = this.bearsHor[0].y + this.bearsHor[0].get_height() / 2;
	this.bearsHor.push(dobj);
	dobj = new DisplayObjectBatch(this.main.batch,"bear_highlight_vert_1");
	dobj.parent = this;
	dobj.tx = dobj.get_width() / 2;
	dobj.ty = dobj.get_height() / 2;
	dobj.x = this.bearsHor[1].x + this.bearsHor[1].get_width() / 2;
	dobj.y = this.bearsHor[1].y + this.bearsHor[1].get_height() / 2;
	this.bearsHor.push(dobj);
	dobj = new DisplayObjectBatch(this.main.batch,"bar_hor");
	dobj.parent = this;
	dobj.x = this.deskImg.x + this.deskImg.get_width() - dobj.get_width();
	dobj.y = this.deskImg.y - dobj.get_height();
	this.bearsVert.push(dobj);
	dobj = new DisplayObjectBatch(this.main.batch,"bar_hor");
	dobj.parent = this;
	dobj.x = this.deskImg.x + this.deskImg.get_width() - dobj.get_width();
	dobj.y = this.deskImg.y + this.deskImg.get_height() - 15;
	this.bearsVert.push(dobj);
	dobj = new DisplayObjectBatch(this.main.batch,"bear_highlight_hor_1");
	dobj.parent = this;
	dobj.tx = dobj.get_width() / 2;
	dobj.ty = dobj.get_height() / 2;
	dobj.x = this.bearsVert[0].x + this.bearsVert[0].get_width() / 2;
	dobj.y = this.bearsVert[0].y + this.bearsVert[0].get_height() / 2;
	this.bearsVert.push(dobj);
	dobj = new DisplayObjectBatch(this.main.batch,"bear_highlight_hor_1");
	dobj.parent = this;
	dobj.tx = dobj.get_width() / 2;
	dobj.ty = dobj.get_height() / 2;
	dobj.x = this.bearsVert[1].x + this.bearsVert[1].get_width() / 2;
	dobj.y = this.bearsVert[1].y + this.bearsVert[1].get_height() / 2;
	this.bearsVert.push(dobj);
	this.x2Die = new DisplayObjectBatch(this.main.batch,"x2_64_" + 1);
	this.x2Die.parent = this;
	this.x2Die.tx = this.x2Die.get_width() / 2;
	this.x2Die.ty = this.x2Die.get_height() / 2;
	this.x2Die.x = this.deskImg.x + this.barRect.x + this.barRect.width / 2;
	this.x2Die.y = this.deskImg.y + this.barRect.y + this.barRect.height / 2;
	this.maxNumNoCompress = Math.floor((this.cellRect.height - this.chipRect.height) / this.lineChessGapY);
	this.onResize();
};
$hxClasses["Desk"] = Desk;
Desk.__name__ = ["Desk"];
Desk.current = null;
Desk.__super__ = DisplayObjectContainerBatch;
Desk.prototype = $extend(DisplayObjectContainerBatch.prototype,{
	curTheme: null
	,curThemeChess: null
	,bgsArr: null
	,bg: null
	,main: null
	,deskImg: null
	,chips: null
	,animatingChip: null
	,gameEngine: null
	,game: null
	,match: null
	,player1: null
	,player2: null
	,hp: null
	,isMDown: null
	,legalMovesHighlights: null
	,selectedChipHighlight: null
	,_isBusy: null
	,isBusy: null
	,get_isBusy: function() {
		if(!(this._isBusy || this.isChipAnimation)) {
			return this.get_isDiesAnim();
		} else {
			return true;
		}
	}
	,set_isBusy: function(val) {
		this._isBusy = val;
		return this._isBusy;
	}
	,playersType: null
	,computerLevel: null
	,movingChess: null
	,inversedColors: null
	,twoPlayersViewOption: null
	,hideHints: null
	,minDrawAiAskWait: null
	,maxDrawAiAskWait: null
	,curDrawAiAskWait: null
	,startTime: null
	,ox: null
	,oy: null
	,aiThinkingMC: null
	,cellWidth: null
	,cellRect: null
	,fieldRect: null
	,leftFieldRect: null
	,rightFieldRect: null
	,horBarRect: null
	,vertBarRect: null
	,bersChipsHeight: null
	,centerHeight: null
	,lineChessGapY: null
	,centerBarWidth: null
	,barRect: null
	,die1Display: null
	,die2Display: null
	,die3Display: null
	,die4Display: null
	,cellsCoords: null
	,chipRect: null
	,isDeal: null
	,die1Pos: null
	,die2Pos: null
	,die3Pos: null
	,die4Pos: null
	,agent: null
	,chipsAnimStack: null
	,chipsAwayitingAnim: null
	,isChipAnimation: null
	,diesRolled: null
	,selectedChip: null
	,numMovesRemain: null
	,turnNumMoves: null
	,bearsHor: null
	,bearsVert: null
	,isHor: null
	,rollBtn: null
	,x2Btn: null
	,x2Die: null
	,isDiesAnim: null
	,get_isDiesAnim: function() {
		if(this.die1Frames.length <= 0) {
			return this.die2Frames.length > 0;
		} else {
			return true;
		}
	}
	,die1Frames: null
	,die2Frames: null
	,die1Time: null
	,die2Time: null
	,diesAnimEndFun: null
	,chipsAnimEndFun: null
	,numPoints: null
	,numPointsRound: null
	,curRound: null
	,winPoints: null
	,maxNumNoCompress: null
	,movesStack: null
	,gameFinished: null
	,difficulty: null
	,curUndoSaves: null
	,x2IsOn: null
	,onResize: function() {
		var wasHor = this.isHor;
		this.isHor = Main.current.sWidth > Main.current.sHeight;
		if(wasHor != this.isHor) {
			this.updateBearStone();
		}
		this.set_x(Main.current.sWidth / 2 - this.deskImg.get_width() / 2);
		this.set_y(Main.current.sHeight / 2 - this.deskImg.get_height() / 2);
		this.aiThinkingMC.set_x(this.deskImg.get_width() / 2);
		this.aiThinkingMC.set_y(this.deskImg.get_height() / 2);
		while(this.bgsArr.length > 0) this.bgsArr.pop();
		var sizeX = 0;
		while(sizeX < Main.current.sWidth) {
			this.bg = new DisplayObjectBatch(this.main.bgBatch,"img/bg.jpg");
			this.bg.x = sizeX;
			this.bg.scaleX = this.bg.scaleY = Main.current.sHeight / this.bg.get_height();
			sizeX += this.bg.get_width() - 2;
			this.bgsArr.push(this.bg);
		}
		var _g1 = 0;
		var _g = this.bgsArr.length;
		while(_g1 < _g) ++_g1;
	}
	,newGame: function(isNewGame) {
		if(isNewGame == null) {
			isNewGame = false;
		}
		while(this.chipsAnimStack.length > 0) this.chipsAnimStack.pop();
		while(this.chipsAwayitingAnim.length > 0) this.chipsAwayitingAnim.pop();
		this.animatingChip = null;
		while(this.movesStack.length > 0) this.movesStack.pop();
		while(this.curUndoSaves.length > 0) this.curUndoSaves.pop();
		if(this.computerLevel == 0) {
			this.difficulty = backgammon_model_enum1_Difficulty.Easy;
		}
		if(this.computerLevel == 1) {
			this.difficulty = backgammon_model_enum1_Difficulty.Medium;
		}
		if(this.computerLevel == 2) {
			this.difficulty = backgammon_model_enum1_Difficulty.Hard;
		}
		if(this.computerLevel == 3) {
			this.difficulty = backgammon_model_enum1_Difficulty.Expert;
		}
		this.bearsHor[0].setBatchId("bar_vert_" + this.curTheme);
		this.bearsHor[1].setBatchId("bar_vert_" + this.curTheme);
		this.bearsVert[0].setBatchId("bar_hor_" + this.curTheme);
		this.bearsVert[1].setBatchId("bar_hor_" + this.curTheme);
		while(this.cellsCoords.length > 0) this.cellsCoords.pop();
		var sizeX = this.leftFieldRect.width / 6;
		this.cellWidth = sizeX;
		var p;
		var isTop = false;
		var isLeft = false;
		var _g = 0;
		while(_g < 24) {
			var i = _g++;
			p = new openfl_geom_Point();
			isTop = i > 11;
			if(i > 5) {
				isLeft = i < 18;
			} else {
				isLeft = false;
			}
			if(isTop) {
				if(isLeft) {
					p.x = this.leftFieldRect.x + sizeX / 2 + sizeX * (i - 12);
				} else {
					p.x = this.rightFieldRect.x + sizeX / 2 + sizeX * (i - 18);
				}
				p.y = this.leftFieldRect.y;
			} else {
				if(isLeft) {
					p.x = this.leftFieldRect.get_right() - sizeX / 2 - sizeX * (i - 6);
				} else {
					p.x = this.rightFieldRect.get_right() - sizeX / 2 - sizeX * i;
				}
				p.y = this.leftFieldRect.get_bottom();
			}
			this.cellsCoords.push(p);
		}
		if(!this.inversedColors) {
			this.cellsCoords.reverse();
		}
		var legalHighlight;
		var _g1 = 0;
		while(_g1 < 24) {
			var i1 = _g1++;
			legalHighlight = this.legalMovesHighlights[i1];
			if(i1 > 11 && this.inversedColors || i1 < 12 && !this.inversedColors) {
				legalHighlight.scaleY = -1;
				legalHighlight.ty -= 4;
			} else {
				legalHighlight.scaleY = 1;
			}
			legalHighlight.x = this.cellsCoords[i1].x;
			legalHighlight.y = this.cellsCoords[i1].y;
		}
		this.gameFinished = false;
		this.rollBtn.visible = true;
		this.die1Display.set_isUsed(false);
		this.die2Display.set_isUsed(false);
		this.die3Display.set_isUsed(false);
		this.die4Display.set_isUsed(false);
		this.x2Die.setBatchId("x2_64_" + 1);
		this.x2Die.x = this.deskImg.x + this.barRect.x + this.barRect.width / 2;
		this.x2Die.y = this.deskImg.y + this.barRect.y + this.barRect.height / 2;
		this.isDeal = true;
		this.diesAnimEndFun = null;
		this.chipsAnimEndFun = null;
		this.isDiesAnim = false;
		this.x2Btn.visible = false;
		while(this.die1Frames.length > 0) this.die1Frames.pop();
		while(this.die2Frames.length > 0) this.die2Frames.pop();
		this.die1Time = this.die2Time = 0;
		this.disableDieDisplay();
		if(this.playersType[1] == "computer") {
			this.match = backgammon_model_Match.createDefaultSinglePlayer();
		} else {
			this.match = backgammon_model_Match.createDefaultPassAndPlay();
		}
		this.gameEngine = this.match.game;
		this.game = this.match.game;
		this.agent = new backgammon_ai_Agent(this.game,new backgammon_ai_PubEvalAgentLogic());
		this.deskImg.setBatchId("desk_" + this.curTheme);
		this.resetLegalHighlights();
		this.selectedChipHighlight.visible = false;
		this.curDrawAiAskWait = 0;
		this.main.ingameMenu.reset();
		this.main.ingameMenu.onMoveEnd();
		while(this.chips.length > 0) this.chips.pop().destroy();
		if(this.curDelayActuator != null) {
			motion_Actuate.unload(this.curDelayActuator);
		}
		this.curDelayActuator = null;
		this.aiThinkingMC.set_visible(false);
		this.startTime = Math.floor(new Date().getTime() / 1000);
		this.set_isBusy(true);
		haxe_Timer.delay($bind(this,this.onNewGameReady),400);
		var _g11 = 0;
		var _g2 = this.gameEngine.board.places.length;
		while(_g11 < _g2) {
			var i2 = _g11++;
			var _g3 = 0;
			var _g21 = this.gameEngine.board.places[i2].stones.length;
			while(_g3 < _g21) this.chips.push(new Chip(this.gameEngine.board.places[i2].stones.at(_g3++)));
		}
		this.selectedChip = null;
		if(isNewGame) {
			this.numPoints = [0,0];
			this.curRound = 0;
		} else {
			this.curRound++;
		}
		this.numPointsRound = [0,0];
	}
	,makeComputeMove: function() {
		this.agent.viewBoard();
		var move = this.agent.getMoveChain(this.difficulty).firstMove;
		while(move != null) {
			this.movesStack.push(move.modelMove);
			move = move.nextMove;
		}
		this.agent.cleanUp();
	}
	,darkDie: function(index) {
		if(index == 1) {
			this.die1Display.set_isUsed(true);
		}
		if(index == 2) {
			this.die2Display.set_isUsed(true);
		}
		if(index == 3) {
			this.die3Display.set_isUsed(true);
		}
		if(index == 4) {
			this.die4Display.set_isUsed(true);
		}
	}
	,addStoneMoveAnim: function(stone,dieIndex,modelMove) {
		if(dieIndex == null) {
			dieIndex = -1;
		}
		if(!this.isChipAnimation) {
			var pos = this.getPosition(stone);
			var doBear = false;
			if(this.game.board.endZone1.stones.contains(stone) || this.game.board.endZone2.stones.contains(stone)) {
				pos.x -= this.chipRect.width / 2;
				pos.y -= this.chipRect.height / 2;
				doBear = true;
			}
			if(this.animateChipPos(stone,pos.x,pos.y,doBear,dieIndex,modelMove)) {
				this.isChipAnimation = true;
				return;
			} else {
				return;
			}
		} else {
			var pos1 = this.getPosition(stone);
			var doBear1 = false;
			if(this.game.board.endZone1.stones.contains(stone) || this.game.board.endZone2.stones.contains(stone)) {
				pos1.x -= this.chipRect.width / 2;
				pos1.y -= this.chipRect.height / 2;
				doBear1 = true;
			}
			this.chipsAnimStack.push({ stone : stone, posX : pos1.x, posY : pos1.y, doBear : doBear1, dieIndex : dieIndex, modelMove : modelMove});
			this.chipsAwayitingAnim.push(this.getChipByStone(stone));
		}
	}
	,animateChipPos: function(stone,posX,posY,doBear,dieIndex,modelMove) {
		if(doBear == null) {
			doBear = false;
		}
		this.main.ingameMenu.onMoveEnd();
		var _g1 = 0;
		var _g = this.chips.length;
		while(_g1 < _g) if(this.chips[_g1++].stone == stone) {
			var chip = this.getChipByStone(stone);
			motion_Actuate.tween(chip,0.2 + 0.4 * (Math.sqrt(Math.pow(posX - chip.x,2) + Math.pow(posY - chip.y,2)) / 300),{ x : posX, y : posY}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.chipAnimEnd),[stone,doBear]);
			this.animatingChip = chip;
			HxOverrides.remove(this.chips,chip);
			this.chips.push(chip);
			this.darkDie(dieIndex);
			if(modelMove != null && modelMove.isEnter) {
				this.updateEnzonesStones();
			}
			return true;
		}
		return false;
	}
	,updateEnzonesStones: function() {
		var pos;
		var _g1 = 0;
		var _g = this.game.board.bar.stones.get_count();
		while(_g1 < _g) {
			var i = _g1++;
			pos = this.getPosition(this.game.board.bar.stones.at(i));
			motion_Actuate.tween(this.getChipByStone(this.game.board.bar.stones.at(i)),0.3,{ x : pos.x, y : pos.y});
		}
	}
	,chipAnimEnd: function(stone,doBear) {
		if(doBear == null) {
			doBear = false;
		}
		this.animatingChip = null;
		if(this.chipsAnimStack.length > 0) {
			var data = this.chipsAnimStack.shift();
			this.chipsAwayitingAnim.shift();
			this.animateChipPos(data.stone,data.posX,data.posY,data.doBear,data.dieIndex,data.modelMove);
		} else {
			this.isChipAnimation = false;
			if(this.checkFinishGame()) {
				return;
			}
			if(this.chipsAnimEndFun != null) {
				this.chipsAnimEndFun();
				this.chipsAnimEndFun = null;
			}
			if(this.numMovesRemain == 0) {
				this.disableDieDisplay();
			}
		}
		if(stone != null && doBear) {
			var chip = this.getChipByStone(stone);
			chip.set_isBear(true);
			chip.rotation = !this.isHor?chip.rotation = Math.PI / 2:0;
			var p = this.getPosition(chip.stone);
			chip.x = p.x;
			chip.y = p.y;
		}
	}
	,initialRoll: function() {
		this.selectedChip = null;
		this.numMovesRemain = 2;
		this.turnNumMoves = 2;
		while(true) {
			this.game.player1.die1.roll();
			this.game.player2.die1.roll();
			if(!(this.game.player1.die1.value == this.game.player2.die1.value)) {
				break;
			}
		}
		if(this.game.player1.die1.value > this.game.player2.die1.value) {
			this.game.turn = 1;
			this.game.player1.die2.value = this.game.player2.die1.value;
			this.animateDies([{ val : this.game.player1.die1.value},{ val : this.game.player1.die2.value}]);
			if(this.game.player1.die1.value == this.game.player1.die2.value) {
				this.numMovesRemain = 4;
				this.turnNumMoves = 4;
			}
		} else if(this.game.player1.die1.value < this.game.player2.die1.value) {
			this.game.turn = 2;
			var tmp = this.game.player2.die1.value;
			this.game.player2.die1.value = this.game.player1.die1.value;
			this.game.player2.die2.value = tmp;
			this.animateDies([{ val : this.game.player2.die1.value},{ val : this.game.player2.die2.value}]);
			if(this.game.player2.die1.value == this.game.player2.die2.value) {
				this.numMovesRemain = 4;
				this.turnNumMoves = 4;
			}
		} else {
			this.enableDieDisplay();
			motion_Actuate.tween(this.die1Display,0.3,{ alpha : 0.01}).delay(2).onComplete(0);
			return;
		}
		this.enableDieDisplay();
		this.isDeal = false;
	}
	,roll: function() {
		if(this.checkFinishGame()) {
			return;
		}
		this.die1Display.set_isUsed(false);
		this.die2Display.set_isUsed(false);
		this.die3Display.set_isUsed(false);
		this.die4Display.set_isUsed(false);
		this.selectedChip = null;
		this.diesRolled = true;
		this.numMovesRemain = 2;
		this.turnNumMoves = 2;
		if(this.game.turn == 1) {
			this.game.player1.die1.isUsed = false;
			this.game.player1.die2.isUsed = false;
			this.game.player1.die1.roll();
			this.game.player1.die2.roll();
			this.animateDies([{ val : this.game.player1.die1.value},{ val : this.game.player1.die2.value}]);
			if(this.game.player1.die1.value == this.game.player1.die2.value) {
				this.numMovesRemain = 4;
				this.turnNumMoves = 4;
			}
		} else {
			this.game.player2.die1.isUsed = false;
			this.game.player2.die2.isUsed = false;
			this.game.player2.die1.roll();
			this.game.player2.die2.roll();
			this.animateDies([{ val : this.game.player2.die1.value},{ val : this.game.player2.die2.value}]);
			if(this.game.player2.die1.value == this.game.player2.die2.value) {
				this.numMovesRemain = 4;
				this.turnNumMoves = 4;
			}
		}
		this.enableDieDisplay();
		this.curUndoSaves.push(this.saveGame(-1));
	}
	,noMoves: function() {
		if(!this.isChipAnimation) {
			if(this.checkFinishGame()) {
				return;
			}
			this.showNoMovesWindow();
		} else {
			this.chipsAnimEndFun = $bind(this,this.showNoMovesWindow);
		}
		haxe_Timer.delay($bind(this,this.noMovesInformEnd),1250);
	}
	,noMovesInformEnd: function() {
		if(this.checkFinishGame()) {
			return;
		}
		this.numMovesRemain = 0;
		if(!this.isChipAnimation) {
			this.disableDieDisplay();
		}
		this.changeTurn();
	}
	,resetGame: function() {
		this.game.reset();
		return;
	}
	,playTurn: function() {
		if(this.game.gameOver == false) {
			if(this.playersType[this.game.turn - 1] == "computer") {
				this.agent.viewBoard();
				this.agent.commitMove(this.difficulty);
			}
		}
		backgammon_ai_bg_BgMove.gc();
		backgammon_model_logic_Move.gc();
		backgammon_ai_rep_moves_MoveRep.gc();
	}
	,animateDies: function(data) {
		this.isDiesAnim = true;
		while(this.die1Frames.length > 0) this.die1Frames.pop();
		while(this.die2Frames.length > 0) this.die2Frames.pop();
		this.die1Time = this.die2Time = 0;
		var _g1 = 0;
		var _g = data.length;
		while(_g1 < _g) {
			var i = _g1++;
			var num = 15;
			while(num > 0) {
				if(i == 0) {
					this.die1Frames.push(Std.random(6) + 1);
				}
				if(i == 1) {
					this.die2Frames.push(Std.random(6) + 1);
				}
				--num;
			}
		}
		if(data.length > 0) {
			this.die1Frames.push(data[0].val);
			this.setDieValuesDisplay(this.die1Frames[0],0);
			this.die1Display.visible = true;
		}
		if(data.length > 1) {
			this.die2Frames.push(data[1].val);
			this.setDieValuesDisplay(this.die1Frames[0],this.die2Frames[0]);
			this.die2Display.visible = true;
		}
		this.main.playSpriteSound("dies");
	}
	,changeTurn: function() {
		if(this.game.turn == 1) {
			this.game.turn = 2;
		} else {
			this.game.turn = 1;
		}
		this.selectedChip = null;
		this.diesRolled = false;
		if(this.playersType[this.game.turn - 1] == "human") {
			this.rollBtn.visible = true;
			this.x2Btn.visible = this.x2IsOn && (this.game.doublingControl == this.game.turn || this.game.doublingControl == 0);
		} else {
			this.rollBtn.visible = false;
			this.x2Btn.visible = false;
		}
		while(this.curUndoSaves.length > 0) this.curUndoSaves.pop();
		this.main.ingameMenu.updateHighlightPanel();
	}
	,advanceTurn: function() {
		this.roll();
	}
	,updateChipsPosWithAnim: function() {
		var _g1 = 0;
		var _g = this.chips.length;
		while(_g1 < _g) this.chips[_g1++].updatePos(false);
	}
	,updateChipsFull: function() {
		var _g1 = 0;
		var _g = this.chips.length;
		while(_g1 < _g) this.chips[_g1++].fullUpdate();
		this.updateBearStone();
	}
	,setDieValuesDisplay: function(die1Val,die2Val,die3Val,die4Val) {
		if(die4Val == null) {
			die4Val = 0;
		}
		if(die3Val == null) {
			die3Val = 0;
		}
		if(die2Val == null) {
			die2Val = 0;
		}
		if(die1Val == null) {
			die1Val = 0;
		}
		if(die1Val != 0) {
			this.die1Display.set_value(die1Val);
		}
		if(die2Val != 0) {
			this.die2Display.set_value(die2Val);
		}
		if(die3Val != 0) {
			this.die3Display.set_value(die3Val);
		}
		if(die4Val != 0) {
			this.die4Display.set_value(die4Val);
		}
	}
	,enableDieDisplay: function() {
		this.die1Display.visible = true;
		this.die2Display.visible = true;
		this.die1Display.alpha = 1;
		this.die2Display.alpha = 1;
	}
	,disableDieDisplay: function() {
		this.die1Display.visible = false;
		this.die2Display.visible = false;
		this.die3Display.visible = false;
		this.die4Display.visible = false;
	}
	,onNewGameReady: function() {
		this.set_isBusy(false);
	}
	,getBoardCellPos: function(index) {
		return this.cellsCoords[index].clone();
	}
	,getPosition: function(stone) {
		if(this.game.board.endZone1.stones.contains(stone) || this.game.board.endZone2.stones.contains(stone)) {
			return this.getPositionEndZone(stone);
		}
		var index1 = -1;
		var index2 = -1;
		var doBreak = false;
		var _g1 = 0;
		var _g = this.gameEngine.board.places.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(doBreak) {
				break;
			}
			var _g3 = 0;
			var _g2 = this.gameEngine.board.places[i].stones.length;
			while(_g3 < _g2) {
				var j = _g3++;
				if(this.gameEngine.board.places[i].stones.at(j) == stone) {
					index1 = i;
					index2 = j;
					doBreak = true;
					break;
				}
			}
		}
		if(index1 == -1) {
			if(this.game.board.bar.stones.contains(stone)) {
				var numThisColor = 0;
				var _g11 = 0;
				var _g4 = this.game.board.bar.stones.length;
				while(_g11 < _g4) {
					var i1 = _g11++;
					if(this.game.board.bar.stones.at(i1).color == stone.color && stone != this.game.board.bar.stones.at(i1)) {
						++numThisColor;
					}
				}
				this.hp.x = this.barRect.x + this.barRect.width / 2 - this.chipRect.width / 2;
				if(stone.color == backgammon_model_enum1_Color.Red && !this.inversedColors || stone.color == backgammon_model_enum1_Color.White && this.inversedColors) {
					this.hp.y = this.barRect.y + 100 + numThisColor * this.chipRect.height;
				} else {
					this.hp.y = this.barRect.get_bottom() - this.chipRect.height - 100 - numThisColor * this.chipRect.height;
				}
			}
			return this.hp;
		}
		var numInLine = this.game.board.places[index1].stones.get_count();
		var curChipsGapY = this.lineChessGapY;
		if(this.maxNumNoCompress < numInLine) {
			curChipsGapY = (this.cellRect.height - this.chipRect.height) / numInLine;
		}
		var p = this.cellsCoords[index1];
		var isTop = index1 > 11 && this.inversedColors || index1 < 12 && !this.inversedColors;
		this.hp.x = p.x - this.chipRect.width / 2;
		this.hp.y = p.y + (isTop?curChipsGapY * index2 - 4:-this.chipRect.height - curChipsGapY * index2 + 1);
		return this.hp;
	}
	,updateBearStone: function() {
		if(this.game == null) {
			return;
		}
		var p;
		var chip;
		var _g1 = 0;
		var _g = this.game.board.endZone1.stones.get_count();
		while(_g1 < _g) {
			var i = _g1++;
			p = this.getPositionEndZone(this.game.board.endZone1.stones.at(i));
			chip = this.getChipByStone(this.game.board.endZone1.stones.at(i));
			chip.x = p.x;
			chip.y = p.y;
			chip.rotation = !this.isHor?chip.rotation = Math.PI / 2:0;
		}
		var _g11 = 0;
		var _g2 = this.game.board.endZone2.stones.get_count();
		while(_g11 < _g2) {
			var i1 = _g11++;
			p = this.getPositionEndZone(this.game.board.endZone2.stones.at(i1));
			chip = this.getChipByStone(this.game.board.endZone2.stones.at(i1));
			chip.x = p.x;
			chip.y = p.y;
			chip.rotation = !this.isHor?chip.rotation = Math.PI / 2:0;
		}
	}
	,getPositionEndZone: function(stone) {
		var player1Zone = this.game.board.endZone1.stones.contains(stone);
		var index = player1Zone?this.game.board.endZone1.stones.h.indexOf(stone):this.game.board.endZone2.stones.h.indexOf(stone);
		if(!this.inversedColors) {
			player1Zone = !player1Zone;
		}
		if(index < 0) {
			return null;
		}
		if(this.isHor) {
			var bar = this.bearsHor[player1Zone?0:1];
			this.hp.x = bar.x + this.vertBarRect.x + this.vertBarRect.width / 2;
			this.hp.y = bar.y + this.vertBarRect.y + this.vertBarRect.height - index * this.bersChipsHeight;
		} else {
			var bar1 = this.bearsVert[player1Zone?0:1];
			this.hp.x = bar1.x + this.horBarRect.x + index * this.bersChipsHeight;
			this.hp.y = bar1.y + this.horBarRect.y + this.horBarRect.height / 2;
		}
		return this.hp;
	}
	,resetLegalHighlights: function() {
		var _g1 = 0;
		var _g = this.legalMovesHighlights.length;
		while(_g1 < _g) this.legalMovesHighlights[_g1++].visible = false;
		this.selectedChipHighlight.visible = false;
		this.bearsHor[2].visible = false;
		this.bearsHor[3].visible = false;
		this.bearsVert[2].visible = false;
		this.bearsVert[3].visible = false;
	}
	,undoMoves: function(n) {
	}
	,legalMoves: null
	,click: function() {
		if(!this.diesRolled && this.rollBtn.hitTestPointSimple(this.main.get_mouseX(),this.main.get_mouseY()) && !this.isChipAnimation) {
			this.rollBtn.visible = this.x2Btn.visible = false;
			this.advanceTurn();
			return;
		}
		if(!this.diesRolled && this.x2Btn.visible && this.x2Btn.hitTestPointSimple(this.main.get_mouseX(),this.main.get_mouseY()) && !this.isChipAnimation) {
			this.x2Btn.visible = false;
			if(this.playersType[2 - this.game.turn] == "computer") {
				if(this.agent.shouldAcceptDouble()) {
					this.showDoubleAcceptWindow();
				} else {
					this.showDoubleRejectWindow();
				}
			} else {
				this.askPlayerx2();
			}
			return;
		}
		if(this.rollBtn.visible) {
			return;
		}
		var boardPlaceIndex = this.getLineIndexUnderMouse();
		var moveChain = null;
		var barStone = null;
		if(boardPlaceIndex == -1) {
			var _g1 = 0;
			var _g = this.chips.length;
			while(_g1 < _g) {
				var i = _g1++;
				var tmp;
				if(this.game.board.bar.stones.contains(this.chips[i].stone)) {
					var tmp1 = this.main.get_mouseX();
					var tmp2 = this.main.get_mouseY();
					tmp = this.chips[i].hitTestPointSimple(tmp1,tmp2);
				} else {
					tmp = false;
				}
				if(tmp) {
					barStone = this.chips[i].stone;
				}
			}
		}
		if(boardPlaceIndex > -1 && boardPlaceIndex < 25) {
			moveChain = this.game.getMoveChains(this.game,this.selectedChip != null?this.chipIsOnBar(this.selectedChip)?this.selectedChip.stone:this.game.board.places[this.getStoneBoardIdex(this.selectedChip.stone)].stones.get_last():this.game.board.places[boardPlaceIndex].stones.get_last(),this.turnNumMoves - this.numMovesRemain);
		}
		if(barStone != null) {
			moveChain = this.game.getMoveChains(this.game,barStone,this.turnNumMoves - this.numMovesRemain);
		}
		var isClickOnBear = false;
		if(this.selectedChip != null) {
			if(this.isHor && this.bearsHor[this.inversedColors?this.game.turn - 1:this.game.turn].hitTestPointSimple(this.main.get_mouseX(),this.main.get_mouseY())) {
				isClickOnBear = true;
			}
			if(!this.isHor && this.bearsVert[this.inversedColors?this.game.turn - 1:this.game.turn].hitTestPointSimple(this.main.get_mouseX(),this.main.get_mouseY())) {
				isClickOnBear = true;
			}
			moveChain = this.game.getMoveChains(this.game,this.selectedChip.stone,this.turnNumMoves - this.numMovesRemain);
			if(moveChain == null) {
				isClickOnBear = false;
			}
			if(isClickOnBear) {
				isClickOnBear = false;
				var _g11 = 0;
				var _g2 = moveChain.count;
				while(_g11 < _g2) {
					var i1 = _g11++;
					if(isClickOnBear) {
						break;
					}
					var bggMove = moveChain.getAt(i1);
					while(bggMove != null) {
						if(bggMove.modelMove.isBearOff) {
							isClickOnBear = true;
							break;
						}
						bggMove = bggMove.nextMove;
					}
				}
			}
		}
		if(boardPlaceIndex != -1 || barStone != null || isClickOnBear) {
			if(this.selectedChip != null) {
				var bgMove;
				var doBreak = false;
				var stIndex = 0;
				if(isClickOnBear) {
					var _g12 = 0;
					var _g3 = moveChain.count;
					while(_g12 < _g3) {
						var i2 = _g12++;
						if(moveChain.getAt(i2).firstMove.modelMove.isBearOff) {
							stIndex = i2;
							break;
						}
					}
				}
				var _g13 = stIndex;
				var _g4 = moveChain.count;
				while(_g13 < _g4) {
					var i3 = _g13++;
					if(doBreak) {
						break;
					}
					bgMove = moveChain.getAt(i3).firstMove;
					while(bgMove != null) {
						if(bgMove.modelMove.destIndex == boardPlaceIndex || bgMove.modelMove.isBearOff && isClickOnBear) {
							this.playMovesFrom(moveChain.getAt(i3),boardPlaceIndex,!isClickOnBear);
							doBreak = true;
							break;
						}
						bgMove = bgMove.nextMove;
					}
				}
				this.selectedChip = null;
				this.resetLegalHighlights();
				if(!doBreak && (boardPlaceIndex != -1 || barStone != null)) {
					if((barStone != null?barStone:this.game.board.places[boardPlaceIndex].stones.get_last()) != null) {
						this.click();
					}
				}
			} else {
				var selectedStone = barStone != null?barStone:this.game.board.places[boardPlaceIndex].stones.get_last();
				if(selectedStone != null && moveChain != null) {
					this.selectedChip = this.getChipByStone(selectedStone);
					this.showHiglightsForChip(this.selectedChip,moveChain);
				}
			}
		} else {
			if(this.selectedChip != null) {
				this.selectedChip = null;
				this.resetLegalHighlights();
			}
			if(boardPlaceIndex != -1 || barStone != null) {
				if((barStone != null?barStone:this.game.board.places[boardPlaceIndex].stones.get_last()) != null) {
					this.click();
				}
			}
		}
	}
	,playMove: function(move) {
		var kickStone = null;
		if(!move.isBearOff) {
			kickStone = this.game.board.places[move.destIndex].stones.at(0);
			if(kickStone != null && (this.game.board.places[move.destIndex].stones.get_count() > 1 || kickStone.color == move.stone.color)) {
				kickStone = null;
			}
		}
		var wasLine = this.getStoneLine(move.stone);
		this.game.play(move);
		this.main.playSpriteSound("move");
		this.updateLine(wasLine,true,move.stone);
		this.updateLine(this.getStoneLine(move.stone),false,move.stone);
		if(this.turnNumMoves == 4 && this.numMovesRemain > 2) {
			this.game.get_currentPlayer().die1.isUsed = false;
		}
		if(this.turnNumMoves == 4 && this.numMovesRemain > 0) {
			this.game.get_currentPlayer().die2.isUsed = false;
		}
		this.numMovesRemain--;
		this.addStoneMoveAnim(move.stone,this.turnNumMoves != 4?this.game.get_currentPlayer().die1 == move.die?1:2:4 - this.numMovesRemain,move);
		if(kickStone != null) {
			this.addStoneMoveAnim(kickStone);
		}
		this.curUndoSaves.push(this.saveGame(-1));
		if(this.game.getPossibleMoves(this.game.board,this.game.get_currentPlayer(),this.legalMoves).length == 0 && this.numMovesRemain > 0) {
			this.noMoves();
			return;
		}
		if(this.numMovesRemain <= 0) {
			this.changeTurn();
			return;
		}
	}
	,updateLine: function(index,isLeave,activeStone) {
		if(isLeave == null) {
			isLeave = false;
		}
		if(index == -1) {
			return;
		}
		var numInLine = this.game.board.places[index].stones.get_count();
		if(isLeave && this.maxNumNoCompress >= numInLine + 1) {
			return;
		}
		if(!isLeave && this.maxNumNoCompress >= numInLine) {
			return;
		}
		var stone;
		var _g1 = 0;
		var _g = this.game.board.places[index].stones.get_count();
		while(_g1 < _g) {
			var i = _g1++;
			stone = this.game.board.places[index].stones.at(i);
			var pos = this.getPosition(stone);
			if(stone != activeStone) {
				motion_Actuate.tween(this.getChipByStone(this.game.board.places[index].stones.at(i)),0.3,{ y : pos.y});
			}
		}
	}
	,getStoneLine: function(stone) {
		var _g1 = 0;
		var _g = this.game.board.places.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.game.board.places[i].stones.contains(stone)) {
				return i;
			}
		}
		return -1;
	}
	,playMovesFrom: function(movesChain,toIndex,ignoreBearMoves) {
		if(ignoreBearMoves == null) {
			ignoreBearMoves = false;
		}
		if(toIndex == null) {
			toIndex = -1;
		}
		var bgMove = movesChain.firstMove;
		while(bgMove != null) {
			if(ignoreBearMoves && bgMove.modelMove.isBearOff) {
				continue;
			}
			this.resetLegalHighlights();
			this.movesStack.push(bgMove.modelMove);
			this.selectedChip = null;
			if(bgMove.modelMove.destIndex == toIndex) {
				return;
			}
			bgMove = bgMove.nextMove;
		}
	}
	,getLineIndexUnderMouse: function() {
		var isOnLeft = this.leftFieldRect.contains(this.main.get_mouseX() - (this.deskImg.x + this.x),this.main.get_mouseY() - (this.deskImg.y + this.y));
		if(!isOnLeft && !this.rightFieldRect.contains(this.main.get_mouseX() - (this.deskImg.x + this.x),this.main.get_mouseY() - (this.deskImg.y + this.y))) {
			return -1;
		}
		if(this.main.get_mouseY() - (this.deskImg.y + this.y) > this.leftFieldRect.y + this.leftFieldRect.height / 2 - this.centerHeight / 2 && this.main.get_mouseY() - (this.deskImg.y + this.y) < this.leftFieldRect.y + this.leftFieldRect.height / 2 + this.centerHeight / 2) {
			return -1;
		}
		if(this.main.get_mouseY() - (this.deskImg.y + this.y) < this.leftFieldRect.height / 2) {
			if(isOnLeft) {
				var resVal = 12 + Math.floor((this.main.get_mouseX() - (this.deskImg.x + this.x) - this.leftFieldRect.x) / this.cellWidth);
				if(!this.inversedColors) {
					return 23 - resVal;
				} else {
					return resVal;
				}
			} else {
				var resVal1 = 18 + Math.floor((this.main.get_mouseX() - (this.deskImg.x + this.x) - this.rightFieldRect.x) / this.cellWidth);
				if(!this.inversedColors) {
					return 23 - resVal1;
				} else {
					return resVal1;
				}
			}
		} else if(isOnLeft) {
			var resVal2 = 11 - Math.floor((this.main.get_mouseX() - (this.deskImg.x + this.x) - this.leftFieldRect.x) / this.cellWidth);
			if(!this.inversedColors) {
				return 23 - resVal2;
			} else {
				return resVal2;
			}
		} else {
			var resVal3 = 5 - Math.floor((this.main.get_mouseX() - (this.deskImg.x + this.x) - this.rightFieldRect.x) / this.cellWidth);
			if(!this.inversedColors) {
				return 23 - resVal3;
			} else {
				return resVal3;
			}
		}
	}
	,getChipByStone: function(stone) {
		var _g1 = 0;
		var _g = this.chips.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.chips[i].stone == stone) {
				return this.chips[i];
			}
		}
		return null;
	}
	,chipIsOnBar: function(chip) {
		return this.game.board.bar.stones.contains(chip.stone);
	}
	,playPlayerMove: function(chip,move) {
		this.game.play(move);
		move.die.isUsed = true;
		this.addStoneMoveAnim(chip.stone);
		this.resetLegalHighlights();
	}
	,showHiglightsForChip: function(chip,moves) {
		this.resetLegalHighlights();
		var bgMove;
		var _g1 = 0;
		var _g = moves.count;
		while(_g1 < _g) {
			bgMove = moves.getAt(_g1++).firstMove;
			while(bgMove != null) {
				if(!bgMove.modelMove.isBearOff) {
					this.legalMovesHighlights[bgMove.modelMove.destIndex].visible = true;
				} else {
					this.bearsHor[this.inversedColors?2 + (this.game.turn - 1):2 + this.game.turn].visible = true;
					this.bearsVert[this.inversedColors?2 + (this.game.turn - 1):2 + this.game.turn].visible = true;
				}
				bgMove = bgMove.nextMove;
			}
		}
		this.selectedChipHighlight.visible = true;
		this.selectedChipHighlight.x = chip.x - 5;
		this.selectedChipHighlight.y = chip.y - 5;
	}
	,getStoneBoardIdex: function(stone) {
		var _g1 = 0;
		var _g = this.game.board.places.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.game.board.places[i].stones.contains(stone)) {
				return i;
			}
		}
		return -1;
	}
	,stoneIsAonBoard: function(stone) {
		var _g1 = 0;
		var _g = this.game.board.places.length;
		while(_g1 < _g) if(this.game.board.places[_g1++].stones.contains(stone)) {
			return true;
		}
		return false;
	}
	,updateTheme: function() {
		this.deskImg.setBatchId("desk_" + this.curTheme);
		var _g1 = 0;
		var _g = this.chips.length;
		while(_g1 < _g) this.chips[_g1++].updateTheme();
		this.bearsHor[0].setBatchId("bar_vert_" + this.curTheme);
		this.bearsHor[1].setBatchId("bar_vert_" + this.curTheme);
		this.bearsVert[0].setBatchId("bar_hor_" + this.curTheme);
		this.bearsVert[1].setBatchId("bar_hor_" + this.curTheme);
	}
	,computerMove: function() {
		this.makeComputeMove();
	}
	,saveGame: function(slot) {
		var saveObj = { };
		saveObj.numMovesRemain = this.numMovesRemain;
		saveObj.turnNumMoves = this.turnNumMoves;
		saveObj.diesRolled = this.diesRolled;
		saveObj.hideHints = this.hideHints;
		saveObj.inversedColors = this.inversedColors;
		saveObj.playersType = this.playersType;
		saveObj.currentPlayer = this.game.get_currentPlayer() == this.game.player1?1:2;
		saveObj.player1 = this.game.player1;
		saveObj.player2 = this.game.player2;
		saveObj.board = this.game.board;
		saveObj.doublingControl = this.game.doublingControl;
		saveObj.doublingValue = this.game.doublingValue;
		saveObj.turn = this.game.turn;
		saveObj.curTheme = this.curTheme;
		saveObj.curThemeChess = this.curThemeChess;
		saveObj.computerLevel = this.computerLevel;
		saveObj.inversedColors = this.inversedColors;
		saveObj.x2IsOn = this.x2IsOn;
		saveObj.hideHints = this.hideHints;
		saveObj.isDeal = this.isDeal;
		saveObj.numPoints = this.numPoints;
		saveObj.numPointsRound = this.numPointsRound;
		saveObj.curRound = this.curRound;
		saveObj.winPoints = this.winPoints;
		saveObj.gameFinished = this.gameFinished;
		saveObj.rollBtnVis = this.rollBtn.visible;
		saveObj.x2BtnVis = this.x2Btn.visible;
		saveObj.die1IsUsed = this.die1Display.isUsed;
		saveObj.die2IsUsed = this.die2Display.isUsed;
		saveObj.die3IsUsed = this.die3Display.isUsed;
		saveObj.die4IsUsed = this.die4Display.isUsed;
		var saveString = JSON.stringify(saveObj);
		var mnth = new Date().getMonth() + 1;
		var saveName = new Date().getFullYear() + "." + (mnth < 10?"0" + mnth:mnth + "") + "." + (new Date().getDate() < 10?"0" + new Date().getDate():new Date().getDate() + "");
		if(slot != -1) {
			var savesArr = LocalSaves.getVar("saves") != null?LocalSaves.getVar("saves"):[];
			savesArr[slot] = saveName;
			LocalSaves.setVar("saves",savesArr);
			LocalSaves.setVar(saveName,saveString);
			return saveName;
		} else {
			return saveString;
		}
	}
	,loadSave: function(slot,fromString) {
		if(fromString == null) {
			fromString = "";
		}
		var saveObj = null;
		if(slot == -1 && fromString != "") {
			saveObj = JSON.parse(fromString);
		} else {
			var saves = LocalSaves.getVar("saves") != null?LocalSaves.getVar("saves"):null;
			if(saves == null || saves[slot] == null) {
				return false;
			}
			var saveName = saves[slot];
			if(LocalSaves.getVar(saveName) == null) {
				return false;
			}
			var saveString = LocalSaves.getVar(saveName);
			saveObj = JSON.parse(saveString);
		}
		this.numMovesRemain = saveObj.numMovesRemain;
		this.turnNumMoves = saveObj.turnNumMoves;
		this.diesRolled = saveObj.diesRolled;
		this.hideHints = saveObj.hideHints;
		this.inversedColors = saveObj.inversedColors;
		this.x2IsOn = saveObj.x2IsOn;
		this.playersType = saveObj.playersType;
		this.game.doublingControl = saveObj.doublingControl;
		this.game.doublingValue = saveObj.doublingValue;
		this.game.player1.color = saveObj.player1.color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
		this.game.player2.color = saveObj.player2.color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
		this.game.player1.die1.color = saveObj.player1.die1.color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
		this.game.player1.die2.color = saveObj.player1.die2.color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
		this.game.player2.die1.color = saveObj.player2.die1.color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
		this.game.player2.die2.color = saveObj.player2.die2.color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
		this.game.player1.die1.isUsed = saveObj.player1.die1.isUsed;
		this.game.player1.die2.isUsed = saveObj.player1.die2.isUsed;
		this.game.player2.die1.isUsed = saveObj.player2.die1.isUsed;
		this.game.player2.die2.isUsed = saveObj.player2.die2.isUsed;
		this.game.player1.die1.value = saveObj.player1.die1.value;
		this.game.player1.die2.value = saveObj.player1.die2.value;
		this.game.player2.die1.value = saveObj.player2.die1.value;
		this.game.player2.die2.value = saveObj.player2.die2.value;
		this.game.turn = saveObj.turn;
		this.setDieValuesDisplay(this.game.get_currentPlayer().die1.value,this.game.get_currentPlayer().die2.value);
		this.curTheme = saveObj.curTheme;
		this.curThemeChess = saveObj.curThemeChess;
		this.computerLevel = saveObj.computerLevel;
		this.inversedColors = saveObj.inversedColors;
		this.hideHints = saveObj.hideHints;
		this.isDeal = saveObj.isDeal;
		this.numPoints = saveObj.numPoints;
		this.numPointsRound = saveObj.numPointsRound;
		this.curRound = saveObj.curRound;
		this.winPoints = saveObj.winPoints;
		this.gameFinished = saveObj.gameFinished;
		if(this.computerLevel == 0) {
			this.difficulty = backgammon_model_enum1_Difficulty.Easy;
		}
		if(this.computerLevel == 1) {
			this.difficulty = backgammon_model_enum1_Difficulty.Medium;
		}
		if(this.computerLevel == 2) {
			this.difficulty = backgammon_model_enum1_Difficulty.Hard;
		}
		if(this.computerLevel == 3) {
			this.difficulty = backgammon_model_enum1_Difficulty.Expert;
		}
		this.rollBtn.visible = saveObj.rollBtnVis;
		this.x2Btn.visible = saveObj.x2BtnVis;
		this.game.board.loadFrom(saveObj.board);
		this.resetLegalHighlights();
		this.selectedChip = null;
		saveObj.player1 = this.game.player1;
		saveObj.player2 = this.game.player2;
		saveObj.board = this.game.board;
		this._isBusy = false;
		this.isChipAnimation = false;
		while(this.chipsAnimStack.length > 0) this.chipsAnimStack.pop();
		while(this.chipsAwayitingAnim.length > 0) this.chipsAwayitingAnim.pop();
		var _g1 = 0;
		var _g = this.chips.length;
		while(_g1 < _g) motion_Actuate.stop(this.chips[_g1++]);
		this.animatingChip = null;
		while(this.die1Frames.length > 0) this.die1Frames.pop();
		while(this.die1Frames.length > 0) this.die2Frames.pop();
		this.die1Frames.push(this.game.get_currentPlayer().die1.value);
		this.die2Frames.push(this.game.get_currentPlayer().die2.value);
		this.die1Time = this.die2Time = 0;
		this.diesAnimEndFun = null;
		this.chipsAnimEndFun = null;
		this.die1Display.set_isUsed(saveObj.die1IsUsed);
		this.die2Display.set_isUsed(saveObj.die2IsUsed);
		this.die3Display.set_isUsed(saveObj.die3IsUsed);
		this.die4Display.set_isUsed(saveObj.die4IsUsed);
		this.die3Display.visible = this.die4Display.visible = this.turnNumMoves > 2;
		this.updateChipsFull();
		this.updateBearStone();
		this.main.ingameMenu.updateHighlightPanel();
		this.main.ingameMenu.onMoveEnd();
		while(this.movesStack.length > 0) this.movesStack.pop();
		return true;
	}
	,isUndoAvailable: function() {
		if(this.curUndoSaves.length > 1) {
			return this.playersType[this.game.turn - 1] == "human";
		} else {
			return false;
		}
	}
	,undo: function() {
		if(this.curUndoSaves.length > 1) {
			this.curUndoSaves.pop();
		}
		this.loadSave(-1,this.curUndoSaves[this.curUndoSaves.length - 1]);
	}
	,aiDrawResponce: function() {
		return false;
	}
	,curDelayActuator: null
	,delayNewMove: function() {
		this.set_isBusy(true);
		this.curDelayActuator = motion_Actuate.timer(0.6).onComplete($bind(this,this.afterNewMoveDelay));
	}
	,afterNewMoveDelay: function() {
		this.curDelayActuator = null;
		this.set_isBusy(false);
	}
	,showInitialRollWinWindow: function() {
		this.main.ingameMenu.updateHighlightPanel(true);
		return;
	}
	,getChipImNameByPlayer: function(player) {
		if(player == 1) {
			return "chip_" + (!this.inversedColors?"white":"black") + "_" + Desk.current.curThemeChess;
		}
		if(player == 2) {
			return "chip_" + (this.inversedColors?"white":"black") + "_" + Desk.current.curThemeChess;
		}
		return "";
	}
	,showNoMovesWindow: function() {
		this.main.addChild(new InformWindow("",false,null,["moves"],0.5,true));
	}
	,askPlayerx2: function() {
		this.main.addChild(new InformWindow("",true,$bind(this,this.onDoubleResponce),[this.getChipImNameByPlayer(this.game.turn),"dig_12","x2","q_1"]));
	}
	,showDoubleAcceptWindow: function() {
		if(this.game.doublingValue == 0) {
			this.game.doublingValue = 2;
		} else {
			this.game.doublingValue *= 2;
		}
		this.game.doublingControl = 2 - this.game.turn + 1;
		if(this.game.doublingValue > 64) {
			this.game.doublingValue = 64;
		}
		if(this.game.doublingValue >= 64) {
			this.game.doublingControl = 3;
		}
		this.x2Die.setBatchId("x2_" + this.game.doublingValue + "_" + 1);
		var tmp = this.game.turn == 2?this.barRect.y + 30:this.barRect.get_bottom() - 30;
		motion_Actuate.tween(this.x2Die,0.5,{ y : this.deskImg.y + tmp});
		if(this.playersType[2 - this.game.turn] == "computer") {
			this.main.addChild(new InformWindow("",false,null,[this.getChipImNameByPlayer(3 - this.game.turn),"dig_12","x2","ok"],0.5));
		}
	}
	,showDoubleRejectWindow: function() {
		this.finishGame(this.game.turn,true);
	}
	,onDoubleResponce: function(res) {
		if(res) {
			this.showDoubleAcceptWindow();
		} else {
			this.showDoubleRejectWindow();
		}
	}
	,finishGame: function(winner,isDoubleReject) {
		if(isDoubleReject == null) {
			isDoubleReject = false;
		}
		if(this.gameFinished) {
			return;
		}
		this.gameFinished = true;
		this._isBusy = true;
		var isMars = winner == 1?this.game.board.endZone2.stones.get_count() == 0:this.game.board.endZone1.stones.get_count() == 0;
		var isKoks = false;
		if(isMars) {
			if(this.game.board.bar.stones.get_count() > 0) {
				isKoks = true;
			} else {
				var _g1 = winner == 2?0:18;
				var _g = winner == 2?6:23;
				while(_g1 < _g) if(this.game.board.places[_g1++].stones.get_count() > 0) {
					isKoks = true;
					break;
				}
			}
		}
		if(isDoubleReject) {
			isMars = false;
			isKoks = false;
		}
		var curNumPoints = 1;
		curNumPoints = this.game.doublingValue > 0?this.game.doublingValue:1;
		if(isKoks) {
			curNumPoints *= 3;
		} else if(isMars) {
			curNumPoints *= 2;
		}
		this.numPoints[winner - 1] += curNumPoints;
		this.numPointsRound[winner - 1] = curNumPoints;
		this.main.addChild(new FinishScreen());
	}
	,checkFinishGame: function() {
		this.game.gameOverCheck();
		if(this.game.gameOver) {
			this.finishGame(this.game.winner);
		}
		return this.game.gameOver;
	}
	,update: function(frameTime) {
		if(InformWindow.isActive) {
			return;
		}
		if(this.get_isBusy()) {
			var wasDiesAnim = this.die1Frames.length > 0 || this.die2Frames.length > 0;
			if(this.die1Frames.length > 0) {
				this.die1Time += frameTime;
				if(this.die1Time >= 100) {
					this.die1Time = 0;
					this.setDieValuesDisplay(this.die1Frames.shift());
				}
			}
			if(this.die2Frames.length > 0) {
				this.die2Time += frameTime;
				if(this.die2Time >= 100) {
					this.die2Time = 0;
					this.setDieValuesDisplay(0,this.die2Frames.shift());
				}
			}
			if(this.die2Frames.length < 1 && this.die1Frames.length < 1 && wasDiesAnim) {
				if(this.game.get_currentPlayer().die1.value == this.game.get_currentPlayer().die2.value) {
					this.setDieValuesDisplay(0,0,this.game.get_currentPlayer().die1.value,this.game.get_currentPlayer().die1.value);
					this.die3Display.visible = true;
					this.die4Display.visible = true;
				}
				if(this.diesAnimEndFun != null) {
					this.diesAnimEndFun();
				}
				this.diesAnimEndFun = null;
				var resMoves = [];
				this.game.getPossibleMoves(this.game.board,this.game.get_currentPlayer(),resMoves);
				if(resMoves.length == 0) {
					this.noMoves();
					return;
				}
			}
			return;
		}
		if(!this.isChipAnimation && this.movesStack.length > 0) {
			this.playMove(this.movesStack.shift());
			return;
		}
		if(this.isDeal) {
			if(this.rollBtn.visible && this.rollBtn.hitTestPointSimple(this.main.get_mouseX(),this.main.get_mouseY()) && !this.isMDown && this.main.isMouseDown) {
				this.initialRoll();
				this.rollBtn.visible = false;
				this.diesRolled = true;
				this.curUndoSaves.push(this.saveGame(-1));
			}
			this.diesAnimEndFun = $bind(this,this.showInitialRollWinWindow);
			this.isMDown = this.main.isMouseDown;
			return;
		}
		if(this.playersType[this.game.turn - 1] == "human") {
			if(!this.isMDown && this.main.isMouseDown) {
				this.click();
			}
			this.isMDown = this.main.isMouseDown;
		} else {
			this.isMDown = this.main.isMouseDown;
			if(!this.aiThinkingMC.visible) {
				this.aiThinkingMC.set_visible(true);
			} else if(!this.isDeal && !InformWindow.isActive) {
				if(this.x2IsOn && !this.diesRolled && (this.game.doublingControl == 0 || this.game.doublingControl == this.game.turn) && this.game.doublingControl < 64 && Math.random() > 0.5 && this.agent.shouldProposeDouble(this.difficulty)) {
					this.askPlayerx2();
					return;
				} else if(!this.diesRolled) {
					this.roll();
					return;
				}
				var resMoves1 = [];
				this.game.getPossibleMoves(this.game.board,this.game.get_currentPlayer(),resMoves1);
				if(resMoves1.length == 0) {
					this.noMoves();
					return;
				}
				if(resMoves1.length > 0) {
					this.computerMove();
				}
			}
		}
	}
	,depthSort: function(chip1,chip2) {
		if(Math.abs(chip1.y - (this.deskImg.y + this.deskImg.get_height() / 2)) > Math.abs(chip2.y - (this.deskImg.y + this.deskImg.get_height() / 2))) {
			return -1;
		} else {
			return 1;
		}
	}
	,render: function() {
		var _g1 = 0;
		var _g = this.bgsArr.length;
		while(_g1 < _g) this.bgsArr[_g1++].render();
		this.deskImg.render();
		if(this.x2IsOn) {
			this.x2Die.render();
		}
		if(this.isHor) {
			var _g11 = 0;
			var _g2 = this.bearsVert.length - 2;
			while(_g11 < _g2) this.bearsHor[_g11++].render();
		} else {
			var _g12 = 0;
			var _g3 = this.bearsHor.length - 2;
			while(_g12 < _g3) this.bearsVert[_g12++].render();
		}
		if(!this.hideHints) {
			var _g13 = 0;
			var _g4 = this.legalMovesHighlights.length;
			while(_g13 < _g4) {
				var i = _g13++;
				if(this.legalMovesHighlights[i].visible) {
					this.legalMovesHighlights[i].render();
				}
			}
			this.selectedChipHighlight.render();
		}
		this.chips.sort($bind(this,this.depthSort));
		var _g14 = 0;
		var _g5 = this.chips.length;
		while(_g14 < _g5) {
			var i1 = _g14++;
			if(this.chips[i1] != this.animatingChip && this.chipsAwayitingAnim.indexOf(this.chips[i1]) == -1 && !this.game.board.bar.stones.contains(this.chips[i1].stone) && !this.game.board.endZone1.stones.contains(this.chips[i1].stone) && !this.game.board.endZone2.stones.contains(this.chips[i1].stone)) {
				this.chips[i1].render();
			}
		}
		var chip;
		var _g15 = 0;
		var _g6 = this.game.board.bar.stones.get_count();
		while(_g15 < _g6) {
			chip = this.getChipByStone(this.game.board.bar.stones.at(_g15++));
			if(this.animatingChip != chip && this.chipsAwayitingAnim.indexOf(chip) == -1) {
				chip.render();
			}
		}
		var _g16 = 0;
		var _g7 = this.game.board.endZone1.stones.get_count();
		while(_g16 < _g7) {
			chip = this.getChipByStone(this.game.board.endZone1.stones.at(_g16++));
			if(this.animatingChip != chip && this.chipsAwayitingAnim.indexOf(chip) == -1) {
				chip.render();
			}
		}
		var _g17 = 0;
		var _g8 = this.game.board.endZone2.stones.get_count();
		while(_g17 < _g8) {
			chip = this.getChipByStone(this.game.board.endZone2.stones.at(_g17++));
			if(this.animatingChip != chip && this.chipsAwayitingAnim.indexOf(chip) == -1) {
				chip.render();
			}
		}
		var _g18 = 0;
		var _g9 = this.chipsAwayitingAnim.length;
		while(_g18 < _g9) this.chipsAwayitingAnim[_g18++].render();
		if(this.animatingChip != null) {
			this.animatingChip.render();
		}
		if(this.die1Display.visible) {
			this.die1Display.render();
		}
		if(this.die2Display.visible) {
			this.die2Display.render();
		}
		if(this.die3Display.visible) {
			this.die3Display.render();
		}
		if(this.die4Display.visible) {
			this.die4Display.render();
		}
		if(this.isHor) {
			var _g19 = 2;
			var _g10 = this.bearsVert.length;
			while(_g19 < _g10) this.bearsHor[_g19++].render();
		} else {
			var _g110 = 2;
			var _g20 = this.bearsHor.length;
			while(_g110 < _g20) this.bearsVert[_g110++].render();
		}
		if(this.rollBtn.visible && !this.isChipAnimation) {
			this.rollBtn.render();
		}
		if(this.x2Btn.visible && !this.isChipAnimation) {
			this.x2Btn.render();
		}
		this.aiThinkingMC.render();
	}
	,__class__: Desk
	,__properties__: $extend(DisplayObjectContainerBatch.prototype.__properties__,{get_isDiesAnim:"get_isDiesAnim",set_isBusy:"set_isBusy",get_isBusy:"get_isBusy"})
});
var Die = function() {
	this.isUsed = false;
	this.value = 0;
	DisplayObjectBatch.call(this,Main.current.batch,"");
};
$hxClasses["Die"] = Die;
Die.__name__ = ["Die"];
Die.__super__ = DisplayObjectBatch;
Die.prototype = $extend(DisplayObjectBatch.prototype,{
	value: null
	,isUsed: null
	,set_value: function(val) {
		this.value = val;
		this.updateGraphic();
		return val;
	}
	,set_isUsed: function(val) {
		this.isUsed = val;
		this.updateGraphic();
		return val;
	}
	,updateGraphic: function() {
		if(this.value == 0) {
			return;
		}
		this.setBatchId("die_" + this.value + "_" + 1 + (this.isUsed?"_dark":""),Main.current.batch);
	}
	,__class__: Die
	,__properties__: $extend(DisplayObjectBatch.prototype.__properties__,{set_isUsed:"set_isUsed",set_value:"set_value"})
});
var EReg = function(r,opt) {
	this.r = new RegExp(r,opt.split("u").join(""));
};
$hxClasses["EReg"] = EReg;
EReg.__name__ = ["EReg"];
EReg.prototype = {
	r: null
	,match: function(s) {
		if(this.r.global) {
			this.r.lastIndex = 0;
		}
		this.r.m = this.r.exec(s);
		this.r.s = s;
		return this.r.m != null;
	}
	,matched: function(n) {
		if(this.r.m != null && n >= 0 && n < this.r.m.length) {
			return this.r.m[n];
		} else {
			throw new js__$Boot_HaxeError("EReg::matched");
		}
	}
	,__class__: EReg
};
var FPSMeter = function(x,y,color) {
	if(color == null) {
		color = 16711680;
	}
	if(y == null) {
		y = 10;
	}
	if(x == null) {
		x = 10;
	}
	this.curDrawTime = 10;
	this.initDrawTime = 200;
	this.lastTime = 0;
	this.cacheCount = -1;
	openfl_display_Sprite.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.cacheCount = 0;
	this.times = [];
	this.txt = new openfl_display_Bitmap(new openfl_display_BitmapData(50,20,true,0),1,true);
	this.txt.set_x(10);
	this.txt.set_y(10);
	this.addChild(this.txt);
	this.numericFont = Main.current.numericFontFps;
};
$hxClasses["FPSMeter"] = FPSMeter;
FPSMeter.__name__ = ["FPSMeter"];
FPSMeter.__super__ = openfl_display_Sprite;
FPSMeter.prototype = $extend(openfl_display_Sprite.prototype,{
	currentFPS: null
	,cacheCount: null
	,times: null
	,lastTime: null
	,txt: null
	,numericFont: null
	,initDrawTime: null
	,curDrawTime: null
	,this_onEnterFrame: function(event) {
		var t = openfl_Lib.getTimer();
		var frameTime = t - this.lastTime;
		if(frameTime == 0) {
			return;
		}
		this.lastTime = t;
		var resFPS = 1000 / frameTime;
		if(this.cacheCount == -1) {
			this.cacheCount = Math.round(resFPS);
		}
		this.currentFPS = Math.round((resFPS + this.cacheCount * 7) / 8);
		if(this.currentFPS != this.cacheCount && this.get_visible()) {
			this.txt.bitmapData.fillRect(this.txt.bitmapData.rect,0);
			this.numericFont.drawTo(this.txt.bitmapData,Std.string(Math.round(this.currentFPS)),this.txt.bitmapData.width / 2,0,true);
		}
		this.cacheCount = Math.round(this.currentFPS);
	}
	,update: function(frameTime) {
		var resFPS = 1000 / frameTime;
		if(this.cacheCount == -1) {
			this.cacheCount = Math.round(resFPS);
		}
		this.currentFPS = Math.round((resFPS + this.cacheCount * 3) / 4);
		this.curDrawTime -= frameTime;
		if(this.curDrawTime <= 0) {
			this.curDrawTime = this.initDrawTime;
			if(this.currentFPS != this.cacheCount && this.get_visible()) {
				this.txt.bitmapData.fillRect(this.txt.bitmapData.rect,0);
				this.numericFont.drawTo(this.txt.bitmapData,Std.string(Math.round(this.currentFPS)),this.txt.bitmapData.width / 2,0,true);
			}
		}
		this.cacheCount = Math.round(this.currentFPS);
	}
	,__class__: FPSMeter
});
var Menu = function() {
	this.initHeight = 1136;
	this.moveByResizeCallBack = null;
	this.moveThisOnResize = false;
	this.remakeThisOnResize = false;
	this.lastWasMouseUp = false;
	this.stopPropagation = true;
	this.isImagesFromAtlas = true;
	this.setedSnap = false;
	this.curID = 5555555;
	this.lastTime = -1;
	this.hasUpdateFunction = false;
	this.imgesRoot = "img/";
	this.hitAlphaThereshold = 200;
	this.removedListeners = false;
	this.isSimpleHittest = true;
	openfl_display_Sprite.call(this);
	this.main = Main.current;
	this.sWidth = this.main.sWidth;
	this.sHeight = this.main.sHeight;
	this.graphicScale = Config.graphicScale;
	this.btnsArr = new haxe_ds_IntMap();
	this.btnsFuntions = new haxe_ds_IntMap();
	this.mcsArr = [];
	this.threeStateBtns = [];
	this.scrollContainers = [];
	this.textFields = [];
	this.hp = new openfl_geom_Point();
	this.mHm = new openfl_geom_Matrix();
	this.mainBatch = this.main.batch;
	this.addEventListener("click",$bind(this,this.btnClick));
	this.addEventListener("touchEnd",$bind(this,this.btnClick));
	this.addEventListener("enterFrame",$bind(this,this.resizeCheck));
};
$hxClasses["Menu"] = Menu;
Menu.__name__ = ["Menu"];
Menu.replaceTxtWithStatic = function(source,search,replacement) {
	var ind = source.indexOf(search);
	if(ind == -1 || search == null || search == "null") {
		return source;
	}
	return source.substring(0,ind) + replacement + source.substring(ind + search.length,source.length);
};
Menu.getTextField = function(fontName,fontSize,fontColor,bold,align,x,y,width,height,shaddow,shaddowDist,shadAlpha,container,centerParentX,multiline,leading) {
	if(leading == null) {
		leading = 0;
	}
	if(multiline == null) {
		multiline = false;
	}
	if(centerParentX == null) {
		centerParentX = false;
	}
	if(shadAlpha == null) {
		shadAlpha = 0.5;
	}
	if(shaddowDist == null) {
		shaddowDist = 3;
	}
	if(shaddow == null) {
		shaddow = true;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	if(align == null) {
		align = "LEFT";
	}
	if(bold == null) {
		bold = false;
	}
	if(fontColor == null) {
		fontColor = 0;
	}
	if(fontSize == null) {
		fontSize = 20;
	}
	if(fontName == null) {
		fontName = "Arial";
	}
	var mTF = new openfl_text_TextField();
	mTF.set_gridFitType(1);
	mTF.set_embedFonts(true);
	mTF.mouseEnabled = mTF.set_selectable(false);
	var mAlign = null;
	switch(align) {
	case "CENTER":
		mAlign = 0;
		break;
	case "LEFT":
		mAlign = 3;
		break;
	case "RIGHT":
		mAlign = 4;
		break;
	}
	mTF.set_defaultTextFormat(new openfl_text_TextFormat(openfl_Assets.getFont(Reflect.field(Config.fontsShorts,fontName)).name,fontSize | 0,fontColor,bold,false,false,null,null,mAlign,0,0,0,leading));
	if(multiline) {
		mTF.set_multiline(true);
		mTF.set_wordWrap(true);
	} else {
		mTF.set_multiline(false);
	}
	if(width != 0) {
		mTF.set_width(width);
	}
	if(height != 0) {
		mTF.set_height(height);
	}
	mTF.set_x(x);
	mTF.set_y(y);
	mTF.set_text("Hola mundo");
	var prt = container;
	if(prt != null && centerParentX) {
		mTF.set_width(prt.get_width());
	}
	if(container != null) {
		container.addChild(mTF);
	}
	return mTF;
};
Menu.__super__ = openfl_display_Sprite;
Menu.prototype = $extend(openfl_display_Sprite.prototype,{
	btnsArr: null
	,btnsFuntions: null
	,mcsArr: null
	,threeStateBtns: null
	,scrollContainers: null
	,textFields: null
	,isSimpleHittest: null
	,removedListeners: null
	,hitAlphaThereshold: null
	,imgesRoot: null
	,lastBm: null
	,main: null
	,sWidth: null
	,sHeight: null
	,graphicScale: null
	,updateFunction: null
	,hasUpdateFunction: null
	,lastTime: null
	,minUpdateTime: null
	,curID: null
	,level: null
	,snapShot: null
	,setedSnap: null
	,fill: null
	,hp: null
	,mHm: null
	,mainBatch: null
	,isImagesFromAtlas: null
	,stopPropagation: null
	,allClickFunction: null
	,lastWasMouseUp: null
	,remakeThisOnResize: null
	,moveThisOnResize: null
	,moveByResizeCallBack: null
	,initHeight: null
	,resizeCheck: function(e) {
		if(this.parent == null || this.main.sWidth == this.sWidth && this.main.sHeight == this.sHeight) {
			return;
		}
		if(this.moveThisOnResize) {
			this.moveByResize();
		} else if(this.remakeThisOnResize && (this.main.sWidth != this.sWidth || this.main.sHeight != this.sHeight)) {
			var remake = Type.createInstance(js_Boot.getClass(this),[]);
			this.parent.addChildAt(remake,this.parent.getChildIndex(this));
			this.close();
			Menu.wasRemake = true;
			return;
		}
		this.sWidth = this.main.sWidth;
		this.sHeight = this.main.sHeight;
		if(this.moveByResizeCallBack != null) {
			this.moveByResizeCallBack();
		}
	}
	,moveByResize: function() {
		if(this.main.sWidth != this.sWidth || this.main.sHeight != this.sHeight) {
			var difX = this.main.sWidth - this.sWidth;
			var _g = this;
			_g.set_x(_g.get_x() + difX / 2);
			var difY = this.main.sHeight - this.sHeight;
			var _g1 = this;
			_g1.set_y(_g1.get_y() + difY / 2);
		}
	}
	,setSnapShot: function() {
		if(this.snapShot != null && this.snapShot.parent != null) {
			this.snapShot.parent.removeChild(this.snapShot);
		}
		this.snapShot = null;
		this.snapShot = new openfl_display_Bitmap(new openfl_display_BitmapData(Math.ceil(this.sWidth),Math.ceil(this.sHeight),true,0),1);
		this.mHm.identity();
		var ms = this.main.get_scaleX();
		this.main.set_scaleX(this.main.set_scaleY(1));
		this.snapShot.bitmapData.draw(this,this.mHm);
		this.main.set_scaleX(this.main.set_scaleY(ms));
		this.main.addChild(this.snapShot);
		this.set_visible(false);
		this.setedSnap = true;
		return this.snapShot;
	}
	,removeSnapShot: function() {
		this.setedSnap = false;
		haxe_Timer.delay($bind(this,this.fullRemoveScreenShot),20);
	}
	,fullRemoveScreenShot: function() {
		if(this.setedSnap) {
			return;
		}
		this.set_visible(true);
		if(this.snapShot != null && this.snapShot.parent != null) {
			this.snapShot.parent.removeChild(this.snapShot);
		}
		this.snapShot = null;
	}
	,getFillOverlay: function(color,container) {
		if(color == null) {
			color = -2013265920;
		}
		if(this.main.overlayMaker != null) {
			color = 0;
		} else {
			this.main.overlayMaker = this;
		}
		if(this.fill != null) {
			this.fill.removeEventListener("click",$bind(this,this.stopEventForOverlay));
			this.fill.removeEventListener("click",$bind(this,this.stopEventForOverlay));
		}
		if(container == null) {
			container = this;
		}
		var spr = new openfl_display_Sprite();
		spr.addChild(new openfl_display_Bitmap(new openfl_display_BitmapData(50,50,true,color),1,true));
		spr.set_width(this.sWidth);
		spr.set_height(this.sHeight);
		container.addChild(spr);
		this.curID--;
		this.btnsArr.h[this.curID] = spr;
		this.lastBm = spr;
		this.fill = spr;
		this.fill.addEventListener("click",$bind(this,this.stopEventForOverlay));
		this.fill.addEventListener("click",$bind(this,this.stopEventForOverlay));
		return spr;
	}
	,removeOverlay: function() {
		if(this.fill != null) {
			this.fill.removeEventListener("click",$bind(this,this.stopEventForOverlay));
			this.fill.removeEventListener("click",$bind(this,this.stopEventForOverlay));
			var bm = this.fill.getChildAt(0);
			if(bm != null) {
				bm.bitmapData.dispose();
			}
			if(this.fill.parent != null) {
				this.fill.parent.removeChild(this.fill);
			}
		}
	}
	,changeOverlayColor: function(color) {
		if(color == null) {
			color = -2013265920;
		}
		if(this.fill != null) {
			var bm = this.fill.getChildAt(0);
			bm.bitmapData.dispose();
			bm.bitmapData = new openfl_display_BitmapData(50,50,true,color);
		}
	}
	,stopEventForOverlay: function(e) {
		e.stopImmediatePropagation();
	}
	,getSprite: function() {
		var spr = new openfl_display_Sprite();
		this.addChild(spr);
		this.curID--;
		this.btnsArr.h[this.curID] = spr;
		return spr;
	}
	,getScrollContainer: function(scrollHeight,scrollWidth,doVerticalScroll,doHorScroll) {
		if(doHorScroll == null) {
			doHorScroll = false;
		}
		if(doVerticalScroll == null) {
			doVerticalScroll = true;
		}
		if(scrollWidth == null) {
			scrollWidth = 0;
		}
		if(scrollHeight == null) {
			scrollHeight = 0;
		}
		var scrCont = new ScrollContainer(scrollHeight,scrollWidth,doVerticalScroll,doHorScroll);
		this.addChild(scrCont);
		this.scrollContainers.push(scrCont);
		if(!this.hasUpdateFunction) {
			this.addEventListener("enterFrame",$bind(this,this.updatePr));
		}
		return scrCont;
	}
	,get_level: function() {
		return Config.currentLevel;
	}
	,replaceTxtWith: function(source,search,replacement) {
		var ind = source.indexOf(search);
		if(ind == -1 || search == null || search == "null") {
			return source;
		}
		return source.substring(0,ind) + replacement + source.substring(ind + search.length,source.length);
	}
	,btnClick: function(e) {
		if(this.main.fullStop) {
			return;
		}
		if(this.allClickFunction != null) {
			this.allClickFunction();
		}
		this.removeListeners(e);
		if(this.stopPropagation) {
			e.stopImmediatePropagation();
		}
		if(!this.isSimpleHittest) {
			this.btnClickAlpha(e);
			return;
		}
		if(!this.get_visible() || this.hp == null) {
			return;
		}
		this.hp.x = e.stageX;
		this.hp.y = e.stageY;
		var dobjp;
		var cb;
		var tmp = this.btnsFuntions.keys();
		while(tmp.hasNext()) {
			var i = tmp.next();
			if(this.btnsArr.h.hasOwnProperty(i)) {
				var dObj = this.btnsArr.h[i];
				if(dObj == null) {
					continue;
				}
				var glAlpha = dObj.get_alpha();
				if(dObj.parent != null) {
					glAlpha *= dObj.parent.get_alpha();
				}
				var vis = true;
				dobjp = dObj;
				while(dobjp.parent != null) {
					dobjp = dobjp.parent;
					if(!dobjp.get_visible()) {
						vis = false;
						break;
					}
				}
				if(vis && glAlpha > 0 && dObj.hitTestPoint(this.hp.x,this.hp.y)) {
					if(!js_Boot.__instanceof(dObj,ThreeStateBtn) || this.btnsArr.h[i].isActive) {
						cb = this.btnsFuntions.h[i];
						if(!Reflect.isFunction(cb)) {
							cb.callBack.apply(cb.callBack,cb.params);
						} else {
							cb();
						}
					}
					return;
				}
			}
		}
	}
	,btnClickAlpha: function(e) {
		if(!this.get_visible()) {
			return;
		}
		this.hp.x = e.stageX;
		this.hp.y = e.stageY;
		this.hp = this.globalToLocal(this.hp);
		var childX = 0;
		var childY = 0;
		var tbm;
		var cb;
		var tmp = this.btnsFuntions.keys();
		while(tmp.hasNext()) {
			var i = tmp.next();
			if(this.btnsArr.h.hasOwnProperty(i)) {
				if(js_Boot.__instanceof(this.btnsArr.h[i],openfl_display_Bitmap)) {
					childX = 0;
				} else {
					childX = this.btnsArr.h[i].getChildAt(0).x;
				}
				if(js_Boot.__instanceof(this.btnsArr.h[i],openfl_display_Bitmap)) {
					childY = 0;
				} else {
					childY = this.btnsArr.h[i].getChildAt(0).y;
				}
				if(js_Boot.__instanceof(this.btnsArr.h[i],openfl_display_Bitmap)) {
					tbm = this.btnsArr.h[i];
				} else {
					tbm = this.btnsArr.h[i].getChildAt(0);
				}
				if(this.btnsArr.h[i].visible && this.btnsArr.h[i].alpha > 0 && (tbm.bitmapData.getPixel32(this.hp.x - this.btnsArr.h[i].x - childX | 0,this.hp.y - this.btnsArr.h[i].y - childY | 0) >> 24 & 255) > this.hitAlphaThereshold) {
					if(!js_Boot.__instanceof(this.btnsArr.h[i],ThreeStateBtn) || this.btnsArr.h[i].isActive) {
						cb = this.btnsFuntions.h[i];
						if(!Reflect.isFunction(cb)) {
							cb.callBack.apply(cb.callBack,cb.params);
						} else {
							cb();
						}
					}
					return;
				}
			}
		}
	}
	,removeListeners: function(e) {
		if(!this.removedListeners) {
			if(e.type == "click" || e.type == "mouseDown" || e.type == "mouseMove" || e.type == "mouseUp") {
				this.removeEventListener("touchEnd",$bind(this,this.btnClick));
			} else {
				this.removeEventListener("click",$bind(this,this.btnClick));
			}
			this.removedListeners = true;
		}
	}
	,getBitmapData: function(imgName,batch,dontCache) {
		if(dontCache == null) {
			dontCache = false;
		}
		if(this.isImagesFromAtlas || batch != null) {
			var batchImName = imgName;
			if(imgName.indexOf(".png") != -1 || imgName.indexOf(".jpg") != -1) {
				batchImName = imgName.substring(0,imgName.length - 4);
			}
			var drawBatch = batch != null?batch:this.mainBatch;
			if(drawBatch.getImgId(batchImName) == -1) {
				var rArr = batchImName.split("/");
				batchImName = rArr[rArr.length - 1];
			}
			return drawBatch.getBitmapData(batchImName,dontCache);
		} else {
			return openfl_Assets.getBitmapData(imgName);
		}
	}
	,getBimap: function(imgName,callBack,container,batch) {
		if(imgName.indexOf("/") == -1) {
			imgName = this.imgesRoot + imgName;
		}
		if(container == null) {
			container = this;
		}
		var bm;
		if(this.isImagesFromAtlas || batch != null) {
			if(batch == null) {
				batch = this.mainBatch;
			}
			var batchImName = imgName;
			if(imgName.indexOf(".png") != -1 || imgName.indexOf(".jpg") != -1) {
				batchImName = imgName.substring(0,imgName.length - 4);
			}
			if(batch.getImgId(batchImName) == -1) {
				var rArr = batchImName.split("/");
				batchImName = rArr[rArr.length - 1];
			}
			bm = new openfl_display_Bitmap(batch.getBitmapData(batchImName,true),1,true);
		} else {
			bm = new openfl_display_Bitmap(openfl_Assets.getBitmapData(imgName),1,true);
		}
		container.addChild(bm);
		this.curID--;
		this.btnsArr.h[this.curID] = bm;
		if(callBack != null) {
			this.btnsFuntions.h[this.curID] = callBack;
		}
		this.lastBm = bm;
		return bm;
	}
	,addTwoStatesBtn: function(imgNameAct,imgNamePress,xPos,yPos,centerX,centerY,callBack,container,batch,inativeImg) {
		if(inativeImg == null) {
			inativeImg = "";
		}
		if(centerY == null) {
			centerY = false;
		}
		if(centerX == null) {
			centerX = false;
		}
		if(yPos == null) {
			yPos = 0;
		}
		if(xPos == null) {
			xPos = 0;
		}
		if(this.isImagesFromAtlas || batch != null) {
			var imgNamePress1 = imgNamePress;
			if(imgNamePress1.indexOf(".png") != -1 || imgNamePress1.indexOf(".jpg") != -1) {
				imgNamePress1 = imgNamePress1.substring(0,imgNamePress1.length - 4);
			}
			var rArr = imgNamePress1.split("/");
			imgNamePress1 = rArr[rArr.length - 1];
			if((batch != null?batch:this.mainBatch).getImgId(imgNamePress1) == -1) {
				imgNamePress = imgNameAct;
			}
		} else if(!openfl_Assets.exists(imgNamePress)) {
			imgNamePress = imgNameAct;
		}
		var tsb = new ThreeStateBtn(new openfl_display_Bitmap(this.getBitmapData(imgNameAct,batch),1,true),new openfl_display_Bitmap(this.getBitmapData(imgNamePress,batch),1,true),new openfl_display_Bitmap(this.getBitmapData(inativeImg != ""?inativeImg:imgNameAct,batch),1,true));
		tsb.set_x(xPos);
		tsb.set_y(yPos);
		if(container == null) {
			container = this;
		}
		if(container == null) {
			if(centerX) {
				tsb.set_x(this.sWidth / 2 - tsb.get_width() / 2);
			}
			if(centerY) {
				tsb.set_y(this.sHeight / 2 - tsb.get_height() / 2);
			}
		} else {
			if(centerX) {
				tsb.set_x(container.get_width() / 2 - tsb.get_width() / 2);
			}
			if(centerY) {
				tsb.set_y(container.get_height() / 2 - tsb.get_height() / 2);
			}
		}
		if(!this.hasUpdateFunction) {
			this.addEventListener("enterFrame",$bind(this,this.updatePr));
		}
		container.addChild(tsb);
		this.curID--;
		this.btnsArr.h[this.curID] = tsb;
		if(callBack != null) {
			tsb.callBackId = this.curID;
			this.btnsFuntions.h[this.curID] = callBack;
		}
		this.threeStateBtns.push(tsb);
		return tsb;
	}
	,addButton: function(imgName,xPos,yPos,centerX,centerY,callBack,container,batch) {
		if(centerY == null) {
			centerY = false;
		}
		if(centerX == null) {
			centerX = false;
		}
		if(yPos == null) {
			yPos = 0;
		}
		if(xPos == null) {
			xPos = 0;
		}
		var bm = this.getBimap(imgName,callBack,container,batch);
		bm.set_x(xPos);
		bm.set_y(yPos);
		if(container == null) {
			if(centerX) {
				bm.set_x(this.sWidth / 2 - bm.get_width() / 2);
			}
			if(centerY) {
				bm.set_y(this.sHeight / 2 - bm.get_height() / 2);
			}
		} else {
			if(centerX) {
				bm.set_x(container.get_width() / 2 - bm.get_width() / 2);
			}
			if(centerY) {
				bm.set_y(container.get_height() / 2 - bm.get_height() / 2);
			}
		}
		return bm;
	}
	,addButtonAfter: function(imgName,afterDObj,callBack,xPosOrGap,yPosOrGap,keepAfterX,keepAfterY) {
		if(keepAfterY == null) {
			keepAfterY = false;
		}
		if(keepAfterX == null) {
			keepAfterX = false;
		}
		if(yPosOrGap == null) {
			yPosOrGap = 0;
		}
		if(xPosOrGap == null) {
			xPosOrGap = 0;
		}
		var bm = this.getBimap(imgName,callBack);
		if(keepAfterX) {
			bm.set_x(afterDObj.get_x() + xPosOrGap);
		} else {
			bm.set_x(xPosOrGap);
		}
		if(keepAfterY) {
			bm.set_y(afterDObj.get_y() + afterDObj.get_height() + yPosOrGap);
		} else {
			bm.set_y(yPosOrGap);
		}
		return bm;
	}
	,addCenterdXButtonAfter: function(imgName,afterDObj,callBack,yGap) {
		if(yGap == null) {
			yGap = 0;
		}
		var bm = this.getBimap(imgName,callBack);
		bm.set_x(this.sWidth / 2 - bm.get_width() / 2);
		bm.set_y(afterDObj.get_y() + afterDObj.get_height() + yGap);
		return bm;
	}
	,addAfterLastButton: function(imgName,callBack,centerX,yGap,xPos) {
		if(xPos == null) {
			xPos = 0;
		}
		if(yGap == null) {
			yGap = 0;
		}
		if(centerX == null) {
			centerX = false;
		}
		var lbm = this.lastBm;
		var bm = this.getBimap(imgName,callBack);
		if(centerX) {
			bm.set_x(this.sWidth / 2 - bm.get_width() / 2);
		} else {
			bm.set_x(xPos);
		}
		bm.set_y(lbm.get_y() + lbm.get_height() + yGap);
		return bm;
	}
	,addBtnWithPivot: function(imgName,centerPivotX,centerPivotY,pivotX,pivotY,objX,objY,callBack,container,batch) {
		if(objY == null) {
			objY = 0;
		}
		if(objX == null) {
			objX = 0;
		}
		if(pivotY == null) {
			pivotY = 0;
		}
		if(pivotX == null) {
			pivotX = 0;
		}
		if(centerPivotY == null) {
			centerPivotY = false;
		}
		if(centerPivotX == null) {
			centerPivotX = false;
		}
		var spr = new openfl_display_Sprite();
		if(imgName.indexOf("/") == -1) {
			imgName = this.imgesRoot + imgName;
		}
		if(container == null) {
			container = this;
		}
		var bm = new openfl_display_Bitmap(this.getBitmapData(imgName,batch != null?batch:this.mainBatch),1,true);
		container.addChild(spr);
		spr.addChild(bm);
		this.curID--;
		this.btnsArr.h[this.curID] = spr;
		if(callBack != null) {
			this.btnsFuntions.h[this.curID] = callBack;
		}
		this.lastBm = spr;
		if(centerPivotX) {
			bm.set_x(-bm.get_width() / 2);
		}
		if(centerPivotY) {
			bm.set_y(-bm.get_height() / 2);
		}
		if(pivotX != 0) {
			bm.set_x(-pivotX);
		}
		if(pivotY != 0) {
			bm.set_y(-pivotY);
		}
		spr.set_x(objX);
		spr.set_y(objY);
		return spr;
	}
	,addTextField: function(fontName,fontSize,fontColor,bold,align,x,y,width,height,shaddow,shaddowDist,shadAlpha,container,centerParentX,multiline,leading,leftMargin,rightMargin,indent) {
		if(indent == null) {
			indent = 0;
		}
		if(rightMargin == null) {
			rightMargin = 0;
		}
		if(leftMargin == null) {
			leftMargin = 0;
		}
		if(leading == null) {
			leading = 0;
		}
		if(multiline == null) {
			multiline = false;
		}
		if(centerParentX == null) {
			centerParentX = false;
		}
		if(shadAlpha == null) {
			shadAlpha = 0.5;
		}
		if(shaddowDist == null) {
			shaddowDist = 3;
		}
		if(shaddow == null) {
			shaddow = true;
		}
		if(height == null) {
			height = 0;
		}
		if(width == null) {
			width = 0;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(align == null) {
			align = "LEFT";
		}
		if(bold == null) {
			bold = false;
		}
		if(fontColor == null) {
			fontColor = 0;
		}
		if(fontSize == null) {
			fontSize = 20;
		}
		if(fontName == null) {
			fontName = "Arial";
		}
		var mTF = new openfl_text_TextField();
		mTF.set_gridFitType(1);
		mTF.set_embedFonts(true);
		mTF.mouseEnabled = mTF.set_selectable(false);
		var mAlign = null;
		switch(align) {
		case "CENTER":
			mAlign = 0;
			break;
		case "LEFT":
			mAlign = 3;
			break;
		case "RIGHT":
			mAlign = 4;
			break;
		}
		mTF.set_defaultTextFormat(new openfl_text_TextFormat(openfl_Assets.getFont(Reflect.field(Config.fontsShorts,fontName)).name,fontSize | 0,fontColor,bold,false,false,null,null,mAlign,leftMargin,rightMargin,0,leading));
		if(multiline) {
			mTF.set_multiline(true);
			mTF.set_wordWrap(true);
		} else {
			mTF.set_multiline(false);
		}
		if(width != 0) {
			mTF.set_width(width);
		}
		if(height != 0) {
			mTF.set_height(height);
		}
		mTF.set_x(x);
		mTF.set_y(y);
		mTF.set_text("");
		var prt = container != null?container:this;
		if(centerParentX) {
			mTF.set_width(prt.get_width());
		}
		if(container != null) {
			container.addChild(mTF);
		} else {
			this.addChild(mTF);
		}
		this.textFields.push(mTF);
		return mTF;
	}
	,alignTextFields: function(textFields) {
		if(textFields == null) {
			textFields = this.textFields;
		}
		var tf;
		var abName = openfl_Assets.getFont(Reflect.field(Config.fontsShorts,"Aalgrs")).name;
		var cName = openfl_Assets.getFont(Reflect.field(Config.fontsShorts,"AgfRoman")).name;
		var lpbName = openfl_Assets.getFont(Reflect.field(Config.fontsShorts,"FrizQuBd")).name;
		var _g1 = 0;
		var _g = textFields.length;
		while(_g1 < _g) {
			tf = textFields[_g1++];
			if(tf.get_defaultTextFormat().font == abName) {
				tf.set_y(tf.get_y() + tf.get_defaultTextFormat().size * 0.2);
			} else if(tf.get_defaultTextFormat().font == cName) {
				tf.set_y(tf.get_y() - tf.get_defaultTextFormat().size * 0.15);
			} else if(tf.get_defaultTextFormat().font == lpbName) {
				tf.set_y(tf.get_y() - tf.get_defaultTextFormat().size * 0.16);
			}
		}
	}
	,addMovieClip: function(prefix,frameRateCoef,x,y,loop,startDelay,loopDelay,container,batch,prefix3Signs) {
		if(prefix3Signs == null) {
			prefix3Signs = false;
		}
		if(loopDelay == null) {
			loopDelay = 0;
		}
		if(startDelay == null) {
			startDelay = 0;
		}
		if(loop == null) {
			loop = true;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(frameRateCoef == null) {
			frameRateCoef = 1;
		}
		if(container == null) {
			container = this;
		}
		var mc = new MenuMC(prefix,frameRateCoef,loop,startDelay,loopDelay,this.isImagesFromAtlas?batch == null?this.mainBatch:batch:null,prefix3Signs);
		mc.set_x(x);
		mc.set_y(y);
		container.addChild(mc);
		this.mcsArr.push(mc);
		if(!this.hasUpdateFunction) {
			this.addEventListener("enterFrame",$bind(this,this.updatePr));
		}
		return mc;
	}
	,addThreeStateBtn: function(normal,pressed,inactive,x,y,offsets,callBack,container) {
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		if(container == null) {
			container = this;
		}
		var btn = new ThreeStateBtn(normal,pressed,inactive,offsets);
		if(!this.hasUpdateFunction) {
			this.addEventListener("enterFrame",$bind(this,this.updatePr));
		}
		container.addChild(btn);
		this.curID--;
		this.btnsArr.h[this.curID] = btn;
		if(callBack != null) {
			btn.callBackId = this.curID;
			this.btnsFuntions.h[this.curID] = callBack;
		}
		this.threeStateBtns.push(btn);
		btn.set_x(x);
		btn.set_y(y);
		return btn;
	}
	,addButtonsInLine: function(btnsArr,initY,xGap,centerThemX) {
		if(centerThemX == null) {
			centerThemX = false;
		}
		if(xGap == null) {
			xGap = 0;
		}
		if(initY == null) {
			initY = 0;
		}
		var resArr = [];
		var obj;
		var bm;
		var lastX = 0;
		var lastWidth = 0;
		var _g1 = 0;
		var _g = btnsArr.length;
		while(_g1 < _g) {
			obj = btnsArr[_g1++];
			bm = this.getBimap(obj.id,obj.cb);
			bm.set_x(lastX + lastWidth + xGap);
			bm.set_y(initY);
			lastWidth = bm.get_width();
			lastX = bm.get_x();
			resArr.push(bm);
		}
		if(centerThemX) {
			var offset = this.sWidth / 2 - (resArr[resArr.length - 1].get_x() + resArr[resArr.length - 1].get_width()) / 2;
			var _g11 = 0;
			var _g2 = resArr.length;
			while(_g11 < _g2) {
				var _g21 = resArr[_g11++];
				_g21.set_x(_g21.get_x() + offset);
			}
		}
		return resArr;
	}
	,centerThis: function(centerX,centerY) {
		if(centerY == null) {
			centerY = false;
		}
		if(centerX == null) {
			centerX = false;
		}
		if(centerX) {
			this.set_x(this.sWidth / 2 - this.get_width() / 2);
		}
		if(centerY) {
			this.set_y(this.sHeight / 2 - this.get_height() / 2);
		}
	}
	,setUpdateFuntion: function(callBack) {
		if(this.updateFunction == null && !this.hasUpdateFunction) {
			this.minUpdateTime = this.main.minUpdateTime;
			this.addEventListener("enterFrame",$bind(this,this.updatePr));
		}
		this.updateFunction = callBack;
	}
	,updatePr: function(e) {
		if(this.main == null) {
			return;
		}
		if(this.lastTime == -1) {
			this.lastTime = openfl_Lib.getTimer();
			return;
		}
		var t = openfl_Lib.getTimer();
		var frameTime = t - this.lastTime;
		if(frameTime >= this.minUpdateTime) {
			this.lastTime = t;
		} else {
			return;
		}
		var _g1 = 0;
		var _g = this.mcsArr.length;
		while(_g1 < _g) this.mcsArr[_g1++].update(frameTime);
		var _g11 = 0;
		var _g2 = this.scrollContainers.length;
		while(_g11 < _g2) this.scrollContainers[_g11++].update(frameTime);
		this.updateThreeStateBtns();
		if(this.updateFunction != null) {
			this.updateFunction(frameTime);
		}
	}
	,updateThreeStateBtns: function() {
		if(this.threeStateBtns == null || this.threeStateBtns.length == 0) {
			return;
		}
		if(this.main.isMouseDown) {
			this.hp.x = openfl_Lib.current.stage.get_mouseX();
			this.hp.y = openfl_Lib.current.stage.get_mouseY();
			var _g1 = 0;
			var _g = this.threeStateBtns.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.threeStateBtns == null || this.threeStateBtns[i] == null) {
					break;
				}
				var rect = this.threeStateBtns[i].getBounds(this.stage);
				if(this.threeStateBtns[i].get_visible() && this.threeStateBtns[i].get_alpha() > 0 && rect.contains(this.hp.x,this.hp.y)) {
					this.threeStateBtns[i].press();
				} else {
					this.threeStateBtns[i].unPress();
				}
			}
		} else {
			var _g11 = 0;
			var _g2 = this.threeStateBtns.length;
			while(_g11 < _g2) this.threeStateBtns[_g11++].unPress();
		}
	}
	,close: function() {
		if(this.main.overlayMaker == this) {
			this.main.overlayMaker = null;
		}
		this.destroy();
	}
	,destroy: function() {
		this.removeEventListener("click",$bind(this,this.btnClick));
		this.removeEventListener("touchEnd",$bind(this,this.btnClick));
		this.removeEventListener("enterFrame",$bind(this,this.updatePr));
		this.removeEventListener("enterFrame",$bind(this,this.resizeCheck));
		this.moveByResizeCallBack = null;
		if(this.snapShot != null && this.snapShot.parent != null) {
			this.snapShot.parent.removeChild(this.snapShot);
		}
		this.snapShot = null;
		this.mainBatch = null;
		var dObj;
		if(this.btnsFuntions != null) {
			var tmp = this.btnsFuntions.keys();
			while(tmp.hasNext()) {
				var i = tmp.next();
				if(this.btnsArr.h.hasOwnProperty(i)) {
					if(js_Boot.__instanceof(this.btnsArr.h[i],openfl_display_DisplayObject)) {
						dObj = this.btnsArr.h[i];
						if(dObj.parent != null) {
							dObj.parent.removeChild(dObj);
						}
					}
				}
			}
		}
		this.updateFunction = null;
		this.removeOverlay();
		this.fill = null;
		this.btnsArr = null;
		this.btnsFuntions = null;
		this.textFields = null;
		while(this.get_numChildren() > 0) this.removeChildAt(0);
		this.hp = null;
		this.mHm = null;
		this.lastBm = null;
		this.main = null;
		if(this.mcsArr != null) {
			while(this.mcsArr.length > 0) this.mcsArr.pop().destroy();
			this.mcsArr = null;
		}
		if(this.threeStateBtns != null) {
			while(this.threeStateBtns.length > 0) this.threeStateBtns.pop().destroy();
		}
		this.threeStateBtns = null;
		if(this.scrollContainers != null) {
			while(this.scrollContainers.length > 0) this.scrollContainers.pop().destroy();
		}
		this.scrollContainers = null;
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,__class__: Menu
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_level:"get_level"})
});
var FinishScreen = function() {
	this.bgsArr = [];
	Menu.call(this);
	this.mainBatch = this.main.batch;
	var player1Wins = false;
	var player2Wins = false;
	if(Desk.current.numPoints[0] >= Desk.current.winPoints) {
		player1Wins = true;
	}
	if(Desk.current.numPoints[1] >= Desk.current.winPoints) {
		player2Wins = true;
	}
	this.main.paused = true;
	this.bgsSpr = this.getSprite();
	this.createBgs();
	this.mainCont = this.getSprite();
	var isOnePlayer = Desk.current.playersType[0] == "computer" || Desk.current.playersType[1] == "computer";
	var player1Name = isOnePlayer?Desk.current.playersType[0] == "computer"?Localization.getString("computer_name"):Localization.getString("you_name"):Localization.getString("player1_name");
	var player2Name = isOnePlayer?Desk.current.playersType[1] == "computer"?Localization.getString("computer_name"):Localization.getString("you_name"):Localization.getString("player2_name");
	var bg = this.getBimap("plashka_B",null,this.mainCont);
	var columnSizes = [0,150,150];
	var totWidth = 0;
	var _g1 = 0;
	var _g = columnSizes.length;
	while(_g1 < _g) {
		var i = _g1++;
		totWidth += columnSizes[i];
	}
	var columnsX = [];
	var initX = (bg.get_width() - totWidth) / 2;
	var curX = initX;
	var _g11 = 0;
	var _g2 = columnSizes.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		columnsX[i1] = curX;
		curX += columnSizes[i1];
	}
	var columnsGapY = 65;
	var fontSize = 60;
	var fontColor = 0;
	var curY = 50;
	var player1Chess = this.getBimap("chip_" + "white" + "_" + Desk.current.curThemeChess,null,this.mainCont);
	var player2Chess = this.getBimap("chip_" + "black" + "_" + Desk.current.curThemeChess,null,this.mainCont);
	player1Chess.set_x(columnsX[1] + columnSizes[1] / 2 - player1Chess.get_width() / 2);
	player1Chess.set_y(curY);
	player2Chess.set_x(columnsX[2] + columnSizes[2] / 2 - player2Chess.get_width() / 2);
	player2Chess.set_y(curY);
	curY += columnsGapY;
	var p1Index = Desk.current.inversedColors?1:0;
	var p2Index = Desk.current.inversedColors?0:1;
	var player1ValTf = this.addTextField("Aalgrs",fontSize,fontColor,false,"CENTER",columnsX[1],curY,columnSizes[1],fontSize * 1.3,false,0,0,this.mainCont);
	player1ValTf.set_text(Desk.current.numPointsRound[p1Index] + "");
	var player2ValTf = this.addTextField("Aalgrs",fontSize,fontColor,false,"CENTER",columnsX[2],curY,columnSizes[2],fontSize * 1.3,false,0,0,this.mainCont);
	player2ValTf.set_text(Desk.current.numPointsRound[p2Index] + "");
	curY += columnsGapY;
	var player1ValTf1 = this.addTextField("Aalgrs",fontSize,fontColor,false,"CENTER",columnsX[1],curY,columnSizes[1],fontSize * 1.3,false,0,0,this.mainCont);
	player1ValTf1.set_text(Desk.current.numPoints[p1Index] + "");
	var player2ValTf1 = this.addTextField("Aalgrs",fontSize,fontColor,false,"CENTER",columnsX[2],curY,columnSizes[2],fontSize * 1.3,false,0,0,this.mainCont);
	player2ValTf1.set_text(Desk.current.numPoints[p2Index] + "");
	this.mainCont.set_x(this.sWidth / 2 - bg.get_width() / 2);
	this.mainCont.set_y(this.sHeight / 2 - bg.get_height() / 2);
	this.mainMenuBtn = this.getBimap(player1Wins || player2Wins?"home_copy":"play",player1Wins || player2Wins?$bind(this,this.mainMenuClick):$bind(this,this.nextClick),this.mainCont);
	this.mainMenuBtn.set_x(bg.get_width() / 2 - this.mainMenuBtn.get_width() / 2);
	this.mainMenuBtn.set_y(bg.get_height() - this.mainMenuBtn.get_height() - 40);
	this.onResize();
	this.moveThisOnResize = true;
	this.moveByResizeCallBack = $bind(this,this.onResize);
	var wasY = this.get_y();
	this.set_y(this.get_y() + this.sHeight);
	motion_Actuate.tween(this,0.3,{ y : wasY}).ease(motion_easing_Quad.get_easeOut()).delay(0.7);
	var famobi = window.famobi;
	if(famobi != null) {
		famobi.showAd();
	}
};
$hxClasses["FinishScreen"] = FinishScreen;
FinishScreen.__name__ = ["FinishScreen"];
FinishScreen.__super__ = Menu;
FinishScreen.prototype = $extend(Menu.prototype,{
	__fill: null
	,mainMenuBtn: null
	,bgsArr: null
	,bgsSpr: null
	,mainCont: null
	,nextClick: function() {
		Desk.current.newGame();
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close1));
	}
	,close1: function() {
		this.main.paused = false;
		this.close();
	}
	,mainMenuClick: function() {
		this.main.addChild(new MainMenu());
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
	}
	,onCl: function() {
		Main.current.newGame();
		this.close();
	}
	,onResize: function() {
		this.createBgs();
		this.bgsSpr.set_x(-this.get_x());
		this.bgsSpr.set_y(-this.get_y());
	}
	,createBgs: function() {
		var lastIndex = 0;
		var sizeX = 0;
		var bg;
		this.isImagesFromAtlas = false;
		while(sizeX < Main.current.sWidth) {
			if(this.bgsArr[lastIndex] != null) {
				bg = this.bgsArr[lastIndex];
				bg.set_visible(true);
			} else {
				bg = this.getBimap("img/bg.jpg",null,this.bgsSpr);
				this.bgsArr.push(bg);
			}
			bg.set_x(sizeX);
			bg.set_y(0);
			bg.set_scaleX(bg.set_scaleY(Main.current.sHeight / bg.bitmapData.height));
			sizeX += bg.get_width() - 2;
			++lastIndex;
		}
		this.isImagesFromAtlas = true;
		var _g1 = lastIndex;
		var _g = this.bgsArr.length;
		while(_g1 < _g) this.bgsArr[_g1++].set_visible(false);
	}
	,getBtnWithText: function(text,callBack) {
		var spr = this.getSprite();
		var bm = this.getBimap("TEXT_bg",callBack,spr);
		this.addTextField("Aalgrs",60,0,false,"CENTER",0,8,bm.get_width(),bm.get_height(),false,0,0,spr).set_text(text);
		return spr;
	}
	,__class__: FinishScreen
});
// var GATrack = function(gameName) {
// 	this.gameName = "";
// 	this.gameName = gameName;
// 	this.tracker = new googleAnalytics_Tracker("UA-49887304-1","cowgames.com");
// 	this.visitor = new googleAnalytics_Visitor();
// 	this.visitor.setUserAgent("haXe-ga");
// 	this.visitor.setScreenResolution("1024x768");
// 	this.visitor.setLocale("es_AR");
// 	this.session = new googleAnalytics_Session();
// 	this.trackPageview();
// 	GATrack.current = this;
// };
// $hxClasses["GATrack"] = GATrack;
// GATrack.__name__ = ["GATrack"];
// GATrack.current = null;
// GATrack.trackEvent = function(eventName) {
// 	eventName = "_" + eventName;
// 	GATrack.current.tracker.trackEvent(new googleAnalytics_Event(GATrack.current.gameName + eventName + "_HTML5","play",window.location.href),GATrack.current.session,GATrack.current.visitor);
// };
// GATrack.prototype = {
// 	tracker: null
// 	,visitor: null
// 	,session: null
// 	,gameName: null
// 	,trackPageview: function() {
// 		this.tracker.trackEvent(new googleAnalytics_Event(this.gameName + "_HTML5","play",window.location.href),this.session,this.visitor);
// 	}
// 	,__class__: GATrack
// };
var HxOverrides = function() { };
$hxClasses["HxOverrides"] = HxOverrides;
HxOverrides.__name__ = ["HxOverrides"];
HxOverrides.strDate = function(s) {
	var _g = s.length;
	switch(_g) {
	case 8:
		var k = s.split(":");
		var d = new Date();
		d.setTime(0);
		d.setUTCHours(k[0]);
		d.setUTCMinutes(k[1]);
		d.setUTCSeconds(k[2]);
		return d;
	case 10:
		var k1 = s.split("-");
		return new Date(k1[0],k1[1] - 1,k1[2],0,0,0);
	case 19:
		var k2 = s.split(" ");
		var y = k2[0].split("-");
		var t = k2[1].split(":");
		return new Date(y[0],y[1] - 1,y[2],t[0],t[1],t[2]);
	default:
		throw new js__$Boot_HaxeError("Invalid date format : " + s);
	}
};
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.remove = function(a,obj) {
	var i = a.indexOf(obj);
	if(i == -1) {
		return false;
	}
	a.splice(i,1);
	return true;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var InformWindow = function(text,isAskWindow,askCallBack,icons,delayShow,isInform) {
	if(isInform == null) {
		isInform = false;
	}
	if(delayShow == null) {
		delayShow = 0;
	}
	if(isAskWindow == null) {
		isAskWindow = false;
	}
	this.wasMainPaused = false;
	Menu.call(this);
	InformWindow.isActive = true;
	this.isAskWindow = isAskWindow;
	this.askCallBack = askCallBack;
	this.mainBatch = this.main.batch;
	this.__fill = this.getFillOverlay();
	this.mainCont = this.getSprite();
	var underlay = isInform?this.getBimap("InformPlashka",null,this.mainCont):this.getBimap("plashka_A",null,this.mainCont);
	var btnsCont = this.getSprite();
	this.mainCont.addChild(btnsCont);
	if(isAskWindow) {
		if(!isInform) {
			var yesBtn = this.getBimap("yes",$bind(this,this.yesClick),btnsCont);
			var noBtn = this.getBimap("no",$bind(this,this.noClick),btnsCont);
			yesBtn.set_x(underlay.get_width() / 2 - yesBtn.get_width() - 20);
			noBtn.set_x(underlay.get_width() / 2 + 20);
		}
	} else if(!isInform) {
		var yesBtn1 = this.getBimap("yes",$bind(this,this.yesClick),btnsCont);
		yesBtn1.set_x(underlay.get_width() / 2 - yesBtn1.get_width() / 2);
	}
	btnsCont.set_y(underlay.get_height() - btnsCont.get_height() - 20);
	if(text != "") {
		var tfWidth = underlay.get_width() - 50;
		this.addTextField("Aalgrs",40,0,false,"CENTER",(underlay.get_width() - tfWidth) / 2,!isInform?25:10,tfWidth,!isInform?underlay.get_height() - 100:underlay.get_height(),false,0,0,this.mainCont,false,true).set_text(text);
	}
	if(icons != null && icons.length > 0) {
		var iconsCont = this.getSprite();
		this.mainCont.addChild(iconsCont);
		var bm;
		var curX = 0;
		var maxHeight = 0;
		var gapX = 1;
		var _g1 = 0;
		var _g = icons.length;
		while(_g1 < _g) {
			bm = this.getBimap(icons[_g1++],null,iconsCont);
			bm.set_x(curX);
			curX += bm.get_width() + gapX;
			if(maxHeight < bm.get_height()) {
				maxHeight = bm.get_height();
			}
		}
		var _g11 = 0;
		var _g2 = iconsCont.get_numChildren();
		while(_g11 < _g2) {
			var i = _g11++;
			var tmp = maxHeight / 2;
			var tmp1 = iconsCont.getChildAt(i).get_height() / 2;
			iconsCont.getChildAt(i).set_y(tmp - tmp1);
		}
		iconsCont.set_x(underlay.get_width() / 2 - iconsCont.get_width() / 2);
		iconsCont.set_y(btnsCont.get_y() / 2 - iconsCont.get_height() / 2);
		if(isInform) {
			iconsCont.set_y(underlay.get_height() / 2 - iconsCont.get_height() / 2);
		}
	}
	this.mainCont.set_x(this.sWidth / 2 - underlay.get_width() / 2);
	this.mainCont.set_y(this.sHeight / 2 - underlay.get_height() / 2);
	this.__fill.set_alpha(0);
	motion_Actuate.tween(this.__fill,0.3,{ alpha : 1}).ease(motion_easing_Linear.get_easeNone()).delay(delayShow);
	var wasY = this.mainCont.get_y();
	this.mainCont.set_y(-this.get_y() - this.sHeight);
	motion_Actuate.tween(this.mainCont,0.3,{ y : wasY}).ease(motion_easing_Quad.get_easeOut()).delay(delayShow);
	this.moveThisOnResize = true;
	this.moveByResizeCallBack = $bind(this,this.onResize);
	if(isInform) {
		haxe_Timer.delay($bind(this,this.timeCLose),Math.round(1500 + delayShow * 1000));
	}
};
$hxClasses["InformWindow"] = InformWindow;
InformWindow.__name__ = ["InformWindow"];
InformWindow.__super__ = Menu;
InformWindow.prototype = $extend(Menu.prototype,{
	isAskWindow: null
	,askCallBack: null
	,mainCont: null
	,__fill: null
	,wasMainPaused: null
	,onResize: function() {
		this.__fill.set_x(-this.get_x());
		this.__fill.set_y(-this.get_y());
		this.__fill.set_width(Main.current.sWidth);
		this.__fill.set_height(Main.current.sHeight);
	}
	,timeCLose: function() {
		this.animateClose();
		if(this.main.overlayMaker == this) {
			this.main.overlayMaker = null;
		}
		if(this.askCallBack != null) {
			this.askCallBack(true);
		}
	}
	,yesClick: function() {
		this.animateClose();
		if(this.main.overlayMaker == this) {
			this.main.overlayMaker = null;
		}
		if(this.askCallBack != null) {
			this.askCallBack(true);
		}
	}
	,noClick: function() {
		this.animateClose();
		if(this.main.overlayMaker == this) {
			this.main.overlayMaker = null;
		}
		if(this.askCallBack != null) {
			this.askCallBack(false);
		}
	}
	,animateClose: function() {
		InformWindow.isActive = false;
		motion_Actuate.tween(this.__fill,0.25,{ alpha : 0.01}).ease(motion_easing_Linear.get_easeNone());
		motion_Actuate.tween(this.mainCont,0.3,{ y : this.sHeight + this.mainCont.get_y()}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
	}
	,__class__: InformWindow
});
var IngameMenu = function() {
	this.vUndoBtn = new openfl_geom_Point();
	this.hUndoBtn = new openfl_geom_Point();
	this.vMenuBtn = new openfl_geom_Point();
	this.hMenuBtn = new openfl_geom_Point();
	this.lastTakens2Arr = [];
	this.lastTakens1Arr = [];
	this.takensNames = new haxe_ds_ObjectMap();
	this.takensPool = new haxe_ds_StringMap();
	this.portraitInitX = 0;
	this.landscapeInitY = 0;
	Menu.call(this);
	this.mainBatch = this.main.batch;
	this.higlitedBmd = this.getBitmapData("InformPlashka1");
	this.noHiglitBmd = this.getBitmapData("InformPlashka");
	this.player1PanelCont = this.getSprite();
	this.player2PanelCont = this.getSprite();
	this.player1Panel = new openfl_display_Bitmap(this.noHiglitBmd,1,true);
	this.player2Panel = new openfl_display_Bitmap(this.noHiglitBmd,1,true);
	this.player1PanelCont.addChild(this.player1Panel);
	this.player2PanelCont.addChild(this.player2Panel);
	this.player1PanelCont.set_x(this.sWidth / 2);
	this.player2PanelCont.set_x(this.sWidth / 2);
	this.player1PanelCont.set_y(this.sHeight / 2 - 320. - 50);
	this.player2PanelCont.set_y(this.sHeight / 2 + 320. + 50);
	this.pcBmd = this.getBitmapData("comp");
	this.playerBmd = this.getBitmapData("onePlaier1");
	this.player1TypeIcon = this.getSprite();
	this.player2TypeIcon = this.getSprite();
	this.player1PanelCont.addChild(this.player1TypeIcon);
	this.player2PanelCont.addChild(this.player2TypeIcon);
	this.player1TypeIcon.set_x(50);
	this.player2TypeIcon.set_x(50);
	this.player1TypeIcon.set_y(this.player1Panel.get_height() / 2);
	this.player2TypeIcon.set_y(this.player1Panel.get_height() / 2);
	this.player1Icon = this.getBimap("onePlaier1",null,this.player1TypeIcon);
	this.player2Icon = this.getBimap("onePlaier1",null,this.player2TypeIcon);
	this.player1NumTxt = new NumFontFromBatch(this.mainBatch,"dig_");
	this.player1NumTxt.set_text("0");
	this.player1NumTxt.set_x(this.player1Icon.get_x() + this.player1Icon.get_width() - 8);
	this.player1NumTxt.set_y(this.player1Icon.get_y() + this.player1Icon.get_height() / 2 - this.player1NumTxt.get_height() / 2);
	this.player1TypeIcon.addChild(this.player1NumTxt);
	this.player2NumTxt = new NumFontFromBatch(this.mainBatch,"dig_");
	this.player2NumTxt.set_text("0");
	this.player2NumTxt.set_x(this.player2Icon.get_x() + this.player2Icon.get_width() - 8);
	this.player2NumTxt.set_y(this.player2Icon.get_y() + this.player2Icon.get_height() / 2 - this.player2NumTxt.get_height() / 2);
	this.player2TypeIcon.addChild(this.player2NumTxt);
	this.player1MovesTxt = new NumFontFromBatch(this.mainBatch,"dig_");
	this.player1MovesTxt.set_text("0");
	this.player1MovesTxt.set_align("CENTER");
	this.player1MovesTxt.widthToAlign = this.noHiglitBmd.height;
	this.player1PanelCont.addChild(this.player1MovesTxt);
	this.player2MovesTxt = new NumFontFromBatch(this.mainBatch,"dig_");
	this.player2MovesTxt.set_text("0");
	this.player2MovesTxt.set_align("CENTER");
	this.player2MovesTxt.widthToAlign = this.noHiglitBmd.height;
	this.player2PanelCont.addChild(this.player2MovesTxt);
	this.player1Takens = this.getSprite();
	this.player2Takens = this.getSprite();
	this.undoBtnCont = new openfl_display_Sprite();
	this.menuBtnCont = new openfl_display_Sprite();
	this.player1PanelCont.addChild(this.menuBtnCont);
	this.player2PanelCont.addChild(this.undoBtnCont);
	this.undoBtn = this.getBimap("undo_1",$bind(this,this.undo),this.undoBtnCont);
	this.undoBtn.set_x(-this.undoBtn.get_width() / 2);
	this.undoBtn.set_y(-this.undoBtn.get_height() / 2);
	this.undoBtnCont.set_x(this.player2Panel.get_width() - this.undoBtn.get_width() / 2 - 2);
	this.undoBtnCont.set_y(this.player2Panel.get_height() / 2);
	this.menuBtn = this.getBimap("menu_1",$bind(this,this.menuClick),this.menuBtnCont);
	this.menuBtn.set_x(-this.menuBtn.get_width() / 2);
	this.menuBtn.set_y(-this.menuBtn.get_height() / 2);
	this.menuBtnCont.set_x(this.player1Panel.get_width());
	this.menuBtnCont.set_y(this.player1Panel.get_height() / 2);
	this.initSWidth = this.sWidth;
	this.initSHeight = this.sHeight;
	var _g1 = 0;
	var _g = this.player1PanelCont.get_numChildren();
	while(_g1 < _g) {
		var i = _g1++;
		var _g2 = this.player1PanelCont.getChildAt(i);
		_g2.set_x(_g2.get_x() - this.player1Panel.get_width() / 2);
		var _g21 = this.player1PanelCont.getChildAt(i);
		_g21.set_y(_g21.get_y() - this.player1Panel.get_height() / 2);
	}
	var _g11 = 0;
	var _g3 = this.player2PanelCont.get_numChildren();
	while(_g11 < _g3) {
		var i1 = _g11++;
		var _g22 = this.player2PanelCont.getChildAt(i1);
		_g22.set_x(_g22.get_x() - this.player1Panel.get_width() / 2);
		var _g23 = this.player2PanelCont.getChildAt(i1);
		_g23.set_y(_g23.get_y() - this.player1Panel.get_height() / 2);
	}
	this.portraitInitX = this.player1PanelCont.get_x();
	this.landscapeInitY = this.sHeight / 2;
	var pw = this.player1Panel.get_width();
	this.hMenuBtn.x = pw / 2 + this.menuBtn.get_width() / 2 + 5;
	this.hMenuBtn.y = 2;
	this.hUndoBtn.x = pw / 2 + this.undoBtn.get_width() / 2 + 5;
	this.hUndoBtn.y = 2;
	this.vMenuBtn.x = pw / 2 + this.menuBtn.get_width() / 2 + 1;
	this.vMenuBtn.y = -4;
	this.vUndoBtn.x = -pw / 2 - this.undoBtn.get_width() / 2 - 2;
	this.vUndoBtn.y = -4;
	this.onResize();
	this.reset();
	this.setUpdateFuntion($bind(this,this.update));
	this.moveThisOnResize = true;
	this.moveByResizeCallBack = $bind(this,this.onResize);
};
$hxClasses["IngameMenu"] = IngameMenu;
IngameMenu.__name__ = ["IngameMenu"];
IngameMenu.__super__ = Menu;
IngameMenu.prototype = $extend(Menu.prototype,{
	player1PanelCont: null
	,player2PanelCont: null
	,player1Panel: null
	,player2Panel: null
	,player1TypeIcon: null
	,player2TypeIcon: null
	,player1Icon: null
	,player2Icon: null
	,player1NumTxt: null
	,player2NumTxt: null
	,player1MovesTxt: null
	,player2MovesTxt: null
	,pcBmd: null
	,playerBmd: null
	,higlitedBmd: null
	,noHiglitBmd: null
	,initSWidth: null
	,initSHeight: null
	,undoBtnCont: null
	,menuBtnCont: null
	,player1CastleChesses: null
	,player2CastleChesses: null
	,landscapeInitY: null
	,portraitInitX: null
	,takensPool: null
	,takensNames: null
	,player1Takens: null
	,player2Takens: null
	,lastTakens1Arr: null
	,lastTakens2Arr: null
	,hMenuBtn: null
	,vMenuBtn: null
	,hUndoBtn: null
	,vUndoBtn: null
	,undoBtn: null
	,menuBtn: null
	,update: function(frameTime) {
		if(Desk.current.isUndoAvailable()) {
			this.undoBtnCont.set_visible(true);
		} else {
			this.undoBtnCont.set_visible(false);
		}
	}
	,getTakensGraphic: function(type) {
		return null;
	}
	,sendToPoolTakensGraphic: function(bm) {
		if(bm.parent != null) {
			bm.parent.removeChild(bm);
		}
		if(this.takensNames.h.__keys__[bm.__id__] == null) {
			return;
		}
		var key = this.takensNames.h[bm.__id__];
		var _this = this.takensPool;
		if(!(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key))) {
			var key1 = this.takensNames.h[bm.__id__];
			var _this1 = this.takensPool;
			var value = [];
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value);
			} else {
				_this1.h[key1] = value;
			}
		}
		var key2 = this.takensNames.h[bm.__id__];
		var _this2 = this.takensPool;
		(__map_reserved[key2] != null?_this2.getReserved(key2):_this2.h[key2]).push(bm);
	}
	,updateTakensGraphic: function() {
	}
	,reset: function() {
		if(Desk.current.game != null) {
			var pipsPlayer1 = Desk.current.game.calculatePip(Desk.current.game.board,Desk.current.game.player2);
			var pipsPlayer2 = Desk.current.game.calculatePip(Desk.current.game.board,Desk.current.game.player1);
			if(this.player1MovesTxt.text != pipsPlayer1 + "") {
				this.player1MovesTxt.set_text(pipsPlayer1 + "");
			}
			if(this.player2MovesTxt.text != pipsPlayer2 + "") {
				this.player2MovesTxt.set_text(pipsPlayer2 + "");
			}
		}
		this.undoBtnCont.set_visible(false);
		this.player1Panel.bitmapData = this.noHiglitBmd;
		this.player2Panel.bitmapData = this.noHiglitBmd;
		this.player1Panel.smoothing = this.player2Panel.smoothing = true;
		this.player1PanelCont.set_scaleY(1);
		this.player1PanelCont.set_scaleX(1);
		this.player1NumTxt.set_visible(true);
		this.player2NumTxt.set_visible(true);
		if((Desk.current.playersType[0] == "computer" || Desk.current.playersType[1] == "computer") && (Desk.current.playersType[0] == "human" || Desk.current.playersType[1] == "human")) {
			this.player2Icon.bitmapData = Desk.current.playersType[0] != "computer"?this.playerBmd:this.pcBmd;
			this.player1Icon.bitmapData = Desk.current.playersType[1] != "computer"?this.playerBmd:this.pcBmd;
			this.player1NumTxt.set_visible(false);
			this.player2NumTxt.set_visible(false);
		} else if(Desk.current.playersType[0] == "computer" && Desk.current.playersType[1] == "computer") {
			this.player2Icon.bitmapData = this.pcBmd;
			this.player1Icon.bitmapData = this.pcBmd;
			this.player1NumTxt.set_visible(false);
			this.player2NumTxt.set_visible(false);
		} else if(Desk.current.playersType[0] == "human" && Desk.current.playersType[1] == "human") {
			this.player1Icon.bitmapData = this.playerBmd;
			this.player2Icon.bitmapData = this.playerBmd;
			this.player1NumTxt.set_text("2");
			this.player2NumTxt.set_text("1");
		}
		this.updateTakensGraphic();
		this.onResize();
	}
	,undo: function() {
		Desk.current.undo();
	}
	,menuClick: function() {
		this.main.addChild(new PauseMenu());
	}
	,onMoveEnd: function() {
		var pipsPlayer1 = Desk.current.game.calculatePip(Desk.current.game.board,Desk.current.game.player2);
		var pipsPlayer2 = Desk.current.game.calculatePip(Desk.current.game.board,Desk.current.game.player1);
		if(this.player1MovesTxt.text != pipsPlayer1 + "") {
			this.player1MovesTxt.set_text(pipsPlayer1 + "");
		}
		if(this.player2MovesTxt.text != pipsPlayer2 + "") {
			this.player2MovesTxt.set_text(pipsPlayer2 + "");
		}
	}
	,updateHighlightPanel: function(blink) {
		if(blink == null) {
			blink = false;
		}
		this.player1Panel.bitmapData = Desk.current.game.turn == 2?this.noHiglitBmd:this.higlitedBmd;
		this.player2Panel.bitmapData = Desk.current.game.turn == 1?this.noHiglitBmd:this.higlitedBmd;
		this.player1Panel.smoothing = this.player2Panel.smoothing = true;
		if(blink) {
			motion_Actuate.tween(this.player1Panel.bitmapData == this.noHiglitBmd?this.player1Panel:this.player2Panel,0.3,{ alpha : 0.7}).repeat(5).reflect(true).ease(motion_easing_Linear.get_easeNone());
		}
	}
	,isLandscape: null
	,onResize: function() {
		this.isLandscape = Main.current.sWidth > Main.current.sHeight;
		this.player1PanelCont.set_rotation(0);
		this.player1Takens.set_rotation(0);
		if(this.isLandscape) {
			this.menuBtnCont.set_rotation(-90);
			this.undoBtnCont.set_rotation(-90);
			this.player1PanelCont.set_rotation(90);
			this.player2PanelCont.set_rotation(90);
			this.player1MovesTxt.set_rotation(-90);
			this.player2MovesTxt.set_rotation(-90);
			this.player1MovesTxt.set_x(this.player2MovesTxt.set_x(0));
			this.player1MovesTxt.set_y(this.player2MovesTxt.set_y(this.player1MovesTxt.widthToAlign / 2));
			this.player1PanelCont.set_y(Desk.current.y + Desk.current.deskImg.y + this.noHiglitBmd.width / 2 - this.get_y());
			this.player2PanelCont.set_y(Desk.current.y + Desk.current.deskImg.y + Desk.current.deskImg.get_height() - this.noHiglitBmd.width / 2 - 10 - this.get_y());
			this.player1PanelCont.set_x(this.player2PanelCont.set_x(Desk.current.x + Desk.current.deskImg.x - this.noHiglitBmd.height / 2 - 8 - this.get_x()));
			this.player1TypeIcon.set_y(this.noHiglitBmd.height / 2 - (this.player1NumTxt.get_visible()?8:19));
			this.player2TypeIcon.set_y(this.noHiglitBmd.height / 2 - (this.player2NumTxt.get_visible()?8:19));
			this.player1TypeIcon.set_x(-this.noHiglitBmd.width / 2 + 30);
			this.player2TypeIcon.set_x(-this.noHiglitBmd.width / 2 + 30);
			if(Desk.current.inversedColors) {
				var tmp = this.player2PanelCont.get_y();
				this.player2PanelCont.set_y(this.player1PanelCont.get_y());
				this.player1PanelCont.set_y(tmp);
			}
			var maxOffseX = 90;
			var resWidth = this.sWidth / 2 + 320. + this.player1Panel.get_height();
			if(resWidth < this.sWidth) {
				Math.min(this.sWidth - resWidth,maxOffseX);
			}
			this.menuBtnCont.set_x(this.vMenuBtn.x);
			this.menuBtnCont.set_y(this.vMenuBtn.y);
			this.undoBtnCont.set_x(this.vUndoBtn.x);
			this.undoBtnCont.set_y(this.vUndoBtn.y);
		} else {
			if(Desk.current.twoPlayersViewOption == 1 && Main.current.isMobileBrowser && Desk.current.playersType[0] == "human" && Desk.current.playersType[1] == "human") {
				this.player1PanelCont.set_rotation(180);
			}
			this.menuBtnCont.set_rotation(0);
			this.undoBtnCont.set_rotation(0);
			this.player1MovesTxt.set_rotation(0);
			this.player2MovesTxt.set_rotation(0);
			this.player1MovesTxt.set_x(this.player2MovesTxt.set_x(-this.player1MovesTxt.widthToAlign / 2 + 30));
			this.player1MovesTxt.set_y(this.player2MovesTxt.set_y(-15));
			this.player1PanelCont.set_y(Desk.current.y + Desk.current.deskImg.y - this.noHiglitBmd.height / 2 - this.get_y());
			this.player2PanelCont.set_y(Desk.current.y + Desk.current.deskImg.y + Desk.current.deskImg.get_height() + this.noHiglitBmd.height / 2 - 8 - this.get_y());
			this.player1PanelCont.set_x(this.player2PanelCont.set_x(Desk.current.x + Desk.current.deskImg.x + this.noHiglitBmd.width / 2 - this.get_x()));
			if(Desk.current.inversedColors) {
				var tmp1 = this.player2PanelCont.get_y();
				this.player2PanelCont.set_y(this.player1PanelCont.get_y());
				this.player1PanelCont.set_y(tmp1);
			}
			this.player1TypeIcon.set_y(this.noHiglitBmd.height / 2 - 70);
			this.player2TypeIcon.set_y(this.noHiglitBmd.height / 2 - 70);
			this.player1TypeIcon.set_x(-this.noHiglitBmd.width / 2 + 30);
			this.player2TypeIcon.set_x(-this.noHiglitBmd.width / 2 + 30);
			this.player2PanelCont.set_rotation(0);
			this.player2Takens.set_x(this.player2PanelCont.get_x() - this.player1Panel.get_width() / 2);
			this.player2Takens.set_y(this.player2PanelCont.get_y() - this.player1Panel.get_height() / 2);
			if(this.player1PanelCont.get_rotation() != 0) {
				this.player1Takens.set_x(this.player1PanelCont.get_x() + this.player1Panel.get_width() / 2);
				this.player1Takens.set_y(this.player1PanelCont.get_y() + this.player1Panel.get_height() / 2);
				this.player1Takens.set_rotation(180);
			} else {
				this.player1Takens.set_x(this.player1PanelCont.get_x() - this.player1Panel.get_width() / 2);
				this.player1Takens.set_y(this.player1PanelCont.get_y() - this.player1Panel.get_height() / 2);
			}
			this.menuBtnCont.set_x(this.hMenuBtn.x);
			this.menuBtnCont.set_y(this.hMenuBtn.y);
			this.undoBtnCont.set_x(this.hUndoBtn.x);
			this.undoBtnCont.set_y(this.hUndoBtn.y);
		}
		this.player1TypeIcon.set_rotation(this.undoBtnCont.get_rotation());
		this.player2TypeIcon.set_rotation(this.menuBtnCont.get_rotation());
		this.updateTakensGraphic();
	}
	,__class__: IngameMenu
});
var List = function() {
	this.length = 0;
};
$hxClasses["List"] = List;
List.__name__ = ["List"];
List.prototype = {
	h: null
	,q: null
	,length: null
	,add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,pop: function() {
		if(this.h == null) {
			return null;
		}
		var x = this.h.item;
		this.h = this.h.next;
		if(this.h == null) {
			this.q = null;
		}
		this.length--;
		return x;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
$hxClasses["_List.ListNode"] = _$List_ListNode;
_$List_ListNode.__name__ = ["_List","ListNode"];
_$List_ListNode.prototype = {
	item: null
	,next: null
	,__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
$hxClasses["_List.ListIterator"] = _$List_ListIterator;
_$List_ListIterator.__name__ = ["_List","ListIterator"];
_$List_ListIterator.prototype = {
	head: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var ListExt = function() {
	this.count = 0;
	this.last = null;
	this.first = null;
	this.h = [];
	this.length = 0;
};
$hxClasses["ListExt"] = ListExt;
ListExt.__name__ = ["ListExt"];
ListExt.prototype = {
	h: null
	,length: null
	,add: function(item) {
		this.h.push(item);
		this.length++;
	}
	,addFront: function(item) {
		this.h.unshift(item);
		this.length++;
	}
	,insert: function(index,item) {
		if(index >= this.length) {
			return null;
		}
		var curItem = item;
		var curItemLast = null;
		var _g1 = index;
		var _g = this.length + 1;
		while(_g1 < _g) {
			var i = _g1++;
			curItemLast = this.h[i];
			this.h[i] = curItem;
			curItem = curItemLast;
		}
		this.length++;
		return item;
	}
	,addRange: function(range) {
		var _g1 = 0;
		var _g = range.length;
		while(_g1 < _g) this.add(range[_g1++]);
	}
	,addRangeFront: function(range) {
		var _g1 = 0;
		var _g = range.length;
		while(_g1 < _g) this.addFront(range[_g1++]);
	}
	,push: function(item) {
		this.h.unshift(item);
		this.length++;
	}
	,first: null
	,get_first: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h[0];
		}
	}
	,last: null
	,get_last: function() {
		if(this.h == null) {
			return null;
		} else {
			return this.h[this.length - 1];
		}
	}
	,count: null
	,get_count: function() {
		return this.length;
	}
	,removeAt: function(index) {
		var ret = this.h.splice(index,1)[0];
		this.length--;
		return ret;
	}
	,at: function(index) {
		return this.h[index];
	}
	,clear: function() {
		this.h = [];
		this.length = 0;
	}
	,remove: function(v) {
		var res = HxOverrides.remove(this.h,v);
		if(res) {
			this.length--;
		}
		return res;
	}
	,iterator: function() {
		return new _$ListExt_ListExtIterator(this.h);
	}
	,contains: function(item) {
		return this.h.indexOf(item) >= 0;
	}
	,__class__: ListExt
	,__properties__: {get_count:"get_count",get_last:"get_last",get_first:"get_first"}
};
var _$ListExt_ListExtIterator = function(head) {
	this.head = head;
	this.val = null;
};
$hxClasses["_ListExt.ListExtIterator"] = _$ListExt_ListExtIterator;
_$ListExt_ListExtIterator.__name__ = ["_ListExt","ListExtIterator"];
_$ListExt_ListExtIterator.prototype = {
	head: null
	,val: null
	,hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		this.val = this.head[0];
		this.head = this.head[1];
		return this.val;
	}
	,__class__: _$ListExt_ListExtIterator
};
var LocalSaves = function() {
};
$hxClasses["LocalSaves"] = LocalSaves;
LocalSaves.__name__ = ["LocalSaves"];
LocalSaves.so = null;
LocalSaves.getVar = function(name) {
	if(LocalSaves.so == null) {
		LocalSaves.localPath = window.location.href;
		LocalSaves.localPath = LocalSaves.localPath.split("?")[0];
		LocalSaves.so = openfl_net_SharedObject.getLocal(LocalSaves.storeName,LocalSaves.localPath);
	}
	return Reflect.field(LocalSaves.so.data,name);
};
LocalSaves.setVar = function(name,value) {
	if(LocalSaves.so == null) {
		LocalSaves.localPath = window.location.href;
		LocalSaves.localPath = LocalSaves.localPath.split("?")[0];
		LocalSaves.so = openfl_net_SharedObject.getLocal(LocalSaves.storeName,LocalSaves.localPath);
	}
	LocalSaves.so.data[name] = value;
	LocalSaves.so.flush();
};
LocalSaves.prototype = {
	__class__: LocalSaves
};
var Localization = function() { };
$hxClasses["Localization"] = Localization;
Localization.__name__ = ["Localization"];
Localization.__properties__ = {get_data:"get_data"}
Localization.data = null;
Localization.get_data = function() {
	// if(Localization.data == null) {
	// 	var locale = Localization.locale;
	// 	if(locale == "en") {
	// 		locale += "GB";
	// 	} else {
	// 		locale += locale.toUpperCase();
	// 	}
	// 	Localization.data = JSON.parse(openfl_Assets.getText("img/strings_" + locale + ".json"));
	// }
	// return Localization.data;
};
Localization.getString = function(id,checkUndefined,searchId) {
	if(searchId == null) {
		searchId = false;
	}
	if(checkUndefined == null) {
		checkUndefined = false;
	}
	// if(searchId) {
	// 	var keys = Reflect.fields(Localization.get_data());
	// 	var _g1 = 0;
	// 	var _g = keys.length;
	// 	while(_g1 < _g) {
	// 		var i = _g1++;
	// 		if(keys[i].indexOf(id) != -1) {
	// 			id = keys[i];
	// 			break;
	// 		}
	// 	}
	// }
	//var retValue = Reflect.field(Localization.get_data(),id);

	var retValue = window.famobi.__(id);

	if(checkUndefined && (retValue == null || retValue == ""))
		retValue = window.famobi.__(id + "_undefined");
	if(retValue == null) {
		return "";
	}
	return retValue;
};
var MainMenu = function() {
	this.bgsArr = [];
	Menu.call(this);
	this.mainBatch = this.main.batch;
	this.bgsSpr = this.getSprite();
	this.createBgs();
	var btnsCont = this.getSprite();
	var logo = this.getBimap("logo",null,btnsCont);
	logo.set_scaleX(logo.set_scaleY(0.9));
	logo.set_x(this.sWidth / 2 - logo.get_width() / 2);
	var curY = logo.get_height() + 100;
	var gapY = 107;
	var onePlayerBtn = this.getBimap("one_plaier",$bind(this,this.onePlayerClick),btnsCont);
	onePlayerBtn.set_x(this.sWidth / 2 - onePlayerBtn.get_width() / 2);
	onePlayerBtn.set_y(curY);
	curY += gapY;
	var twoPlayerBtn = this.getBimap("2_plaiers",$bind(this,this.twoPlayerClick),btnsCont);
	twoPlayerBtn.set_y(curY);
	twoPlayerBtn.set_x(this.sWidth / 2 - twoPlayerBtn.get_width() / 2);
	curY += gapY;
	var optionBtn = this.getBimap("MENU-002",$bind(this,this.optionClick),btnsCont);
	optionBtn.set_y(curY);
	optionBtn.set_x(this.sWidth / 2 - optionBtn.get_width() / 2);
	this.isImagesFromAtlas = false;

	// var moreGamesBtn = this.getBimap("img/More_Games600x253_onWhite.png", function() {
	// 	window.famobi.moreGamesLink();
	// }, btnsCont);

	var moreGamesBtn = this.getBimap(famobi_mgb_url, function() {
		window.famobi.moreGamesLink();
	}, btnsCont);

	moreGamesBtn.set_scaleX(moreGamesBtn.set_scaleY(optionBtn.get_height() / moreGamesBtn.get_height()));
	moreGamesBtn.set_x(this.sWidth / 2 - moreGamesBtn.get_width() / 2);
	curY += gapY;
	moreGamesBtn.set_y(curY);

	this.isImagesFromAtlas = true;
	btnsCont.set_y(this.sHeight / 2 - btnsCont.get_height() / 2);
	this.moveThisOnResize = true;
	this.moveByResizeCallBack = $bind(this,this.onResize);
	var wasY = this.get_y();
	if(!MainMenu.isFirstInit) {
		this.set_y(this.get_y() + this.sHeight);
		var famobi = window.famobi;
		if(famobi != null) {
			famobi.showAd();
		}
	}
	motion_Actuate.tween(this,0.3,{ y : wasY}).ease(motion_easing_Quad.get_easeOut());
	MainMenu.isFirstInit = false;
};
$hxClasses["MainMenu"] = MainMenu;
MainMenu.__name__ = ["MainMenu"];
MainMenu.__super__ = Menu;
MainMenu.prototype = $extend(Menu.prototype,{
	bgsArr: null
	,bgsSpr: null
	,onePlayerClick: function() {
		this.main.addChild(new PlayMenu(true));
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
	}
	,twoPlayerClick: function() {
		this.main.addChild(new PlayMenu(false));
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
	}
	,load: function() {
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		Main.current.addChild(new SaveLoadWindow(true));
	}
	,optionClick: function() {
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		Main.current.addChild(new Options(true));
	}
	,onResize: function() {
		this.createBgs();
		var tmp = this.get_scaleX();
		this.bgsSpr.set_x(-this.get_x() / tmp);
		var tmp1 = this.get_scaleY();
		this.bgsSpr.set_y(-this.get_y() / tmp1);
	}
	,createBgs: function() {
		var lastIndex = 0;
		var sizeX = 0;
		var bg;
		this.isImagesFromAtlas = false;
		while(sizeX < Main.current.sWidth) {
			if(this.bgsArr[lastIndex] != null) {
				bg = this.bgsArr[lastIndex];
				bg.set_visible(true);
			} else {
				bg = this.getBimap("img/bg.jpg",null,this.bgsSpr);
				this.bgsArr.push(bg);
			}
			bg.set_x(sizeX);
			bg.set_y(0);
			bg.set_scaleX(bg.set_scaleY(Main.current.sHeight / bg.bitmapData.height));
			sizeX += bg.get_width() - 2;
			++lastIndex;
		}
		this.isImagesFromAtlas = true;
		var _g1 = lastIndex;
		var _g = this.bgsArr.length;
		while(_g1 < _g) this.bgsArr[_g1++].set_visible(false);
		this.bgsSpr.set_scaleX(this.bgsSpr.set_scaleY(1 / this.get_scaleX()));
	}
	,getBtnWithText: function(text,callBack) {
		var spr = this.getSprite();
		var bm = this.getBimap("TEXT_bg",callBack,spr);
		this.addTextField("Aalgrs",60,0,false,"CENTER",0,8,bm.get_width(),bm.get_height(),false,0,0,spr).set_text(text);
		return spr;
	}
	,__class__: MainMenu
});
Math.__name__ = ["Math"];
var openfl_display_Bitmap = function(bitmapData,pixelSnapping,smoothing) {
	if(smoothing == null) {
		smoothing = false;
	}
	openfl_display_DisplayObject.call(this);
	this.bitmapData = bitmapData;
	this.pixelSnapping = pixelSnapping;
	this.smoothing = smoothing;
	if(pixelSnapping == null) {
		this.pixelSnapping = 1;
	}
};
$hxClasses["openfl.display.Bitmap"] = openfl_display_Bitmap;
openfl_display_Bitmap.__name__ = ["openfl","display","Bitmap"];
openfl_display_Bitmap.__super__ = openfl_display_DisplayObject;
openfl_display_Bitmap.prototype = $extend(openfl_display_DisplayObject.prototype,{
	bitmapData: null
	,pixelSnapping: null
	,smoothing: null
	,__image: null
	,__getBounds: function(rect,matrix) {
		if(this.bitmapData != null) {
			var bounds = openfl_geom_Rectangle.__temp;
			bounds.setTo(0,0,this.bitmapData.width,this.bitmapData.height);
			bounds.__transform(bounds,matrix);
			rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
		}
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || this.bitmapData == null) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getWorldTransform();
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			if(stack != null && !interactiveOnly) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		if(this.bitmapData == null) {
			return false;
		}
		this.__getWorldTransform();
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		var py = norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x));
		if(px > 0 && py > 0 && px <= this.bitmapData.width && py <= this.bitmapData.height) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var cairo = renderSession.cairo;
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				if(this.__mask != null) {
					renderSession.maskManager.pushMask(this.__mask);
				}
				var transform = this.__renderTransform;
				var scrollRect = this.get_scrollRect();
				if(renderSession.roundPixels) {
					var matrix = transform.__toMatrix3();
					matrix.tx = Math.round(matrix.tx);
					matrix.ty = Math.round(matrix.ty);
					cairo.set_matrix(matrix);
				} else {
					cairo.set_matrix(transform.__toMatrix3());
				}
				var surface = this.bitmapData.getSurface();
				if(surface != null) {
					var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
					lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,this.smoothing?1:3);
					if(scrollRect != null) {
						cairo.pushGroup();
						cairo.set_source(pattern);
						cairo.newPath();
						cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
						cairo.fill();
						cairo.popGroupToSource();
					} else {
						cairo.set_source(pattern);
					}
					if(this.__worldAlpha == 1) {
						cairo.paint();
					} else {
						cairo.paintWithAlpha(this.__worldAlpha);
					}
				}
				if(this.__mask != null) {
					renderSession.maskManager.popMask();
				}
			}
		}
	}
	,__renderCairoMask: function(renderSession) {
		renderSession.cairo.rectangle(0,0,this.get_width(),this.get_height());
	}
	,__renderCanvas: function(renderSession) {
		if(!(!this.__renderable || this.__worldAlpha <= 0)) {
			var context = renderSession.context;
			if(this.bitmapData != null && this.bitmapData.__isValid) {
				if(this.__mask != null) {
					renderSession.maskManager.pushMask(this.__mask);
				}
				this.bitmapData.__sync();
				context.globalAlpha = this.__worldAlpha;
				var transform = this.__renderTransform;
				var scrollRect = this.get_scrollRect();
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(!this.smoothing) {
					context.mozImageSmoothingEnabled = false;
					context.msImageSmoothingEnabled = false;
					context.imageSmoothingEnabled = false;
				}
				if(scrollRect == null) {
					context.drawImage(this.bitmapData.image.get_src(),0,0);
				} else {
					context.drawImage(this.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				}
				if(!this.smoothing) {
					context.mozImageSmoothingEnabled = true;
					context.msImageSmoothingEnabled = true;
					context.imageSmoothingEnabled = true;
				}
				if(this.__mask != null) {
					renderSession.maskManager.popMask();
				}
			}
		}
	}
	,__renderCanvasMask: function(renderSession) {
		renderSession.context.rect(0,0,this.get_width(),this.get_height());
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable && this.bitmapData != null && this.bitmapData.__isValid) {
			if(this.bitmapData.image.buffer.__srcImage != null) {
				openfl__$internal_renderer_dom_DOMBitmap.renderImage(this,renderSession);
			} else {
				openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(this,renderSession);
			}
		} else {
			if(this.__image != null) {
				renderSession.element.removeChild(this.__image);
				this.__image = null;
				this.__style = null;
			}
			if(this.__canvas != null) {
				renderSession.element.removeChild(this.__canvas);
				this.__canvas = null;
				this.__style = null;
			}
		}
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
			var x = this.__cachedBitmapBounds.x;
			var y = this.__cachedBitmapBounds.y;
			var w = this.__cachedBitmapBounds.width;
			var h = this.__cachedBitmapBounds.height;
			if(this.__cacheGLMatrix == null) {
				this.__cacheGLMatrix = new openfl_geom_Matrix();
			}
			if(hasCacheMatrix) {
				var bmpBounds = openfl_geom_Rectangle.__temp;
				this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
				x = bmpBounds.x;
				y = bmpBounds.y;
				w = bmpBounds.width;
				h = bmpBounds.height;
				this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
			} else {
				this.__cacheGLMatrix.identity();
			}
			if(!(w <= 0 && h <= 0)) {
				if(this.__updateCachedBitmap || this.__updateFilters) {
					if(this.__cachedFilterBounds != null) {
						w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
						h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
					}
					if(this.__cachedBitmap == null) {
						this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
					}
					this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
					var m = this.__cacheGLMatrix.clone();
					m.translate(-x,-y);
					var shader = this.__shader;
					this.__shader = null;
					this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
					this.__shader = shader;
					this.__updateCachedBitmap = false;
				}
				if(this.__updateFilters) {
					openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
					this.__updateFilters = false;
				}
				this.__cacheGLMatrix.invert();
				var _this = this.__cacheGLMatrix;
				_this.tx = x * _this.a + y * _this.c + _this.tx;
				_this.ty = x * _this.b + y * _this.d + _this.ty;
				this.__cacheGLMatrix.concat(this.__renderTransform);
				this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
				renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,0);
			}
			return;
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.pushMask(this);
		}
		if(!(!this.__renderable || this.__worldAlpha <= 0 || this.bitmapData == null || !this.bitmapData.__isValid)) {
			renderSession.spriteBatch.renderBitmapData(this.bitmapData,this.smoothing,this.__renderTransform,this.__worldColorTransform,this.__worldAlpha,this.__blendMode,this.__shader,this.pixelSnapping);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.popMask();
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.popRect();
		}
	}
	,__updateMask: function(maskGraphics) {
		if(this.bitmapData == null) {
			return;
		}
		maskGraphics.__commands.overrideMatrix(this.__worldTransform);
		maskGraphics.beginFill(0);
		maskGraphics.drawRect(0,0,this.bitmapData.width,this.bitmapData.height);
		if(maskGraphics.__bounds == null) {
			maskGraphics.__bounds = new openfl_geom_Rectangle();
		}
		this.__getBounds(maskGraphics.__bounds,openfl_geom_Matrix.__identity);
		openfl_display_DisplayObject.prototype.__updateMask.call(this,maskGraphics);
	}
	,get_height: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.height * this.get_scaleY();
		}
		return 0;
	}
	,set_height: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.height) {
				this.set_scaleY(value / this.bitmapData.height);
			}
			return value;
		}
		return 0;
	}
	,get_width: function() {
		if(this.bitmapData != null) {
			return this.bitmapData.width * this.get_scaleX();
		}
		return 0;
	}
	,set_width: function(value) {
		if(this.bitmapData != null) {
			if(value != this.bitmapData.width) {
				this.set_scaleX(value / this.bitmapData.width);
			}
			return value;
		}
		return 0;
	}
	,__class__: openfl_display_Bitmap
});
var MenuMC = function(prefix,framesSpeed,loop,startDelay,loopDelay,batch,prefix3Signs) {
	if(prefix3Signs == null) {
		prefix3Signs = false;
	}
	if(loopDelay == null) {
		loopDelay = 0;
	}
	if(startDelay == null) {
		startDelay = 0;
	}
	if(loop == null) {
		loop = true;
	}
	if(framesSpeed == null) {
		framesSpeed = 1;
	}
	this.framesSpeed = 1;
	this.prefix = "";
	this.curDelay = 0;
	this.loopDelay = 0;
	this.startDelay = 0;
	this.isPlaying = true;
	this.loop = true;
	this.totalFrames = 0;
	this.currentFrame = 0;
	this.framesSpeed = framesSpeed;
	this.prefix = prefix;
	this.loop = loop;
	this.startDelay = startDelay;
	this.loopDelay = loopDelay;
	this.batching = batch;
	this.bmdsArr = [];
	var zerosPrefix = prefix3Signs?"0":"00";
	var tbmd = null;
	var imName;
	var batchImName = "";
	var rArr;
	var _g = 0;
	while(_g < 100) {
		var i = _g++;
		imName = prefix + (i < 10?zerosPrefix + "0":zerosPrefix) + i + ".png";
		if(this.batching == null) {
			if(openfl_Assets.exists(imName,"IMAGE")) {
				tbmd = openfl_Assets.getBitmapData(imName);
			}
		} else {
			batchImName = imName.substring(0,imName.length - 4);
			rArr = batchImName.split("/");
			batchImName = rArr[rArr.length - 1];
			if(this.batching.getImgId(batchImName) != -1) {
				tbmd = this.batching.getBitmapData(batchImName);
			}
		}
		if(tbmd != null) {
			this.bmdsArr.push(tbmd);
		}
	}
	while(this.bmdsArr[this.bmdsArr.length - 1] == tbmd && this.bmdsArr.length > 0) this.bmdsArr.pop();
	this.bmdsArr.push(tbmd);
	this.totalFrames = this.bmdsArr.length;
	openfl_display_Bitmap.call(this,this.bmdsArr[0],1,true);
	if(startDelay != 0 && startDelay > 0) {
		this.curDelay = startDelay;
	}
	this.smoothing = true;
};
$hxClasses["MenuMC"] = MenuMC;
MenuMC.__name__ = ["MenuMC"];
MenuMC.__super__ = openfl_display_Bitmap;
MenuMC.prototype = $extend(openfl_display_Bitmap.prototype,{
	currentFrame: null
	,totalFrames: null
	,loop: null
	,isPlaying: null
	,startDelay: null
	,loopDelay: null
	,curDelay: null
	,prefix: null
	,framesSpeed: null
	,batching: null
	,bmdsArr: null
	,play: function() {
		this.isPlaying = true;
	}
	,stop: function() {
		this.isPlaying = false;
	}
	,getWidth: function() {
		return this.bmdsArr[0].width;
	}
	,getHeight: function() {
		return this.bmdsArr[0].height;
	}
	,startFromFrame1: function() {
		this.currentFrame = 0;
		this.isPlaying = true;
	}
	,gotoAndStop: function(frame) {
		this.isPlaying = false;
	}
	,update: function(frameTime) {
		if(!this.isPlaying || !this.get_visible() || this.get_alpha() == 0) {
			return;
		}
		if(this.curDelay > 0) {
			this.curDelay -= frameTime;
		}
		if(this.curDelay <= 0) {
			this.curDelay = 0;
		} else {
			return;
		}
		this.currentFrame += frameTime / 16.666666666666668 * this.framesSpeed;
		if(this.currentFrame >= this.totalFrames) {
			if(this.loop) {
				this.currentFrame = 0;
				if(this.loopDelay > 0) {
					this.curDelay = this.loopDelay;
				}
				this.bitmapData = this.bmdsArr[this.bmdsArr.length - 1];
				return;
			} else {
				this.isPlaying = false;
			}
		}
		this.bitmapData = this.bmdsArr[Math.floor(this.currentFrame)];
		this.smoothing = true;
	}
	,destroy: function() {
		this.batching = null;
		while(this.bmdsArr.length > 0) this.bmdsArr.pop();
		this.bmdsArr = null;
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
	}
	,__class__: MenuMC
});
var MovieClipHX = function(data) {
	this.stopFrames = [];
	this.__isPlaying = true;
	this.name = "";
	this.visible = true;
	this.rotation = 0;
	this.scaleY = 1;
	this.scaleX = 1;
	this.y = 0;
	this.x = 0;
	this.data = data;
	this.main = Main.current;
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = (data.framesData.totalFrames | 0) - 1;
	var lastLabelName = "";
	var _g1 = 0;
	var _g = data.labels.length;
	while(_g1 < _g) {
		var i = _g1++;
		var _g3 = 0;
		var _g2 = data.labels[i].length;
		while(_g3 < _g2) {
			var j = _g3++;
			if(lastLabelName == data.labels[i][j]) {
				continue;
			}
			lastLabelName = data.labels[i][j];
			this.__currentLabels.push(new openfl_display_FrameLabel(data.labels[i][j],i));
		}
	}
	this.childs = [];
	var _g11 = 0;
	var _g4 = this.get_totalFrames();
	while(_g11 < _g4) this.childs[_g11++] = [];
	var mainBatch = null;
	var dObj;
	var frData;
	var _g12 = 0;
	var _g5 = data.framesData.frames.length;
	while(_g12 < _g5) {
		var i1 = _g12++;
		if(mainBatch == null) {
			var _g31 = 0;
			var _g21 = this.main.atlases.length;
			while(_g31 < _g21) {
				var j1 = _g31++;
				if(this.main.atlases[j1].getImgId(data.framesData.frames[i1].i) != -1) {
					mainBatch = this.main.atlases[j1];
					break;
				}
			}
		}
		frData = data.framesData.frames[i1];
		dObj = new SimpleDObj(mainBatch,frData.i,frData.a,frData.b,frData.c,frData.d,frData.tx,frData.ty);
		dObj.parent = this;
		this.childs[frData.f].push(dObj);
	}
	this.batchMatrix = new openfl_geom_Matrix();
	this.main.movieClips.push(this);
};
$hxClasses["MovieClipHX"] = MovieClipHX;
MovieClipHX.__name__ = ["MovieClipHX"];
MovieClipHX.prototype = {
	batchMatrix: null
	,childs: null
	,x: null
	,y: null
	,scaleX: null
	,scaleY: null
	,rotation: null
	,visible: null
	,currentFrame: null
	,currentFrameLabel: null
	,currentLabel: null
	,currentLabels: null
	,totalFrames: null
	,numChildren: null
	,isPlaying: null
	,name: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__totalFrames: null
	,__isPlaying: null
	,data: null
	,main: null
	,stopFrames: null
	,set_x: function(value) {
		this.x = value;
		this.updateMatrix();
		return value;
	}
	,set_y: function(value) {
		this.y = value;
		this.updateMatrix();
		return value;
	}
	,set_scaleX: function(value) {
		this.scaleX = value;
		this.updateMatrix();
		return value;
	}
	,set_scaleY: function(value) {
		this.scaleY = value;
		this.updateMatrix();
		return value;
	}
	,set_rotation: function(value) {
		this.rotation = value;
		this.updateMatrix();
		return value;
	}
	,set_visible: function(value) {
		if(this.visible == value) {
			return value;
		}
		this.visible = value;
		return value;
	}
	,updateMatrix: function() {
		this.batchMatrix.identity();
		this.batchMatrix.scale(this.scaleX,this.scaleY);
		this.batchMatrix.rotate(this.rotation);
		this.batchMatrix.translate(this.x,this.y);
	}
	,addChild: function(child) {
		child.parent = this;
		this.childs[this.__currentFrame].push(child);
		return child;
	}
	,removeChild: function(child) {
		if(child == null) {
			return null;
		}
		child.parent = null;
		HxOverrides.remove(this.childs[this.__currentFrame],child);
		return child;
	}
	,addChildAt: function(child,index) {
		child.parent = this;
		this.childs[this.__currentFrame].splice(child,0,index);
		return child;
	}
	,removeChildAt: function(index) {
		return this.removeChild(this.childs[this.__currentFrame][index]);
	}
	,getChildAt: function(index) {
		return this.childs[this.__currentFrame][index];
	}
	,gotoAndPlay: function(frame,scene) {
		var frNum = 0;
		if(typeof(frame) == "string") {
			var _g1 = 0;
			var _g = this.__currentLabels.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__currentLabels[i].get_name() == frame) {
					frNum = this.__currentLabels[i].get_frame();
					break;
				}
			}
		} else {
			frNum = (frame | 0) - 1;
		}
		this.__currentFrame = frNum;
		this.__isPlaying = true;
	}
	,gotoAndStop: function(frame,scene) {
		var frNum = 0;
		if(typeof(frame) == "string") {
			var _g1 = 0;
			var _g = this.__currentLabels.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__currentLabels[i].get_name() == frame) {
					frNum = this.__currentLabels[i].get_frame();
					break;
				}
			}
		} else {
			frNum = (frame | 0) - 1;
		}
		this.__currentFrame = frNum;
		this.__isPlaying = false;
	}
	,nextFrame: function() {
		this.__currentFrame++;
	}
	,play: function() {
		this.__isPlaying = true;
	}
	,prevFrame: function() {
		this.__currentFrame--;
	}
	,stop: function() {
		this.__isPlaying = false;
	}
	,update: function(changeFrame) {
		if(changeFrame == null) {
			changeFrame = true;
		}
		if(this.__isPlaying) {
			this.__currentFrameLabel = "";
			var _g1 = 0;
			var _g = this.__currentLabels.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.__currentLabels[i].get_frame() == this.__currentFrame) {
					this.__currentFrameLabel = this.__currentLabels[i].get_name();
					this.__currentLabel = this.__currentLabels[i].get_name();
					break;
				}
			}
			this.__currentFrame++;
			if(this.__currentFrame >= this.get_totalFrames()) {
				this.__currentFrame = 0;
			}
			var _g11 = 0;
			var _g2 = this.stopFrames.length;
			while(_g11 < _g2) if(this.stopFrames[_g11++] == this.__currentFrame) {
				this.__isPlaying = false;
			}
		}
	}
	,frameHasLabelName: function(name) {
		var _g1 = 0;
		var _g = this.__currentLabels.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.__currentLabels[i].get_frame() == this.__currentFrame && this.__currentLabels[i].get_name() == name) {
				return true;
			}
		}
		return false;
	}
	,frameIsLabelName: function(name) {
		var thisFrameIsLabel = false;
		var prevFrameIsLabel = false;
		var _g1 = 0;
		var _g = this.__currentLabels.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!thisFrameIsLabel && this.__currentLabels[i].get_frame() == this.__currentFrame && this.__currentLabels[i].get_name() == name) {
				thisFrameIsLabel = true;
			}
			if(!prevFrameIsLabel && this.__currentLabels[i].get_frame() == this.__currentFrame - 1 && this.__currentLabels[i].get_name() == name) {
				prevFrameIsLabel = true;
			}
			if(thisFrameIsLabel && prevFrameIsLabel) {
				break;
			}
		}
		if(thisFrameIsLabel) {
			return !prevFrameIsLabel;
		} else {
			return false;
		}
	}
	,get_currentFrame: function() {
		return this.__currentFrame + 1;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_totalFrames: function() {
		return this.__totalFrames + 1;
	}
	,get_numChildren: function() {
		return this.childs.length;
	}
	,get_isPlaying: function() {
		return this.__isPlaying;
	}
	,render: function() {
		if(!this.visible) {
			return;
		}
		var _g1 = 0;
		var _g = this.childs[this.__currentFrame].length;
		while(_g1 < _g) this.childs[this.__currentFrame][_g1++].render();
	}
	,__class__: MovieClipHX
	,__properties__: {get_isPlaying:"get_isPlaying",get_numChildren:"get_numChildren",get_totalFrames:"get_totalFrames",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame",set_visible:"set_visible",set_rotation:"set_rotation",set_scaleY:"set_scaleY",set_scaleX:"set_scaleX",set_y:"set_y",set_x:"set_x"}
};
var SimpleDObj = function(batch,imName,ma,mb,mc,md,mtx,mty) {
	this.hm = new openfl_geom_Matrix();
	this.batchId = 0;
	this.batch = batch;
	this.batchId = batch.getImgId(imName);
	this.matrix = new openfl_geom_Matrix(ma,mb,mc,md,mtx,mty);
};
$hxClasses["SimpleDObj"] = SimpleDObj;
SimpleDObj.__name__ = ["SimpleDObj"];
SimpleDObj.prototype = {
	batchId: null
	,matrix: null
	,batch: null
	,hm: null
	,parent: null
	,render: function() {
		if(this.parent != null) {
			this.hm.a = this.matrix.a;
			this.hm.b = this.matrix.b;
			this.hm.c = this.matrix.c;
			this.hm.d = this.matrix.d;
			this.hm.tx = this.matrix.tx;
			this.hm.ty = this.matrix.ty;
			this.hm.concat(this.parent.batchMatrix);
		} else {
			this.hm.a = this.matrix.a;
			this.hm.b = this.matrix.b;
			this.hm.c = this.matrix.c;
			this.hm.d = this.matrix.d;
			this.hm.tx = this.matrix.tx;
			this.hm.ty = this.matrix.ty;
		}
		this.batch.addDraw(this.batchId,this.hm,1);
	}
	,__class__: SimpleDObj
};
var NMEPreloader = function() {
	openfl_display_Sprite.call(this);
	var backgroundColor = this.getBackgroundColor();
	var perceivedLuminosity = 0.299 * (backgroundColor >> 16 & 255) + 0.587 * (backgroundColor >> 8 & 255) + 0.114 * (backgroundColor & 255);
	var color = 0;
	if(perceivedLuminosity < 70) {
		color = 16777215;
	}
	var y = this.getHeight() / 2 - 3.5;
	var width = this.getWidth() - 60;
	this.outline = new openfl_display_Sprite();
	this.outline.get_graphics().beginFill(color,0.07);
	this.outline.get_graphics().drawRect(0,0,width,7);
	this.outline.set_x(30);
	this.outline.set_y(y);
	this.addChild(this.outline);
	this.progress = new openfl_display_Sprite();
	this.progress.get_graphics().beginFill(color,0.35);
	this.progress.get_graphics().drawRect(0,0,width - 4,3);
	this.progress.set_x(32);
	this.progress.set_y(y + 2);
	this.progress.set_scaleX(0);
	this.addChild(this.progress);
};
$hxClasses["NMEPreloader"] = NMEPreloader;
NMEPreloader.__name__ = ["NMEPreloader"];
NMEPreloader.__super__ = openfl_display_Sprite;
NMEPreloader.prototype = $extend(openfl_display_Sprite.prototype,{
	outline: null
	,progress: null
	,getBackgroundColor: function() {
		return 0;
	}
	,getHeight: function() {
		return openfl_Lib.current.stage.stageHeight;
	}
	,getWidth: function() {
		return openfl_Lib.current.stage.stageWidth;
	}
	,onInit: function() {
	}
	,onLoaded: function() {
		this.dispatchEvent(new openfl_events_Event("complete"));
	}
	,onUpdate: function(bytesLoaded,bytesTotal) {
		var percentLoaded = bytesLoaded / bytesTotal;
		if(percentLoaded > 1) {
			percentLoaded = 1;
		}
		this.progress.set_scaleX(percentLoaded);
	}
	,__class__: NMEPreloader
});
var NumFontFromBatch = function(batch,prefix) {
	this.pool = [];
	this.displayObjects = [];
	this.widthToAlign = 0;
	this.gapX = 0;
	this.text = "";
	this.align = "LEFT";
	openfl_display_Sprite.call(this);
	this.batch = batch;
	this.prefix = prefix;
};
$hxClasses["NumFontFromBatch"] = NumFontFromBatch;
NumFontFromBatch.__name__ = ["NumFontFromBatch"];
NumFontFromBatch.__super__ = openfl_display_Sprite;
NumFontFromBatch.prototype = $extend(openfl_display_Sprite.prototype,{
	batch: null
	,prefix: null
	,align: null
	,text: null
	,gapX: null
	,widthToAlign: null
	,displayObjects: null
	,pool: null
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.updateText();
		return value;
	}
	,set_align: function(value) {
		if(value == this.align) {
			return value;
		}
		this.align = value;
		this.updateText();
		return value;
	}
	,set_gapX: function(value) {
		if(value == this.gapX) {
			return value;
		}
		this.gapX = value;
		this.updateText();
		return value;
	}
	,updateText: function() {
		var bm;
		while(this.displayObjects.length > 0) {
			bm = this.displayObjects.pop();
			if(bm.parent != null) {
				bm.parent.removeChild(bm);
			}
			this.pool.push(bm);
		}
		var dObj;
		var curX = 0;
		var totWidth = 0;
		var ind;
		var imName;
		var _g1 = 0;
		var _g = this.text.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.text.charAt(i) == ".") {
				ind = 11;
			} else {
				ind = Std.parseInt(this.text.charAt(i));
			}
			imName = this.prefix + ind;
			if(this.pool.length > 0) {
				dObj = this.pool.pop();
				dObj.bitmapData = this.batch.getBitmapData(imName,false);
				dObj.smoothing = true;
			} else {
				dObj = new openfl_display_Bitmap(this.batch.getBitmapData(imName,false),1,true);
			}
			this.displayObjects.push(dObj);
			this.addChild(dObj);
			dObj.set_x(curX);
			dObj.set_y(0);
			curX += dObj.get_width() + this.gapX;
		}
		totWidth = curX - this.gapX;
		var offsetX = 0;
		if(this.align == "LEFT") {
			offsetX = 0;
		} else if(this.align == "CENTER") {
			offsetX = this.widthToAlign / 2 - totWidth / 2;
		} else if(this.align == "RIGHT") {
			offsetX = this.widthToAlign - totWidth;
		}
		var _g11 = 0;
		var _g2 = this.displayObjects.length;
		while(_g11 < _g2) {
			var _g21 = this.displayObjects[_g11++];
			_g21.set_x(_g21.get_x() + offsetX);
		}
	}
	,destroy: function() {
		while(this.displayObjects.length > 0) this.displayObjects.pop();
		while(this.pool.length > 0) this.pool.pop();
		while(this.get_numChildren() > 0) this.removeChildAt(0);
		this.displayObjects = null;
		this.pool = null;
		this.batch = null;
	}
	,__class__: NumFontFromBatch
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_gapX:"set_gapX",set_text:"set_text",set_align:"set_align"})
});
var NumericFont = function(fontImgName,symbolWidth) {
	this.img = openfl_Assets.getBitmapData("img/" + fontImgName + ".png");
	this.symWidth = symbolWidth;
	this.hp = new openfl_geom_Point();
	this.hct = new openfl_geom_ColorTransform();
	this.hm = new openfl_geom_Matrix();
	this.hr = new openfl_geom_Rectangle(0,0,this.symWidth,this.img.height);
	this.colorArray = new haxe_ds_IntMap();
};
$hxClasses["NumericFont"] = NumericFont;
NumericFont.__name__ = ["NumericFont"];
NumericFont.prototype = {
	img: null
	,colorArray: null
	,symWidth: null
	,hp: null
	,hct: null
	,hm: null
	,hr: null
	,drawTo: function(dest,text,x,y,centerX,centerY,color,alignRight) {
		if(alignRight == null) {
			alignRight = false;
		}
		if(color == null) {
			color = 0;
		}
		if(centerY == null) {
			centerY = false;
		}
		if(centerX == null) {
			centerX = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var symArr = text.split("");
		var sourceBmd;
		if(centerX) {
			this.hp.x = x - symArr.length * this.symWidth / 2;
		} else {
			this.hp.x = x;
		}
		if(centerY) {
			this.hp.y = y - this.img.height / 2;
		} else {
			this.hp.y = y;
		}
		if(alignRight) {
			this.hp.x = x - symArr.length * this.symWidth;
		}
		if(color != 0) {
			sourceBmd = this.getBmdColor(color);
		} else {
			sourceBmd = this.img;
		}
		var ctx = dest.image.buffer.__srcContext;
		var sctx = sourceBmd.image.buffer.get_src();
		var drawIndex;
		var _g1 = 0;
		var _g = symArr.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(symArr[i] == "x") {
				drawIndex = 10;
			} else {
				drawIndex = Std.parseInt(symArr[i]);
			}
			this.hr.x = drawIndex * this.symWidth;
			ctx.drawImage(sctx,this.hr.x,this.hr.y,this.hr.width,this.hr.height,this.hp.x,this.hp.y,this.hr.width,this.hr.height);
			this.hp.x += this.symWidth;
		}
	}
	,getBm: function(text) {
		var symArr = text.split("");
		var bm = new openfl_display_Bitmap(new openfl_display_BitmapData(Math.ceil(this.symWidth * symArr.length),this.img.height,true,0),1,true);
		this.drawTo(bm.bitmapData,text);
		return bm;
	}
	,drawTo1: function(dest,text,x,y,centerX,centerY,color,alignRight) {
		if(alignRight == null) {
			alignRight = false;
		}
		if(color == null) {
			color = 0;
		}
		if(centerY == null) {
			centerY = false;
		}
		if(centerX == null) {
			centerX = false;
		}
		if(y == null) {
			y = 0;
		}
		if(x == null) {
			x = 0;
		}
		var symArr = text.split("");
		var sourceBmd;
		if(centerX) {
			this.hp.x = x - symArr.length * this.symWidth / 2;
		} else {
			this.hp.x = x;
		}
		if(centerY) {
			this.hp.y = y - this.img.height / 2;
		} else {
			this.hp.y = y;
		}
		if(alignRight) {
			this.hp.x = x - symArr.length * this.symWidth;
		}
		if(color != 0) {
			sourceBmd = this.getBmdColor(color);
		} else {
			sourceBmd = this.img;
		}
		var ctx = dest.image.buffer.__srcContext;
		var sctx = sourceBmd.image.buffer.get_src();
		var drawIndex;
		var _g1 = 0;
		var _g = symArr.length;
		while(_g1 < _g) {
			drawIndex = Std.parseInt(symArr[_g1++]);
			this.hr.x = drawIndex * this.symWidth;
			ctx.drawImage(sctx,this.hr.x,this.hr.y,this.hr.width,this.hr.height,this.hp.x,this.hp.y,this.hr.width,this.hr.height);
			this.hp.x += this.symWidth;
		}
	}
	,getBmdColor: function(color) {
		if(this.colorArray.h.hasOwnProperty(color)) {
			return this.colorArray.h[color];
		}
		var tbmd = new openfl_display_BitmapData(this.img.width,this.img.height,true,0);
		tbmd.copyPixels(this.img,this.img.rect,new openfl_geom_Point(),null,null,true);
		this.hct.set_color(color);
		tbmd.colorTransform(tbmd.rect,this.hct);
		this.colorArray.h[color] = tbmd;
		return tbmd;
	}
	,getNumberBmd: function(num) {
		var tbmd = new openfl_display_BitmapData(this.symWidth | 0,this.img.height,true,0);
		this.hr.x = num * this.symWidth;
		this.hp.x = this.hp.y = 0;
		tbmd.copyPixels(this.img,this.hr,this.hp,null,null,true);
		return tbmd;
	}
	,__class__: NumericFont
};
var Options = function(fromMainMenu) {
	if(fromMainMenu == null) {
		fromMainMenu = false;
	}
	this.isFromMainMenu = false;
	this.initSwidth = 0;
	this.initSheight = 0;
	this.initChessesThemeScrollY = 0;
	this.initChessesThemeScrollX = 0;
	this.initMainThemeScrollY = 0;
	this.initMainThemeScrollX = 0;
	this.bgsArr = [];
	Menu.call(this);
	this.isFromMainMenu = fromMainMenu;
	this.mainBatch = this.main.batch;
	this.bgsSpr = this.getSprite();
	this.createBgs();
	this.mainCont = this.getSprite();
	this.backBtn = this.getBimap("Back-001",$bind(this,this.backClick));
	var botBtnsGapX = 40;
	this.backBtn.set_x(this.sWidth / 2 - this.backBtn.get_width() - botBtnsGapX / 2);
	if(this.isFromMainMenu) {
		this.backBtn.set_x(this.sWidth / 2 - this.backBtn.get_width() / 2);
	}
	this.backBtn.set_y(this.sHeight - this.backBtn.get_height() - 30);
	this.drawBtn = null;
	if(!this.isFromMainMenu) {
		this.mainMenuBtn = this.getBimap("home_copy",$bind(this,this.mainMenuClick));
		this.mainMenuBtn.set_x(this.sWidth / 2 + botBtnsGapX / 2);
		this.mainMenuBtn.set_y(this.backBtn.get_y());
		this.main.paused = true;
	}
	this.sndBtn = this.getBimap("sound",$bind(this,this.soundClick),this.mainCont);
	this.sndBtnOff = this.getBimap("sounds_off",$bind(this,this.soundClick),this.mainCont);
	this.sndBtn.set_x(this.sndBtnOff.set_x(this.sWidth / 2 - this.sndBtn.get_width() / 2));
	this.sndBtn.set_y(this.sndBtnOff.set_y(40));
	this.updateSoundBtn();
	this.saveBtn = null;
	if(!this.isFromMainMenu && false) {
		this.saveBtn = this.getBimap("save",$bind(this,this.saveClick),this.mainCont);
		this.saveBtn.set_x(this.sWidth / 2 - this.saveBtn.get_width() / 2);
		this.saveBtn.set_y(this.sndBtn.get_y() + this.sndBtn.get_height() + 10);
	}
	this.twoPlayersModeCont = new openfl_display_Sprite();
	this.mainCont.addChild(this.twoPlayersModeCont);
	var contWidth = this.twoPlayersModeCont.get_width();
	this.twoPlayersModeCont.set_x(this.sWidth / 2 - contWidth / 2);
	this.twoPlayersModeCont.set_y(this.sndBtn.get_y() + this.sndBtn.get_height() + 30);
	var bmdsArr = [];
	var _g = 0;
	while(_g < 5) {
		var i = _g++;
		bmdsArr.push(this.getBitmapData("icon_chess_bg_" + (i + 1)));
	}
	this.mainThemeScroll = new ScrollWithImages(Desk.current.curTheme - 1,"Desk theme",bmdsArr);
	bmdsArr = [];
	var _g1 = 0;
	while(_g1 < 5) {
		var i1 = _g1++;
		bmdsArr.push(this.getBitmapData("icon_set" + (i1 + 1)));
	}
	this.chessesThemeScroll = new ScrollWithImages(Desk.current.curThemeChess - 1,"Chesses theme",bmdsArr);
	this.mainCont.addChild(this.mainThemeScroll);
	this.mainCont.addChild(this.chessesThemeScroll);
	this.mainThemeScroll.set_x(this.chessesThemeScroll.set_x(this.sWidth / 2 - this.mainThemeScroll.maxSize / 2));
	this.mainThemeScroll.set_y(this.twoPlayersModeCont.get_y() + this.twoPlayersModeCont.get_height() + 30);
	this.chessesThemeScroll.set_y(this.mainThemeScroll.get_y() + this.mainThemeScroll.get_height() + 30);
	this.initMainThemeScrollX = this.mainThemeScroll.get_x();
	this.initMainThemeScrollY = this.mainThemeScroll.get_y();
	this.initChessesThemeScrollX = this.chessesThemeScroll.get_x();
	this.initChessesThemeScrollY = this.chessesThemeScroll.get_y();
	this.initSheight = this.sHeight;
	this.initSwidth = this.sWidth;
	this.onResize();
	var wasY = this.get_y();
	this.set_y(this.get_y() + this.sHeight);
	motion_Actuate.tween(this,0.3,{ y : wasY}).ease(motion_easing_Quad.get_easeOut());
	var famobi = window.famobi;
	if(famobi != null) {
		famobi.showAd();
	}
	this.moveThisOnResize = true;
	this.moveByResizeCallBack = $bind(this,this.onResize);
};
$hxClasses["Options"] = Options;
Options.__name__ = ["Options"];
Options.__super__ = Menu;
Options.prototype = $extend(Menu.prototype,{
	bgsArr: null
	,bgsSpr: null
	,backBtn: null
	,mainMenuBtn: null
	,mainThemeScroll: null
	,chessesThemeScroll: null
	,initMainThemeScrollX: null
	,initMainThemeScrollY: null
	,initChessesThemeScrollX: null
	,initChessesThemeScrollY: null
	,sndBtn: null
	,sndBtnOff: null
	,mainCont: null
	,mode1: null
	,mode2: null
	,initSheight: null
	,initSwidth: null
	,drawBtn: null
	,saveBtn: null
	,twoPlayersModeCont: null
	,difficVal: null
	,isFromMainMenu: null
	,mode1Click: function() {
		Desk.current.twoPlayersViewOption = 1;
		this.mode2.set_alpha(0.5);
		this.mode1.set_alpha(1);
	}
	,mode2Click: function() {
		Desk.current.twoPlayersViewOption = 0;
		this.mode1.set_alpha(0.5);
		this.mode2.set_alpha(1);
	}
	,saveClick: function() {
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		Main.current.addChild(new SaveLoadWindow(false));
		if(!this.isFromMainMenu) {
			Main.current.ingameMenu.onResize();
		}
	}
	,drawClick: function() {
	}
	,soundClick: function() {
		if(this.main.sounds.muted) {
			this.main.unMute();
		} else {
			this.main.mute();
		}
		this.updateSoundBtn();
	}
	,updateSoundBtn: function() {
		if(this.main.sounds.muted) {
			this.sndBtnOff.set_alpha(1);
			this.sndBtn.set_alpha(0);
		} else {
			this.sndBtnOff.set_alpha(0);
			this.sndBtn.set_alpha(1);
		}
	}
	,backClick: function() {
		if(!this.isFromMainMenu) {
			this.main.paused = false;
			Desk.current.curTheme = this.mainThemeScroll.curIndex + 1;
			Desk.current.curThemeChess = this.chessesThemeScroll.curIndex + 1;
			Desk.current.updateTheme();
			motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		} else {
			Desk.current.curTheme = this.mainThemeScroll.curIndex + 1;
			Desk.current.curThemeChess = this.chessesThemeScroll.curIndex + 1;
			Desk.current.updateTheme();
			motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
			Main.current.addChild(new MainMenu());
		}
		if(!this.isFromMainMenu) {
			Main.current.ingameMenu.onResize();
		}
	}
	,mainMenuClick: function() {
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		this.main.addChild(new MainMenu());
		if(!this.isFromMainMenu) {
			Main.current.ingameMenu.onResize();
		}
	}
	,onResize: function() {
		this.createBgs();
		this.bgsSpr.set_x(-this.get_x());
		this.bgsSpr.set_y(-this.get_y());
		if(Main.current.sHeight > Main.current.sWidth) {
			if(!this.isFromMainMenu) {
				this.sndBtn.set_x(this.initSwidth / 2 - this.sndBtn.get_width() / 2);
				this.sndBtnOff.set_x(this.sndBtn.get_x());
				this.sndBtn.set_y(10);
				this.sndBtnOff.set_y(this.sndBtn.get_y());
				this.twoPlayersModeCont.set_y(this.sndBtnOff.get_y() + this.sndBtnOff.get_height() + 15);
			} else {
				this.sndBtn.set_x(0);
				this.sndBtn.set_x(this.initSwidth / 2 - this.sndBtn.get_width() / 2);
				this.sndBtnOff.set_x(this.sndBtn.get_x());
				this.sndBtnOff.set_y(this.sndBtn.get_y());
				this.twoPlayersModeCont.set_y(this.sndBtn.get_y() + this.sndBtn.get_height() + 15);
			}
			this.mainThemeScroll.set_x(this.initMainThemeScrollX);
			this.mainThemeScroll.set_y(this.twoPlayersModeCont.get_y() + this.twoPlayersModeCont.get_height() + 30);
			this.chessesThemeScroll.set_x(this.initChessesThemeScrollX);
			this.chessesThemeScroll.set_y(this.mainThemeScroll.get_y() + this.mainThemeScroll.get_height() + 30);
		} else {
			if(!this.isFromMainMenu) {
				this.sndBtn.set_x(this.initSwidth / 2 - this.sndBtn.get_width() / 2);
				this.sndBtnOff.set_x(this.sndBtn.get_x());
			} else {
				this.sndBtn.set_x(0);
				this.sndBtn.set_x(this.initSwidth / 2 - this.sndBtn.get_width() / 2);
				this.sndBtnOff.set_x(this.sndBtn.get_x());
				this.sndBtnOff.set_y(this.sndBtn.get_y());
			}
			this.twoPlayersModeCont.set_y(this.sndBtn.get_y() + this.sndBtn.get_height() + 15);
			this.mainThemeScroll.set_y(this.twoPlayersModeCont.get_y() + this.twoPlayersModeCont.get_height() + 30);
			this.chessesThemeScroll.set_y(this.mainThemeScroll.get_y() + this.mainThemeScroll.get_height() / 2 - this.chessesThemeScroll.get_height() / 2);
			this.mainThemeScroll.set_x(this.initSwidth / 2 - this.mainThemeScroll.maxSize / 2 - 180);
			this.chessesThemeScroll.set_x(this.initSwidth / 2 - this.chessesThemeScroll.maxSize / 2 + 180);
		}
		this.mainCont.set_y(this.initSheight / 2 - this.mainCont.get_height() / 2 - this.backBtn.get_height() / 2 - 30);
		this.backBtn.set_y(-this.get_y() + this.sHeight - this.backBtn.get_height() - 30);
		if(!this.isFromMainMenu) {
			this.mainMenuBtn.set_y(this.backBtn.get_y());
		}
	}
	,createBgs: function() {
		var lastIndex = 0;
		var sizeX = 0;
		var bg;
		this.isImagesFromAtlas = false;
		while(sizeX < Main.current.sWidth) {
			if(this.bgsArr[lastIndex] != null) {
				bg = this.bgsArr[lastIndex];
				bg.set_visible(true);
			} else {
				bg = this.getBimap("img/bg.jpg",null,this.bgsSpr);
				this.bgsArr.push(bg);
			}
			bg.set_x(sizeX);
			bg.set_y(0);
			bg.set_scaleX(bg.set_scaleY(Main.current.sHeight / bg.bitmapData.height));
			sizeX += bg.get_width() - 2;
			++lastIndex;
		}
		this.isImagesFromAtlas = true;
		var _g1 = lastIndex;
		var _g = this.bgsArr.length;
		while(_g1 < _g) this.bgsArr[_g1++].set_visible(false);
	}
	,getBtnWithText: function(text,callBack) {
		var spr = this.getSprite();
		var bm = this.getBimap("TEXT_bg",callBack,spr);
		this.addTextField("Aalgrs",60,0,false,"CENTER",0,8,bm.get_width(),bm.get_height(),false,0,0,spr).set_text(text);
		return spr;
	}
	,__class__: Options
});
var PauseMenu = function(fromMainMenu) {
	if(fromMainMenu == null) {
		fromMainMenu = false;
	}
	this.isFromMainMenu = false;
	this.initSwidth = 0;
	this.initSheight = 0;
	this.initChessesThemeScrollY = 0;
	this.initChessesThemeScrollX = 0;
	this.initMainThemeScrollY = 0;
	this.initMainThemeScrollX = 0;
	this.bgsArr = [];
	Menu.call(this);
	this.isFromMainMenu = fromMainMenu;
	this.mainBatch = this.main.batch;
	this.bgsSpr = this.getSprite();
	this.createBgs();
	this.mainCont = this.getSprite();
	this.backBtn = this.getBimap("Back-001",$bind(this,this.backClick),this.mainCont);
	this.backBtn.set_scaleX(this.backBtn.set_scaleY(1.2));
	var botBtnsGapX = 40;
	this.backBtn.set_x(this.sWidth / 2 - this.backBtn.get_width() / 2);
	if(this.isFromMainMenu) {
		this.backBtn.set_x(this.sWidth / 2 - this.backBtn.get_width() / 2);
	}
	this.drawBtn = null;
	if(!this.isFromMainMenu) {
		this.mainMenuBtn = this.getBimap("home_copy",$bind(this,this.mainMenuClick),this.mainCont);
		this.mainMenuBtn.set_x(this.sWidth / 2 - this.mainMenuBtn.get_width() / 2);
		this.mainMenuBtn.set_y(0);
		this.main.paused = true;
	}
	this.sndBtn = this.getBimap("sound",$bind(this,this.soundClick),this.mainCont);
	this.sndBtnOff = this.getBimap("sounds_off",$bind(this,this.soundClick),this.mainCont);
	this.sndBtn.set_x(this.sndBtnOff.set_x(this.sWidth / 2 - this.sndBtn.get_width() / 2));
	this.sndBtn.set_y(this.sndBtnOff.set_y(this.mainMenuBtn.get_y() + this.mainMenuBtn.get_height() + 10));
	this.updateSoundBtn();
	this.saveBtn = null;
	if(!this.isFromMainMenu && false) {
		this.saveBtn = this.getBimap("save",$bind(this,this.saveClick),this.mainCont);
		this.saveBtn.set_x(this.sWidth / 2 - this.saveBtn.get_width() / 2);
		this.saveBtn.set_y(this.sndBtn.get_y() + this.sndBtn.get_height() + 10);
	}
	this.twoPlayersModeCont = new openfl_display_Sprite();
	this.mainCont.addChild(this.twoPlayersModeCont);
	var contWidth = this.twoPlayersModeCont.get_width();
	this.twoPlayersModeCont.set_x(this.sWidth / 2 - contWidth / 2);
	this.twoPlayersModeCont.set_y(this.sndBtn.get_y() + this.sndBtn.get_height() + 30);
	var bmdsArr = [];
	var _g = 0;
	while(_g < 5) {
		var i = _g++;
		bmdsArr.push(this.getBitmapData("icon_chess_bg_" + (i + 1)));
	}
	this.mainThemeScroll = new ScrollWithImages(Desk.current.curTheme - 1,"Desk theme",bmdsArr);
	bmdsArr = [];
	var _g1 = 0;
	while(_g1 < 5) {
		var i1 = _g1++;
		bmdsArr.push(this.getBitmapData("icon_set" + (i1 + 1)));
	}
	this.chessesThemeScroll = new ScrollWithImages(Desk.current.curThemeChess - 1,"Chesses theme",bmdsArr);
	this.mainCont.addChild(this.mainThemeScroll);
	this.mainCont.addChild(this.chessesThemeScroll);
	this.mainThemeScroll.set_x(this.chessesThemeScroll.set_x(this.sWidth / 2 - this.mainThemeScroll.maxSize / 2));
	this.mainThemeScroll.set_y(this.twoPlayersModeCont.get_y() + this.twoPlayersModeCont.get_height() + 30);
	this.chessesThemeScroll.set_y(this.mainThemeScroll.get_y() + this.mainThemeScroll.get_height() + 30);
	this.initMainThemeScrollX = this.mainThemeScroll.get_x();
	this.initMainThemeScrollY = this.mainThemeScroll.get_y();
	this.initChessesThemeScrollX = this.chessesThemeScroll.get_x();
	this.initChessesThemeScrollY = this.chessesThemeScroll.get_y();
	this.initSheight = this.sHeight;
	this.initSwidth = this.sWidth;
	this.onResize();
	var wasY = this.get_y();
	this.set_y(this.get_y() + this.sHeight);
	motion_Actuate.tween(this,0.3,{ y : wasY}).ease(motion_easing_Quad.get_easeOut());
	this.moveThisOnResize = true;
	this.moveByResizeCallBack = $bind(this,this.onResize);
};
$hxClasses["PauseMenu"] = PauseMenu;
PauseMenu.__name__ = ["PauseMenu"];
PauseMenu.__super__ = Menu;
PauseMenu.prototype = $extend(Menu.prototype,{
	bgsArr: null
	,bgsSpr: null
	,backBtn: null
	,mainMenuBtn: null
	,mainThemeScroll: null
	,chessesThemeScroll: null
	,initMainThemeScrollX: null
	,initMainThemeScrollY: null
	,initChessesThemeScrollX: null
	,initChessesThemeScrollY: null
	,sndBtn: null
	,sndBtnOff: null
	,mainCont: null
	,mode1: null
	,mode2: null
	,initSheight: null
	,initSwidth: null
	,drawBtn: null
	,saveBtn: null
	,twoPlayersModeCont: null
	,difficVal: null
	,isFromMainMenu: null
	,mode1Click: function() {
		Desk.current.twoPlayersViewOption = 1;
		this.mode2.set_alpha(0.5);
		this.mode1.set_alpha(1);
	}
	,mode2Click: function() {
		Desk.current.twoPlayersViewOption = 0;
		this.mode1.set_alpha(0.5);
		this.mode2.set_alpha(1);
	}
	,saveClick: function() {
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		Main.current.addChild(new SaveLoadWindow(false));
		if(!this.isFromMainMenu) {
			Main.current.ingameMenu.onResize();
		}
	}
	,drawClick: function() {
	}
	,soundClick: function() {
		if(this.main.sounds.muted) {
			this.main.unMute();
		} else {
			this.main.mute();
		}
		this.updateSoundBtn();
	}
	,updateSoundBtn: function() {
		if(this.main.sounds.muted) {
			this.sndBtnOff.set_alpha(1);
			this.sndBtn.set_alpha(0);
		} else {
			this.sndBtnOff.set_alpha(0);
			this.sndBtn.set_alpha(1);
		}
	}
	,backClick: function() {
		if(!this.isFromMainMenu) {
			this.main.paused = false;
			Desk.current.curTheme = this.mainThemeScroll.curIndex + 1;
			Desk.current.curThemeChess = this.chessesThemeScroll.curIndex + 1;
			Desk.current.updateTheme();
			motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		} else {
			Desk.current.curTheme = this.mainThemeScroll.curIndex + 1;
			Desk.current.curThemeChess = this.chessesThemeScroll.curIndex + 1;
			Desk.current.updateTheme();
			motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
			Main.current.addChild(new MainMenu());
		}
		if(!this.isFromMainMenu) {
			Main.current.ingameMenu.onResize();
		}
	}
	,mainMenuClick: function() {
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		this.main.addChild(new MainMenu());
		if(!this.isFromMainMenu) {
			Main.current.ingameMenu.onResize();
		}
	}
	,onResize: function() {
		this.createBgs();
		this.bgsSpr.set_x(-this.get_x());
		this.bgsSpr.set_y(-this.get_y());
		if(Main.current.sHeight > Main.current.sWidth) {
			if(!this.isFromMainMenu) {
				this.twoPlayersModeCont.set_y(this.sndBtnOff.get_y() + this.sndBtnOff.get_height() + 15);
			} else {
				this.sndBtn.set_x(0);
				this.sndBtn.set_x(this.initSwidth / 2 - this.sndBtn.get_width() / 2);
				this.sndBtnOff.set_x(this.sndBtn.get_x());
				this.sndBtnOff.set_y(this.sndBtn.get_y());
				this.twoPlayersModeCont.set_y(this.sndBtn.get_y() + this.sndBtn.get_height() + 15);
			}
			this.mainThemeScroll.set_x(this.initMainThemeScrollX);
			this.mainThemeScroll.set_y(this.twoPlayersModeCont.get_y() + this.twoPlayersModeCont.get_height() + 30);
			this.chessesThemeScroll.set_x(this.initChessesThemeScrollX);
			this.chessesThemeScroll.set_y(this.mainThemeScroll.get_y() + this.mainThemeScroll.get_height() + 30);
			this.backBtn.set_y(this.chessesThemeScroll.get_y() + 122);
		} else {
			if(!(!this.isFromMainMenu)) {
				this.sndBtn.set_x(0);
				this.sndBtn.set_x(this.initSwidth / 2 - this.sndBtn.get_width() / 2);
				this.sndBtnOff.set_x(this.sndBtn.get_x());
				this.sndBtnOff.set_y(this.sndBtn.get_y());
			}
			this.twoPlayersModeCont.set_y(this.sndBtn.get_y() + this.sndBtn.get_height() + 15);
			this.mainThemeScroll.set_y(this.twoPlayersModeCont.get_y() + this.twoPlayersModeCont.get_height() + 30);
			this.chessesThemeScroll.set_y(this.mainThemeScroll.get_y() + this.mainThemeScroll.get_height() / 2 - this.chessesThemeScroll.get_height() / 2);
			this.mainThemeScroll.set_x(this.initSwidth / 2 - this.mainThemeScroll.maxSize / 2 - 180);
			this.chessesThemeScroll.set_x(this.initSwidth / 2 - this.chessesThemeScroll.maxSize / 2 + 180);
			this.backBtn.set_y(this.chessesThemeScroll.get_y() + 122);
		}
		this.mainCont.set_y(this.initSheight / 2 - this.mainCont.get_height() / 2);
	}
	,createBgs: function() {
		var lastIndex = 0;
		var sizeX = 0;
		var bg;
		this.isImagesFromAtlas = false;
		while(sizeX < Main.current.sWidth) {
			if(this.bgsArr[lastIndex] != null) {
				bg = this.bgsArr[lastIndex];
				bg.set_visible(true);
			} else {
				bg = this.getBimap("img/bg.jpg",null,this.bgsSpr);
				this.bgsArr.push(bg);
			}
			bg.set_x(sizeX);
			bg.set_y(0);
			bg.set_scaleX(bg.set_scaleY(Main.current.sHeight / bg.bitmapData.height));
			sizeX += bg.get_width() - 2;
			++lastIndex;
		}
		this.isImagesFromAtlas = true;
		var _g1 = lastIndex;
		var _g = this.bgsArr.length;
		while(_g1 < _g) this.bgsArr[_g1++].set_visible(false);
	}
	,getBtnWithText: function(text,callBack) {
		var spr = this.getSprite();
		var bm = this.getBimap("TEXT_bg",callBack,spr);
		this.addTextField("Aalgrs",60,0,false,"CENTER",0,8,bm.get_width(),bm.get_height(),false,0,0,spr).set_text(text);
		return spr;
	}
	,__class__: PauseMenu
});
var PlayMenu = function(isOnePLayer) {
	if(isOnePLayer == null) {
		isOnePLayer = false;
	}
	this.pointsArr = [1,3,5,7,11,15];
	this.sizeX = 300;
	this.initSheight = 0;
	this.initSwidth = 0;
	this.initHintContY = 0;
	this.initColorContY = 0;
	this.initX2BtnY = 0;
	this.initX2BtnX = 0;
	this.curColorSelect = 1;
	this.bgsArr = [];
	Menu.call(this);
	this.isOnePLayer = isOnePLayer;
	if(isOnePLayer) {
		Desk.current.playersType[0] = "human";
		Desk.current.playersType[1] = "computer";
	} else {
		Desk.current.playersType[0] = "human";
		Desk.current.playersType[1] = "human";
	}
	this.mainBatch = this.main.batch;
	var contsGapY = 20;
	this.bgsSpr = this.getSprite();
	this.createBgs();
	this.mainCont = this.getSprite();
	this.playBtn = this.getBimap("play",$bind(this,this.playClick));
	this.playBtn.set_x(this.sWidth / 2 + 20.);
	this.playBtn.set_y(this.sHeight - this.playBtn.get_height() - 50);
	this.backBtn = this.getBimap("Back-001",$bind(this,this.mainMenuClick));
	this.backBtn.set_x(this.sWidth / 2 - this.backBtn.get_width() - 20.);
	this.backBtn.set_y(this.playBtn.get_y());
	this.difficCont = this.getSprite();
	this.mainCont.addChild(this.difficCont);
	var difficultyIcon = this.getBimap("brain",null,this.difficCont);
	difficultyIcon.set_x(this.sizeX / 2 - difficultyIcon.get_width() / 2);
	var upBtn = this.getBimap("arrowBot1_copy",$bind(this,this.minDiff),this.difficCont);
	var dwBtn = this.getBimap("arrowUp1_copy",$bind(this,this.plusDiff),this.difficCont);
	var gapX = 27;
	upBtn.set_x(this.sizeX / 2 - upBtn.get_width() - gapX);
	dwBtn.set_x(this.sizeX / 2 + gapX + 7);
	upBtn.set_y(dwBtn.set_y(72));
	this.difficVal = new NumFontFromBatch(this.mainBatch,"digBright_");
	this.difficVal.set_align("CENTER");
	this.difficVal.widthToAlign = this.sizeX;
	this.difficVal.set_y(95);
	this.difficVal.set_text(Desk.current.computerLevel + "");
	this.difficCont.addChild(this.difficVal);
	if(!isOnePLayer) {
		upBtn.set_alpha(dwBtn.set_alpha(this.difficVal.set_alpha(difficultyIcon.set_alpha(0.5))));
	}
	this.playtoCont = this.getSprite();
	this.mainCont.addChild(this.playtoCont);
	Desk.current.winPoints = 1;
	var playToIcon = this.getBimap("cup",null,this.playtoCont);
	playToIcon.set_x(this.sizeX / 2 - playToIcon.get_width() / 2);
	var upBtn1 = this.getBimap("arrowBot1_copy",$bind(this,this.plusPlayTo),this.playtoCont);
	var dwBtn1 = this.getBimap("arrowUp1_copy",$bind(this,this.minPlayTo),this.playtoCont);
	var gapX1 = 27;
	upBtn1.set_x(this.sizeX / 2 - upBtn1.get_width() - gapX1);
	dwBtn1.set_x(this.sizeX / 2 + gapX1 + 7);
	upBtn1.set_y(dwBtn1.set_y(72));
	this.playtoVal = new NumFontFromBatch(this.mainBatch,"digBright_");
	this.playtoVal.set_align("CENTER");
	this.playtoVal.widthToAlign = this.sizeX;
	this.playtoVal.set_y(95);
	this.playtoVal.set_text(Desk.current.winPoints + "");
	this.playtoCont.addChild(this.playtoVal);
	this.difficCont.set_x(this.sWidth / 2 - this.sizeX);
	this.playtoCont.set_x(this.sWidth / 2);
	this.x2Btn = this.getBimap("x2Btn",$bind(this,this.x2Click),this.mainCont);
	this.x2Btn.set_alpha(Desk.current.x2IsOn?1:0.5);
	this.x2Btn.set_x(this.sWidth / 2 - this.x2Btn.get_width() / 2);
	this.x2Btn.set_y(upBtn1.get_y() + upBtn1.get_height() + contsGapY + 10);
	this.initX2BtnY = this.x2Btn.get_y();
	Desk.current.inversedColors = false;
	this.colorSelectCont = new openfl_display_Sprite();
	this.mainCont.addChild(this.colorSelectCont);
	var colorBtnsY = 55;
	var btnsGapX = 10;
	this.whiteColorBtn = this.addButton("a2",0,colorBtnsY,false,false,$bind(this,this.whiteColorClick),this.colorSelectCont);
	this.blackColorBtn = this.addButton("a3",this.whiteColorBtn.get_x() + this.whiteColorBtn.get_width() + btnsGapX,colorBtnsY,false,false,$bind(this,this.blackColorClick),this.colorSelectCont);
	if(isOnePLayer) {
		this.blackColorBtn.set_alpha(0.5);
	}
	if(!isOnePLayer) {
		this.colorSelectCont.set_alpha(0.5);
	}
	var contWidth = this.colorSelectCont.get_width();
	this.colorSelectCont.set_x(this.sWidth / 2 - contWidth / 2);
	this.colorSelectCont.set_y(this.x2Btn.get_y() + this.x2Btn.get_height() + contsGapY);
	var separator = this.getBimap("separatorH",null,this.colorSelectCont);
	separator.set_x(contWidth / 2 - separator.get_width() / 2);
	separator.set_y(30);
	this.initColorContY = this.colorSelectCont.get_y();
	Desk.current.hideHints = false;
	this.gameModeCont = new openfl_display_Sprite();
	this.mainCont.addChild(this.gameModeCont);
	this.amatorModeBtn = this.addButton("plaier_a",0,20,false,false,$bind(this,this.amatorModeClick),this.gameModeCont);
	this.clearModeBtn = this.addButton("one_plaier",this.amatorModeBtn.get_x() + this.amatorModeBtn.get_width() + btnsGapX,this.amatorModeBtn.get_y(),false,false,$bind(this,this.clearModeClick),this.gameModeCont);
	separator = this.getBimap("separatorH",null,this.gameModeCont);
	separator.set_x(this.gameModeCont.get_width() / 2 - separator.get_width() / 2);
	separator.set_y(0);
	this.clearModeBtn.set_alpha(0.5);
	contWidth = this.gameModeCont.get_width();
	this.gameModeCont.set_x(this.sWidth / 2 - contWidth / 2);
	this.gameModeCont.set_y(this.colorSelectCont.get_y() + this.colorSelectCont.get_height() + contsGapY + 30);
	this.initHintContY = this.gameModeCont.get_y();
	this.mainCont.set_y(this.sHeight / 2 - this.mainCont.get_height() / 2 - this.playBtn.get_height() / 2 - 30);
	this.initSwidth = this.sWidth;
	this.initSheight = this.sHeight;
	this.onResize();
	this.moveThisOnResize = true;
	this.moveByResizeCallBack = $bind(this,this.onResize);
	var wasY = this.get_y();
	this.set_y(this.get_y() + this.sHeight);
	motion_Actuate.tween(this,0.3,{ y : wasY}).ease(motion_easing_Quad.get_easeOut());
};
$hxClasses["PlayMenu"] = PlayMenu;
PlayMenu.__name__ = ["PlayMenu"];
PlayMenu.__super__ = Menu;
PlayMenu.prototype = $extend(Menu.prototype,{
	bgsArr: null
	,bgsSpr: null
	,x2Btn: null
	,playBtn: null
	,backBtn: null
	,difficCont: null
	,playtoCont: null
	,difficVal: null
	,playtoVal: null
	,mainCont: null
	,isOnePLayer: null
	,curColorSelect: null
	,randColorBtn: null
	,whiteColorBtn: null
	,blackColorBtn: null
	,amatorModeBtn: null
	,clearModeBtn: null
	,initX2BtnX: null
	,initX2BtnY: null
	,initColorContY: null
	,initHintContY: null
	,initSwidth: null
	,initSheight: null
	,gameModeCont: null
	,colorSelectCont: null
	,sizeX: null
	,x2Click: function() {
		Desk.current.x2IsOn = !Desk.current.x2IsOn;
		this.x2Btn.set_alpha(Desk.current.x2IsOn?1:0.5);
	}
	,amatorModeClick: function() {
		Desk.current.hideHints = false;
		this.amatorModeBtn.set_alpha(1);
		this.clearModeBtn.set_alpha(0.5);
	}
	,clearModeClick: function() {
		Desk.current.hideHints = true;
		this.amatorModeBtn.set_alpha(0.5);
		this.clearModeBtn.set_alpha(1);
	}
	,randColorClick: function() {
		if(!this.isOnePLayer) {
			return;
		}
		Desk.current.inversedColors = Math.random() > 0.5;
		this.whiteColorBtn.set_alpha(0.5);
		this.blackColorBtn.set_alpha(0.5);
	}
	,whiteColorClick: function() {
		if(!this.isOnePLayer) {
			return;
		}
		Desk.current.inversedColors = false;
		this.whiteColorBtn.set_alpha(1);
		this.blackColorBtn.set_alpha(0.5);
	}
	,blackColorClick: function() {
		if(!this.isOnePLayer) {
			return;
		}
		Desk.current.inversedColors = true;
		this.whiteColorBtn.set_alpha(0.5);
		this.blackColorBtn.set_alpha(1);
	}
	,pointsArr: null
	,minPlayTo: function() {
		var curIndex = this.pointsArr.indexOf(Std.parseInt(this.playtoVal.text));
		++curIndex;
		if(curIndex >= this.pointsArr.length) {
			curIndex = this.pointsArr.length - 1;
		}
		this.playtoVal.set_text(this.pointsArr[curIndex] + "");
		Desk.current.winPoints = this.pointsArr[curIndex];
	}
	,plusPlayTo: function() {
		var curIndex = this.pointsArr.indexOf(Std.parseInt(this.playtoVal.text));
		--curIndex;
		if(curIndex < 0) {
			curIndex = 0;
		}
		this.playtoVal.set_text(this.pointsArr[curIndex] + "");
		Desk.current.winPoints = this.pointsArr[curIndex];
	}
	,minDiff: function() {
		if(this.difficVal.get_alpha() < 1) {
			return;
		}
		Desk.current.computerLevel--;
		if(Desk.current.computerLevel < 0) {
			Desk.current.computerLevel = 0;
		}
		this.difficVal.set_text(Desk.current.computerLevel + "");
	}
	,plusDiff: function() {
		if(this.difficVal.get_alpha() < 1) {
			return;
		}
		Desk.current.computerLevel++;
		if(Desk.current.computerLevel > 3) {
			Desk.current.computerLevel = 3;
		}
		this.difficVal.set_text(Desk.current.computerLevel + "");
	}
	,playClick: function() {
		this.main.newGame(true);
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
	}
	,mainMenuClick: function() {
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		this.main.addChild(new MainMenu());
	}
	,onResize: function() {
		this.createBgs();
		this.bgsSpr.set_x(-this.get_x());
		this.bgsSpr.set_y(-this.get_y());
		this.playBtn.set_y(-this.get_y() + this.sHeight - this.playBtn.get_height() - 30);
		this.backBtn.set_y(this.playBtn.get_y());
		if(this.main.sWidth > this.main.sHeight) {
			var addP = 55;
			this.difficCont.set_x(this.initSwidth / 2 - this.sizeX - addP);
			this.playtoCont.set_x(this.initSwidth / 2 + addP);
			this.x2Btn.set_y(this.playtoCont.get_y() + 65);
			this.colorSelectCont.set_y(this.initColorContY - this.x2Btn.get_height() - 25);
			this.gameModeCont.set_y(this.initHintContY - this.x2Btn.get_height() - 25);
		} else {
			this.difficCont.set_x(this.initSwidth / 2 - this.sizeX);
			this.playtoCont.set_x(this.initSwidth / 2);
			this.x2Btn.set_y(this.initX2BtnY);
			this.colorSelectCont.set_y(this.initColorContY);
			this.gameModeCont.set_y(this.initHintContY);
		}
		this.mainCont.set_y(this.initSheight / 2 - this.mainCont.get_height() / 2 - this.playBtn.get_height() / 2 - 30);
	}
	,createBgs: function() {
		var lastIndex = 0;
		var sizeX = 0;
		var bg;
		this.isImagesFromAtlas = false;
		while(sizeX < Main.current.sWidth) {
			if(this.bgsArr[lastIndex] != null) {
				bg = this.bgsArr[lastIndex];
				bg.set_visible(true);
			} else {
				bg = this.getBimap("img/bg.jpg",null,this.bgsSpr);
				this.bgsArr.push(bg);
			}
			bg.set_x(sizeX);
			bg.set_y(0);
			bg.set_scaleX(bg.set_scaleY(Main.current.sHeight / bg.bitmapData.height));
			sizeX += bg.get_width() - 2;
			++lastIndex;
		}
		this.isImagesFromAtlas = true;
		var _g1 = lastIndex;
		var _g = this.bgsArr.length;
		while(_g1 < _g) this.bgsArr[_g1++].set_visible(false);
	}
	,getBtnWithText: function(text,callBack) {
		var spr = this.getSprite();
		var bm = this.getBimap("TEXT_bg",callBack,spr);
		this.addTextField("Aalgrs",60,0,false,"CENTER",0,8,bm.get_width(),bm.get_height(),false,0,0,spr).set_text(text);
		return spr;
	}
	,__class__: PlayMenu
});
var openfl_display_BitmapData = function(width,height,transparent,fillColor) {
	if(fillColor == null) {
		fillColor = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	this.__usingPingPongTexture = false;
	this.transparent = transparent;
	if(width == null) {
		width = 0;
	} else {
		width = width;
	}
	if(height == null) {
		height = 0;
	} else {
		height = height;
	}
	if(width < 0) {
		width = 0;
	} else {
		width = width;
	}
	if(height < 0) {
		height = 0;
	} else {
		height = height;
	}
	this.width = width;
	this.height = height;
	this.rect = new openfl_geom_Rectangle(0,0,width,height);
	if(width > 0 && height > 0) {
		if(transparent) {
			if((fillColor & -16777216) == 0) {
				fillColor = 0;
			}
		} else {
			fillColor = -16777216 | fillColor & 16777215;
		}
		fillColor = fillColor << 8 | fillColor >>> 24 & 255;
		this.image = new lime_graphics_Image(null,0,0,width,height,fillColor);
		this.image.set_transparent(transparent);
		this.__isValid = true;
	}
	this.__createUVs();
	this.__worldTransform = new openfl_geom_Matrix();
	this.__worldColorTransform = new openfl_geom_ColorTransform();
};
$hxClasses["openfl.display.BitmapData"] = openfl_display_BitmapData;
openfl_display_BitmapData.__name__ = ["openfl","display","BitmapData"];
openfl_display_BitmapData.__interfaces__ = [openfl_display_IBitmapDrawable];
openfl_display_BitmapData.fromBase64 = function(base64,type,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBase64(base64,type,function(image) {
		_gthis.__fromImage(image);
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromBytes = function(bytes,rawAlpha,onload) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	var rawAlpha1 = rawAlpha;
	var onload1 = onload;
	var _gthis = bitmapData;
	lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
		_gthis.__fromImage(image);
		if(rawAlpha1 != null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
			lime_graphics_utils_ImageCanvasUtil.createImageData(image);
			var data = image.buffer.data;
			var _g1 = 0;
			var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha1);
			while(_g1 < _g) data[_g1++ * 4 + 3] = rawAlpha1.readUnsignedByte();
			image.dirty = true;
		}
		if(onload1 != null) {
			onload1(_gthis);
		}
	});
	return bitmapData;
};
openfl_display_BitmapData.fromCanvas = function(canvas,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(canvas == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(lime_graphics_Image.fromCanvas(canvas));
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.fromFile = function(path,onload,onerror) {
	var bitmapData = new openfl_display_BitmapData(0,0,true);
	bitmapData.__fromFile(path,onload,onerror);
	return bitmapData;
};
openfl_display_BitmapData.fromImage = function(image,transparent) {
	if(transparent == null) {
		transparent = true;
	}
	if(image == null || image.buffer == null) {
		return null;
	}
	var bitmapData = new openfl_display_BitmapData(0,0,transparent);
	bitmapData.__fromImage(image);
	bitmapData.image.set_transparent(transparent);
	return bitmapData;
};
openfl_display_BitmapData.__asRenderTexture = function(width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	var b = new openfl_display_BitmapData(0,0);
	b.__resize(width,height);
	return b;
};
openfl_display_BitmapData.prototype = {
	height: null
	,image: null
	,rect: null
	,transparent: null
	,width: null
	,__worldTransform: null
	,__worldColorTransform: null
	,__cacheAsBitmap: null
	,__blendMode: null
	,__shader: null
	,__buffer: null
	,__isValid: null
	,__surface: null
	,__texture: null
	,__textureImage: null
	,__pingPongTexture: null
	,__usingPingPongTexture: null
	,__uvData: null
	,applyFilter: function(sourceBitmapData,sourceRect,destPoint,filter) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid) {
			return;
		}
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(this.image);
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceBitmapData.image);
		lime_graphics_utils_ImageCanvasUtil.createImageData(sourceBitmapData.image);
		filter.__applyFilter(this.image.buffer.__srcImageData,sourceBitmapData.image.buffer.__srcImageData,sourceRect,destPoint);
		this.image.dirty = true;
	}
	,clone: function() {
		if(!this.__isValid) {
			return new openfl_display_BitmapData(this.width,this.height,this.transparent);
		} else {
			return openfl_display_BitmapData.fromImage(this.image.clone(),this.transparent);
		}
	}
	,colorTransform: function(rect,colorTransform) {
		if(!this.__isValid) {
			return;
		}
		this.image.colorTransform(rect.__toLimeRectangle(),colorTransform.__toLimeColorMatrix());
		this.__usingPingPongTexture = false;
	}
	,compare: function(otherBitmapData) {
		if(otherBitmapData == this) {
			return 0;
		} else if(otherBitmapData == null) {
			return -1;
		} else if(this.__isValid == false || otherBitmapData.__isValid == false) {
			return -2;
		} else if(this.width != otherBitmapData.width) {
			return -3;
		} else if(this.height != otherBitmapData.height) {
			return -4;
		}
		if(this.image != null && otherBitmapData.image != null && this.image.get_format() == otherBitmapData.image.get_format()) {
			var bytes = this.image.get_data();
			var otherBytes = otherBitmapData.image.get_data();
			var equal = true;
			var _g1 = 0;
			var _g = bytes.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(bytes[i] != otherBytes[i]) {
					equal = false;
					break;
				}
			}
			if(equal) {
				return 0;
			}
		}
		var bitmapData = null;
		var foundDifference;
		var pixel;
		var otherPixel;
		var comparePixel;
		var r;
		var g;
		var b;
		var a;
		var _g11 = 0;
		var _g2 = this.height;
		while(_g11 < _g2) {
			var y = _g11++;
			var _g3 = 0;
			var _g21 = this.width;
			while(_g3 < _g21) {
				var x = _g3++;
				foundDifference = false;
				pixel = this.getPixel32(x,y);
				otherPixel = otherBitmapData.getPixel32(x,y);
				comparePixel = 0;
				if(pixel != otherPixel) {
					r = (pixel >> 16 & 255) - (otherPixel >> 16 & 255);
					g = (pixel >> 8 & 255) - (otherPixel >> 8 & 255);
					b = (pixel & 255) - (otherPixel & 255);
					if(r < 0) {
						r *= -1;
					}
					if(g < 0) {
						g *= -1;
					}
					if(b < 0) {
						b *= -1;
					}
					if(r == 0 && g == 0 && b == 0) {
						a = (pixel >> 24 & 255) - (otherPixel >> 24 & 255);
						if(a != 0) {
							comparePixel = 16711680;
							comparePixel = 16776960;
							comparePixel = 16777215;
							comparePixel = (a & 255) << 24 | 16711680 | 65280 | 255;
							foundDifference = true;
						}
					} else {
						comparePixel = 0 | (r & 255) << 16 | 0 | 0;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (g & 255) << 8 | comparePixel & 255 & 255;
						comparePixel = (comparePixel >> 24 & 255 & 255) << 24 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | b & 255;
						comparePixel = -16777216 | (comparePixel >> 16 & 255 & 255) << 16 | (comparePixel >> 8 & 255 & 255) << 8 | comparePixel & 255 & 255;
						foundDifference = true;
					}
				}
				if(foundDifference) {
					if(bitmapData == null) {
						bitmapData = new openfl_display_BitmapData(this.width,this.height,this.transparent || otherBitmapData.transparent,0);
					}
					bitmapData.setPixel32(x,y,comparePixel);
				}
			}
		}
		if(bitmapData == null) {
			return 0;
		}
		return bitmapData;
	}
	,copyChannel: function(sourceBitmapData,sourceRect,destPoint,sourceChannel,destChannel) {
		if(!this.__isValid) {
			return;
		}
		var sourceChannel1;
		switch(sourceChannel) {
		case 1:
			sourceChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			sourceChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			sourceChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			sourceChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		var destChannel1;
		switch(destChannel) {
		case 1:
			destChannel1 = lime_graphics_ImageChannel.RED;
			break;
		case 2:
			destChannel1 = lime_graphics_ImageChannel.GREEN;
			break;
		case 4:
			destChannel1 = lime_graphics_ImageChannel.BLUE;
			break;
		case 8:
			destChannel1 = lime_graphics_ImageChannel.ALPHA;
			break;
		default:
			return;
		}
		this.image.copyChannel(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),sourceChannel1,destChannel1);
		this.__usingPingPongTexture = false;
	}
	,copyPixels: function(sourceBitmapData,sourceRect,destPoint,alphaBitmapData,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(!this.__isValid || sourceBitmapData == null) {
			return;
		}
		this.image.copyPixels(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),alphaBitmapData != null?alphaBitmapData.image:null,alphaPoint != null?alphaPoint.__toLimeVector2():null,mergeAlpha);
		this.__usingPingPongTexture = false;
	}
	,dispose: function() {
		this.image = null;
		this.width = 0;
		this.height = 0;
		this.rect = null;
		this.__isValid = false;
		if(this.__texture != null) {
			var renderer = openfl_Lib.current.stage.__renderer;
			if(renderer != null) {
				var gl = renderer.renderSession.gl;
				if(gl != null) {
					gl.deleteTexture(this.__texture);
					this.__texture = null;
				}
			}
		}
		if(this.__pingPongTexture != null) {
			this.__pingPongTexture.destroy();
			this.__pingPongTexture = null;
		}
	}
	,draw: function(source,matrix,colorTransform,blendMode,clipRect,smoothing) {
		if(smoothing == null) {
			smoothing = false;
		}
		if(!this.__isValid) {
			return;
		}
		if(colorTransform != null) {
			var tmp;
			var tmp1;
			if(source == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(source.__properties__) {
					tmp = source.__properties__["get_" + "width"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = source[tmp]();
				} else {
					tmp1 = source.width;
				}
			}
			var tmp3 = tmp1;
			var tmp4;
			var tmp5;
			if(source == null) {
				tmp5 = null;
			} else {
				var tmp6;
				if(source.__properties__) {
					tmp4 = source.__properties__["get_" + "height"];
					tmp6 = tmp4;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					tmp5 = source[tmp4]();
				} else {
					tmp5 = source.height;
				}
			}
			var copy = new openfl_display_BitmapData(tmp3,tmp5,true,0);
			copy.draw(source);
			copy.colorTransform(copy.rect,colorTransform);
			source = copy;
		}
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this.image);
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,true);
		var buffer = this.image.buffer;
		var renderSession = new openfl__$internal_renderer_RenderSession();
		renderSession.context = buffer.__srcContext;
		renderSession.roundPixels = true;
		renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(renderSession);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = false;
			buffer.__srcContext.msImageSmoothingEnabled = false;
			buffer.__srcContext.imageSmoothingEnabled = false;
		}
		if(clipRect != null) {
			renderSession.maskManager.pushRect(clipRect,new openfl_geom_Matrix());
		}
		var matrixCache = source.__worldTransform;
		source.__updateTransforms(matrix != null?matrix:new openfl_geom_Matrix());
		source.__updateChildren(false);
		source.__renderCanvas(renderSession);
		source.__updateTransforms(matrixCache);
		source.__updateChildren(true);
		if(!smoothing) {
			buffer.__srcContext.mozImageSmoothingEnabled = true;
			buffer.__srcContext.msImageSmoothingEnabled = true;
			buffer.__srcContext.imageSmoothingEnabled = true;
		}
		if(clipRect != null) {
			renderSession.maskManager.popMask();
		}
		buffer.__srcContext.setTransform(1,0,0,1,0,0);
		buffer.__srcImageData = null;
		buffer.data = null;
	}
	,encode: function(rect,compressor,byteArray) {
		if(!this.__isValid || rect == null) {
			byteArray = null;
			return byteArray;
		}
		if(js_Boot.__instanceof(compressor,openfl_display_PNGEncoderOptions)) {
			byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("png"));
			return byteArray;
		} else if(js_Boot.__instanceof(compressor,openfl_display_JPEGEncoderOptions)) {
			byteArray = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.encode("jpg",(js_Boot.__cast(compressor , openfl_display_JPEGEncoderOptions)).quality));
			return byteArray;
		}
		byteArray = null;
		return byteArray;
	}
	,fillRect: function(rect,color) {
		if(!this.__isValid || rect == null) {
			return;
		}
		if(this.transparent && (color & -16777216) == 0) {
			color = 0;
		}
		this.image.fillRect(rect.__toLimeRectangle(),color,1);
		this.__usingPingPongTexture = false;
	}
	,floodFill: function(x,y,color) {
		if(!this.__isValid) {
			return;
		}
		this.image.floodFill(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,generateFilterRect: function(sourceRect,filter) {
		return sourceRect.clone();
	}
	,getBuffer: function(gl) {
		if(this.__buffer == null) {
			var data = [this.width,this.height,0,1,1,0,this.height,0,0,1,this.width,0,0,1,0,0,0,0,0,0];
			this.__buffer = gl.createBuffer();
			gl.bindBuffer(gl.ARRAY_BUFFER,this.__buffer);
			gl.bufferData(gl.ARRAY_BUFFER,data != null?new Float32Array(data):null,gl.STATIC_DRAW);
			gl.bindBuffer(gl.ARRAY_BUFFER,null);
		}
		return this.__buffer;
	}
	,getColorBoundsRect: function(mask,color,findColor) {
		if(findColor == null) {
			findColor = true;
		}
		if(!this.__isValid) {
			return new openfl_geom_Rectangle(0,0,this.width,this.height);
		}
		if(!this.transparent || (mask >> 24 & 255) > 0) {
			var color1 = color;
			if((color1 >> 24 & 255) == 0) {
				color1 = 0;
			}
		}
		var rect = this.image.getColorBoundsRect(mask,color,findColor,1);
		return new openfl_geom_Rectangle(rect.x,rect.y,rect.width,rect.height);
	}
	,getPixel: function(x,y) {
		if(!this.__isValid) {
			return 0;
		}
		return this.image.getPixel(x,y,1);
	}
	,getPixel32: function(x,y) {
		if(!this.__isValid) {
			return 0;
		}
		return this.image.getPixel32(x,y,1);
	}
	,getPixels: function(rect) {
		if(!this.__isValid) {
			return null;
		}
		if(rect == null) {
			rect = this.rect;
		}
		return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(this.image.getPixels(rect.__toLimeRectangle(),1));
	}
	,getSurface: function() {
		if(!this.__isValid) {
			return null;
		}
		if(this.__surface == null) {
			this.__surface = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage(this.image);
		}
		return this.__surface;
	}
	,getTexture: function(gl) {
		if(!this.__isValid) {
			return null;
		}
		if(this.__usingPingPongTexture && this.__pingPongTexture != null) {
			var _this = this.__pingPongTexture;
			if(_this.useOldTexture) {
				return (_this.__swapped?_this.__texture0:_this.__texture1).texture;
			} else {
				return (_this.__swapped?_this.__texture1:_this.__texture0).texture;
			}
		}
		if(this.__texture == null) {
			this.__texture = gl.createTexture();
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
			gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
			this.image.dirty = true;
		}
		if(this.image != null && this.image.dirty) {
			var internalFormat;
			var format;
			if(this.__surface != null) {
				lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush(this.__surface);
			}
			if(this.image.buffer.bitsPerPixel == 1) {
				internalFormat = gl.ALPHA;
				format = gl.ALPHA;
			} else {
				internalFormat = gl.RGBA;
				format = gl.RGBA;
			}
			gl.bindTexture(gl.TEXTURE_2D,this.__texture);
			var textureImage = this.image;
			if(!textureImage.get_premultiplied() && textureImage.get_transparent() || textureImage.get_format() != 0) {
				textureImage = textureImage.clone();
				textureImage.set_format(0);
				textureImage.set_premultiplied(true);
			}
			gl.texImage2D(gl.TEXTURE_2D,0,internalFormat,this.width,this.height,0,format,gl.UNSIGNED_BYTE,textureImage.get_data());
			gl.bindTexture(gl.TEXTURE_2D,null);
			this.image.dirty = false;
		}
		return this.__texture;
	}
	,getVector: function(rect) {
		var pixels = this.getPixels(rect);
		var length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels) / 4 | 0;
		var this1 = new openfl_VectorData();
		this1.data = new Array(length);
		this1.length = length;
		this1.fixed = true;
		var result = this1;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var value = pixels.readUnsignedInt();
			if(!result.fixed) {
				if(i >= result.length) {
					result.length = i + 1;
				}
				if(result.data.length < result.length) {
					var length1 = result.data.length + 10;
					var data = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
					result.data = data;
				}
			}
			result.data[i] = value;
		}
		return result;
	}
	,histogram: function(hRect) {
		var pixels = this.getPixels(hRect != null?hRect:new openfl_geom_Rectangle(0,0,this.width,this.height));
		var _g = [];
		var _g1 = 0;
		while(_g1 < 4) {
			++_g1;
			var _g2 = [];
			var _g3 = 0;
			while(_g3 < 256) {
				++_g3;
				_g2.push(0);
			}
			_g.push(_g2);
		}
		var _g21 = 0;
		var _g11 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels);
		while(_g21 < _g11) ++_g[_g21++ % 4][pixels.readUnsignedByte()];
		return _g;
	}
	,hitTest: function(firstPoint,firstAlphaThreshold,secondObject,secondBitmapDataPoint,secondAlphaThreshold) {
		if(secondAlphaThreshold == null) {
			secondAlphaThreshold = 1;
		}
		if(!this.__isValid) {
			return false;
		}
		if(js_Boot.__instanceof(secondObject,openfl_display_Bitmap)) {
			secondObject = (js_Boot.__cast(secondObject , openfl_display_Bitmap)).bitmapData;
		}
		if(js_Boot.__instanceof(secondObject,openfl_geom_Point)) {
			var secondPoint = secondObject;
			var x = secondPoint.x - firstPoint.x | 0;
			var y = secondPoint.y - firstPoint.y | 0;
			if(this.rect.contains(x,y)) {
				if((this.getPixel32(x,y) >> 24 & 255) >= firstAlphaThreshold) {
					return true;
				}
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_display_BitmapData)) {
			var secondBitmapData = secondObject;
			var x1;
			var y1;
			if(secondBitmapDataPoint == null) {
				x1 = 0;
				y1 = 0;
			} else {
				x1 = secondBitmapDataPoint.x - firstPoint.x | 0;
				y1 = secondBitmapDataPoint.y - firstPoint.y | 0;
			}
			if(this.rect.contains(x1,y1)) {
				var hitRect = openfl_geom_Rectangle.__temp;
				hitRect.setTo(x1,y1,Math.min(secondBitmapData.width,this.width - x1),Math.min(secondBitmapData.height,this.height - y1));
				var pixels = this.getPixels(hitRect);
				hitRect.offset(-x1,-y1);
				var testPixels = secondBitmapData.getPixels(hitRect);
				var length = hitRect.width * hitRect.height | 0;
				var pixel;
				var testPixel;
				var _g1 = 0;
				while(_g1 < length) {
					++_g1;
					pixel = pixels.readUnsignedInt();
					testPixel = testPixels.readUnsignedInt();
					if((pixel >> 24 & 255) >= firstAlphaThreshold && (testPixel >> 24 & 255) >= secondAlphaThreshold) {
						return true;
					}
				}
				return false;
			}
		} else if(js_Boot.__instanceof(secondObject,openfl_geom_Rectangle)) {
			var secondRectangle = openfl_geom_Rectangle.__temp;
			secondRectangle.copyFrom(secondObject);
			secondRectangle.offset(-firstPoint.x,-firstPoint.y);
			secondRectangle.__contract(0,0,this.width,this.height);
			if(secondRectangle.width > 0 && secondRectangle.height > 0) {
				var pixels1 = this.getPixels(secondRectangle);
				var length1 = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(pixels1) / 4 | 0;
				var pixel1;
				var _g11 = 0;
				while(_g11 < length1) {
					++_g11;
					pixel1 = pixels1.readUnsignedInt();
					if((pixel1 >> 24 & 255) >= firstAlphaThreshold) {
						return true;
					}
				}
			}
		}
		return false;
	}
	,lock: function() {
	}
	,merge: function(sourceBitmapData,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(!this.__isValid || sourceBitmapData == null || !sourceBitmapData.__isValid || sourceRect == null || destPoint == null) {
			return;
		}
		this.image.merge(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
		this.__usingPingPongTexture = false;
	}
	,noise: function(randomSeed,low,high,channelOptions,grayScale) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		if(high == null) {
			high = 255;
		}
		if(low == null) {
			low = 0;
		}
		if(!this.__isValid) {
			return;
		}
		var func = function() {
			randomSeed = randomSeed * 1103515245 + 12345;
			return (Math.abs(randomSeed / 65536) | 0) % 32768;
		};
		func();
		var range = high - low;
		new openfl_utils_ByteArrayData(0);
		var redChannel = (channelOptions & 1) == 1;
		var greenChannel = (channelOptions & 2) >> 1 == 1;
		var blueChannel = (channelOptions & 4) >> 2 == 1;
		var alphaChannel = (channelOptions & 8) >> 3 == 1;
		var _g1 = 0;
		var _g = this.height;
		while(_g1 < _g) {
			var y = _g1++;
			var _g3 = 0;
			var _g2 = this.width;
			while(_g3 < _g2) {
				var x = _g3++;
				var red = 0;
				var blue = 0;
				var green = 0;
				var alpha = 255;
				if(grayScale) {
					blue = low + func() % range;
					green = blue;
					red = green;
					alpha = 255;
				} else {
					if(redChannel) {
						red = low + func() % range;
					}
					if(greenChannel) {
						green = low + func() % range;
					}
					if(blueChannel) {
						blue = low + func() % range;
					}
					if(alphaChannel) {
						alpha = low + func() % range;
					}
				}
				var rgb = alpha;
				rgb = (rgb << 8) + red;
				rgb = (rgb << 8) + green;
				rgb = (rgb << 8) + blue;
				this.setPixel32(x,y,rgb);
			}
		}
	}
	,paletteMap: function(sourceBitmapData,sourceRect,destPoint,redArray,greenArray,blueArray,alphaArray) {
		var sw = sourceRect.width | 0;
		var sh = sourceRect.height | 0;
		var pixels = this.getPixels(sourceRect);
		pixels.position = 0;
		var pixelValue;
		var r;
		var g;
		var b;
		var a;
		var color;
		var c1;
		var c2;
		var c3;
		var c4;
		var _g1 = 0;
		var _g = sh * sw;
		while(_g1 < _g) {
			var i = _g1++;
			pixelValue = pixels.readUnsignedInt();
			if(alphaArray == null) {
				c1 = pixelValue & -16777216;
			} else {
				c1 = alphaArray[pixelValue >> 24 & 255];
			}
			if(redArray == null) {
				c2 = pixelValue & 16711680;
			} else {
				c2 = redArray[pixelValue >> 16 & 255];
			}
			if(greenArray == null) {
				c3 = pixelValue & 65280;
			} else {
				c3 = greenArray[pixelValue >> 8 & 255];
			}
			if(blueArray == null) {
				c4 = pixelValue & 255;
			} else {
				c4 = blueArray[pixelValue & 255];
			}
			a = (c1 >> 24 & 255) + (c2 >> 24 & 255) + (c3 >> 24 & 255) + (c4 >> 24 & 255);
			r = (c1 >> 16 & 255) + (c2 >> 16 & 255) + (c3 >> 16 & 255) + (c4 >> 16 & 255);
			g = (c1 >> 8 & 255) + (c2 >> 8 & 255) + (c3 >> 8 & 255) + (c4 >> 8 & 255);
			b = (c1 & 255) + (c2 & 255) + (c3 & 255) + (c4 & 255);
			color = a << 24 | r << 16 | g << 8 | b;
			pixels.position = i * 4;
			pixels.writeUnsignedInt(color);
		}
		pixels.position = 0;
		this.setPixels(new openfl_geom_Rectangle(destPoint.x,destPoint.y,sw,sh),pixels);
	}
	,perlinNoise: function(baseX,baseY,numOctaves,randomSeed,stitch,fractalNoise,channelOptions,grayScale,offsets) {
		if(grayScale == null) {
			grayScale = false;
		}
		if(channelOptions == null) {
			channelOptions = 7;
		}
		openfl_Lib.notImplemented("BitmapData.perlinNoise");
	}
	,scroll: function(x,y) {
		if(!this.__isValid) {
			return;
		}
		this.image.scroll(x,y);
		this.__usingPingPongTexture = false;
	}
	,setPixel: function(x,y,color) {
		if(!this.__isValid) {
			return;
		}
		this.image.setPixel(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixel32: function(x,y,color) {
		if(!this.__isValid) {
			return;
		}
		this.image.setPixel32(x,y,color,1);
		this.__usingPingPongTexture = false;
	}
	,setPixels: function(rect,byteArray) {
		if(!this.__isValid || rect == null) {
			return;
		}
		this.image.setPixels(rect.__toLimeRectangle(),openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(byteArray),1);
		this.__usingPingPongTexture = false;
	}
	,setVector: function(rect,inputVector) {
		var byteArray = new openfl_utils_ByteArrayData(0);
		openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length(byteArray,inputVector.length * 4);
		var _g = 0;
		while(_g < inputVector.length) {
			var color = inputVector.data[_g];
			++_g;
			byteArray.writeUnsignedInt(color);
		}
		byteArray.position = 0;
		this.setPixels(rect,byteArray);
	}
	,threshold: function(sourceBitmapData,sourceRect,destPoint,operation,threshold,color,mask,copySource) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(sourceBitmapData == null || sourceRect == null || destPoint == null || sourceRect.x > sourceBitmapData.width || sourceRect.y > sourceBitmapData.height || destPoint.x > this.width || destPoint.y > this.height) {
			return 0;
		}
		return this.image.threshold(sourceBitmapData.image,sourceRect.__toLimeRectangle(),destPoint.__toLimeVector2(),operation,threshold,color,mask,copySource,1);
	}
	,unlock: function(changeRect) {
	}
	,__createUVs: function(x0,y0,x1,y1,x2,y2,x3,y3) {
		if(y3 == null) {
			y3 = 1;
		}
		if(x3 == null) {
			x3 = 0;
		}
		if(y2 == null) {
			y2 = 1;
		}
		if(x2 == null) {
			x2 = 1;
		}
		if(y1 == null) {
			y1 = 0;
		}
		if(x1 == null) {
			x1 = 1;
		}
		if(y0 == null) {
			y0 = 0;
		}
		if(x0 == null) {
			x0 = 0;
		}
		if(this.__uvData == null) {
			this.__uvData = new openfl_display_TextureUvs();
		}
		this.__uvData.x0 = x0;
		this.__uvData.y0 = y0;
		this.__uvData.x1 = x1;
		this.__uvData.y1 = y1;
		this.__uvData.x2 = x2;
		this.__uvData.y2 = y2;
		this.__uvData.x3 = x3;
		this.__uvData.y3 = y3;
	}
	,__drawGL: function(renderSession,source,matrix,colorTransform,blendMode,clipRect,smoothing,drawSelf,clearBuffer,readPixels,powerOfTwo) {
		if(powerOfTwo == null) {
			powerOfTwo = true;
		}
		if(readPixels == null) {
			readPixels = false;
		}
		if(clearBuffer == null) {
			clearBuffer = false;
		}
		if(drawSelf == null) {
			drawSelf = false;
		}
		if(smoothing == null) {
			smoothing = false;
		}
		this.__pingPongTexture = openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer(renderSession,this.__pingPongTexture,this.rect,smoothing,this.transparent,clearBuffer,powerOfTwo);
		openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable(renderSession,drawSelf?this:null,source,matrix,colorTransform,blendMode,clipRect);
		openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer(renderSession,readPixels?this.image:null);
		var _this = this.__pingPongTexture;
		var uv = (_this.__swapped?_this.__texture1:_this.__texture0).__uvData;
		this.__createUVs(uv.x0,uv.y0,uv.x1,uv.y1,uv.x2,uv.y2,uv.x3,uv.y3);
		this.__isValid = true;
		this.__usingPingPongTexture = true;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,type,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		});
	}
	,__fromBytes: function(bytes,rawAlpha,onload) {
		var _gthis = this;
		lime_graphics_Image.fromBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes(bytes),function(image) {
			_gthis.__fromImage(image);
			if(rawAlpha != null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
				lime_graphics_utils_ImageCanvasUtil.createImageData(image);
				var data = image.buffer.data;
				var _g1 = 0;
				var _g = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(rawAlpha);
				while(_g1 < _g) data[_g1++ * 4 + 3] = rawAlpha.readUnsignedByte();
				image.dirty = true;
			}
			if(onload != null) {
				onload(_gthis);
			}
		});
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		lime_graphics_Image.fromFile(path,function(image) {
			_gthis.__fromImage(image);
			if(onload != null) {
				onload(_gthis);
			}
		},onerror);
	}
	,__fromImage: function(image) {
		if(image != null && image.buffer != null) {
			this.image = image;
			this.width = image.width;
			this.height = image.height;
			this.rect = new openfl_geom_Rectangle(0,0,image.width,image.height);
			this.__isValid = true;
		}
	}
	,__renderCairo: function(renderSession) {
		if(!this.__isValid) {
			return;
		}
		var cairo = renderSession.cairo;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else {
			cairo.set_matrix(transform.__toMatrix3());
		}
		var surface = this.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			if(cairo.get_antialias() == 1) {
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,3);
			} else {
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,1);
			}
			cairo.set_source(pattern);
			cairo.paint();
		}
	}
	,__renderCairoMask: function(renderSession) {
	}
	,__renderCanvas: function(renderSession) {
		if(!this.__isValid) {
			return;
		}
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
		var context = renderSession.context;
		if(this.__worldTransform == null) {
			this.__worldTransform = new openfl_geom_Matrix();
		}
		context.globalAlpha = 1;
		var transform = this.__worldTransform;
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		context.drawImage(this.image.get_src(),0,0);
	}
	,__renderCanvasMask: function(renderSession) {
	}
	,__renderGL: function(renderSession) {
		renderSession.spriteBatch.renderBitmapData(this,false,this.__worldTransform,this.__worldColorTransform,this.__worldColorTransform.alphaMultiplier,this.__blendMode,this.__shader);
	}
	,__resize: function(width,height) {
		this.width = width;
		this.height = height;
		this.rect.width = width;
		this.rect.height = height;
	}
	,__sync: function() {
		lime_graphics_utils_ImageCanvasUtil.sync(this.image,false);
	}
	,__updateChildren: function(transformOnly) {
	}
	,__updateMask: function(maskGraphics) {
	}
	,__updateTransforms: function(overrideTransform) {
		if(overrideTransform == null) {
			this.__worldTransform.identity();
		} else {
			this.__worldTransform = overrideTransform;
		}
	}
	,__class__: openfl_display_BitmapData
};
var SponsorLogo = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(SponsorLogo.preload != null) {
		this.__fromImage(SponsorLogo.preload);
	} else {
		var base64 = haxe_Resource.getString(SponsorLogo.resourceName);
		var onload1 = function(b) {
			if(SponsorLogo.preload == null) {
				SponsorLogo.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,SponsorLogo.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["SponsorLogo"] = SponsorLogo;
SponsorLogo.__name__ = ["SponsorLogo"];
SponsorLogo.preload = null;
SponsorLogo.__super__ = openfl_display_BitmapData;
SponsorLogo.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: SponsorLogo
});
var GameLogo = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(GameLogo.preload != null) {
		this.__fromImage(GameLogo.preload);
	} else {
		var base64 = haxe_Resource.getString(GameLogo.resourceName);
		var onload1 = function(b) {
			if(GameLogo.preload == null) {
				GameLogo.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,GameLogo.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["GameLogo"] = GameLogo;
GameLogo.__name__ = ["GameLogo"];
GameLogo.preload = null;
GameLogo.__super__ = openfl_display_BitmapData;
GameLogo.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: GameLogo
});
var LoadMeter = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(LoadMeter.preload != null) {
		this.__fromImage(LoadMeter.preload);
	} else {
		var base64 = haxe_Resource.getString(LoadMeter.resourceName);
		var onload1 = function(b) {
			if(LoadMeter.preload == null) {
				LoadMeter.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,LoadMeter.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["LoadMeter"] = LoadMeter;
LoadMeter.__name__ = ["LoadMeter"];
LoadMeter.preload = null;
LoadMeter.__super__ = openfl_display_BitmapData;
LoadMeter.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: LoadMeter
});
var LoadBarContur = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(LoadBarContur.preload != null) {
		this.__fromImage(LoadBarContur.preload);
	} else {
		var base64 = haxe_Resource.getString(LoadBarContur.resourceName);
		var onload1 = function(b) {
			if(LoadBarContur.preload == null) {
				LoadBarContur.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,LoadBarContur.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["LoadBarContur"] = LoadBarContur;
LoadBarContur.__name__ = ["LoadBarContur"];
LoadBarContur.preload = null;
LoadBarContur.__super__ = openfl_display_BitmapData;
LoadBarContur.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: LoadBarContur
});
var LoadBarFill = function(width,height,transparent,fillRGBA,onload) {
	if(fillRGBA == null) {
		fillRGBA = -1;
	}
	if(transparent == null) {
		transparent = true;
	}
	openfl_display_BitmapData.call(this,0,0,transparent,fillRGBA);
	if(LoadBarFill.preload != null) {
		this.__fromImage(LoadBarFill.preload);
	} else {
		var base64 = haxe_Resource.getString(LoadBarFill.resourceName);
		var onload1 = function(b) {
			if(LoadBarFill.preload == null) {
				LoadBarFill.preload = b.image;
			}
			if(onload != null) {
				onload(b);
			}
		};
		var _gthis = this;
		lime_graphics_Image.fromBase64(base64,LoadBarFill.resourceType,function(image) {
			_gthis.__fromImage(image);
			if(onload1 != null) {
				onload1(_gthis);
			}
		});
	}
};
$hxClasses["LoadBarFill"] = LoadBarFill;
LoadBarFill.__name__ = ["LoadBarFill"];
LoadBarFill.preload = null;
LoadBarFill.__super__ = openfl_display_BitmapData;
LoadBarFill.prototype = $extend(openfl_display_BitmapData.prototype,{
	__class__: LoadBarFill
});
var Preloader = function() {
	this.wasHeight = 0;
	this.wasWidth = 0;
	this.horseAng = 0;
	this._painted = false;
	this.inited = false;
	NMEPreloader.call(this);
	Preloader.instance = this;
	var isMobileBrowser = false;
	var evalString = "";
	evalString += "/Android|webOS|iPhone|iPad|iPod|BlackBerry|Windows Phone|IEMobile|Opera Mini/i.test(navigator.userAgent)";
	isMobileBrowser = eval(evalString);
	if(!isMobileBrowser) {
		eval("document.getElementById('openfl-content').style.overflow = 'hidden'");
	}
	this.mainCont = new openfl_display_Sprite();
	this.addChild(this.mainCont);
	this.sponsorLogo = new openfl_display_Sprite();
	this.sponsorBm = new openfl_display_Bitmap(new SponsorLogo(0,0),1,true);
	this.sponsorLogo.addChild(this.sponsorBm);
	this.gameLogo = new openfl_display_Bitmap(new GameLogo(0,0),1,true);
	this.barContur = new openfl_display_Bitmap(new LoadBarContur(0,0));
	this.bar = new openfl_display_Bitmap(new LoadBarFill(0,0));
	this.loadMetrCont = new openfl_display_Sprite();
	this.loadMetr = new openfl_display_Bitmap(new LoadMeter(0,0),1,true);
	this.getChildAt(0).set_visible(false);
	this.getChildAt(1).set_visible(false);
	openfl_Lib.current.stage.addEventListener("resize",$bind(this,this.stage_onResize));
	window.document.addEventListener("touchstart",function(e) {
		e.preventDefault();
	},false);
	window.document.addEventListener("touchmove",function(e1) {
		e1.preventDefault();
	},false);
	new Sounds();
};
$hxClasses["Preloader"] = Preloader;
Preloader.__name__ = ["Preloader"];
Preloader.instance = null;
Preloader.openMoreGames = function() {
	//window.open("http://cawogames.com","_blank").focus();
};
Preloader.remove = function() {
	Preloader.instance.onLoadedRemove();
};
Preloader.__super__ = NMEPreloader;
Preloader.prototype = $extend(NMEPreloader.prototype,{
	mainCont: null
	,sponsorBm: null
	,sponsorLogo: null
	,gameLogo: null
	,loadMetr: null
	,loadMetrCont: null
	,barContur: null
	,bar: null
	,inited: null
	,_painted: null
	,overlay: null
	,horseAng: null
	,wasWidth: null
	,wasHeight: null
	,stage_onResize: function(e) {
		this.init();
	}
	,init: function() {
		this.set_x(0);
		this.set_y(0);
		this.wasWidth = openfl_Lib.current.stage.stageWidth;
		this.wasHeight = openfl_Lib.current.stage.stageHeight;
		this.mainCont.set_scaleX(this.mainCont.set_scaleY(1));
		this.sponsorLogo.set_x(-this.sponsorLogo.get_width() / 2);
		if(!this.inited) {
			this.mainCont.addChild(this.sponsorLogo);
		}
		this.sponsorLogo.set_scaleY(0.1);
		this.gameLogo.set_width(Math.min(this.gameLogo.bitmapData.width * 1.5,this.wasWidth * 0.9));
		this.gameLogo.set_scaleY(this.gameLogo.get_scaleX());
		this.gameLogo.set_x(-this.gameLogo.get_width() / 2);
		this.gameLogo.set_y(this.sponsorLogo.get_y() + this.sponsorLogo.get_height() + 60);
		if(!this.inited) {
			this.mainCont.addChild(this.gameLogo);
		}
		this.loadMetr.set_x(-this.loadMetr.get_width() / 2);
		this.loadMetr.set_y(-this.loadMetr.get_height());
		if(!this.inited) {
			this.loadMetrCont.addChild(this.loadMetr);
		}
		this.loadMetrCont.set_x(-this.bar.get_width() / 2);
		this.loadMetrCont.set_y(this.gameLogo.get_y() + 170);
		if(!this.inited) {
			this.mainCont.addChild(this.loadMetrCont);
		}
		this.bar.set_x(-this.bar.bitmapData.width / 2);
		this.bar.set_y(this.loadMetrCont.get_y() + 5);
		this.barContur.set_x(this.bar.get_x() - 2);
		this.barContur.set_y(this.bar.get_y() - 2);
		if(!this.inited) {
			this.mainCont.addChild(this.barContur);
		}
		if(!this.inited) {
			this.mainCont.addChild(this.bar);
		}
		this.bar.set_width(1);
		this.set_x(this.wasWidth / 2);
		if(this.mainCont.get_height() > openfl_Lib.current.stage.stageHeight) {
			this.mainCont.set_scaleX(this.mainCont.set_scaleY(openfl_Lib.current.stage.stageHeight / (this.mainCont.get_height() + 50)));
		}
		this.set_y(this.wasHeight / 2 - this.mainCont.get_height() / 2);
		if(this.overlay == null) {
			this.overlay = new openfl_display_Bitmap(new openfl_display_BitmapData(100,100,true,0));
			this.addChildAt(this.overlay,0);
		}
		this.overlay.set_width(this.wasWidth);
		this.overlay.set_height(this.wasHeight);
		this.overlay.set_x(-this.get_x());
		this.overlay.set_y(-this.get_y());
		this.inited = true;
	}
	,onUpdate: function(filesLoaded,filesTotal) {
		if(!this.inited && openfl_Lib.current.stage.stageWidth != 0 && openfl_Lib.current.stage.stageHeight != 0) {
			this.init();
		}
		if(this.inited && (this.wasWidth != openfl_Lib.current.stage.stageWidth || this.wasHeight != openfl_Lib.current.stage.stageHeight)) {
			this.init();
		}
		NMEPreloader.prototype.onUpdate.call(this,filesLoaded,filesTotal);
		this.bar.set_width(218 * filesLoaded / filesTotal);
		this.loadMetrCont.set_x(this.bar.get_x() + this.bar.get_width());
		this.horseAng += 0.6;
		this.loadMetrCont.set_rotation(15 * Math.sin(this.horseAng));
	}
	,onLoaded: function() {
		NMEPreloader.prototype.onLoaded.call(this);
	}
	,onLoadedRemove: function() {
		NMEPreloader.prototype.onLoaded.call(this);
	}
	,__class__: Preloader
});
var Reflect = function() { };
$hxClasses["Reflect"] = Reflect;
Reflect.__name__ = ["Reflect"];
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
Reflect.makeVarArgs = function(f) {
	return function() {
		var a = Array.prototype.slice.call(arguments);
		return f(a);
	};
};
var SaveLoadWindow = function(isFromMainMenu) {
	if(isFromMainMenu == null) {
		isFromMainMenu = false;
	}
	this.wasMDown = false;
	this.curSelection = 0;
	this.slots = [];
	this.highlights = [];
	this.isFromMainMenu = false;
	this.bgsArr = [];
	Menu.call(this);
	this.isFromMainMenu = isFromMainMenu;
	this.mainBatch = this.main.batch;
	this.bgsSpr = this.getSprite();
	this.createBgs();
	this.mainCont = this.getSprite();
	var underlay = this.getBimap("plashka_Ba",null,this.mainCont);
	var stX = 17;
	var stY = 17;
	var curY = stY;
	var highlight;
	var slot;
	var _g = 0;
	while(_g < 5) {
		var i = _g++;
		highlight = this.getBimap("plashka_Ba_1",null,this.mainCont);
		highlight.set_x(stX);
		highlight.set_y(curY);
		slot = new SaveSlot(true);
		this.mainCont.addChild(slot);
		slot.set_x(stX);
		slot.set_y(curY);
		curY += highlight.get_height() - 3;
		if(i != 0) {
			highlight.set_visible(false);
		}
		this.highlights.push(highlight);
		this.slots.push(slot);
	}
	this.saveBtn = this.getBimap("save",$bind(this,this.saveClick),this.mainCont);
	this.loadBtn = this.getBimap("load_a",$bind(this,this.loadClick),this.mainCont);
	var backBtn = this.getBimap("Back-001",$bind(this,this.backClick),this.mainCont);
	this.saveBtn.set_y(this.loadBtn.set_y(backBtn.set_y(underlay.get_height() - backBtn.get_height() - 40)));
	var btnsGapX = 30;
	var totBtnsWidth = this.saveBtn.get_width() * 3 + btnsGapX * 2;
	this.saveBtn.set_x(underlay.get_width() / 2 - totBtnsWidth / 2);
	this.loadBtn.set_x(underlay.get_width() / 2 - this.loadBtn.get_width() / 2);
	backBtn.set_x(underlay.get_width() / 2 + totBtnsWidth / 2 - backBtn.get_width());
	if(isFromMainMenu) {
		this.saveBtn.set_alpha(0.5);
	}
	this.mainCont.set_x(this.sWidth / 2 - underlay.get_width() / 2);
	this.mainCont.set_y(this.sHeight / 2 - underlay.get_height() / 2);
	this.updateSlots();
	this.set_curSelection(0);
	this.setUpdateFuntion($bind(this,this.update));
	this.moveThisOnResize = true;
	this.moveByResizeCallBack = $bind(this,this.onResize);
	this.onResize();
	var wasY = this.get_y();
	this.set_y(this.get_y() + this.sHeight);
	motion_Actuate.tween(this,0.27,{ y : wasY}).ease(motion_easing_Quad.get_easeOut());
};
$hxClasses["SaveLoadWindow"] = SaveLoadWindow;
SaveLoadWindow.__name__ = ["SaveLoadWindow"];
SaveLoadWindow.__super__ = Menu;
SaveLoadWindow.prototype = $extend(Menu.prototype,{
	bgsArr: null
	,bgsSpr: null
	,mainCont: null
	,isFromMainMenu: null
	,highlights: null
	,slots: null
	,curSelection: null
	,loadBtn: null
	,saveBtn: null
	,set_curSelection: function(val) {
		this.curSelection = val;
		var _g1 = 0;
		var _g = this.highlights.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.highlights[i].set_visible(i == val);
		}
		if(this.slots[val].isEmpty) {
			this.loadBtn.set_alpha(0.5);
		} else {
			this.loadBtn.set_alpha(1);
		}
		return this.curSelection;
	}
	,wasMDown: null
	,update: function(frameTime) {
		if(this.main.isMouseDown && !this.wasMDown) {
			var _g1 = 0;
			var _g = this.highlights.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(this.highlights[i].getBounds(this.main).contains(this.main.get_mouseX(),this.main.get_mouseY())) {
					this.set_curSelection(i);
					break;
				}
			}
		}
		this.wasMDown = this.main.isMouseDown;
	}
	,updateSlots: function() {
		var saves = LocalSaves.getVar("saves") != null?LocalSaves.getVar("saves"):null;
		var data;
		if(saves == null) {
			var _g1 = 0;
			var _g = this.slots.length;
			while(_g1 < _g) this.slots[_g1++].init(true);
			return;
		}
		var _g11 = 0;
		var _g2 = this.slots.length;
		while(_g11 < _g2) {
			var i = _g11++;
			if(saves[i] != null) {
				data = JSON.parse(LocalSaves.getVar(saves[i]));
				this.slots[i].init(false,data.playersType[0] == "human" && data.playersType[1] == "human",saves[i]);
			}
		}
		if(this.slots[this.curSelection].isEmpty) {
			this.loadBtn.set_alpha(0.5);
		} else {
			this.loadBtn.set_alpha(1);
		}
	}
	,saveClick: function() {
		if(this.saveBtn.get_alpha() < 1) {
			return;
		}
		Desk.current.saveGame(this.curSelection);
		this.updateSlots();
	}
	,loadClick: function() {
		if(this.slots[this.curSelection].isEmpty) {
			return;
		}
		Desk.current.loadSave(this.curSelection);
		this.main.paused = false;
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
	}
	,backClick: function() {
		motion_Actuate.tween(this,0.3,{ y : -this.get_y() - this.sHeight}).ease(motion_easing_Quad.get_easeOut()).onComplete($bind(this,this.close));
		if(this.isFromMainMenu) {
			Main.current.addChild(new MainMenu());
		} else {
			Main.current.addChild(new PauseMenu(false));
		}
	}
	,onResize: function() {
		this.createBgs();
		this.bgsSpr.set_x(-this.get_x());
		this.bgsSpr.set_y(-this.get_y());
	}
	,createBgs: function() {
		var lastIndex = 0;
		var sizeX = 0;
		var bg;
		this.isImagesFromAtlas = false;
		while(sizeX < Main.current.sWidth) {
			if(this.bgsArr[lastIndex] != null) {
				bg = this.bgsArr[lastIndex];
				bg.set_visible(true);
			} else {
				bg = this.getBimap("img/bg.jpg",null,this.bgsSpr);
				this.bgsArr.push(bg);
			}
			bg.set_x(sizeX);
			bg.set_y(0);
			bg.set_scaleX(bg.set_scaleY(Main.current.sHeight / bg.bitmapData.height));
			sizeX += bg.get_width() - 2;
			++lastIndex;
		}
		this.isImagesFromAtlas = true;
		var _g1 = lastIndex;
		var _g = this.bgsArr.length;
		while(_g1 < _g) this.bgsArr[_g1++].set_visible(false);
	}
	,__class__: SaveLoadWindow
	,__properties__: $extend(Menu.prototype.__properties__,{set_curSelection:"set_curSelection"})
});
var SaveSlot = function(isEmpty,isTwoPlayers,slotName) {
	if(slotName == null) {
		slotName = "";
	}
	if(isTwoPlayers == null) {
		isTwoPlayers = false;
	}
	this.isEmpty = false;
	this.slotName = "";
	this.isTwoPlayers = false;
	Menu.call(this);
	this.isEmpty = isEmpty;
	this.isTwoPlayers = isTwoPlayers;
	this.slotName = slotName;
	this.mainBatch = this.main.batch;
	var slotRect = this.mainBatch.getImgRect("plashka_Ba_1");
	this.icon = this.getBimap(isTwoPlayers?"a_b":"ai_1");
	this.icon.set_x(30);
	this.icon.set_y(slotRect.height / 2 - this.icon.get_height() / 2);
	this.nameTF = new NumFontFromBatch(this.main.batch,"dig_");
	this.nameTF.set_align("CENTER");
	this.nameTF.widthToAlign = slotRect.width - 120;
	this.nameTF.set_x(120);
	this.nameTF.set_y(slotRect.height / 2 - this.nameTF.get_height() / 2 - 10);
	this.addChild(this.nameTF);
	if(slotName == "") {
		this.nameTF.set_text("0");
	} else {
		this.nameTF.set_text(slotName);
	}
	if(isEmpty) {
		this.icon.set_visible(false);
		this.nameTF.set_visible(false);
	}
};
$hxClasses["SaveSlot"] = SaveSlot;
SaveSlot.__name__ = ["SaveSlot"];
SaveSlot.__super__ = Menu;
SaveSlot.prototype = $extend(Menu.prototype,{
	isTwoPlayers: null
	,slotName: null
	,isEmpty: null
	,icon: null
	,nameTF: null
	,init: function(isEmpty,isTwoPlayers,slotName) {
		if(slotName == null) {
			slotName = "";
		}
		if(isTwoPlayers == null) {
			isTwoPlayers = false;
		}
		this.isEmpty = isEmpty;
		this.isTwoPlayers = isTwoPlayers;
		this.slotName = slotName;
		if(isEmpty) {
			this.icon.set_visible(false);
			this.nameTF.set_visible(false);
		} else {
			this.icon.set_visible(true);
			this.nameTF.set_visible(true);
			this.nameTF.set_text(slotName);
			this.icon.bitmapData = this.getBitmapData(isTwoPlayers?"a_b":"ai_1");
			this.icon.smoothing = true;
		}
	}
	,__class__: SaveSlot
});
var ScrollContainer = function(scrollHeight,scrollWidth,doSimpleVerticalScroll,doSimpleHorizontalScroll,fullActiveZone) {
	if(fullActiveZone == null) {
		fullActiveZone = false;
	}
	if(doSimpleHorizontalScroll == null) {
		doSimpleHorizontalScroll = false;
	}
	if(doSimpleVerticalScroll == null) {
		doSimpleVerticalScroll = false;
	}
	if(scrollWidth == null) {
		scrollWidth = 0;
	}
	if(scrollHeight == null) {
		scrollHeight = 0;
	}
	this.fullActiveZone = false;
	this.scrolled = false;
	this.verLineSize = 0;
	this.isVerLineScrolling = false;
	this.isVerScrollLine = false;
	this.speedY = 0;
	this.speedX = 0;
	this.isMDown = false;
	this.removedListeners = false;
	this.doSimpleHorizontalScroll = false;
	this.doSimpleVerticalScroll = false;
	this.fullActiveZone = fullActiveZone;
	this.scrollHeight = scrollHeight;
	this.scrollWidth = scrollWidth;
	this.doSimpleVerticalScroll = doSimpleVerticalScroll;
	this.doSimpleHorizontalScroll = doSimpleHorizontalScroll;
	openfl_display_Sprite.call(this);
	this.contSprite = new openfl_display_Sprite();
	openfl_display_Sprite.prototype.addChild.call(this,this.contSprite);
	this.main = Main.current;
	this.set_scrollRect(new openfl_geom_Rectangle(0,0,scrollWidth > 0?scrollWidth:5000,scrollHeight > 0?scrollHeight:5000));
	if(doSimpleVerticalScroll || doSimpleHorizontalScroll) {
		if(fullActiveZone) {
			openfl_Lib.current.stage.addEventListener("mouseDown",$bind(this,this.btnDown));
			openfl_Lib.current.stage.addEventListener("touchBegin",$bind(this,this.btnDown));
		} else {
			this.addEventListener("mouseDown",$bind(this,this.btnDown));
			this.addEventListener("touchBegin",$bind(this,this.btnDown));
		}
		openfl_Lib.current.stage.addEventListener("mouseMove",$bind(this,this.btnMove));
		this.addEventListener("mouseMove",$bind(this,this.btnMove));
		openfl_Lib.current.stage.addEventListener("touchMove",$bind(this,this.btnMove));
		this.addEventListener("touchMove",$bind(this,this.btnMove));
		openfl_Lib.current.stage.addEventListener("mouseUp",$bind(this,this.btnUp));
		this.addEventListener("click",$bind(this,this.btnClick));
		openfl_Lib.current.stage.addEventListener("touchEnd",$bind(this,this.btnUp));
	}
	this.hp = new openfl_geom_Point();
};
$hxClasses["ScrollContainer"] = ScrollContainer;
ScrollContainer.__name__ = ["ScrollContainer"];
ScrollContainer.__super__ = openfl_display_Sprite;
ScrollContainer.prototype = $extend(openfl_display_Sprite.prototype,{
	contSprite: null
	,scrollHeight: null
	,scrollWidth: null
	,doSimpleVerticalScroll: null
	,doSimpleHorizontalScroll: null
	,removedListeners: null
	,isMDown: null
	,hp: null
	,main: null
	,speedX: null
	,speedY: null
	,scrollVerLine: null
	,scrollVerElement: null
	,isVerScrollLine: null
	,isVerLineScrolling: null
	,verLineSize: null
	,scrolled: null
	,fullActiveZone: null
	,addScrollVerticalLine: function(scrollLine,scrollElement,xPos,yPos,elementOffsetX,elementOffseY) {
		if(elementOffseY == null) {
			elementOffseY = 0;
		}
		if(elementOffsetX == null) {
			elementOffsetX = 0;
		}
		if(yPos == null) {
			yPos = 0;
		}
		if(xPos == null) {
			xPos = 0;
		}
		this.scrollVerLine = scrollLine;
		this.scrollVerElement = scrollElement;
		openfl_display_Sprite.prototype.addChild.call(this,this.scrollVerLine);
		openfl_display_Sprite.prototype.addChild.call(this,this.scrollVerElement);
		scrollLine.set_x(xPos);
		scrollLine.set_y(yPos);
		this.scrollVerElement.set_x(xPos + (elementOffsetX != 0?elementOffsetX:scrollLine.get_width() / 2 - this.scrollVerElement.get_width() / 2));
		this.scrollVerElement.set_y(yPos + elementOffseY);
		this.verLineSize = scrollLine.get_height() - this.scrollVerElement.get_height();
		this.isVerScrollLine = true;
	}
	,btnDown: function(e) {
		this.removeListeners(e);
		if(this.isMDown || this.isVerLineScrolling) {
			return;
		}
		e.stopImmediatePropagation();
		if(this.scrollVerElement != null && this.scrollVerElement.hitTestPoint(e.stageX,e.stageY)) {
			this.isVerLineScrolling = true;
		} else {
			this.isMDown = true;
		}
		this.hp.x = this.main.get_mouseX();
		this.hp.y = this.main.get_mouseY();
	}
	,btnMove: function(e) {
		if(this.isMDown) {
			if(this.doSimpleVerticalScroll) {
				this.addVerticalScroll((this.main.get_mouseY() - this.hp.y) * this.get_scaleY());
			}
			if(this.doSimpleHorizontalScroll) {
				this.addHorScroll((this.main.get_mouseX() - this.hp.x) * this.get_scaleX());
			}
			this.speedY = (this.speedY + (this.hp.y - this.main.get_mouseY()) * this.get_scaleY() * 4 / 60) / 2;
			this.speedX = (this.speedX + (this.hp.x - this.main.get_mouseX()) * this.get_scaleX() * 4 / 60) / 2;
			this.hp.x = this.main.get_mouseX();
			this.hp.y = this.main.get_mouseY();
			this.scrolled = true;
			if(this.isVerScrollLine && this.scrollHeight < this.contSprite.get_height()) {
				this.scrollVerElement.set_y(this.scrollVerLine.get_y() - this.verLineSize / (this.contSprite.get_height() - this.scrollHeight) * this.contSprite.get_y());
			}
		} else if(this.isVerLineScrolling) {
			var _g = this.scrollVerElement;
			_g.set_y(_g.get_y() + (this.main.get_mouseY() - this.hp.y) * this.get_scaleY());
			if(this.scrollVerElement.get_y() - this.scrollVerLine.get_y() < 0) {
				this.scrollVerElement.set_y(this.scrollVerLine.get_y());
			} else if(this.scrollVerElement.get_y() - this.scrollVerLine.get_y() > this.verLineSize) {
				this.scrollVerElement.set_y(this.scrollVerLine.get_y() + this.verLineSize);
			}
			this.contSprite.set_y(-((this.contSprite.get_height() - this.scrollHeight) / this.verLineSize) * (this.scrollVerElement.get_y() - this.scrollVerLine.get_y()));
			this.hp.x = this.main.get_mouseX();
			this.hp.y = this.main.get_mouseY();
		}
	}
	,btnUp: function(e) {
		if(this.isMDown) {
			e.stopImmediatePropagation();
		}
		this.isVerLineScrolling = false;
		this.isMDown = false;
		if(Math.abs(this.speedX) * 60 < 2) {
			this.speedX = 0;
		}
		if(Math.abs(this.speedY) * 60 < 2) {
			this.speedY = 0;
		}
	}
	,btnClick: function(e) {
		if(this.scrolled) {
			e.stopImmediatePropagation();
		}
		this.scrolled = false;
	}
	,removeListeners: function(e) {
		if(!this.removedListeners) {
			if(e.type == "mouseDown" || e.type == "mouseMove" || e.type == "mouseUp") {
				this.removeEventListener("touchBegin",$bind(this,this.btnDown));
				openfl_Lib.current.stage.removeEventListener("touchBegin",$bind(this,this.btnDown));
				openfl_Lib.current.stage.removeEventListener("touchMove",$bind(this,this.btnMove));
				openfl_Lib.current.stage.removeEventListener("touchEnd",$bind(this,this.btnUp));
			} else {
				this.removeEventListener("mouseDown",$bind(this,this.btnDown));
				openfl_Lib.current.stage.removeEventListener("mouseDown",$bind(this,this.btnDown));
				openfl_Lib.current.stage.removeEventListener("mouseMove",$bind(this,this.btnMove));
				openfl_Lib.current.stage.removeEventListener("mouseUp",$bind(this,this.btnUp));
				this.removeEventListener("click",$bind(this,this.btnClick));
			}
			this.removedListeners = true;
		}
	}
	,addVerticalScroll: function(num) {
		if(this.scrollHeight > this.contSprite.get_height()) {
			return false;
		}
		var _g = this.contSprite;
		_g.set_y(_g.get_y() + num);
		if(this.contSprite.get_y() > 0) {
			this.contSprite.set_y(0);
			return false;
		} else if(this.contSprite.get_height() + this.contSprite.get_y() < this.scrollHeight) {
			this.contSprite.set_y(this.scrollHeight - this.contSprite.get_height());
			return false;
		}
		return true;
	}
	,addHorScroll: function(num) {
		var _g = this.contSprite;
		_g.set_x(_g.get_x() + num);
		if(this.contSprite.get_x() > 0) {
			this.contSprite.set_x(0);
			return false;
		} else if(this.contSprite.get_width() + this.contSprite.get_x() < this.scrollWidth) {
			this.contSprite.set_x(this.scrollWidth - this.contSprite.get_width());
			return false;
		}
		return true;
	}
	,addChild: function(children) {
		return this.contSprite.addChild(children);
	}
	,addChildAt: function(children,index) {
		return this.contSprite.addChildAt(children,index);
	}
	,removeChild: function(child) {
		if(child.parent == this.contSprite) {
			this.contSprite.removeChild(child);
		}
		return child;
	}
	,removeChildAt: function(index) {
		return this.contSprite.removeChildAt(index);
	}
	,update: function(frameTime) {
		if(!this.isMDown && !this.isVerLineScrolling && (this.speedX != 0 || this.speedY != 0)) {
			var resDumpSC = Math.pow(0.92,frameTime / 16.666666666666668);
			this.speedY *= resDumpSC;
			this.speedX *= resDumpSC;
			if(this.doSimpleVerticalScroll && !this.addVerticalScroll(-this.speedY * frameTime)) {
				this.speedY = 0;
			}
			if(this.doSimpleHorizontalScroll && !this.addHorScroll(-this.speedX * frameTime)) {
				this.speedX = 0;
			}
			if(Math.abs(this.speedY) * 60 <= 0.2) {
				this.speedY = 0;
			}
			if(Math.abs(this.speedX) * 60 <= 0.2) {
				this.speedX = 0;
			}
			if(this.isVerScrollLine) {
				this.scrollVerElement.set_y(this.scrollVerLine.get_y() - this.verLineSize / (this.contSprite.get_height() - this.scrollHeight) * this.contSprite.get_y());
			}
		}
		if(this.isVerScrollLine) {
			this.scrollVerElement.set_visible(this.contSprite.get_height() > this.scrollHeight);
		}
	}
	,destroy: function() {
		this.removeEventListener("touchBegin",$bind(this,this.btnDown));
		openfl_Lib.current.stage.removeEventListener("touchBegin",$bind(this,this.btnDown));
		openfl_Lib.current.stage.removeEventListener("touchMove",$bind(this,this.btnMove));
		openfl_Lib.current.stage.removeEventListener("touchEnd",$bind(this,this.btnUp));
		this.removeEventListener("mouseDown",$bind(this,this.btnDown));
		openfl_Lib.current.stage.removeEventListener("mouseDown",$bind(this,this.btnDown));
		openfl_Lib.current.stage.removeEventListener("mouseMove",$bind(this,this.btnMove));
		openfl_Lib.current.stage.removeEventListener("mouseUp",$bind(this,this.btnUp));
		this.removeEventListener("click",$bind(this,this.btnClick));
		this.main = null;
		if(this.contSprite != null && this.contSprite.parent != null) {
			openfl_display_Sprite.prototype.removeChild.call(this,this.contSprite);
		}
		this.contSprite = null;
		if(this.scrollVerLine != null && this.scrollVerLine.parent != null) {
			openfl_display_Sprite.prototype.removeChild.call(this,this.scrollVerLine);
		}
		this.scrollVerLine = null;
		if(this.scrollVerElement != null && this.scrollVerElement.parent != null) {
			openfl_display_Sprite.prototype.removeChild.call(this,this.scrollVerElement);
		}
		this.scrollVerElement = null;
		this.hp = null;
	}
	,__class__: ScrollContainer
});
var ScrollWithImages = function(curIndex,label,scrollBmdsArr) {
	this.maxSize = 500;
	Menu.call(this);
	this.scrollBmdsArr = scrollBmdsArr;
	this.curIndex = curIndex;
	this.mainBm = new openfl_display_Bitmap(scrollBmdsArr[curIndex],1,true);
	this.addChild(this.mainBm);
	this.mainBm.set_x(this.maxSize / 2 - this.mainBm.get_width() / 2);
	var upBtn = this.getBimap("arrowBot1_copy",$bind(this,this.minDiff));
	var dwBtn = this.getBimap("arrowUp1_copy",$bind(this,this.plusDiff));
	this.mainBm.set_y(0);
	var gapX = 5;
	var gapX1 = 10;
	upBtn.set_x(this.mainBm.get_x() - upBtn.get_width() - gapX);
	upBtn.set_y(this.mainBm.get_y() + this.mainBm.get_height() / 2 - upBtn.get_height() / 2);
	dwBtn.set_x(this.mainBm.get_x() + this.mainBm.get_width() + gapX1);
	dwBtn.set_y(upBtn.get_y());
};
$hxClasses["ScrollWithImages"] = ScrollWithImages;
ScrollWithImages.__name__ = ["ScrollWithImages"];
ScrollWithImages.__super__ = Menu;
ScrollWithImages.prototype = $extend(Menu.prototype,{
	scrollBmdsArr: null
	,mainBm: null
	,curIndex: null
	,maxSize: null
	,minDiff: function() {
		this.curIndex--;
		if(this.curIndex < 0) {
			this.curIndex = 0;
		}
		this.mainBm.bitmapData = this.scrollBmdsArr[this.curIndex];
		this.mainBm.smoothing = true;
	}
	,plusDiff: function() {
		this.curIndex++;
		if(this.curIndex > this.scrollBmdsArr.length - 1) {
			this.curIndex = this.scrollBmdsArr.length - 1;
		}
		this.mainBm.bitmapData = this.scrollBmdsArr[this.curIndex];
		this.mainBm.smoothing = true;
	}
	,__class__: ScrollWithImages
});
var haxe_io_Bytes = function(data) {
	this.length = data.byteLength;
	this.b = new Uint8Array(data);
	this.b.bufferValue = data;
	data.hxBytes = this;
	data.bytes = this.b;
};
$hxClasses["haxe.io.Bytes"] = haxe_io_Bytes;
haxe_io_Bytes.__name__ = ["haxe","io","Bytes"];
haxe_io_Bytes.ofString = function(s) {
	var a = [];
	var i = 0;
	while(i < s.length) {
		var c = s.charCodeAt(i++);
		if(55296 <= c && c <= 56319) {
			c = c - 55232 << 10 | s.charCodeAt(i++) & 1023;
		}
		if(c <= 127) {
			a.push(c);
		} else if(c <= 2047) {
			a.push(192 | c >> 6);
			a.push(128 | c & 63);
		} else if(c <= 65535) {
			a.push(224 | c >> 12);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		} else {
			a.push(240 | c >> 18);
			a.push(128 | c >> 12 & 63);
			a.push(128 | c >> 6 & 63);
			a.push(128 | c & 63);
		}
	}
	return new haxe_io_Bytes(new Uint8Array(a).buffer);
};
haxe_io_Bytes.ofData = function(b) {
	var hb = b.hxBytes;
	if(hb != null) {
		return hb;
	}
	return new haxe_io_Bytes(b);
};
haxe_io_Bytes.prototype = {
	length: null
	,b: null
	,data: null
	,blit: function(pos,src,srcpos,len) {
		if(pos < 0 || srcpos < 0 || len < 0 || pos + len > this.length || srcpos + len > src.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		if(srcpos == 0 && len == src.length) {
			this.b.set(src.b,pos);
		} else {
			this.b.set(src.b.subarray(srcpos,srcpos + len),pos);
		}
	}
	,getDouble: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat64(pos,true);
	}
	,getFloat: function(pos) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		return this.data.getFloat32(pos,true);
	}
	,setDouble: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat64(pos,v,true);
	}
	,setFloat: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setFloat32(pos,v,true);
	}
	,setUInt16: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setUint16(pos,v,true);
	}
	,setInt32: function(pos,v) {
		if(this.data == null) {
			this.data = new DataView(this.b.buffer,this.b.byteOffset,this.b.byteLength);
		}
		this.data.setInt32(pos,v,true);
	}
	,getString: function(pos,len) {
		if(pos < 0 || len < 0 || pos + len > this.length) {
			throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
		}
		var s = "";
		var b = this.b;
		var fcc = String.fromCharCode;
		var i = pos;
		var max = pos + len;
		while(i < max) {
			var c = b[i++];
			if(c < 128) {
				if(c == 0) {
					break;
				}
				s += fcc(c);
			} else if(c < 224) {
				s += fcc((c & 63) << 6 | b[i++] & 127);
			} else if(c < 240) {
				s += fcc((c & 31) << 12 | (b[i++] & 127) << 6 | b[i++] & 127);
			} else {
				var u = (c & 15) << 18 | (b[i++] & 127) << 12 | (b[i++] & 127) << 6 | b[i++] & 127;
				s += fcc((u >> 10) + 55232);
				s += fcc(u & 1023 | 56320);
			}
		}
		return s;
	}
	,toString: function() {
		return this.getString(0,this.length);
	}
	,__class__: haxe_io_Bytes
};
var openfl_utils_IDataOutput = function() { };
$hxClasses["openfl.utils.IDataOutput"] = openfl_utils_IDataOutput;
openfl_utils_IDataOutput.__name__ = ["openfl","utils","IDataOutput"];
openfl_utils_IDataOutput.prototype = {
	get_endian: null
	,set_endian: null
	,objectEncoding: null
	,writeBoolean: null
	,writeByte: null
	,writeBytes: null
	,writeDouble: null
	,writeFloat: null
	,writeInt: null
	,writeMultiByte: null
	,writeShort: null
	,writeUTF: null
	,writeUTFBytes: null
	,writeUnsignedInt: null
	,__class__: openfl_utils_IDataOutput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian"}
};
var openfl_utils_IDataInput = function() { };
$hxClasses["openfl.utils.IDataInput"] = openfl_utils_IDataInput;
openfl_utils_IDataInput.__name__ = ["openfl","utils","IDataInput"];
openfl_utils_IDataInput.prototype = {
	get_bytesAvailable: null
	,get_endian: null
	,set_endian: null
	,objectEncoding: null
	,readBoolean: null
	,readByte: null
	,readBytes: null
	,readDouble: null
	,readFloat: null
	,readInt: null
	,readMultiByte: null
	,readShort: null
	,readUnsignedByte: null
	,readUnsignedInt: null
	,readUnsignedShort: null
	,readUTF: null
	,readUTFBytes: null
	,__class__: openfl_utils_IDataInput
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
};
var openfl_utils_ByteArrayData = function(length) {
	if(length == null) {
		length = 0;
	}
	haxe_io_Bytes.call(this,new haxe_io_Bytes(new ArrayBuffer(length)).b.buffer);
	this.__length = length;
	this.__endian = 0;
	this.position = 0;
};
$hxClasses["openfl.utils.ByteArrayData"] = openfl_utils_ByteArrayData;
openfl_utils_ByteArrayData.__name__ = ["openfl","utils","ByteArrayData"];
openfl_utils_ByteArrayData.__interfaces__ = [openfl_utils_IDataOutput,openfl_utils_IDataInput];
openfl_utils_ByteArrayData.fromBytes = function(bytes) {
	var result = new openfl_utils_ByteArrayData();
	result.__fromBytes(bytes);
	return result;
};
openfl_utils_ByteArrayData.__super__ = haxe_io_Bytes;
openfl_utils_ByteArrayData.prototype = $extend(haxe_io_Bytes.prototype,{
	objectEncoding: null
	,position: null
	,__endian: null
	,__length: null
	,clear: function() {
		this.__length = 0;
		this.position = 0;
	}
	,compress: function(algorithm) {
		this.__length = this.length;
		this.position = this.__length;
	}
	,deflate: function() {
		this.compress(0);
	}
	,inflate: function() {
		this.uncompress(0);
	}
	,readBoolean: function() {
		if(this.position < this.length) {
			return this.b[this.position++] != 0;
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readByte: function() {
		var value = this.readUnsignedByte();
		if((value & 128) != 0) {
			return value - 256;
		} else {
			return value;
		}
	}
	,readBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(length == 0) {
			length = this.__length - this.position;
		}
		if(this.position + length > this.__length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		if(bytes.__length < offset + length) {
			bytes.__resize(offset + length);
		}
		bytes.blit(offset,this,this.position,length);
		this.position += length;
	}
	,readDouble: function() {
		if(this.position + 8 > this.__length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += 8;
		return this.getDouble(this.position - 8);
	}
	,readFloat: function() {
		if(this.position + 4 > this.__length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += 4;
		return this.getFloat(this.position - 4);
	}
	,readInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readMultiByte: function(length,charSet) {
		return this.readUTFBytes(length);
	}
	,readShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var value = this.__endian == 1?ch2 << 8 | ch1:ch1 << 8 | ch2;
		if((value & 32768) != 0) {
			return value - 65536;
		} else {
			return value;
		}
	}
	,readUnsignedByte: function() {
		if(this.position < this.__length) {
			return this.b[this.position++];
		} else {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
	}
	,readUnsignedInt: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		var ch3 = this.readUnsignedByte();
		var ch4 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return ch4 << 24 | ch3 << 16 | ch2 << 8 | ch1;
		} else {
			return ch1 << 24 | ch2 << 16 | ch3 << 8 | ch4;
		}
	}
	,readUnsignedShort: function() {
		var ch1 = this.readUnsignedByte();
		var ch2 = this.readUnsignedByte();
		if(this.__endian == 1) {
			return (ch2 << 8) + ch1;
		} else {
			return ch1 << 8 | ch2;
		}
	}
	,readUTF: function() {
		return this.readUTFBytes(this.readUnsignedShort());
	}
	,readUTFBytes: function(length) {
		if(this.position + length > this.__length) {
			throw new js__$Boot_HaxeError(new openfl_errors_EOFError());
		}
		this.position += length;
		return this.getString(this.position - length,length);
	}
	,uncompress: function(algorithm) {
		this.__length = this.length;
		this.position = 0;
	}
	,writeBoolean: function(value) {
		this.writeByte(value?1:0);
	}
	,writeByte: function(value) {
		this.__resize(this.position + 1);
		this.b[this.position++] = value & 255 & 255;
	}
	,writeBytes: function(bytes,offset,length) {
		if(length == null) {
			length = 0;
		}
		if(offset == null) {
			offset = 0;
		}
		if(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) == 0) {
			return;
		}
		if(length == 0) {
			length = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(bytes) - offset;
		}
		this.__resize(this.position + length);
		this.blit(this.position,bytes,offset,length);
		this.position = this.position + length;
	}
	,writeDouble: function(value) {
		this.__resize(this.position + 8);
		this.setDouble(this.position,value);
		this.position += 8;
	}
	,writeFloat: function(value) {
		this.__resize(this.position + 4);
		this.setFloat(this.position,value);
		this.position += 4;
	}
	,writeInt: function(value) {
		this.__resize(this.position + 4);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value >> 16 & 255;
			this.b[this.position++] = value >> 24 & 255;
		} else {
			this.b[this.position++] = value >> 24 & 255;
			this.b[this.position++] = value >> 16 & 255;
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeMultiByte: function(value,charSet) {
		this.writeUTFBytes(value);
	}
	,writeShort: function(value) {
		this.__resize(this.position + 2);
		if(this.__endian == 1) {
			this.b[this.position++] = value & 255;
			this.b[this.position++] = value >> 8 & 255;
		} else {
			this.b[this.position++] = value >> 8 & 255;
			this.b[this.position++] = value & 255;
		}
	}
	,writeUnsignedInt: function(value) {
		this.writeInt(value);
	}
	,writeUTF: function(value) {
		var bytes = haxe_io_Bytes.ofString(value);
		this.writeShort(bytes.length);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
	}
	,writeUTFBytes: function(value) {
		haxe_io_Bytes.ofString(value);
		this.writeBytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(haxe_io_Bytes.ofString(value)));
	}
	,__fromBytes: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
		this.__length = bytes.length;
	}
	,__resize: function(size) {
		if(size > this.length) {
			var bytes = new haxe_io_Bytes(new ArrayBuffer((size + 1) * 3 >> 1));
			bytes.blit(0,this,0,this.length);
			this.b = bytes.b;
			this.length = bytes.length;
			this.data = bytes.data;
		}
		if(this.__length < size) {
			this.__length = size;
		}
	}
	,__setData: function(bytes) {
		this.b = bytes.b;
		this.length = bytes.length;
		this.data = bytes.data;
	}
	,get_bytesAvailable: function() {
		return this.__length - this.position;
	}
	,get_endian: function() {
		return this.__endian;
	}
	,set_endian: function(value) {
		return this.__endian = value;
	}
	,__class__: openfl_utils_ByteArrayData
	,__properties__: {set_endian:"set_endian",get_endian:"get_endian",get_bytesAvailable:"get_bytesAvailable"}
});
var SpriteJson = function(length) {
	if(length == null) {
		length = 0;
	}
	openfl_utils_ByteArrayData.call(this);
	this.__fromBytes(haxe_Resource.getBytes(SpriteJson.resourceName));
};
$hxClasses["SpriteJson"] = SpriteJson;
SpriteJson.__name__ = ["SpriteJson"];
SpriteJson.__super__ = openfl_utils_ByteArrayData;
SpriteJson.prototype = $extend(openfl_utils_ByteArrayData.prototype,{
	__class__: SpriteJson
});
var Sounds = function() {
	this.soundsAvailable = true;
	this.muted = false;
	this.playSoundsByAction = false;
	this.soundAssets = new haxe_ds_StringMap();
	this.soundsToPlay = [];
	this.playingSounds = [];
	this.pausedSounds = [];
	eval("Howler.mobileAutoEnable = false;");
	eval("getOS();");
	var os = eval("userOS");
	var osVer = eval("userOSver");
	var tmp;
	if(os == "iOS") {
		var x = osVer.charAt(0);
		tmp = parseFloat(x) < 6;
	} else {
		tmp = false;
	}
	if(tmp) {
		this.soundsAvailable = false;
		this.muted = true;
	}
	if(os == "iOS") {
		this.playSoundsByAction = false;
	}
	this.loadSounds();
	window.document.addEventListener("touchend",$bind(this,this.bodyClick));
	if(LocalSaves.getVar("muted") == "true") {
		this.muted = true;
	}
	Sounds.current = this;
};
$hxClasses["Sounds"] = Sounds;
Sounds.__name__ = ["Sounds"];
Sounds.current = null;
Sounds.prototype = {
	soundAssets: null
	,ambientSound: null
	,soundsToPlay: null
	,playSoundsByAction: null
	,playingSounds: null
	,pausedSounds: null
	,lastPlayData: null
	,spriteMap: null
	,muted: null
	,soundsAvailable: null
	,bodyClick: function(event) {
		window.document.removeEventListener("touchstart",$bind(this,this.bodyClick));
		window.document.removeEventListener("touchend",$bind(this,this.bodyClick));
		window.document.removeEventListener("click",$bind(this,this.bodyClick));
		if(!this.soundsAvailable) {
			return;
		}
		if(this.playSoundsByAction && event != null) {
			if(event.type == "touchend" || event.type == "touchstart") {
				window.document.addEventListener("touchstart",$bind(this,this.sMMove));
				window.document.addEventListener("touchmove",$bind(this,this.sMMove));
				window.document.addEventListener("touchend",$bind(this,this.sMUp));
			} else {
				window.document.addEventListener("mousedown",$bind(this,this.sMMove));
				window.document.addEventListener("mousemove",$bind(this,this.sMMove));
				window.document.addEventListener("mouseup",$bind(this,this.sMUp));
			}
		}
		this.playSound("sprite","silence",false,false,false,"sound");
	}
	,loadSounds: function() {
		var sounds = [];
		sounds.push(JSON.parse(new SpriteJson().toString()));
		var s;
		var sn;
		var _g1 = 0;
		var _g = sounds.length;
		while(_g1 < _g) {
			sn = sounds[_g1++];
			s = this.getSound(sn.stream,false,false,false,sn.sprite);
			var key = sn.stream;
			var _this = this.soundAssets;
			var value = s;
			if(__map_reserved[key] != null) {
				_this.setReserved(key,value);
			} else {
				_this.h[key] = value;
			}
			s = this.getSound(sn.stream,true,true,false,sn.sprite);
			var key1 = Std.string(sn.stream) + "_loop";
			var _this1 = this.soundAssets;
			var value1 = s;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,value1);
			} else {
				_this1.h[key1] = value1;
			}
		}
	}
	,getSound: function(stream,buffer,loop,autoplay,sprite) {
		if(autoplay == null) {
			autoplay = false;
		}
		if(loop == null) {
			loop = false;
		}
		if(buffer == null) {
			buffer = false;
		}
		var spriteString = "";
		if(sprite != null) {
			var wasAnElement = false;
			spriteString = ", sprite:{";
			var spr = Reflect.fields(sprite);
			var _g = 0;
			while(_g < spr.length) {
				var i = spr[_g];
				++_g;
				spriteString += (wasAnElement?",":"") + (i == null?"null":"" + i) + ":[" + Reflect.field(sprite,i)[0] + "," + Reflect.field(sprite,i)[1] + "]";
				wasAnElement = true;
			}
			spriteString += "}";
		}
		this.spriteMap = sprite;
		return eval("new Howl({ " + " src: ['" + stream + ".ogg', '" + stream + ".m4a', '" + stream + ".mp3']" + spriteString + ", autoplay : " + (autoplay?"true":"false") + "," + " loop : " + (loop?"true":"false") + "," + " html5 : " + "false" + " }); ");
	}
	,sMMove: function() {
		var snd;
		var spr;
		var _g1 = 0;
		var _g = this.soundsToPlay.length;
		while(_g1 < _g) {
			var i = _g1++;
			snd = this.soundsToPlay[i].sound;
			spr = this.soundsToPlay[i].sprite;
			if(snd != null) {
				snd.play(spr);
			}
		}
		this.soundsToPlay = [];
	}
	,sMUp: function() {
		var snd;
		var spr;
		var _g1 = 0;
		var _g = this.soundsToPlay.length;
		while(_g1 < _g) {
			var i = _g1++;
			snd = this.soundsToPlay[i].sound;
			spr = this.soundsToPlay[i].sprite;
			if(snd != null) {
				snd.play(spr);
			}
		}
		this.soundsToPlay = [];
	}
	,playSound: function(soundName,spriteName,loop,sendToQuaryList,ignoreQuaryList,type) {
		if(type == null) {
			type = "sound";
		}
		if(ignoreQuaryList == null) {
			ignoreQuaryList = false;
		}
		if(sendToQuaryList == null) {
			sendToQuaryList = false;
		}
		if(loop == null) {
			loop = false;
		}
		if(spriteName == null) {
			spriteName = "";
		}
		if(!this.soundsAvailable || this.muted && !loop) {
			return;
		}
		var _this = this.soundAssets;
		var key = "snd/" + soundName + (loop?"_loop":"");
		var sound = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		if(!this.playSoundsByAction || ignoreQuaryList) {
			this.playingSounds.push({ sprite : spriteName, id : sound.play(spriteName), endTime : loop?-1:openfl_Lib.getTimer() + Reflect.field(this.spriteMap,spriteName)[1] + 50, sound : sound});
		} else if(sendToQuaryList) {
			this.soundsToPlay.push({ sound : sound, sprite : spriteName});
		}
		if(this.muted) {
			sound.pause();
		}
	}
	,stopSound: function(soundName,spriteName) {
		var i = 0;
		var time = openfl_Lib.getTimer();
		while(i < this.playingSounds.length) if(this.playingSounds[i].sprite == spriteName) {
			this.playingSounds[i].sound.stop(this.playingSounds[i].id);
			HxOverrides.remove(this.playingSounds,this.playingSounds[i]);
		} else if(this.playingSounds[i].endTime != -1 && time > this.playingSounds[i].endTime) {
			HxOverrides.remove(this.playingSounds,this.playingSounds[i]);
		} else {
			++i;
		}
	}
	,pauseSound: function(soundName) {
		if(!this.soundsAvailable || this.muted) {
			return;
		}
		var _this = this.soundAssets;
		var key = "snd/" + soundName;
		var sound = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
		sound.pause();
		var _this1 = this.soundAssets;
		var key1 = "snd/" + soundName + "_loop";
		sound = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
		sound.pause();
	}
	,playAmbient: function(startImed) {
		if(startImed == null) {
			startImed = false;
		}
		if(!this.soundsAvailable || this.muted) {
			return;
		}
		if(this.ambientSound == null) {
			var _this = this.soundAssets;
			this.ambientSound = __map_reserved["snd/ambient"] != null?_this.getReserved("snd/ambient"):_this.h["snd/ambient"];
			if(this.ambientSound != null) {
				this.ambientSound.loop(true);
				this.ambientSound.play("ambient");
			}
		} else {
			this.ambientSound.loop(true);
			if(!this.playSoundsByAction || startImed) {
				this.ambientSound.play("ambient");
			} else {
				this.soundsToPlay.push({ sound : this.ambientSound, sprite : "ambient"});
			}
		}
	}
	,pauseAmbient: function() {
		if(this.ambientSound == null) {
			var _this = this.soundAssets;
			this.ambientSound = __map_reserved["snd/ambient"] != null?_this.getReserved("snd/ambient"):_this.h["snd/ambient"];
		}
		if(this.ambientSound != null) {
			this.ambientSound.pause();
		}
	}
	,stopAmbient: function() {
		if(this.ambientSound == null) {
			var _this = this.soundAssets;
			this.ambientSound = __map_reserved["snd/ambient"] != null?_this.getReserved("snd/ambient"):_this.h["snd/ambient"];
		}
		if(this.ambientSound != null) {
			this.ambientSound.stop();
		}
	}
	,mute: function() {
		if(!this.soundsAvailable) {
			return;
		}
		this.muted = true;
		LocalSaves.setVar("muted","true");
		var i = 0;
		while(i < this.playingSounds.length) {
			if(this.playingSounds[i].endTime == -1) {
				this.playingSounds[i].sound.pause();
			} else {
				HxOverrides.remove(this.playingSounds,this.playingSounds[i]);
				continue;
			}
			++i;
		}
	}
	,unMute: function(startAmbient) {
		if(startAmbient == null) {
			startAmbient = true;
		}
		if(!this.soundsAvailable) {
			return;
		}
		this.muted = false;
		var i = 0;
		while(i < this.playingSounds.length) {
			if(this.playingSounds[i].endTime == -1) {
				this.playingSounds[i].sound.play();
			}
			++i;
		}
		LocalSaves.setVar("muted","false");
	}
	,__class__: Sounds
};
var Std = function() { };
$hxClasses["Std"] = Std;
Std.__name__ = ["Std"];
Std.string = function(s) {
	return js_Boot.__string_rec(s,"");
};
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
Std.random = function(x) {
	if(x <= 0) {
		return 0;
	} else {
		return Math.floor(Math.random() * x);
	}
};
var StringBuf = function() {
	this.b = "";
};
$hxClasses["StringBuf"] = StringBuf;
StringBuf.__name__ = ["StringBuf"];
StringBuf.prototype = {
	b: null
	,__class__: StringBuf
};
var StringTools = function() { };
$hxClasses["StringTools"] = StringTools;
StringTools.__name__ = ["StringTools"];
StringTools.startsWith = function(s,start) {
	if(s.length >= start.length) {
		return HxOverrides.substr(s,0,start.length) == start;
	} else {
		return false;
	}
};
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
StringTools.replace = function(s,sub,by) {
	return s.split(sub).join(by);
};
StringTools.hex = function(n,digits) {
	var s = "";
	while(true) {
		s = "0123456789ABCDEF".charAt(n & 15) + s;
		n >>>= 4;
		if(!(n > 0)) {
			break;
		}
	}
	if(digits != null) {
		while(s.length < digits) s = "0" + s;
	}
	return s;
};
var TapToStartWindow = function() {
	Menu.call(this);
	this.sWidth = this.main.config.sWidth;
	this.sHeight = this.main.config.sHeight;
	this.allClickFunction = $bind(this,this.close);
	this.filll = this.getSprite();
	this.filll.addChild(new openfl_display_Bitmap(new openfl_display_BitmapData(20,20,false,0)));
	this.filll.set_width(this.sWidth);
	this.filll.set_height(this.sHeight);
	this.tapToStartTxt = this.addTextField("Aalgrs",70 * Config.graphicScale,16777215,false,"CENTER",0,this.sHeight / 2 - 60,this.sWidth,200 * Config.graphicScale,true,2 * this.graphicScale,0.3,null,false,true,2 * this.graphicScale);
	this.tapToStartTxt.set_text(Localization.getString("tap_to_start_text"));
	this.close();
	return;
};
$hxClasses["TapToStartWindow"] = TapToStartWindow;
TapToStartWindow.__name__ = ["TapToStartWindow"];
TapToStartWindow.__super__ = Menu;
TapToStartWindow.prototype = $extend(Menu.prototype,{
	tapToStartTxt: null
	,filll: null
	,onRes: function() {
		if(this.filll != null) {
			this.filll.set_width(this.sWidth);
			this.filll.set_height(this.sHeight);
			this.filll.set_x(-this.get_x());
			this.filll.set_y(-this.get_y());
		}
		this.set_x(0);
		this.tapToStartTxt.set_width(Main.current.config.sWidth);
	}
	,upd: function(e) {
		this.set_x(0);
		this.set_y(0);
		this.tapToStartTxt.set_width(Main.current.config.sWidth);
		if(this.filll != null) {
			this.filll.set_width(this.sWidth);
			this.filll.set_height(this.sHeight);
			this.filll.set_x(-this.get_x());
			this.filll.set_y(-this.get_y());
		}
	}
	,update: function(frameTime) {
	}
	,cliick: function(e) {
		if(this.main != null) {
			this.close();
		}
	}
	,close: function() {
		this.removeEventListener("enterFrame",$bind(this,this.upd));
		if(this.main == null) {
			return;
		}
		if(this.parent != null) {
			this.parent.removeChild(this);
		}
		Menu.prototype.close.call(this);
	}
	,__class__: TapToStartWindow
});
var ThreeStateBtn = function(normal,pressed,inactive,offsets) {
	this.callBackId = -1;
	this.isPressed = false;
	this.isActive = true;
	openfl_display_Sprite.call(this);
	if(js_Boot.__instanceof(normal,openfl_display_DisplayObject)) {
		this.normal = normal;
		if(normal.parent != null) {
			normal.parent.removeChild(normal);
		}
	} else {
		this.normal = new openfl_display_Bitmap(openfl_Assets.getBitmapData(normal),1,true);
	}
	if(js_Boot.__instanceof(pressed,openfl_display_DisplayObject)) {
		this.pressed = pressed;
		if(pressed.parent != null) {
			pressed.parent.removeChild(pressed);
		}
	} else {
		this.pressed = new openfl_display_Bitmap(openfl_Assets.getBitmapData(pressed),1,true);
	}
	if(js_Boot.__instanceof(inactive,openfl_display_DisplayObject)) {
		this.inactive = inactive;
		if(inactive.parent != null) {
			inactive.parent.removeChild(inactive);
		}
	} else {
		this.inactive = new openfl_display_Bitmap(openfl_Assets.getBitmapData(inactive),1,true);
	}
	this.normal.set_x(this.normal.set_y(this.pressed.set_x(this.pressed.set_y(this.inactive.set_x(this.inactive.set_y(0))))));
	if(offsets != null) {
		if(offsets.x1 != null) {
			this.normal.set_x(offsets.x1);
		}
		if(offsets.y1 != null) {
			this.normal.set_y(offsets.y1);
		}
		if(offsets.x2 != null) {
			this.pressed.set_x(offsets.x2);
		}
		if(offsets.y2 != null) {
			this.pressed.set_y(offsets.y2);
		}
		if(offsets.x3 != null) {
			this.inactive.set_x(offsets.x3);
		}
		if(offsets.y4 != null) {
			this.inactive.set_y(offsets.y3);
		}
	}
	this.addChild(this.normal);
};
$hxClasses["ThreeStateBtn"] = ThreeStateBtn;
ThreeStateBtn.__name__ = ["ThreeStateBtn"];
ThreeStateBtn.__super__ = openfl_display_Sprite;
ThreeStateBtn.prototype = $extend(openfl_display_Sprite.prototype,{
	normal: null
	,pressed: null
	,inactive: null
	,isActive: null
	,isPressed: null
	,callBackId: null
	,set_isActive: function(value) {
		this.isActive = value;
		while(this.get_numChildren() > 0) this.removeChildAt(0);
		this.addChild(this.isPressed?this.pressed:this.normal);
		return this.isActive;
	}
	,deativate: function() {
		this.set_isActive(false);
		while(this.get_numChildren() > 0) this.removeChildAt(0);
		this.addChild(this.inactive);
	}
	,ativate: function() {
		this.set_isActive(true);
		while(this.get_numChildren() > 0) this.removeChildAt(0);
		this.addChild(this.isPressed?this.pressed:this.normal);
	}
	,press: function() {
		if(this.isPressed) {
			return;
		}
		this.isPressed = true;
		if(this.inactive.parent == null) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.addChild(this.pressed);
		}
	}
	,unPress: function() {
		if(!this.isPressed) {
			return;
		}
		this.isPressed = false;
		if(this.inactive.parent == null) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.addChild(this.normal);
		}
	}
	,destroy: function() {
		while(this.get_numChildren() > 0) this.removeChildAt(0);
		this.normal = this.pressed = this.inactive = null;
	}
	,__class__: ThreeStateBtn
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{set_isActive:"set_isActive"})
});
var ValueType = $hxClasses["ValueType"] = { __ename__ : ["ValueType"], __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
$hxClasses["Type"] = Type;
Type.__name__ = ["Type"];
Type.getSuperClass = function(c) {
	return c.__super__;
};
Type.getClassName = function(c) {
	var a = c.__name__;
	if(a == null) {
		return null;
	}
	return a.join(".");
};
Type.getEnumName = function(e) {
	var a = e.__ename__;
	return a.join(".");
};
Type.resolveClass = function(name) {
	var cl = $hxClasses[name];
	if(cl == null || !cl.__name__) {
		return null;
	}
	return cl;
};
Type.resolveEnum = function(name) {
	var e = $hxClasses[name];
	if(e == null || !e.__ename__) {
		return null;
	}
	return e;
};
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type.createEmptyInstance = function(cl) {
	function empty() {}; empty.prototype = cl.prototype;
	return new empty();
};
Type.createEnum = function(e,constr,params) {
	var f = Reflect.field(e,constr);
	if(f == null) {
		throw new js__$Boot_HaxeError("No such constructor " + constr);
	}
	if(Reflect.isFunction(f)) {
		if(params == null) {
			throw new js__$Boot_HaxeError("Constructor " + constr + " need parameters");
		}
		return f.apply(e,params);
	}
	if(params != null && params.length != 0) {
		throw new js__$Boot_HaxeError("Constructor " + constr + " does not need parameters");
	}
	return f;
};
Type.getInstanceFields = function(c) {
	var a = [];
	for(var i in c.prototype) a.push(i);
	HxOverrides.remove(a,"__class__");
	HxOverrides.remove(a,"__properties__");
	return a;
};
Type.getClassFields = function(c) {
	var a = Reflect.fields(c);
	HxOverrides.remove(a,"__name__");
	HxOverrides.remove(a,"__interfaces__");
	HxOverrides.remove(a,"__properties__");
	HxOverrides.remove(a,"__super__");
	HxOverrides.remove(a,"__meta__");
	HxOverrides.remove(a,"prototype");
	return a;
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
Type.enumEq = function(a,b) {
	if(a == b) {
		return true;
	}
	try {
		if(a[0] != b[0]) {
			return false;
		}
		var _g1 = 2;
		var _g = a.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(!Type.enumEq(a[i],b[i])) {
				return false;
			}
		}
		var e = a.__enum__;
		if(e != b.__enum__ || e == null) {
			return false;
		}
	} catch( e1 ) {
		haxe_CallStack.lastException = e1;
		return false;
	}
	return true;
};
var _$UInt_UInt_$Impl_$ = {};
$hxClasses["_UInt.UInt_Impl_"] = _$UInt_UInt_$Impl_$;
_$UInt_UInt_$Impl_$.__name__ = ["_UInt","UInt_Impl_"];
_$UInt_UInt_$Impl_$.gt = function(a,b) {
	var aNeg = a < 0;
	if(aNeg != b < 0) {
		return aNeg;
	} else {
		return a > b;
	}
};
_$UInt_UInt_$Impl_$.toFloat = function(this1) {
	if(this1 < 0) {
		return 4294967296.0 + this1;
	} else {
		return this1 + 0.0;
	}
};
var Xml = function(nodeType) {
	this.nodeType = nodeType;
	this.children = [];
	this.attributeMap = new haxe_ds_StringMap();
};
$hxClasses["Xml"] = Xml;
Xml.__name__ = ["Xml"];
Xml.parse = function(str) {
	return haxe_xml_Parser.parse(str);
};
Xml.createElement = function(name) {
	var xml = new Xml(Xml.Element);
	if(xml.nodeType != Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + xml.nodeType);
	}
	xml.nodeName = name;
	return xml;
};
Xml.createPCData = function(data) {
	var xml = new Xml(Xml.PCData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createCData = function(data) {
	var xml = new Xml(Xml.CData);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createComment = function(data) {
	var xml = new Xml(Xml.Comment);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocType = function(data) {
	var xml = new Xml(Xml.DocType);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createProcessingInstruction = function(data) {
	var xml = new Xml(Xml.ProcessingInstruction);
	if(xml.nodeType == Xml.Document || xml.nodeType == Xml.Element) {
		throw new js__$Boot_HaxeError("Bad node type, unexpected " + xml.nodeType);
	}
	xml.nodeValue = data;
	return xml;
};
Xml.createDocument = function() {
	return new Xml(Xml.Document);
};
Xml.prototype = {
	nodeType: null
	,nodeName: null
	,nodeValue: null
	,parent: null
	,children: null
	,attributeMap: null
	,get: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		return __map_reserved[att] != null?_this.getReserved(att):_this.h[att];
	}
	,set: function(att,value) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			_this.setReserved(att,value);
		} else {
			_this.h[att] = value;
		}
	}
	,exists: function(att) {
		if(this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + this.nodeType);
		}
		var _this = this.attributeMap;
		if(__map_reserved[att] != null) {
			return _this.existsReserved(att);
		} else {
			return _this.h.hasOwnProperty(att);
		}
	}
	,elementsNamed: function(name) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = [];
		var _g1 = 0;
		var _g2 = this.children;
		while(_g1 < _g2.length) {
			var child = _g2[_g1];
			++_g1;
			var tmp;
			if(child.nodeType == Xml.Element) {
				if(child.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + child.nodeType);
				}
				tmp = child.nodeName == name;
			} else {
				tmp = false;
			}
			if(tmp) {
				_g.push(child);
			}
		}
		return HxOverrides.iter(_g);
	}
	,firstElement: function() {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		var _g = 0;
		var _g1 = this.children;
		while(_g < _g1.length) {
			var child = _g1[_g];
			++_g;
			if(child.nodeType == Xml.Element) {
				return child;
			}
		}
		return null;
	}
	,addChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(x.parent != null) {
			x.parent.removeChild(x);
		}
		this.children.push(x);
		x.parent = this;
	}
	,removeChild: function(x) {
		if(this.nodeType != Xml.Document && this.nodeType != Xml.Element) {
			throw new js__$Boot_HaxeError("Bad node type, expected Element or Document but found " + this.nodeType);
		}
		if(HxOverrides.remove(this.children,x)) {
			x.parent = null;
			return true;
		}
		return false;
	}
	,__class__: Xml
};
var backgammon_ai_Agent = function(param1,param2) {
	this._game = param1;
	this._logic = param2;
	this._moveRepList = new backgammon_ai_rep_moves_MoveRepList();
	this._moveRepGenerator = new backgammon_ai_rep_moves_MoveRepGenerator(param1);
	return;
};
$hxClasses["backgammon.ai.Agent"] = backgammon_ai_Agent;
backgammon_ai_Agent.__name__ = ["backgammon","ai","Agent"];
backgammon_ai_Agent.prototype = {
	_game: null
	,_moveRepList: null
	,_moveRepGenerator: null
	,_logic: null
	,shouldProposeDouble: function(param1) {
		if(param1 == backgammon_model_enum1_Difficulty.Easy) {
			return false;
		}
		if(this._game.turn == 1) {
			this._game.turn = 2;
		} else {
			this._game.turn = 1;
		}
		var _loc_2 = backgammon_ai_rep_board_BoardRep.getInstance(this._game);
		_loc_2.getPiecesAt(1);
		var _loc_3 = this._logic.shouldProposeDouble(_loc_2);
		backgammon_ai_rep_board_BoardRep.disposeInstance(_loc_2);
		if(this._game.turn == 1) {
			this._game.turn = 2;
		} else {
			this._game.turn = 1;
		}
		if(_loc_3 != null) {
			if(param1 == backgammon_model_enum1_Difficulty.Medium) {
				if(Math.random() < 0.5) {
					_loc_3 = false;
				}
			} else if(param1 == backgammon_model_enum1_Difficulty.Hard) {
				if(Math.random() < 0.25) {
					_loc_3 = false;
				}
			}
		}
		return _loc_3;
	}
	,shouldAcceptDouble: function() {
		var _loc_1 = backgammon_ai_rep_board_BoardRep.getInstance(this._game);
		_loc_1.getPiecesAt(1);
		var _loc_2 = this._logic.shouldAcceptDouble(_loc_1);
		backgammon_ai_rep_board_BoardRep.disposeInstance(_loc_1);
		return _loc_2;
	}
	,viewBoard: function() {
		var _loc_1 = backgammon_ai_rep_board_BoardRep.getInstance(this._game);
		this._moveRepGenerator.generate(this._moveRepList);
		this._logic.gradeBoards(this._moveRepList,_loc_1);
		this._moveRepList.sort();
		backgammon_ai_rep_board_BoardRep.disposeInstance(_loc_1);
		return;
	}
	,stratCheck: function(param1) {
		var _loc_5 = null;
		var _loc_6 = 0;
		var _loc_2 = new backgammon_ai_StratRating(this._game,null);
		var _loc_3 = [];
		var _loc_4 = 0;
		while(_loc_4 < param1.count) {
			_loc_5 = new backgammon_ai_StratRating(this._game,param1.getAt(_loc_4));
			_loc_5.rate(_loc_2);
			_loc_3.push(_loc_5);
			++_loc_4;
		}
		_loc_3.sort(backgammon_ai_StratRating.compare);
		backgammon_ai_StratRating.allowPipCompare = false;
		if(backgammon_ai_StratRating.compare(_loc_3[0],_loc_2) == 0) {
			_loc_6 = 1;
			while(_loc_6 < _loc_3.length) {
				if(backgammon_ai_StratRating.compare(_loc_3[0],_loc_3[_loc_6]) < 0) {
					this._moveRepList.remove(_loc_3[_loc_6].moveRep);
				}
				++_loc_6;
			}
		}
		backgammon_ai_StratRating.allowPipCompare = true;
		if(_loc_3[0].cat < 10) {
			return _loc_3[0].moveRep;
		}
		return null;
	}
	,pickNNMove: function(param1) {
		var _loc_3 = NaN;
		var _loc_5 = 0;
		var _loc_6 = 0;
		var _loc_2 = null;
		if(param1 == backgammon_model_enum1_Difficulty.Expert) {
			_loc_3 = this._moveRepList.getAt(0).score;
			_loc_5 = 1;
			while(_loc_5 < this._moveRepList.count) {
				if(this._moveRepList.getAt(_loc_5).score != _loc_3) {
					break;
				}
				++_loc_5;
			}
			_loc_2 = this._moveRepList.getAt(0);
		} else if(param1 == backgammon_model_enum1_Difficulty.Easy) {
			_loc_2 = this._moveRepList.getAt(this._moveRepList.count - 1);
		} else if(param1 == backgammon_model_enum1_Difficulty.Medium) {
			if(this._moveRepList.count == 1) {
				_loc_6 = 0;
			} else if(this._moveRepList.count == 2) {
				_loc_6 = 0;
			} else if(this._moveRepList.count == 3) {
				_loc_6 = 0;
			} else {
				_loc_6 = Math.ceil(this._moveRepList.count / 2);
			}
			_loc_2 = this._moveRepList.getAt(_loc_6);
		} else {
			if(this._moveRepList.count == 1) {
				_loc_6 = 0;
			} else if(this._moveRepList.count == 2) {
				_loc_6 = 0;
			} else if(this._moveRepList.count == 3) {
				_loc_6 = 0;
			} else if(this._moveRepList.count == 4) {
				_loc_6 = 0;
			} else if(this._moveRepList.count == 5) {
				_loc_6 = 0;
			} else if(this._moveRepList.count == 6) {
				_loc_6 = 1;
			} else {
				_loc_6 = 2;
			}
			_loc_2 = this._moveRepList.getAt(_loc_6);
		}
		return _loc_2;
	}
	,getMoveChain: function(param1) {
		var _loc_5 = NaN;
		var _loc_7 = 0;
		var _loc_8 = 0;
		var _loc_2 = null;
		if(backgammon_ai_Agent.STRATEGY_ENABLED && js_Boot.__instanceof(this._logic,backgammon_ai_logic_RandomAgentLogic) == false) {
			_loc_2 = this.stratCheck(this._moveRepList);
			haxe_Log.trace("Checked strat (" + this._moveRepList.count + "): " + Std.string(_loc_2),{ fileName : "Agent.hx", lineNumber : 227, className : "backgammon.ai.Agent", methodName : "getMoveChain"});
		}
		var _loc_3 = _loc_2;
		if(_loc_2 != null) {
			_loc_3 = _loc_2;
		} else if(param1 == backgammon_model_enum1_Difficulty.Expert) {
			_loc_5 = this._moveRepList.getAt(0).score;
			_loc_7 = 1;
			while(_loc_7 < this._moveRepList.count) {
				if(this._moveRepList.getAt(_loc_7).score != _loc_5) {
					break;
				}
				++_loc_7;
			}
			_loc_3 = this._moveRepList.getAt(0);
		} else if(param1 == backgammon_model_enum1_Difficulty.Easy) {
			_loc_3 = this._moveRepList.getAt(this._moveRepList.count - 1);
		} else if(param1 == backgammon_model_enum1_Difficulty.Medium) {
			if(this._moveRepList.count == 1) {
				_loc_8 = 0;
			} else if(this._moveRepList.count == 2) {
				_loc_8 = 0;
			} else if(this._moveRepList.count == 3) {
				_loc_8 = 0;
			} else {
				_loc_8 = Math.ceil(this._moveRepList.count / 2);
			}
			_loc_3 = this._moveRepList.getAt(_loc_8);
		} else {
			if(this._moveRepList.count == 1) {
				_loc_8 = 0;
			} else if(this._moveRepList.count == 2) {
				_loc_8 = 0;
			} else if(this._moveRepList.count == 3) {
				_loc_8 = 0;
			} else if(this._moveRepList.count == 4) {
				_loc_8 = 0;
			} else if(this._moveRepList.count == 5) {
				_loc_8 = 0;
			} else if(this._moveRepList.count == 6) {
				_loc_8 = 1;
			} else {
				_loc_8 = 2;
			}
			_loc_3 = this._moveRepList.getAt(_loc_8);
		}
		return _loc_3.move.firstMove;
	}
	,cleanUp: function() {
		this._moveRepList.clear();
		this._moveRepGenerator.reset();
		return;
	}
	,commitMove: function(param1) {
		var _loc_2 = null;
		var _loc_3 = null;
		var _loc_4 = null;
		var _loc_5 = NaN;
		var _loc_6 = 0;
		var _loc_7 = 0;
		var _loc_8 = 0;
		if(this._moveRepList.count > 0) {
			_loc_2 = null;
			if(backgammon_ai_Agent.STRATEGY_ENABLED && js_Boot.__instanceof(this._logic,backgammon_ai_logic_RandomAgentLogic) == false) {
				_loc_2 = this.stratCheck(this._moveRepList);
				haxe_Log.trace("Checked start (" + this._moveRepList.count + "): " + Std.string(_loc_2),{ fileName : "Agent.hx", lineNumber : 336, className : "backgammon.ai.Agent", methodName : "commitMove"});
			}
			_loc_3 = _loc_2;
			if(_loc_2 != null) {
				_loc_3 = _loc_2;
			} else if(param1 == backgammon_model_enum1_Difficulty.Expert) {
				_loc_5 = this._moveRepList.getAt(0).score;
				_loc_6 = 1;
				_loc_7 = 1;
				while(_loc_7 < this._moveRepList.count) {
					if(this._moveRepList.getAt(_loc_7).score == _loc_5) {
						++_loc_6;
					} else {
						break;
					}
					++_loc_7;
				}
				_loc_3 = this._moveRepList.getAt(_loc_6 * Math.random() | 0);
			} else if(param1 == backgammon_model_enum1_Difficulty.Easy) {
				_loc_3 = this._moveRepList.getAt(this._moveRepList.count - 1);
			} else if(param1 == backgammon_model_enum1_Difficulty.Medium) {
				if(this._moveRepList.count == 1) {
					_loc_8 = 0;
				} else if(this._moveRepList.count == 2) {
					_loc_8 = 0;
				} else if(this._moveRepList.count == 3) {
					_loc_8 = 0;
				} else {
					_loc_8 = Math.ceil(this._moveRepList.count / 2);
				}
				_loc_3 = this._moveRepList.getAt(_loc_8);
			} else {
				if(this._moveRepList.count == 1) {
					_loc_8 = 0;
				} else if(this._moveRepList.count == 2) {
					_loc_8 = 0;
				} else if(this._moveRepList.count == 3) {
					_loc_8 = 0;
				} else if(this._moveRepList.count == 4) {
					_loc_8 = 0;
				} else if(this._moveRepList.count == 5) {
					_loc_8 = 0;
				} else if(this._moveRepList.count == 6) {
					_loc_8 = 1;
				} else {
					_loc_8 = 2;
				}
				_loc_3 = this._moveRepList.getAt(_loc_8);
			}
			_loc_4 = _loc_3.move.firstMove;
			while(_loc_4 != null) {
				this._game.play(_loc_4.modelMove);
				_loc_4 = _loc_4.nextMove;
			}
			this._moveRepList.clear();
			this._moveRepGenerator.reset();
		} else {
			this._moveRepList.clear();
			this._moveRepGenerator.reset();
		}
		return;
	}
	,__class__: backgammon_ai_Agent
};
var backgammon_ai_StratRating = function(param1,param2) {
	this._mc = 0;
	this.cat = 10;
	this._game = param1;
	this.moveRep = param2;
	if(param2 != null) {
		this.simMoveChain(param2);
	}
	this.vc = this.getVC();
	this.obc = this.getOBC();
	this.pip = this.getPIP();
	this.opip = this.getOPIP();
	this.ohso = this.getOHSO();
	this.iqp = this.getIQP();
	if(param2 != null) {
		this.undoSimMoveChain();
	}
	return;
};
$hxClasses["backgammon.ai.StratRating"] = backgammon_ai_StratRating;
backgammon_ai_StratRating.__name__ = ["backgammon","ai","StratRating"];
backgammon_ai_StratRating.compare = function(param1,param2) {
	if(param1.cat < param2.cat) {
		return -1;
	}
	if(param1.cat > param2.cat) {
		return 1;
	}
	if(param1.cat == 1) {
		if(param1.obc > param2.obc) {
			return -1;
		}
		if(param1.obc < param2.obc) {
			return 1;
		}
		if(param1.vc < param2.vc) {
			return -1;
		}
		if(param1.vc > param2.vc) {
			return 1;
		}
		return backgammon_ai_StratRating.pipCompare(param1,param2);
	} else if(param1.cat == 2) {
		if(param1.vc < param2.vc) {
			return -1;
		}
		if(param1.vc > param2.vc) {
			return 1;
		}
		return backgammon_ai_StratRating.pipCompare(param1,param2);
	}
	if(param1.vc < param2.vc) {
		return -1;
	}
	if(param1.vc > param2.vc) {
		return 1;
	}
	if(backgammon_ai_StratRating.allowPipCompare) {
		if(param1.obc > param2.obc) {
			return -1;
		}
		if(param1.obc < param2.obc) {
			return 1;
		}
		return backgammon_ai_StratRating.pipCompare(param1,param2);
	}
	return 0;
};
backgammon_ai_StratRating.pipCompare = function(param1,param2) {
	if(param1.opip > param2.opip) {
		return -1;
	}
	if(param1.opip < param2.opip) {
		return 1;
	}
	if(param1.pip < param2.pip) {
		return -1;
	}
	if(param1.pip > param2.pip) {
		return 1;
	}
	return 0;
};
backgammon_ai_StratRating.prototype = {
	_game: null
	,moveRep: null
	,cat: null
	,vc: null
	,obc: null
	,pip: null
	,opip: null
	,ohso: null
	,iqp: null
	,_mc: null
	,rate: function(param1) {
		if(this.obc > param1.obc && this.vc <= param1.vc) {
			this.cat = 1;
		} else if(this.vc < param1.vc) {
			this.cat = 2;
		}
		return;
	}
	,simMoveChain: function(param1) {
		var _loc_2 = param1.move.firstMove;
		while(_loc_2 != null) {
			this._game.play(_loc_2.modelMove);
			_loc_2 = _loc_2.nextMove;
			var _loc_3 = this;
			var _loc_4 = this._mc + 1;
			_loc_3._mc = _loc_4;
		}
		return;
	}
	,undoSimMoveChain: function() {
		while(this._mc > 0) {
			this._game.undo();
			var _loc_1 = this;
			var _loc_2 = this._mc - 1;
			_loc_1._mc = _loc_2;
		}
		return;
	}
	,getIQP: function() {
		var _loc_5 = null;
		var _loc_1 = new ListExt();
		if(this._game.get_currentPlayer().index == 1) {
			_loc_1.addRange([0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17]);
		} else if(this._game.get_currentPlayer().index == 2) {
			_loc_1.addRange([6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23]);
		}
		var _loc_2 = this._game.get_currentPlayer().color;
		var _loc_3 = 0;
		var _g_val;
		var _g_head = _loc_1.h;
		_g_val = null;
		while(_g_head != null) {
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			var _loc_4 = _g_val;
			_loc_5 = this._game.board.places[_loc_4];
			var _g_val1;
			var _g_head1 = _loc_5.stones.h;
			_g_val1 = null;
			while(_g_head1 != null) {
				_g_val1 = _g_head1[0];
				_g_head1 = _g_head1[1];
				if(_g_val1.color == _loc_2) {
					if(this._game.get_currentPlayer().index == 1) {
						_loc_3 += _loc_4;
						continue;
					}
					_loc_3 += 24 - _loc_4;
				}
			}
		}
		return _loc_3;
	}
	,getOHSO: function() {
		var _loc_4 = null;
		var _loc_1 = new ListExt();
		if(this._game.get_currentPlayer().index == 2) {
			_loc_1.addRange([18,19,20,21,22,23]);
		} else {
			_loc_1.addRange([5,4,3,2,1,0]);
		}
		var _loc_2 = 0;
		var _g_val;
		var _g_head = _loc_1.h;
		_g_val = null;
		while(_g_head != null) {
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			_loc_4 = this._game.board.places[_g_val];
			if(_loc_4.stones.get_count() == 0) {
				++_loc_2;
			}
		}
		return _loc_2;
	}
	,getVC: function() {
		var _loc_1 = 0;
		var _loc_2 = this._game.get_currentPlayer();
		var _g = 0;
		var _g1 = this._game.board.places;
		while(_g < _g1.length) {
			var _loc_3 = _g1[_g];
			++_g;
			if(_loc_3.stones.get_count() == 1 && (js_Boot.__cast(_loc_3.stones.get_last() , backgammon_model_Stone)).color == _loc_2.color) {
				if(this.isThreat(_loc_3)) {
					++_loc_1;
				}
			}
		}
		return _loc_1;
	}
	,isThreat: function(param1) {
		var _loc_4 = 0;
		var _loc_5 = null;
		var _loc_2 = false;
		var _loc_3 = backgammon_model_enum1_Color.getOpposite(this._game.get_currentPlayer().color);
		if(this._game.get_currentPlayer().index == 1) {
			_loc_4 = param1.index + 1;
			while(_loc_4 < this._game.board.places.length && _loc_4 < param1.index + 1 + 6) {
				_loc_5 = this._game.board.places[_loc_4];
				if(_loc_5.stones.get_count() > 0 && (js_Boot.__cast(_loc_5.stones.get_last() , backgammon_model_Stone)).color == _loc_3) {
					_loc_2 = true;
					break;
				}
				++_loc_4;
			}
		} else {
			_loc_4 = param1.index - 1;
			while(_loc_4 >= 0 && _loc_4 > param1.index - 1 - 10) {
				_loc_5 = this._game.board.places[_loc_4];
				if(_loc_5.stones.get_count() > 0 && (js_Boot.__cast(_loc_5.stones.get_last() , backgammon_model_Stone)).color == _loc_3) {
					_loc_2 = true;
					break;
				}
				--_loc_4;
			}
		}
		return _loc_2;
	}
	,getPIP: function() {
		return this._game.calculatePip(this._game.board,this._game.get_currentPlayer());
	}
	,getOPIP: function() {
		var _loc_1 = null;
		if(this._game.get_currentPlayer() == this._game.player1) {
			_loc_1 = this._game.player2;
		} else {
			_loc_1 = this._game.player1;
		}
		return this._game.calculatePip(this._game.board,_loc_1);
	}
	,getOBC: function() {
		var _loc_1 = 0;
		var _loc_2 = backgammon_model_enum1_Color.getOpposite(this._game.get_currentPlayer().color);
		var _g_val;
		var _g_head = this._game.board.bar.stones.h;
		_g_val = null;
		while(_g_head != null) {
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			if(_g_val.color == _loc_2) {
				++_loc_1;
			}
		}
		return _loc_1;
	}
	,__class__: backgammon_ai_StratRating
};
var backgammon_ai_AgentLogic = function() {
	return;
};
$hxClasses["backgammon.ai.AgentLogic"] = backgammon_ai_AgentLogic;
backgammon_ai_AgentLogic.__name__ = ["backgammon","ai","AgentLogic"];
backgammon_ai_AgentLogic.prototype = {
	gradeBoards: function(param1,param2) {
		return;
	}
	,shouldProposeDouble: function(param1) {
		return false;
	}
	,shouldAcceptDouble: function(param1) {
		return true;
	}
	,__class__: backgammon_ai_AgentLogic
};
var backgammon_ai_PubEvalAgentLogic = function() {
	backgammon_ai_AgentLogic.call(this);
	this.x = [];
	return;
};
$hxClasses["backgammon.ai.PubEvalAgentLogic"] = backgammon_ai_PubEvalAgentLogic;
backgammon_ai_PubEvalAgentLogic.__name__ = ["backgammon","ai","PubEvalAgentLogic"];
backgammon_ai_PubEvalAgentLogic.__super__ = backgammon_ai_AgentLogic;
backgammon_ai_PubEvalAgentLogic.prototype = $extend(backgammon_ai_AgentLogic.prototype,{
	x: null
	,shouldProposeDouble: function(param1) {
		var _loc_2 = this.sigmoid(this.quickGrade(param1));
		haxe_Log.trace("Double consideration: " + _loc_2,{ fileName : "PubEvalAgentLogic.hx", lineNumber : 24, className : "backgammon.ai.PubEvalAgentLogic", methodName : "shouldProposeDouble"});
		if(_loc_2 > 0.88) {
			return true;
		}
		return false;
	}
	,shouldAcceptDouble: function(param1) {
		var _loc_2 = this.sigmoid(this.quickGrade(param1));
		haxe_Log.trace("Double accept consideration: " + _loc_2,{ fileName : "PubEvalAgentLogic.hx", lineNumber : 35, className : "backgammon.ai.PubEvalAgentLogic", methodName : "shouldAcceptDouble"});
		if(_loc_2 <= 0.95) {
			return true;
		}
		return false;
	}
	,sigmoid: function(param1) {
		return 1 / (1 + Math.exp(-param1));
	}
	,gradeBoards: function(param1,param2) {
		var _loc_6 = null;
		var _loc_7 = null;
		var _loc_8 = 0;
		var _loc_9 = NaN;
		var _loc_3 = 1;
		var _loc_4 = false;
		var _loc_5 = 0;
		while(_loc_5 < 26 && _loc_3 == 1) {
			if(!_loc_4 && param2.getPiecesAt(_loc_5) < 0) {
				_loc_4 = true;
			}
			if(_loc_4 && param2.getPiecesAt(_loc_5) > 0) {
				_loc_3 = 0;
			}
			++_loc_5;
		}
		if(_loc_3 == 1) {
			haxe_Log.trace("using race weights",{ fileName : "PubEvalAgentLogic.hx", lineNumber : 72, className : "backgammon.ai.PubEvalAgentLogic", methodName : "gradeBoards"});
		}
		_loc_5 = 0;
		while(_loc_5 < param1.count) {
			_loc_6 = [];
			_loc_7 = param1.getAt(_loc_5);
			_loc_8 = 0;
			while(_loc_8 < 26) {
				_loc_6[_loc_8] = _loc_7.getPiecesAt(_loc_8);
				++_loc_8;
			}
			_loc_6[26] = _loc_7.bearOffCountCurrent();
			_loc_6[27] = _loc_7.bearOffCountOpponent();
			_loc_9 = this.pubevalGrade(_loc_3,_loc_6);
			param1.getAt(_loc_5).score = _loc_9;
			++_loc_5;
		}
		return;
	}
	,quickGrade: function(param1) {
		var _loc_2 = 1;
		var _loc_3 = false;
		var _loc_4 = 0;
		while(_loc_4 < 26 && _loc_2 == 1) {
			if(!_loc_3 && param1.getPiecesAt(_loc_4) < 0) {
				_loc_3 = true;
			}
			if(_loc_3 && param1.getPiecesAt(_loc_4) > 0) {
				_loc_2 = 0;
			}
			++_loc_4;
		}
		if(_loc_2 == 1) {
			haxe_Log.trace("using race weights",{ fileName : "PubEvalAgentLogic.hx", lineNumber : 116, className : "backgammon.ai.PubEvalAgentLogic", methodName : "quickGrade"});
		}
		var _loc_5 = [];
		var _loc_6 = 0;
		while(_loc_6 < 26) {
			_loc_5[_loc_6] = param1.getPiecesAt(_loc_6);
			++_loc_6;
		}
		_loc_5[26] = param1.bearOffCountCurrent();
		_loc_5[27] = param1.bearOffCountOpponent();
		return this.pubevalGrade(_loc_2,_loc_5);
	}
	,setx: function(param1) {
		var _loc_3 = 0;
		var _loc_4 = NaN;
		var _loc_2 = 0;
		while(_loc_2 < 122) {
			this.x[_loc_2] = 0;
			++_loc_2;
		}
		var _loc_5 = 1;
		while(_loc_5 <= 24) {
			_loc_3 = _loc_5 - 1;
			_loc_4 = param1[25 - _loc_5];
			if(_loc_4 != 0) {
				if(_loc_4 == -1) {
					this.x[5 * _loc_3] = 1;
				}
				if(_loc_4 == 1) {
					this.x[5 * _loc_3 + 1] = 1;
				}
				if(_loc_4 >= 2) {
					this.x[5 * _loc_3 + 2] = 1;
				}
				if(_loc_4 == 3) {
					this.x[5 * _loc_3 + 3] = 1;
				}
				if(_loc_4 >= 4) {
					this.x[5 * _loc_3 + 4] = (_loc_4 - 3) / 2;
				}
			}
			++_loc_5;
		}
		this.x[120] = -param1[0] / 2;
		this.x[121] = param1[26] / 15;
		return;
	}
	,pubevalGrade: function(param1,param2) {
		var _loc_4 = 0;
		if(param2[26] == 15) {
			return 99999999;
		}
		this.setx(param2);
		var _loc_3 = 0;
		if(param1 == 1) {
			_loc_4 = 0;
			while(_loc_4 < 122) {
				_loc_3 += backgammon_ai_PubEvalAgentLogic.wr[_loc_4] * this.x[_loc_4];
				++_loc_4;
			}
		} else {
			_loc_4 = 0;
			while(_loc_4 < 122) {
				_loc_3 += backgammon_ai_PubEvalAgentLogic.wc[_loc_4] * this.x[_loc_4];
				++_loc_4;
			}
		}
		return _loc_3;
	}
	,__class__: backgammon_ai_PubEvalAgentLogic
});
var backgammon_ai_UndoStack = function() {
	this.moveStack = [];
	this.removedFromStack = [];
	this.addedToStack = [];
	this.blotStack = [];
	return;
};
$hxClasses["backgammon.ai.UndoStack"] = backgammon_ai_UndoStack;
backgammon_ai_UndoStack.__name__ = ["backgammon","ai","UndoStack"];
backgammon_ai_UndoStack.prototype = {
	move: null
	,removedFrom: null
	,addedTo: null
	,blot: null
	,moveStack: null
	,removedFromStack: null
	,addedToStack: null
	,blotStack: null
	,push: function(param1,param2,param3,param4) {
		this.move = param1;
		this.removedFrom = param2;
		this.addedTo = param3;
		this.blot = param4;
		this.moveStack.push(param1);
		this.removedFromStack.push(param2);
		this.addedToStack.push(param3);
		this.blotStack.push(param4);
		return;
	}
	,pop: function() {
		this.moveStack.pop();
		this.removedFromStack.pop();
		this.addedToStack.pop();
		this.blotStack.pop();
		if(this.moveStack.length > 0) {
			this.move = this.moveStack[this.moveStack.length - 1];
			this.removedFrom = this.removedFromStack[this.removedFromStack.length - 1];
			this.addedTo = this.addedToStack[this.addedToStack.length - 1];
			this.blot = this.blotStack[this.blotStack.length - 1];
		} else {
			this.move = null;
			this.addedTo = null;
			this.removedFrom = null;
			this.blot = null;
		}
		return;
	}
	,__class__: backgammon_ai_UndoStack
};
var backgammon_ai_bg_BgMove = function() {
	this._isDisposed = false;
	var _loc_2 = backgammon_ai_bg_BgMove.instanceCount + 1;
	backgammon_ai_bg_BgMove.instanceCount = _loc_2;
	return;
};
$hxClasses["backgammon.ai.bg.BgMove"] = backgammon_ai_bg_BgMove;
backgammon_ai_bg_BgMove.__name__ = ["backgammon","ai","bg","BgMove"];
backgammon_ai_bg_BgMove.getInstance = function(param1,param2) {
	var _loc_3 = null;
	if(backgammon_ai_bg_BgMove._dropped.length > 0) {
		_loc_3 = backgammon_ai_bg_BgMove._dropped.pop();
		if(!_loc_3._isDisposed) {
			_loc_3.dispose();
		}
	} else if(backgammon_ai_bg_BgMove._instanceHead == backgammon_ai_bg_BgMove._instancePool.length) {
		_loc_3 = new backgammon_ai_bg_BgMove();
		backgammon_ai_bg_BgMove._instancePool.push(_loc_3);
		var _loc_5 = backgammon_ai_bg_BgMove._instanceHead + 1;
		backgammon_ai_bg_BgMove._instanceHead = _loc_5;
	} else {
		_loc_3 = backgammon_ai_bg_BgMove._instancePool[backgammon_ai_bg_BgMove._instanceHead];
		if(!_loc_3._isDisposed) {
			_loc_3.dispose();
		}
		var _loc_51 = backgammon_ai_bg_BgMove._instanceHead + 1;
		backgammon_ai_bg_BgMove._instanceHead = _loc_51;
	}
	_loc_3._isDisposed = false;
	_loc_3.initialize(param1,param2);
	return _loc_3;
};
backgammon_ai_bg_BgMove.disposeInstance = function(param1,param2) {
	backgammon_ai_bg_BgMove._dropped.push(param1);
	if(param2) {
		if(param1.nextMove != null) {
			backgammon_ai_bg_BgMove.disposeInstance(param1.nextMove,true);
		}
	}
	return;
};
backgammon_ai_bg_BgMove.gc = function() {
	backgammon_ai_bg_BgMove._instanceHead = 0;
	backgammon_ai_bg_BgMove._dropped = [];
	return;
};
backgammon_ai_bg_BgMove.cloneFromFirst = function(param1) {
	if(param1 != param1.firstMove) {
		return null;
	}
	var _loc_2 = backgammon_ai_bg_BgMove.getInstance(null,null);
	_loc_2.modelMove = param1.modelMove;
	_loc_2.firstMove = _loc_2;
	_loc_2.nextMove = backgammon_ai_bg_BgMove.cloneSubMove(_loc_2,param1.nextMove);
	return _loc_2;
};
backgammon_ai_bg_BgMove.cloneSubMove = function(param1,param2) {
	if(param2 == null) {
		return null;
	}
	var _loc_3 = backgammon_ai_bg_BgMove.getInstance(null,null);
	_loc_3.modelMove = param2.modelMove;
	_loc_3.firstMove = param1.firstMove;
	_loc_3.nextMove = backgammon_ai_bg_BgMove.cloneSubMove(_loc_3,param2.nextMove);
	backgammon_ai_bg_BgMove._cloning = false;
	return _loc_3;
};
backgammon_ai_bg_BgMove.prototype = {
	_isDisposed: null
	,modelMove: null
	,firstMove: null
	,nextMove: null
	,initialize: function(param1,param2) {
		this.modelMove = param1;
		if(param2 == null) {
			this.firstMove = this;
		} else {
			param2.nextMove = this;
			this.firstMove = param2.firstMove;
		}
		return this;
	}
	,dispose: function() {
		this._isDisposed = true;
		this.modelMove = null;
		this.firstMove = null;
		this.nextMove = null;
		return;
	}
	,__class__: backgammon_ai_bg_BgMove
};
var backgammon_ai_bg_BgMoveGenerator = function(param1) {
	this._restrictedTo = null;
	this._possibleModelMoves = [];
	var _loc_3 = backgammon_ai_bg_BgMoveGenerator.instanceCount + 1;
	backgammon_ai_bg_BgMoveGenerator.instanceCount = _loc_3;
	this._game = param1;
	return;
};
$hxClasses["backgammon.ai.bg.BgMoveGenerator"] = backgammon_ai_bg_BgMoveGenerator;
backgammon_ai_bg_BgMoveGenerator.__name__ = ["backgammon","ai","bg","BgMoveGenerator"];
backgammon_ai_bg_BgMoveGenerator.prototype = {
	_game: null
	,_possibleModelMoves: null
	,_currentPlayer: null
	,_restrictedTo: null
	,generate: function(param1,param2,param3) {
		if(param3 == null) {
			param3 = 1;
		}
		this._currentPlayer = this._game.get_currentPlayer();
		this._restrictedTo = param2;
		param1.clear();
		this.generateIteration(param1,null,param3);
		return;
	}
	,generateIteration: function(param1,param2,param3) {
		var _loc_5 = 0;
		var _loc_6 = null;
		var _loc_4 = this.findAllSingleMoves();
		if(_loc_4.count > 0) {
			_loc_5 = 0;
			while(_loc_5 < _loc_4.count) {
				_loc_6 = backgammon_ai_bg_BgMove.getInstance(_loc_4.getAt(_loc_5).modelMove,param2);
				this._game.play(_loc_6.modelMove);
				if(param3 == 2 && this._currentPlayer.die1.value == this._currentPlayer.die2.value) {
					this._currentPlayer.die1.isUsed = false;
					this._currentPlayer.die2.isUsed = false;
				}
				this.generateIteration(param1,_loc_6,param3 + 1);
				this._game.undo();
				++_loc_5;
			}
		} else {
			param1.pipDiff = this._game.calculatePip(this._game.board,this._game.player1) - this._game.calculatePip(this._game.board,this._game.player2);
			if(param2 != null) {
				param1.add(backgammon_ai_bg_BgMove.cloneFromFirst(param2.firstMove));
			}
		}
		backgammon_ai_bg_BgMoveList.disposeInstance(_loc_4,true);
		return;
	}
	,findAllSingleMoves: function() {
		var _loc_3 = 0;
		var _loc_1 = backgammon_ai_bg_BgMoveList.getInstance();
		this._possibleModelMoves = this._game.getPossibleMoves(this._game.board,this._currentPlayer,this._possibleModelMoves,true);
		if(this._restrictedTo != null) {
			_loc_3 = 0;
			while(_loc_3 < this._possibleModelMoves.length) {
				if(this._possibleModelMoves[_loc_3].stone != this._restrictedTo) {
					this._possibleModelMoves.splice(_loc_3,1);
					--_loc_3;
				}
				++_loc_3;
			}
		}
		var _loc_2 = 0;
		while(_loc_2 < this._possibleModelMoves.length) {
			_loc_1.add(backgammon_ai_bg_BgMove.getInstance(this._possibleModelMoves[_loc_2],null));
			++_loc_2;
		}
		return _loc_1;
	}
	,__class__: backgammon_ai_bg_BgMoveGenerator
};
var backgammon_ai_bg_BgMoveList = function() {
	this.pipDiff = 0;
	this.count = 0;
	this._list = [];
	var _loc_2 = backgammon_ai_bg_BgMoveList.instanceCount + 1;
	backgammon_ai_bg_BgMoveList.instanceCount = _loc_2;
	return;
};
$hxClasses["backgammon.ai.bg.BgMoveList"] = backgammon_ai_bg_BgMoveList;
backgammon_ai_bg_BgMoveList.__name__ = ["backgammon","ai","bg","BgMoveList"];
backgammon_ai_bg_BgMoveList.getInstance = function() {
	if(backgammon_ai_bg_BgMoveList._instancePool.length == 0) {
		return new backgammon_ai_bg_BgMoveList();
	}
	return backgammon_ai_bg_BgMoveList._instancePool.pop();
};
backgammon_ai_bg_BgMoveList.disposeInstance = function(param1,param2) {
	if(param2 == null) {
		param2 = false;
	}
	if(param1 != null) {
		param1.clear(param2);
		backgammon_ai_bg_BgMoveList._instancePool.push(param1);
	}
	return;
};
backgammon_ai_bg_BgMoveList.prototype = {
	_list: null
	,count: null
	,pipDiff: null
	,add: function(param1) {
		var _loc_2 = this;
		var _loc_3 = this.count + 1;
		_loc_2.count = _loc_3;
		this._list.push(param1);
		return;
	}
	,getAt: function(param1) {
		return this._list[param1];
	}
	,clear: function(param1) {
		if(param1 == null) {
			param1 = false;
		}
		var _loc_2 = 0;
		if(param1) {
			_loc_2 = 0;
			while(_loc_2 < this.count) {
				backgammon_ai_bg_BgMove.disposeInstance(this._list[_loc_2],true);
				++_loc_2;
			}
		}
		this.count = 0;
		this._list = [];
		return;
	}
	,__class__: backgammon_ai_bg_BgMoveList
};
var backgammon_ai_logic_RandomAgentLogic = function() {
	backgammon_ai_AgentLogic.call(this);
	return;
};
$hxClasses["backgammon.ai.logic.RandomAgentLogic"] = backgammon_ai_logic_RandomAgentLogic;
backgammon_ai_logic_RandomAgentLogic.__name__ = ["backgammon","ai","logic","RandomAgentLogic"];
backgammon_ai_logic_RandomAgentLogic.__super__ = backgammon_ai_AgentLogic;
backgammon_ai_logic_RandomAgentLogic.prototype = $extend(backgammon_ai_AgentLogic.prototype,{
	gradeBoards: function(param1,param2) {
		var _loc_3 = 0;
		while(_loc_3 < param1.count) {
			param1.getAt(_loc_3).score = Math.random();
			++_loc_3;
		}
		return;
	}
	,__class__: backgammon_ai_logic_RandomAgentLogic
});
var backgammon_ai_rep_board_BoardRep = function() {
	this._isDisposed = false;
	var _loc_2 = backgammon_ai_rep_board_BoardRep.instanceCount + 1;
	backgammon_ai_rep_board_BoardRep.instanceCount = _loc_2;
	return;
};
$hxClasses["backgammon.ai.rep.board.BoardRep"] = backgammon_ai_rep_board_BoardRep;
backgammon_ai_rep_board_BoardRep.__name__ = ["backgammon","ai","rep","board","BoardRep"];
backgammon_ai_rep_board_BoardRep.getInstance = function(param1,param2) {
	var _loc_3 = null;
	if(backgammon_ai_rep_board_BoardRep._dropped.length > 0) {
		_loc_3 = backgammon_ai_rep_board_BoardRep._dropped.pop();
		if(!_loc_3._isDisposed) {
			_loc_3.dispose();
		}
	} else if(backgammon_ai_rep_board_BoardRep._instanceHead == backgammon_ai_rep_board_BoardRep._instancePool.length) {
		_loc_3 = new backgammon_ai_rep_board_BoardRep();
		backgammon_ai_rep_board_BoardRep._instancePool.push(_loc_3);
		var _loc_5 = backgammon_ai_rep_board_BoardRep._instanceHead + 1;
		backgammon_ai_rep_board_BoardRep._instanceHead = _loc_5;
	} else {
		_loc_3 = backgammon_ai_rep_board_BoardRep._instancePool[backgammon_ai_rep_board_BoardRep._instanceHead];
		if(!_loc_3._isDisposed) {
			_loc_3.dispose();
		}
		var _loc_51 = backgammon_ai_rep_board_BoardRep._instanceHead + 1;
		backgammon_ai_rep_board_BoardRep._instanceHead = _loc_51;
	}
	_loc_3._isDisposed = false;
	_loc_3.initialize(param1,param2);
	return _loc_3;
};
backgammon_ai_rep_board_BoardRep.disposeInstance = function(param1) {
	backgammon_ai_rep_board_BoardRep._dropped.push(param1);
	return;
};
backgammon_ai_rep_board_BoardRep.gc = function() {
	backgammon_ai_rep_board_BoardRep._instanceHead = 0;
	while(backgammon_ai_rep_board_BoardRep._dropped.length > 0) backgammon_ai_rep_board_BoardRep._dropped.pop();
	return;
};
backgammon_ai_rep_board_BoardRep.boardToNumberPattern = function(param1) {
	var _loc_2 = [];
	var _loc_3 = param1.get_currentPlayer();
	var _loc_4 = 0;
	while(_loc_4 < 26) {
		_loc_2[_loc_4] = backgammon_ai_rep_board_BoardRep.getSquareNumber(param1,_loc_3,_loc_4);
		++_loc_4;
	}
	return _loc_2;
};
backgammon_ai_rep_board_BoardRep.getBarStoneCount = function(param1,param2) {
	var _loc_3 = 0;
	var _loc_4 = 0;
	while(_loc_4 < param1.board.bar.stones.length) {
		if((js_Boot.__cast(param1.board.bar.stones.at(_loc_4) , backgammon_model_Stone)).color == param2) {
			++_loc_3;
		}
		++_loc_4;
	}
	return _loc_3;
};
backgammon_ai_rep_board_BoardRep.getPlaceStoneCount = function(param1,param2,param3) {
	var _loc_4 = 0;
	var _loc_5 = param2.board.places[param1].stones;
	var _loc_6 = 0;
	while(_loc_6 < _loc_5.h.length) {
		if((js_Boot.__cast(_loc_5.h[_loc_6] , backgammon_model_Stone)).color == param3) {
			++_loc_4;
		} else {
			--_loc_4;
		}
		++_loc_6;
	}
	return _loc_4;
};
backgammon_ai_rep_board_BoardRep.getSquareNumber = function(param1,param2,param3) {
	if(param3 == 0) {
		return backgammon_ai_rep_board_BoardRep.getBarStoneCount(param1,param2.color);
	}
	if(param3 == 25) {
		return -backgammon_ai_rep_board_BoardRep.getBarStoneCount(param1,backgammon_model_enum1_Color.getOpposite(param2.color));
	}
	return backgammon_ai_rep_board_BoardRep.getPlaceStoneCount(param3 - 1,param1,param2.color);
};
backgammon_ai_rep_board_BoardRep.prototype = {
	_isDisposed: null
	,_game: null
	,boardPattern: null
	,createBoardPattern: function() {
		this.boardPattern = backgammon_ai_rep_board_BoardRep.boardToNumberPattern(this._game);
		return;
	}
	,initialize: function(param1,param2) {
		this._game = param1;
		return;
	}
	,dispose: function() {
		this.boardPattern = null;
		this._game = null;
		return;
	}
	,getPiecesAt: function(param1) {
		if(this.boardPattern == null) {
			this.createBoardPattern();
		}
		return this.boardPattern[param1];
	}
	,bearOffCountCurrent: function() {
		if(this.boardPattern == null) {
			this.createBoardPattern();
		}
		var _loc_1 = 0;
		var _loc_2 = 0;
		while(_loc_2 < this.boardPattern.length) {
			if(this.boardPattern[_loc_2] > 0) {
				_loc_1 += this.boardPattern[_loc_2];
			}
			++_loc_2;
		}
		return 15 - _loc_1;
	}
	,bearOffCountOpponent: function() {
		if(this.boardPattern == null) {
			this.createBoardPattern();
		}
		var _loc_1 = 0;
		var _loc_2 = 0;
		while(_loc_2 < this.boardPattern.length) {
			if(this.boardPattern[_loc_2] < 0) {
				_loc_1 -= this.boardPattern[_loc_2];
			}
			++_loc_2;
		}
		return -(15 - _loc_1);
	}
	,__class__: backgammon_ai_rep_board_BoardRep
};
var backgammon_ai_rep_moves_MoveRep = function() {
	backgammon_ai_rep_board_BoardRep.call(this);
	var _loc_2 = backgammon_ai_rep_moves_MoveRep.instanceCount + 1;
	backgammon_ai_rep_moves_MoveRep.instanceCount = _loc_2;
	return;
};
$hxClasses["backgammon.ai.rep.moves.MoveRep"] = backgammon_ai_rep_moves_MoveRep;
backgammon_ai_rep_moves_MoveRep.__name__ = ["backgammon","ai","rep","moves","MoveRep"];
backgammon_ai_rep_moves_MoveRep.getInstance = function(param1,param2) {
	var _loc_3 = null;
	if(backgammon_ai_rep_moves_MoveRep._dropped.length > 0) {
		_loc_3 = backgammon_ai_rep_moves_MoveRep._dropped.pop();
		if(!_loc_3._isDisposed) {
			_loc_3.dispose();
		}
	} else if(backgammon_ai_rep_moves_MoveRep._instanceHead == backgammon_ai_rep_moves_MoveRep._instancePool.length) {
		_loc_3 = new backgammon_ai_rep_moves_MoveRep();
		backgammon_ai_rep_moves_MoveRep._instancePool.push(_loc_3);
		var _loc_5 = backgammon_ai_rep_moves_MoveRep._instanceHead + 1;
		backgammon_ai_rep_moves_MoveRep._instanceHead = _loc_5;
	} else {
		_loc_3 = backgammon_ai_rep_moves_MoveRep._instancePool[backgammon_ai_rep_moves_MoveRep._instanceHead];
		if(!_loc_3._isDisposed) {
			_loc_3.dispose();
		}
		var _loc_51 = backgammon_ai_rep_moves_MoveRep._instanceHead + 1;
		backgammon_ai_rep_moves_MoveRep._instanceHead = _loc_51;
	}
	_loc_3._isDisposed = false;
	_loc_3.initialize1(param1,param2);
	return _loc_3;
};
backgammon_ai_rep_moves_MoveRep.disposeInstance = function(param1) {
	backgammon_ai_rep_moves_MoveRep._dropped.push(param1);
	return;
};
backgammon_ai_rep_moves_MoveRep.gc = function() {
	backgammon_ai_rep_moves_MoveRep._instanceHead = 0;
	backgammon_ai_rep_moves_MoveRep._dropped = [];
	return;
};
backgammon_ai_rep_moves_MoveRep.__super__ = backgammon_ai_rep_board_BoardRep;
backgammon_ai_rep_moves_MoveRep.prototype = $extend(backgammon_ai_rep_board_BoardRep.prototype,{
	move: null
	,score: null
	,initialize1: function(param1,param2) {
		this._game = param1;
		this.score = 0;
		this.move = param2;
		return this;
	}
	,dispose: function() {
		backgammon_ai_rep_board_BoardRep.prototype.dispose.call(this);
		this.move = null;
		return;
	}
	,createBoardPattern: function() {
		if(this.move != null) {
			this.updateBoardRep(this._game,this.move);
		} else {
			backgammon_ai_rep_board_BoardRep.prototype.createBoardPattern.call(this);
		}
		return;
	}
	,updateBoardRep: function(param1,param2) {
		if(param2 != null) {
			param1.play(param2.modelMove);
			this.updateBoardRep(param1,param2.nextMove);
			param1.undo();
		} else {
			this.boardPattern = backgammon_ai_rep_board_BoardRep.boardToNumberPattern(param1);
		}
		return;
	}
	,clone: function() {
		var _loc_1 = backgammon_ai_rep_moves_MoveRep.getInstance(null,null);
		(js_Boot.__cast(_loc_1 , backgammon_ai_rep_moves_MoveRep)).move = backgammon_ai_bg_BgMove.cloneFromFirst(this.move.firstMove);
		(js_Boot.__cast(_loc_1 , backgammon_ai_rep_moves_MoveRep)).score = this.score;
		return _loc_1;
	}
	,equals: function(param1) {
		if(param1 == null) {
			return false;
		}
		return this.move.modelMove.equals(param1.move.modelMove);
	}
	,__class__: backgammon_ai_rep_moves_MoveRep
});
var backgammon_ai_rep_moves_MoveRepGenerator = function(param1) {
	this._hasStored = false;
	this._game = param1;
	this._moveList = backgammon_ai_bg_BgMoveList.getInstance();
	this._moveGenerator = new backgammon_ai_bg_BgMoveGenerator(param1);
	this._currentMoveReps = new backgammon_ai_rep_moves_MoveRepList();
	var _loc_3 = backgammon_ai_rep_moves_MoveRepGenerator.instanceCount + 1;
	backgammon_ai_rep_moves_MoveRepGenerator.instanceCount = _loc_3;
	return;
};
$hxClasses["backgammon.ai.rep.moves.MoveRepGenerator"] = backgammon_ai_rep_moves_MoveRepGenerator;
backgammon_ai_rep_moves_MoveRepGenerator.__name__ = ["backgammon","ai","rep","moves","MoveRepGenerator"];
backgammon_ai_rep_moves_MoveRepGenerator.prototype = {
	_game: null
	,_moveList: null
	,_moveGenerator: null
	,_hasStored: null
	,_storedTurn: null
	,_storedDieValue1: null
	,_storedDieValue2: null
	,_storedBoardRep: null
	,_currentMoveReps: null
	,reset: function() {
		this._hasStored = false;
		this._currentMoveReps.clear();
		this._moveList.clear();
		return;
	}
	,generate: function(repList) {
		var _loc_2 = 0;
		var _loc_3 = null;
		this._currentMoveReps.clear();
		this._moveGenerator.generate(this._moveList);
		_loc_2 = 0;
		while(_loc_2 < this._moveList.count) {
			_loc_3 = backgammon_ai_rep_moves_MoveRep.getInstance(this._game,this._moveList.getAt(_loc_2));
			this._currentMoveReps.add(_loc_3,true);
			++_loc_2;
		}
		repList.clear();
		_loc_2 = 0;
		while(_loc_2 < this._currentMoveReps.count) {
			repList.add(this._currentMoveReps.getAt(_loc_2),true);
			++_loc_2;
		}
		return;
	}
	,isNewState: function() {
		var _loc_3 = null;
		var _loc_4 = 0;
		var _loc_1 = false;
		this._hasStored = false;
		var _loc_2 = this._game.get_currentPlayer();
		if(this._hasStored == false || this._storedBoardRep == null) {
			_loc_1 = true;
			this._hasStored = true;
			_loc_3 = backgammon_ai_rep_board_BoardRep.boardToNumberPattern(this._game);
		} else if(this._storedTurn != this._game.turn) {
			_loc_1 = true;
		} else if(_loc_2.die1.value != this._storedDieValue1) {
			_loc_1 = true;
		} else if(_loc_2.die2.value != this._storedDieValue2) {
			_loc_1 = true;
		} else {
			_loc_3 = backgammon_ai_rep_board_BoardRep.boardToNumberPattern(this._game);
			_loc_4 = 0;
			while(_loc_4 < this._storedBoardRep.length) {
				if(_loc_3[_loc_4] != this._storedBoardRep[_loc_4]) {
					_loc_1 = true;
					break;
				}
				++_loc_4;
			}
		}
		if(_loc_1) {
			this._storedTurn = this._game.turn;
			this._storedDieValue1 = _loc_2.die1.value;
			this._storedDieValue2 = _loc_2.die2.value;
			this._storedBoardRep = _loc_3;
		}
		return _loc_1;
	}
	,__class__: backgammon_ai_rep_moves_MoveRepGenerator
};
var backgammon_ai_rep_moves_MoveRepList = function() {
	this.count = 0;
	this.list = [];
	var _loc_2 = backgammon_ai_rep_moves_MoveRepList.instanceCount + 1;
	backgammon_ai_rep_moves_MoveRepList.instanceCount = _loc_2;
	return;
};
$hxClasses["backgammon.ai.rep.moves.MoveRepList"] = backgammon_ai_rep_moves_MoveRepList;
backgammon_ai_rep_moves_MoveRepList.__name__ = ["backgammon","ai","rep","moves","MoveRepList"];
backgammon_ai_rep_moves_MoveRepList.prototype = {
	list: null
	,count: null
	,sort: function() {
		this.list.sort($bind(this,this.comparer));
		return;
	}
	,reverse: function() {
		this.list.reverse();
		return;
	}
	,comparer: function(param1,param2) {
		if(param1.score < param2.score) {
			return 1;
		}
		if(param1.score > param2.score) {
			return -1;
		}
		return 0;
	}
	,add: function(param1,param2) {
		if(param2 || !this.contains(param1)) {
			var _loc_3 = this;
			var _loc_4 = this.count + 1;
			_loc_3.count = _loc_4;
			this.list.push(param1);
		}
		return;
	}
	,remove: function(param1) {
		this.list.splice(this.list.indexOf(param1,0),1);
		var _loc_2 = this;
		var _loc_3 = this.count - 1;
		_loc_2.count = _loc_3;
		return;
	}
	,contains: function(param1) {
		var _loc_2 = 0;
		while(_loc_2 < this.list.length) {
			if((js_Boot.__cast(this.list[_loc_2] , backgammon_ai_rep_moves_MoveRep)).equals(param1)) {
				return true;
			}
			++_loc_2;
		}
		return false;
	}
	,getAt: function(param1) {
		return this.list[param1];
	}
	,clear: function() {
		var _loc_1 = 0;
		while(_loc_1 < this.list.length) {
			backgammon_ai_rep_moves_MoveRep.disposeInstance(js_Boot.__cast(this.list[_loc_1] , backgammon_ai_rep_moves_MoveRep));
			++_loc_1;
		}
		this.count = 0;
		this.list = [];
		return;
	}
	,__class__: backgammon_ai_rep_moves_MoveRepList
};
var openfl_utils_IExternalizable = function() { };
$hxClasses["openfl.utils.IExternalizable"] = openfl_utils_IExternalizable;
openfl_utils_IExternalizable.__name__ = ["openfl","utils","IExternalizable"];
openfl_utils_IExternalizable.prototype = {
	readExternal: null
	,writeExternal: null
	,__class__: openfl_utils_IExternalizable
};
var backgammon_model_Bar = function(param1) {
	if(param1 == null) {
		param1 = false;
	}
	if(!param1) {
		return;
	}
	this.stones = new ListExt();
	return;
};
$hxClasses["backgammon.model.Bar"] = backgammon_model_Bar;
backgammon_model_Bar.__name__ = ["backgammon","model","Bar"];
backgammon_model_Bar.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_Bar.prototype = {
	stones: null
	,clear: function() {
		while(this.stones.get_count() > 0) this.stones.removeAt(0);
	}
	,readExternal: function(param1) {
		return;
	}
	,writeExternal: function(param1) {
		return;
	}
	,__class__: backgammon_model_Bar
};
var backgammon_model_Board = function(param1,param2,param3) {
	if(param1 == null) {
		param1 = false;
	}
	var _loc_6 = null;
	this.places = [];
	this.stones = [];
	if(!param1) {
		return;
	}
	var _loc_4 = 0;
	while(_loc_4 < 24) {
		this.places[_loc_4] = new backgammon_model_Place(param1,_loc_4);
		++_loc_4;
	}
	this.bar = new backgammon_model_Bar(param1);
	this.endZone1 = new backgammon_model_EndZone(param1,param2);
	this.endZone2 = new backgammon_model_EndZone(param1,param3);
	this.places[0].stones.add(new backgammon_model_Stone(param1,param2,0));
	this.places[0].stones.add(new backgammon_model_Stone(param1,param2,1));
	this.places[5].stones.add(new backgammon_model_Stone(param1,param3,2));
	this.places[5].stones.add(new backgammon_model_Stone(param1,param3,3));
	this.places[5].stones.add(new backgammon_model_Stone(param1,param3,4));
	this.places[5].stones.add(new backgammon_model_Stone(param1,param3,5));
	this.places[5].stones.add(new backgammon_model_Stone(param1,param3,6));
	this.places[7].stones.add(new backgammon_model_Stone(param1,param3,7));
	this.places[7].stones.add(new backgammon_model_Stone(param1,param3,8));
	this.places[7].stones.add(new backgammon_model_Stone(param1,param3,9));
	this.places[11].stones.add(new backgammon_model_Stone(param1,param2,10));
	this.places[11].stones.add(new backgammon_model_Stone(param1,param2,11));
	this.places[11].stones.add(new backgammon_model_Stone(param1,param2,12));
	this.places[11].stones.add(new backgammon_model_Stone(param1,param2,13));
	this.places[11].stones.add(new backgammon_model_Stone(param1,param2,14));
	this.places[12].stones.add(new backgammon_model_Stone(param1,param3,15));
	this.places[12].stones.add(new backgammon_model_Stone(param1,param3,16));
	this.places[12].stones.add(new backgammon_model_Stone(param1,param3,17));
	this.places[12].stones.add(new backgammon_model_Stone(param1,param3,18));
	this.places[12].stones.add(new backgammon_model_Stone(param1,param3,19));
	this.places[16].stones.add(new backgammon_model_Stone(param1,param2,20));
	this.places[16].stones.add(new backgammon_model_Stone(param1,param2,21));
	this.places[16].stones.add(new backgammon_model_Stone(param1,param2,22));
	this.places[18].stones.add(new backgammon_model_Stone(param1,param2,23));
	this.places[18].stones.add(new backgammon_model_Stone(param1,param2,24));
	this.places[18].stones.add(new backgammon_model_Stone(param1,param2,25));
	this.places[18].stones.add(new backgammon_model_Stone(param1,param2,26));
	this.places[18].stones.add(new backgammon_model_Stone(param1,param2,27));
	this.places[23].stones.add(new backgammon_model_Stone(param1,param3,28));
	this.places[23].stones.add(new backgammon_model_Stone(param1,param3,29));
	var _g = 0;
	var _g1 = this.places;
	while(_g < _g1.length) {
		var _loc_5 = _g1[_g];
		++_g;
		var _g3 = 0;
		var _g2 = _loc_5.stones.length;
		while(_g3 < _g2) {
			_loc_6 = _loc_5.stones.at(_g3++);
			this.stones[_loc_6.index] = _loc_6;
		}
	}
	var _g11 = 0;
	var _g4 = this.bar.stones.length;
	while(_g11 < _g4) {
		_loc_6 = this.bar.stones.at(_g11++);
		this.stones[_loc_6.index] = _loc_6;
	}
	var _g12 = 0;
	var _g5 = this.endZone1.stones.length;
	while(_g12 < _g5) {
		_loc_6 = this.endZone1.stones.at(_g12++);
		this.stones[_loc_6.index] = _loc_6;
	}
	var _g13 = 0;
	var _g6 = this.endZone2.stones.length;
	while(_g13 < _g6) {
		_loc_6 = this.endZone2.stones.at(_g13++);
		this.stones[_loc_6.index] = _loc_6;
	}
	return;
};
$hxClasses["backgammon.model.Board"] = backgammon_model_Board;
backgammon_model_Board.__name__ = ["backgammon","model","Board"];
backgammon_model_Board.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_Board.prototype = {
	places: null
	,stones: null
	,bar: null
	,endZone1: null
	,endZone2: null
	,loadFrom: function(data) {
		var curIndex = 0;
		var _g1 = 0;
		var _g = this.places.length;
		while(_g1 < _g) this.places[_g1++].clear();
		this.bar.clear();
		this.endZone1.clear();
		this.endZone2.clear();
		var stone;
		var _g11 = 0;
		var _g2 = data.places.length;
		while(_g11 < _g2) {
			var i = _g11++;
			var _g3 = 0;
			var _g21 = data.places[i].stones.h.length;
			while(_g3 < _g21) {
				var j = _g3++;
				stone = this.stones[curIndex];
				++curIndex;
				stone.color = data.places[i].stones.h[j].color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
				this.places[i].stones.push(stone);
			}
		}
		var _g12 = 0;
		var _g4 = data.bar.stones.h.length;
		while(_g12 < _g4) {
			var i1 = _g12++;
			stone = this.stones[curIndex];
			++curIndex;
			stone.color = data.bar.stones.h[i1].color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
			this.bar.stones.push(stone);
		}
		var _g13 = 0;
		var _g5 = data.endZone1.stones.h.length;
		while(_g13 < _g5) {
			var i2 = _g13++;
			stone = this.stones[curIndex];
			++curIndex;
			stone.color = data.endZone1.stones.h[i2].color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
			this.endZone1.stones.push(stone);
		}
		var _g14 = 0;
		var _g6 = data.endZone2.stones.h.length;
		while(_g14 < _g6) {
			var i3 = _g14++;
			stone = this.stones[curIndex];
			++curIndex;
			stone.color = data.endZone2.stones.h[i3].color.name == "Red"?backgammon_model_enum1_Color.Red:backgammon_model_enum1_Color.White;
			this.endZone2.stones.push(stone);
		}
	}
	,restore: function(param1) {
		var _loc_3 = null;
		var _g = 0;
		var _g1 = param1.places;
		while(_g < _g1.length) {
			var _loc_2 = _g1[_g];
			++_g;
			_loc_3 = this.places[_loc_2.index];
			_loc_3.stones.clear();
			var _g2_val;
			var _g2_head = _loc_2.stones.h;
			_g2_val = null;
			while(_g2_head != null) {
				_g2_val = _g2_head[0];
				_g2_head = _g2_head[1];
				_loc_3.stones.add(this.stones[_g2_val.index]);
			}
		}
		this.bar.stones.clear();
		var _g_val;
		var _g_head = param1.bar.stones.h;
		_g_val = null;
		while(_g_head != null) {
			_g_val = _g_head[0];
			_g_head = _g_head[1];
			this.bar.stones.add(this.stones[_g_val.index]);
		}
		this.endZone1.stones.clear();
		var _g_val1;
		var _g_head1 = param1.endZone1.stones.h;
		_g_val1 = null;
		while(_g_head1 != null) {
			_g_val1 = _g_head1[0];
			_g_head1 = _g_head1[1];
			this.endZone1.stones.add(this.stones[_g_val1.index]);
		}
		this.endZone2.stones.clear();
		var _g_val2;
		var _g_head2 = param1.endZone2.stones.h;
		_g_val2 = null;
		while(_g_head2 != null) {
			_g_val2 = _g_head2[0];
			_g_head2 = _g_head2[1];
			this.endZone2.stones.add(this.stones[_g_val2.index]);
		}
		return;
	}
	,readExternal: function(param1) {
	}
	,writeExternal: function(param1) {
	}
	,__class__: backgammon_model_Board
};
var backgammon_model_Die = function(param1,param2) {
	if(param1 == null) {
		param1 = false;
	}
	this.isUsed = false;
	this.value = 6;
	if(!param1) {
		return;
	}
	this.color = param2;
	return;
};
$hxClasses["backgammon.model.Die"] = backgammon_model_Die;
backgammon_model_Die.__name__ = ["backgammon","model","Die"];
backgammon_model_Die.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_Die.prototype = {
	color: null
	,value: null
	,isUsed: null
	,roll: function() {
		this.value = 1 + (Math.random() * 6 | 0);
		return;
	}
	,readExternal: function(param1) {
		this.color = backgammon_model_enum1_Color.getByOrdinal(param1.readInt());
		this.value = param1.readInt();
		return;
	}
	,writeExternal: function(param1) {
		param1.writeInt(this.color.get_ordinal());
		param1.writeInt(this.value);
		return;
	}
	,__class__: backgammon_model_Die
};
var backgammon_model_EndZone = function(param1,param2) {
	if(param1 == null) {
		param1 = false;
	}
	this.stones = new ListExt();
	if(!param1) {
		return;
	}
	this.color = param2;
	return;
};
$hxClasses["backgammon.model.EndZone"] = backgammon_model_EndZone;
backgammon_model_EndZone.__name__ = ["backgammon","model","EndZone"];
backgammon_model_EndZone.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_EndZone.prototype = {
	color: null
	,stones: null
	,clear: function() {
		while(this.stones.get_count() > 0) this.stones.removeAt(0);
	}
	,readExternal: function(param1) {
		this.color = backgammon_model_enum1_Color.getByOrdinal(param1.readInt());
		return;
	}
	,writeExternal: function(param1) {
		param1.writeInt(this.color.get_ordinal());
		return;
	}
	,__class__: backgammon_model_EndZone
};
var backgammon_model_logic_GameLogic = function() {
	return;
};
$hxClasses["backgammon.model.logic.GameLogic"] = backgammon_model_logic_GameLogic;
backgammon_model_logic_GameLogic.__name__ = ["backgammon","model","logic","GameLogic"];
backgammon_model_logic_GameLogic.prototype = {
	getPossibleMoves: function(param1,param2,param3,param4) {
		if(param4 == null) {
			param4 = true;
		}
		var _loc_6 = null;
		var _loc_7 = null;
		var _loc_8 = null;
		var _loc_9 = null;
		var _loc_10 = false;
		var _loc_11 = false;
		while(param3.length > 0) param3.pop();
		var _loc_5 = false;
		var _g1 = 0;
		var _g = param1.bar.stones.length;
		while(_g1 < _g) {
			_loc_6 = param1.bar.stones.at(_g1++);
			if(_loc_6.color == param2.color) {
				_loc_5 = true;
				if(param2.die1.isUsed == false) {
					_loc_7 = backgammon_model_logic_Move.getInstance(param2,null,param1.bar,_loc_6,param2.die1);
					if(this.isValidMove(_loc_7,param2,param1)) {
						param3.push(_loc_7);
					} else {
						backgammon_model_logic_Move.disposeInstance(_loc_7);
					}
				}
				if(param2.die2.isUsed == false && (param2.die2.value != param2.die1.value || param2.die1.isUsed != param2.die2.isUsed)) {
					_loc_8 = backgammon_model_logic_Move.getInstance(param2,null,param1.bar,_loc_6,param2.die2);
					if(this.isValidMove(_loc_8,param2,param1)) {
						param3.push(_loc_8);
						continue;
					}
					backgammon_model_logic_Move.disposeInstance(_loc_8);
				}
			}
		}
		if(_loc_5 == false) {
			var _g11 = 0;
			var _g2 = param1.places.length;
			while(_g11 < _g2) {
				_loc_9 = param1.places[_g11++];
				if(_loc_9.stones.get_count() > 0 && _loc_9.stones.get_last().color == param2.color) {
					_loc_6 = _loc_9.stones.get_last();
					_loc_10 = false;
					if(param2.die1.isUsed == false) {
						_loc_7 = backgammon_model_logic_Move.getInstance(param2,_loc_9,null,_loc_6,param2.die1);
						if(this.isValidMove(_loc_7,param2,param1)) {
							_loc_10 = true;
							param3.push(_loc_7);
						} else {
							backgammon_model_logic_Move.disposeInstance(_loc_7);
						}
					}
					_loc_11 = false;
					if(param2.die2.isUsed == false && (param2.die2.value != param2.die1.value || param2.die1.isUsed != param2.die2.isUsed)) {
						_loc_8 = backgammon_model_logic_Move.getInstance(param2,_loc_9,null,_loc_6,param2.die2);
						if(this.isValidMove(_loc_8,param2,param1)) {
							_loc_11 = true;
							param3.push(_loc_8);
						} else {
							backgammon_model_logic_Move.disposeInstance(_loc_8);
						}
					}
					if(!param4) {
						var _g2_val;
						var _g2_head = _loc_9.stones.h;
						_g2_val = null;
						while(_g2_head != null) {
							_g2_val = _g2_head[0];
							_g2_head = _g2_head[1];
							var _loc_12 = _g2_val;
							if(_loc_12 == _loc_6) {
								continue;
							}
							if(_loc_10) {
								_loc_7 = backgammon_model_logic_Move.getInstance(param2,_loc_9,null,_loc_12,param2.die1);
								param3.push(_loc_7);
							}
							if(_loc_11) {
								_loc_8 = backgammon_model_logic_Move.getInstance(param2,_loc_9,null,_loc_12,param2.die2);
								param3.push(_loc_8);
							}
						}
					}
				}
			}
		}
		return param3;
	}
	,isValidMove: function(param1,param2,param3) {
		var _loc_5 = null;
		var _loc_6 = null;
		var _loc_7 = null;
		var _loc_8 = 0;
		if(param1.die.isUsed) {
			return false;
		}
		if(param1.destIndex < 0 || param1.destIndex >= 24) {
			var _g1 = 0;
			var _g = param3.bar.stones.length;
			while(_g1 < _g) {
				_loc_5 = param3.bar.stones.at(_g1++);
				if(_loc_5.color == param2.color) {
					return false;
				}
			}
			_loc_6 = new ListExt();
			if(param2.index == 1) {
				_loc_6.addRange([18,19,20,21,22,23]);
			} else {
				_loc_6.addRange([5,4,3,2,1,0]);
			}
			var _g11 = 0;
			var _g2 = param3.places.length;
			while(_g11 < _g2) {
				_loc_7 = param3.places[_g11++];
				if(_loc_6.contains(_loc_7.index) == false) {
					if(_loc_7.stones.get_count() > 0 && _loc_7.stones.get_last().color == param2.color) {
						return false;
					}
				}
			}
			if(param1.destIndex == -1 || param1.destIndex == 24) {
				param1.isBearOff = true;
				return true;
			}
			var _g12 = 0;
			var _g3 = _loc_6.length;
			while(_g12 < _g3) {
				_loc_8 = _loc_6.at(_g12++);
				if(_loc_8 > 15) {
					if(_loc_8 < param1.sourcePlace.index && param3.places[_loc_8].stones.get_count() > 0 && param3.places[_loc_8].stones.get_last().color == param2.color) {
						return false;
					}
					continue;
				}
				if(_loc_8 > param1.sourcePlace.index && param3.places[_loc_8].stones.get_count() > 0 && param3.places[_loc_8].stones.get_last().color == param2.color) {
					return false;
				}
			}
			param1.isBearOff = true;
			return true;
		}
		var _loc_4 = param3.places[param1.destIndex];
		if(_loc_4.stones.get_count() > 1 && _loc_4.stones.get_last().color != param1.stone.color) {
			return false;
		}
		return true;
	}
	,getMovesFor: function(param1,param2) {
		var _loc_3 = [];
		var _g = 0;
		while(_g < param2.length) {
			var _loc_4 = param2[_g];
			++_g;
			if(_loc_4.stone == param1) {
				_loc_3.push(_loc_4);
			}
		}
		return _loc_3;
	}
	,getMoveChains: function(param1,param2,param3) {
		var _loc_4 = new backgammon_ai_bg_BgMoveList();
		new backgammon_ai_bg_BgMoveGenerator(param1).generate(_loc_4,param2,param3 + 1);
		if(_loc_4.count == 0) {
			return null;
		}
		return _loc_4;
	}
	,getFinalDestFor: function(param1,param2,param3,param4,param5,param6) {
		var _loc_11 = null;
		var _loc_12 = null;
		var _loc_13 = null;
		var _loc_7 = new backgammon_ai_bg_BgMoveList();
		new backgammon_ai_bg_BgMoveGenerator(param1).generate(_loc_7,param4,param6 + 1);
		if(_loc_7.count == 0) {
			return null;
		}
		var _loc_8 = [];
		var _loc_9 = 0;
		while(_loc_9 < _loc_7.count) {
			_loc_11 = _loc_7.getAt(_loc_9);
			_loc_12 = _loc_11.firstMove;
			if(_loc_12.nextMove != null) {
				while(_loc_12.nextMove != null) _loc_12 = _loc_12.nextMove;
				_loc_8.push(_loc_12.modelMove);
			}
			++_loc_9;
		}
		if(_loc_8.length == 0) {
			return null;
		}
		var _loc_10 = null;
		_loc_9 = 0;
		while(_loc_9 < _loc_8.length) {
			_loc_13 = _loc_8[_loc_9];
			if(_loc_10 == null) {
				_loc_10 = _loc_13;
			} else if(_loc_13.isBearOff) {
				_loc_10 = _loc_13;
				break;
			} else if(param3.index == 1) {
				if(_loc_13.destIndex > _loc_10.destIndex) {
					_loc_10 = _loc_13;
				}
			} else if(param3.index == 2) {
				if(_loc_13.destIndex < _loc_10.destIndex) {
					_loc_10 = _loc_13;
				}
			}
			++_loc_9;
		}
		haxe_Log.trace("found furthest: " + _loc_10.destIndex + " // " + (_loc_10.isBearOff == null?"null":"" + _loc_10.isBearOff),{ fileName : "GameLogic.hx", lineNumber : 290, className : "backgammon.model.logic.GameLogic", methodName : "getFinalDestFor"});
		return _loc_10;
	}
	,calculatePip: function(param1,param2) {
		var _loc_4 = null;
		var _loc_5 = null;
		var _loc_3 = 0;
		var _g1 = 0;
		var _g = param1.places.length;
		while(_g1 < _g) {
			_loc_4 = param1.places[_g1++];
			var _g3 = 0;
			var _g2 = _loc_4.stones.length;
			while(_g3 < _g2) {
				_loc_5 = _loc_4.stones.at(_g3++);
				if(_loc_5.color == param2.color) {
					if(param2.index == 2) {
						_loc_3 += _loc_4.index + 1;
						continue;
					}
					_loc_3 += 24 - _loc_4.index;
				}
			}
		}
		var _g11 = 0;
		var _g4 = param1.bar.stones.length;
		while(_g11 < _g4) {
			_loc_5 = param1.bar.stones.at(_g11++);
			if(_loc_5.color == param2.color) {
				_loc_3 += 25;
			}
		}
		return _loc_3;
	}
	,__class__: backgammon_model_logic_GameLogic
};
var backgammon_model_Game = function(param1,player1,player2) {
	if(param1 == null) {
		param1 = false;
	}
	this.winner = 0;
	this.gameOver = false;
	backgammon_model_logic_GameLogic.call(this);
	if(!param1) {
		this.turn = 0;
		this.doublingControl = 0;
		this.doublingValue = 0;
		this.gameOver = false;
		this.winner = 0;
		this.undoStack = new backgammon_ai_UndoStack();
		return;
	}
	this.player1 = player1;
	this.player2 = player2;
	this.reset();
	return;
};
$hxClasses["backgammon.model.Game"] = backgammon_model_Game;
backgammon_model_Game.__name__ = ["backgammon","model","Game"];
backgammon_model_Game.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_Game.__super__ = backgammon_model_logic_GameLogic;
backgammon_model_Game.prototype = $extend(backgammon_model_logic_GameLogic.prototype,{
	board: null
	,turn: null
	,doublingControl: null
	,doublingValue: null
	,player1: null
	,player2: null
	,gameOver: null
	,winner: null
	,undoStack: null
	,get_currentPlayer: function() {
		if(this.turn == this.player1.index) {
			return this.player1;
		} else {
			return this.player2;
		}
	}
	,get_idlePlayer: function() {
		if(this.turn == this.player1.index) {
			return this.player2;
		} else {
			return this.player1;
		}
	}
	,get_isValid: function() {
		try {
			this.validate();
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			if( js_Boot.__instanceof(e,openfl_errors_Error) ) {
				return false;
			} else throw(e);
		}
		return true;
	}
	,validate: function() {
		return;
	}
	,reset: function() {
		this.turn = 0;
		this.board = new backgammon_model_Board(true,this.player1.color,this.player2.color);
		this.doublingControl = 0;
		this.doublingValue = 0;
		this.player1.die1.isUsed = false;
		this.player1.die2.isUsed = false;
		this.player2.die1.isUsed = false;
		this.player2.die2.isUsed = false;
		this.gameOver = false;
		this.winner = 0;
		this.undoStack = new backgammon_ai_UndoStack();
		return;
	}
	,play: function(move) {
		var _loc_2 = null;
		var _loc_3 = null;
		var _loc_4 = null;
		var _loc_5 = null;
		if(move != null) {
			if(move.isEnter) {
				this.board.bar.stones.remove(move.stone);
				_loc_2 = this.board.bar.stones;
			} else {
				move.sourcePlace.stones.remove(move.stone);
				_loc_2 = move.sourcePlace.stones;
			}
			if(move.isBearOff) {
				if(move.player.index == 1) {
					this.board.endZone1.stones.add(move.stone);
					_loc_3 = this.board.endZone1.stones;
				} else {
					this.board.endZone2.stones.add(move.stone);
					_loc_3 = this.board.endZone2.stones;
				}
			} else {
				_loc_5 = this.board.places[move.destIndex];
				if(_loc_5.stones.get_count() == 1 && (js_Boot.__cast(_loc_5.stones.get_last() , backgammon_model_Stone)).color != move.stone.color) {
					_loc_4 = _loc_5.stones.removeAt(0);
					this.board.bar.stones.add(_loc_4);
				} else {
					_loc_4 = null;
				}
				_loc_5.stones.add(move.stone);
				_loc_3 = _loc_5.stones;
			}
			move.die.isUsed = true;
			this.undoStack.push(move,_loc_2,_loc_3,_loc_4);
		}
	}
	,undo: function() {
		var _loc_1 = this.undoStack.move;
		var _loc_2 = this.undoStack.addedTo;
		var _loc_3 = this.undoStack.removedFrom;
		var _loc_4 = this.undoStack.blot;
		this.undoStack.pop();
		if(_loc_1 != null) {
			_loc_2.remove(_loc_1.stone);
			_loc_3.add(_loc_1.stone);
			if(_loc_4 != null) {
				this.board.bar.stones.remove(_loc_4);
				_loc_2.add(_loc_4);
				_loc_4 = null;
			}
			_loc_1.die.isUsed = false;
			this.gameOver = false;
			this.winner = 0;
		}
		return;
	}
	,gameOverCheck: function() {
		if(this.board.endZone1.stones.get_count() == 15) {
			this.gameOver = true;
			this.winner = 1;
		} else if(this.board.endZone2.stones.get_count() == 15) {
			this.gameOver = true;
			this.winner = 2;
		}
		return;
	}
	,readExternal: function(param1) {
	}
	,writeExternal: function(param1) {
	}
	,__class__: backgammon_model_Game
	,__properties__: {get_isValid:"get_isValid",get_idlePlayer:"get_idlePlayer",get_currentPlayer:"get_currentPlayer"}
});
var backgammon_model_Match = function(param1,param2,param3,param4,param5,param6,param7,param8,param9,param10,param11) {
	if(param11 == null) {
		param11 = false;
	}
	if(param10 == null) {
		param10 = false;
	}
	if(param8 == null) {
		param8 = 0;
	}
	if(param3 == null) {
		param3 = false;
	}
	if(param2 == null) {
		param2 = false;
	}
	if(param1 == null) {
		param1 = false;
	}
	if(!param1) {
		return;
	}
	this.active = param2;
	this.isSinglePlayer = param3;
	this.player1 = new backgammon_model_Player(param1,param4,param5,1);
	this.player2 = new backgammon_model_Player(param1,param6,param7,2);
	this.requiredPoints = param8;
	this.difficulty = param9;
	this.allowDoublingCube = param10;
	this.allowHighlights = param11;
	this.game = new backgammon_model_Game(param1,this.player1,this.player2);
	return;
};
$hxClasses["backgammon.model.Match"] = backgammon_model_Match;
backgammon_model_Match.__name__ = ["backgammon","model","Match"];
backgammon_model_Match.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_Match.createDefaultPassAndPlay = function(param1) {
	var _loc_2 = new backgammon_model_Match(true,false,false,"Player 1",backgammon_model_enum1_Color.Red,"Player 2",backgammon_model_enum1_Color.White,5,backgammon_model_enum1_Difficulty.NA,true,true);
	if(param1 != null) {
		_loc_2.allowHighlights = param1.allowHighlights;
		_loc_2.allowDoublingCube = param1.allowDoublingCube;
		_loc_2.difficulty = param1.difficulty;
		_loc_2.requiredPoints = param1.requiredPoints;
		_loc_2.player1.name = param1.player1.name;
		_loc_2.player1.color = param1.player1.color;
		_loc_2.player2.name = param1.player2.name;
		_loc_2.player2.color = param1.player2.color;
	}
	return _loc_2;
};
backgammon_model_Match.createDefaultSinglePlayer = function(param1) {
	var _loc_2 = new backgammon_model_Match(true,false,true,"Player",backgammon_model_enum1_Color.Red,"Computer",backgammon_model_enum1_Color.White,5,backgammon_model_enum1_Difficulty.Expert,true,true);
	if(param1 != null) {
		_loc_2.allowHighlights = param1.allowHighlights;
		_loc_2.allowDoublingCube = param1.allowDoublingCube;
		_loc_2.difficulty = param1.difficulty;
		_loc_2.requiredPoints = param1.requiredPoints;
		_loc_2.player1.name = param1.player1.name;
		_loc_2.player1.color = param1.player1.color;
		_loc_2.player2.name = param1.player2.name;
		_loc_2.player2.color = param1.player2.color;
		_loc_2.resetGame();
	}
	return _loc_2;
};
backgammon_model_Match.prototype = {
	active: null
	,isSinglePlayer: null
	,player1: null
	,player2: null
	,requiredPoints: null
	,difficulty: null
	,allowDoublingCube: null
	,allowHighlights: null
	,game: null
	,resetGame: function() {
		this.game = new backgammon_model_Game(true,this.player1,this.player2);
		return;
	}
	,readExternal: function(param1) {
		var input = param1;
		this.active = input.readBoolean();
		this.isSinglePlayer = input.readBoolean();
		this.player1 = input.readObject();
		this.player2 = input.readObject();
		this.requiredPoints = input.readInt();
		this.difficulty = backgammon_model_enum1_Difficulty.getByOrdinal(input.readInt());
		this.allowDoublingCube = input.readBoolean();
		this.game = input.readObject();
		try {
			this.allowHighlights = input.readBoolean();
		} catch( error ) {
			haxe_CallStack.lastException = error;
			if (error instanceof js__$Boot_HaxeError) error = error.val;
			if( js_Boot.__instanceof(error,openfl_errors_Error) ) {
				haxe_Log.trace("Error reading allowed highlights, defaulting to true",{ fileName : "Match.hx", lineNumber : 60, className : "backgammon.model.Match", methodName : "readExternal"});
				this.allowHighlights = true;
			} else throw(error);
		}
		return;
	}
	,writeExternal: function(param1) {
	}
	,__class__: backgammon_model_Match
};
var backgammon_model_Place = function(param1,param2) {
	if(param2 == null) {
		param2 = 0;
	}
	if(param1 == null) {
		param1 = false;
	}
	if(!param1) {
		return;
	}
	this.stones = new ListExt();
	this.index = param2;
	return;
};
$hxClasses["backgammon.model.Place"] = backgammon_model_Place;
backgammon_model_Place.__name__ = ["backgammon","model","Place"];
backgammon_model_Place.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_Place.prototype = {
	stones: null
	,index: null
	,clear: function() {
		while(this.stones.get_count() > 0) this.stones.removeAt(0);
	}
	,readExternal: function(param1) {
	}
	,writeExternal: function(param1) {
	}
	,__class__: backgammon_model_Place
};
var backgammon_model_Player = function(param1,playerName,color,index) {
	if(index == null) {
		index = 0;
	}
	if(param1 == null) {
		param1 = false;
	}
	if(!param1) {
		return;
	}
	this.name = playerName;
	this.points = 0;
	this.color = color;
	this.index = index;
	this.die1 = new backgammon_model_Die(param1,color);
	this.die2 = new backgammon_model_Die(param1,color);
	return;
};
$hxClasses["backgammon.model.Player"] = backgammon_model_Player;
backgammon_model_Player.__name__ = ["backgammon","model","Player"];
backgammon_model_Player.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_Player.prototype = {
	name: null
	,points: null
	,color: null
	,index: null
	,die1: null
	,die2: null
	,restore: function(player) {
		this.die1.isUsed = player.die1.isUsed;
		this.die1.value = player.die1.value;
		this.die2.isUsed = player.die2.isUsed;
		this.die2.value = player.die2.value;
		return;
	}
	,readExternal: function(param1) {
	}
	,writeExternal: function(param1) {
		return;
	}
	,__class__: backgammon_model_Player
};
var backgammon_model_Stone = function(param1,param2,param3) {
	if(param3 == null) {
		param3 = 0;
	}
	if(param1 == null) {
		param1 = false;
	}
	if(!param1) {
		return;
	}
	this.color = param2;
	this.index = param3;
	return;
};
$hxClasses["backgammon.model.Stone"] = backgammon_model_Stone;
backgammon_model_Stone.__name__ = ["backgammon","model","Stone"];
backgammon_model_Stone.__interfaces__ = [openfl_utils_IExternalizable];
backgammon_model_Stone.prototype = {
	color: null
	,index: null
	,readExternal: function(param1) {
		this.color = backgammon_model_enum1_Color.getByOrdinal(param1.readInt());
		this.index = param1.readInt();
		return;
	}
	,writeExternal: function(param1) {
		param1.writeInt(this.color.get_ordinal());
		param1.writeInt(this.index);
		return;
	}
	,__class__: backgammon_model_Stone
};
var backgammon_model_enum1_Color = function(param1,param2,param3) {
	this.name = param1;
	this._ordinal = param2;
	this._frame = param3;
	return;
};
$hxClasses["backgammon.model.enum1.Color"] = backgammon_model_enum1_Color;
backgammon_model_enum1_Color.__name__ = ["backgammon","model","enum1","Color"];
backgammon_model_enum1_Color.getOpposite = function(param1) {
	if(param1 == backgammon_model_enum1_Color.Red) {
		return backgammon_model_enum1_Color.White;
	}
	return backgammon_model_enum1_Color.Red;
};
backgammon_model_enum1_Color.getByOrdinal = function(param1) {
	if(param1 == backgammon_model_enum1_Color.Red._ordinal) {
		return backgammon_model_enum1_Color.Red;
	}
	if(param1 == backgammon_model_enum1_Color.White._ordinal) {
		return backgammon_model_enum1_Color.White;
	}
	throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown checker color ordinal: " + param1));
};
backgammon_model_enum1_Color.prototype = {
	name: null
	,_ordinal: null
	,_frame: null
	,get_ordinal: function() {
		return this._ordinal;
	}
	,get_frame: function() {
		return this._frame;
	}
	,__class__: backgammon_model_enum1_Color
	,__properties__: {get_frame:"get_frame",get_ordinal:"get_ordinal"}
};
var backgammon_model_enum1_Difficulty = function(param1,param2) {
	this._ordinal = param1;
	this.name = param2;
	return;
};
$hxClasses["backgammon.model.enum1.Difficulty"] = backgammon_model_enum1_Difficulty;
backgammon_model_enum1_Difficulty.__name__ = ["backgammon","model","enum1","Difficulty"];
backgammon_model_enum1_Difficulty.getByOrdinal = function(param1) {
	if(param1 == backgammon_model_enum1_Difficulty.Easy._ordinal) {
		return backgammon_model_enum1_Difficulty.Easy;
	}
	if(param1 == backgammon_model_enum1_Difficulty.Medium._ordinal) {
		return backgammon_model_enum1_Difficulty.Medium;
	}
	if(param1 == backgammon_model_enum1_Difficulty.Hard._ordinal) {
		return backgammon_model_enum1_Difficulty.Hard;
	}
	if(param1 == backgammon_model_enum1_Difficulty.Expert._ordinal) {
		return backgammon_model_enum1_Difficulty.Expert;
	}
	if(param1 == backgammon_model_enum1_Difficulty.NA._ordinal) {
		return backgammon_model_enum1_Difficulty.NA;
	}
	throw new js__$Boot_HaxeError(new openfl_errors_Error("Unknown difficulty ordinal: " + param1));
};
backgammon_model_enum1_Difficulty.prototype = {
	name: null
	,_ordinal: null
	,get_ordinal: function() {
		return this._ordinal;
	}
	,__class__: backgammon_model_enum1_Difficulty
	,__properties__: {get_ordinal:"get_ordinal"}
};
var backgammon_model_logic_Move = function() {
	this.isBearOff = false;
	this._isDisposed = false;
	var _loc_2 = backgammon_model_logic_Move.instanceCount + 1;
	backgammon_model_logic_Move.instanceCount = _loc_2;
	return;
};
$hxClasses["backgammon.model.logic.Move"] = backgammon_model_logic_Move;
backgammon_model_logic_Move.__name__ = ["backgammon","model","logic","Move"];
backgammon_model_logic_Move.getInstance = function(param1,param2,param3,param4,param5) {
	var _loc_6 = null;
	if(backgammon_model_logic_Move._dropped.length > 0) {
		_loc_6 = backgammon_model_logic_Move._dropped.pop();
		if(!_loc_6._isDisposed) {
			_loc_6.dispose();
		}
	} else if(backgammon_model_logic_Move._instanceHead == backgammon_model_logic_Move._instancePool.length) {
		_loc_6 = new backgammon_model_logic_Move();
		backgammon_model_logic_Move._instancePool.push(_loc_6);
		var _loc_8 = backgammon_model_logic_Move._instanceHead + 1;
		backgammon_model_logic_Move._instanceHead = _loc_8;
	} else {
		_loc_6 = backgammon_model_logic_Move._instancePool[backgammon_model_logic_Move._instanceHead];
		if(!_loc_6._isDisposed) {
			_loc_6.dispose();
		}
		var _loc_81 = backgammon_model_logic_Move._instanceHead + 1;
		backgammon_model_logic_Move._instanceHead = _loc_81;
	}
	_loc_6._isDisposed = false;
	_loc_6.initialize(param1,param2,param3,param4,param5);
	return _loc_6;
};
backgammon_model_logic_Move.disposeInstance = function(param1) {
	backgammon_model_logic_Move._dropped.push(param1);
	return;
};
backgammon_model_logic_Move.gc = function() {
	backgammon_model_logic_Move._instanceHead = 0;
	backgammon_model_logic_Move._dropped = [];
	return;
};
backgammon_model_logic_Move.prototype = {
	_isDisposed: null
	,player: null
	,sourcePlace: null
	,sourceBar: null
	,stone: null
	,die: null
	,destIndex: null
	,isEnter: null
	,isBearOff: null
	,initialize: function(param1,param2,param3,param4,param5) {
		this.destIndex = 0;
		this.isEnter = false;
		this.isBearOff = false;
		this.player = param1;
		this.sourcePlace = param2;
		this.sourceBar = param3;
		this.stone = param4;
		this.die = param5;
		if(this.sourceBar != null) {
			this.isEnter = true;
			if(param1.index == 2) {
				this.destIndex = 23 - (param5.value - 1 | 0);
			} else {
				this.destIndex = (param5.value | 0) - 1;
			}
		} else if(this.sourcePlace != null) {
			this.destIndex = param2.index + (param1.index == 1?param5.value | 0:-(param5.value | 0));
		}
		return this;
	}
	,dispose: function() {
		this.player = null;
		this.sourcePlace = null;
		this.sourceBar = null;
		this.stone = null;
		this.die = null;
		this.destIndex = 0;
		this.isEnter = false;
		this.isBearOff = false;
		return;
	}
	,equals: function(param1) {
		if(param1 == null) {
			return false;
		}
		if(this.player != param1.player) {
			return false;
		}
		if(this.sourcePlace != param1.sourcePlace) {
			return false;
		}
		if(this.sourceBar != param1.sourceBar) {
			return false;
		}
		if(this.stone != param1.stone) {
			return false;
		}
		if(this.die.value != param1.die.value) {
			return false;
		}
		if(this.destIndex != param1.destIndex) {
			return false;
		}
		if(this.isEnter != param1.isEnter) {
			return false;
		}
		if(this.isBearOff != param1.isBearOff) {
			return false;
		}
		return true;
	}
	,__class__: backgammon_model_logic_Move
};
// var googleAnalytics_Campaign = function(type) {
// 	this.responseCount = 0;
// 	if(type != "direct" && type != "organic" && type != "referral") {
// 		googleAnalytics_Tracker._raiseError("Campaign type has to be one of the Campaign::TYPE_* constant values.","Campaign.new");
// 	}
// 	this.type = type;
// 	switch(type) {
// 	case "direct":
// 		this.name = "(direct)";
// 		this.source = "(direct)";
// 		this.medium = "(none)";
// 		break;
// 	case "organic":
// 		this.name = "(organic)";
// 		this.medium = "organic";
// 		break;
// 	case "referral":
// 		this.name = "(referral)";
// 		this.medium = "referral";
// 		break;
// 	}
// 	this.creationTime = new googleAnalytics_DateTime();
// };
// $hxClasses["googleAnalytics.Campaign"] = googleAnalytics_Campaign;
// googleAnalytics_Campaign.__name__ = ["googleAnalytics","Campaign"];
// googleAnalytics_Campaign.createFromReferrer = function(url) {
// 	var instance = new googleAnalytics_Campaign("referral");
// 	var urlInfo = new googleAnalytics_URLParser(url);
// 	instance.source = urlInfo.host;
// 	instance.content = urlInfo.path;
// 	return instance;
// };
// googleAnalytics_Campaign.prototype = {
// 	type: null
// 	,creationTime: null
// 	,responseCount: null
// 	,id: null
// 	,source: null
// 	,gClickId: null
// 	,dClickId: null
// 	,name: null
// 	,medium: null
// 	,term: null
// 	,content: null
// 	,validate: function() {
// 		if(this.source == null) {
// 			googleAnalytics_Tracker._raiseError("Campaigns need to have at least the \"source\" attribute defined.","Campaign.validate");
// 		}
// 	}
// 	,setType: function(type) {
// 		this.type = type;
// 	}
// 	,getType: function() {
// 		return this.type;
// 	}
// 	,setCreationTime: function(creationTime) {
// 		this.creationTime = creationTime;
// 	}
// 	,getCreationTime: function() {
// 		return this.creationTime;
// 	}
// 	,setResponseCount: function(responseCount) {
// 		this.responseCount = responseCount;
// 	}
// 	,getResponseCount: function() {
// 		return this.responseCount;
// 	}
// 	,increaseResponseCount: function(byAmount) {
// 		if(byAmount == null) {
// 			byAmount = 1;
// 		}
// 		this.responseCount += byAmount;
// 	}
// 	,setId: function(id) {
// 		this.id = id;
// 	}
// 	,getId: function() {
// 		return this.id;
// 	}
// 	,setSource: function(source) {
// 		this.source = source;
// 	}
// 	,getSource: function() {
// 		return this.source;
// 	}
// 	,setGClickId: function(gClickId) {
// 		this.gClickId = gClickId;
// 	}
// 	,getGClickId: function() {
// 		return this.gClickId;
// 	}
// 	,setDClickId: function(dClickId) {
// 		this.dClickId = dClickId;
// 	}
// 	,getDClickId: function() {
// 		return this.dClickId;
// 	}
// 	,setName: function(name) {
// 		this.name = name;
// 	}
// 	,getName: function() {
// 		return this.name;
// 	}
// 	,setMedium: function(medium) {
// 		this.medium = medium;
// 	}
// 	,getMedium: function() {
// 		return this.medium;
// 	}
// 	,setTerm: function(term) {
// 		this.term = term;
// 	}
// 	,getTerm: function() {
// 		return this.term;
// 	}
// 	,setContent: function(content) {
// 		this.content = content;
// 	}
// 	,getContent: function() {
// 		return this.content;
// 	}
// 	,__class__: googleAnalytics_Campaign
// };
// var googleAnalytics_Config = function() {
// 	this.sitespeedSampleRate = 1;
// 	this.endPointPath = "/__utm.gif";
// 	this.endPointHost = "www.google-analytics.com";
// 	this.requestTimeout = 1;
// 	this.fireAndForget = false;
// 	this.sendOnShutdown = false;
// 	this.errorSeverity = 2;
// };
// $hxClasses["googleAnalytics.Config"] = googleAnalytics_Config;
// googleAnalytics_Config.__name__ = ["googleAnalytics","Config"];
// googleAnalytics_Config.prototype = {
// 	errorSeverity: null
// 	,sendOnShutdown: null
// 	,fireAndForget: null
// 	,loggingCallback: null
// 	,requestTimeout: null
// 	,endPointHost: null
// 	,endPointPath: null
// 	,sitespeedSampleRate: null
// 	,getErrorSeverity: function() {
// 		return this.errorSeverity;
// 	}
// 	,setErrorSeverity: function(errorSeverity) {
// 		this.errorSeverity = errorSeverity;
// 	}
// 	,getSendOnShutdown: function() {
// 		return this.sendOnShutdown;
// 	}
// 	,setSendOnShutdown: function(sendOnShutdown) {
// 		this.sendOnShutdown = sendOnShutdown;
// 	}
// 	,getFireAndForget: function() {
// 		return this.fireAndForget;
// 	}
// 	,setFireAndForget: function(fireAndForget) {
// 		this.fireAndForget = fireAndForget;
// 	}
// 	,getLoggingCallback: function() {
// 		return this.loggingCallback;
// 	}
// 	,setLoggingCallback: function(cb) {
// 		this.loggingCallback = cb;
// 	}
// 	,getRequestTimeout: function() {
// 		return this.requestTimeout;
// 	}
// 	,setRequestTimeout: function(requestTimeout) {
// 		this.requestTimeout = requestTimeout;
// 	}
// 	,getEndPointHost: function() {
// 		return this.endPointHost;
// 	}
// 	,setEndPointHost: function(endPointHost) {
// 		this.endPointHost = endPointHost;
// 	}
// 	,getEndPointPath: function() {
// 		return this.endPointPath;
// 	}
// 	,setEndPointPath: function(endPointPath) {
// 		this.endPointPath = endPointPath;
// 	}
// 	,getSitespeedSampleRate: function() {
// 		return this.sitespeedSampleRate;
// 	}
// 	,setSitespeedSampleRate: function(sitespeedSampleRate) {
// 		if(sitespeedSampleRate < 0 || sitespeedSampleRate > 100) {
// 			googleAnalytics_Tracker._raiseError("For consistency with ga.js, sample rates must be specified as a number between 0 and 100.","config.setSitespeedSampleRate");
// 			return;
// 		}
// 		this.sitespeedSampleRate = sitespeedSampleRate;
// 	}
// 	,__class__: googleAnalytics_Config
// };
// var googleAnalytics_CustomVariable = function(index,name,value,scope) {
// 	if(scope == null) {
// 		scope = 0;
// 	}
// 	if(index == null) {
// 		index = 0;
// 	}
// 	this.scope = 3;
// 	if(index != 0) {
// 		this.setIndex(index);
// 	}
// 	if(name != null) {
// 		this.setName(name);
// 	}
// 	if(value != null) {
// 		this.setValue(value);
// 	}
// 	if(scope != 0) {
// 		this.setScope(scope);
// 	}
// };
// $hxClasses["googleAnalytics.CustomVariable"] = googleAnalytics_CustomVariable;
// googleAnalytics_CustomVariable.__name__ = ["googleAnalytics","CustomVariable"];
// googleAnalytics_CustomVariable.prototype = {
// 	index: null
// 	,name: null
// 	,value: null
// 	,scope: null
// 	,validate: function() {
// 		if((this.name + Std.string(this.value)).length > 128) {
// 			googleAnalytics_Tracker._raiseError("Custom Variable combined name and value length must not be larger than 128 bytes.","CustomVariable.validate");
// 		}
// 	}
// 	,getIndex: function() {
// 		return this.index;
// 	}
// 	,setIndex: function(index) {
// 		if(index < 1 || index > 5) {
// 			googleAnalytics_Tracker._raiseError("Custom Variable index has to be between 1 and 5.","CustomVariable.setIndex");
// 		}
// 		this.index = index;
// 	}
// 	,getName: function() {
// 		return this.name;
// 	}
// 	,setName: function(name) {
// 		this.name = name;
// 	}
// 	,getValue: function() {
// 		return this.value;
// 	}
// 	,setValue: function(value) {
// 		this.value = value;
// 	}
// 	,getScope: function() {
// 		return this.scope;
// 	}
// 	,setScope: function(scope) {
// 		if(scope != 3 && scope != 2 && scope != 1) {
// 			googleAnalytics_Tracker._raiseError("Custom Variable scope has to be one of the CustomVariable::SCOPE_* constant values.","CustomVariable.setScope");
// 		}
// 		this.scope = scope;
// 	}
// 	,__class__: googleAnalytics_CustomVariable
// };
// var googleAnalytics_DateTime = function(current) {
// 	if(current == null) {
// 		this.date = Math.round(new Date().getTime()) + "";
// 	} else {
// 		this.date = current;
// 	}
// };
// $hxClasses["googleAnalytics.DateTime"] = googleAnalytics_DateTime;
// googleAnalytics_DateTime.__name__ = ["googleAnalytics","DateTime"];
// googleAnalytics_DateTime.prototype = {
// 	date: null
// 	,toString: function() {
// 		return this.date;
// 	}
// 	,__class__: googleAnalytics_DateTime
// };
// var googleAnalytics_Event = function(category,action,label,value,noninteraction) {
// 	if(noninteraction == null) {
// 		noninteraction = false;
// 	}
// 	if(value == null) {
// 		value = 0;
// 	}
// 	this.noninteraction = false;
// 	if(category != null) {
// 		this.setCategory(category);
// 	}
// 	if(action != null) {
// 		this.setAction(action);
// 	}
// 	if(label != null) {
// 		this.setLabel(label);
// 	}
// 	this.setValue(value);
// 	this.setNoninteraction(noninteraction);
// };
// $hxClasses["googleAnalytics.Event"] = googleAnalytics_Event;
// googleAnalytics_Event.__name__ = ["googleAnalytics","Event"];
// googleAnalytics_Event.prototype = {
// 	category: null
// 	,action: null
// 	,label: null
// 	,value: null
// 	,noninteraction: null
// 	,validate: function() {
// 		if(this.category == null || this.action == null) {
// 			googleAnalytics_Tracker._raiseError("Events need at least to have a category and action defined.","Event.validate");
// 		}
// 	}
// 	,getCategory: function() {
// 		return this.category;
// 	}
// 	,setCategory: function(category) {
// 		this.category = category;
// 	}
// 	,getAction: function() {
// 		return this.action;
// 	}
// 	,setAction: function(action) {
// 		this.action = action;
// 	}
// 	,getLabel: function() {
// 		return this.label;
// 	}
// 	,setLabel: function(label) {
// 		this.label = label;
// 	}
// 	,getValue: function() {
// 		return this.value;
// 	}
// 	,setValue: function(value) {
// 		this.value = value;
// 	}
// 	,getNoninteraction: function() {
// 		return this.noninteraction;
// 	}
// 	,setNoninteraction: function(value) {
// 		this.noninteraction = value;
// 	}
// 	,__class__: googleAnalytics_Event
// };
// var googleAnalytics_Item = function() {
// 	this.quantity = 1;
// };
// $hxClasses["googleAnalytics.Item"] = googleAnalytics_Item;
// googleAnalytics_Item.__name__ = ["googleAnalytics","Item"];
// googleAnalytics_Item.prototype = {
// 	orderId: null
// 	,sku: null
// 	,name: null
// 	,variation: null
// 	,price: null
// 	,quantity: null
// 	,validate: function() {
// 		if(this.sku == null) {
// 			googleAnalytics_Tracker._raiseError("Items need to have a sku/product code defined.","Item.validate");
// 		}
// 	}
// 	,getOrderId: function() {
// 		return this.orderId;
// 	}
// 	,setOrderId: function(orderId) {
// 		this.orderId = orderId;
// 	}
// 	,getSku: function() {
// 		return this.sku;
// 	}
// 	,setSku: function(sku) {
// 		this.sku = sku;
// 	}
// 	,getName: function() {
// 		return this.name;
// 	}
// 	,setName: function(name) {
// 		this.name = name;
// 	}
// 	,getVariation: function() {
// 		return this.variation;
// 	}
// 	,setVariation: function(variation) {
// 		this.variation = variation;
// 	}
// 	,getPrice: function() {
// 		return this.price;
// 	}
// 	,setPrice: function(price) {
// 		this.price = price;
// 	}
// 	,getQuantity: function() {
// 		return this.quantity;
// 	}
// 	,setQuantity: function(quantity) {
// 		this.quantity = quantity;
// 	}
// 	,__class__: googleAnalytics_Item
// };
// var googleAnalytics_Page = function(path) {
// 	this.setPath(path);
// };
// $hxClasses["googleAnalytics.Page"] = googleAnalytics_Page;
// googleAnalytics_Page.__name__ = ["googleAnalytics","Page"];
// googleAnalytics_Page.prototype = {
// 	path: null
// 	,title: null
// 	,charset: null
// 	,referrer: null
// 	,loadTime: null
// 	,setPath: function(path) {
// 		if(path != null && path.charAt(0) != "/") {
// 			googleAnalytics_Tracker._raiseError("The page path should always start with a slash (\"/\").","Page.setPath");
// 		}
// 		this.path = path;
// 	}
// 	,getPath: function() {
// 		return this.path;
// 	}
// 	,setTitle: function(title) {
// 		this.title = title;
// 	}
// 	,getTitle: function() {
// 		return this.title;
// 	}
// 	,setCharset: function(encoding) {
// 		this.charset = encoding;
// 	}
// 	,getCharset: function() {
// 		return this.charset;
// 	}
// 	,setReferrer: function(referrer) {
// 		this.referrer = referrer;
// 	}
// 	,getReferrer: function() {
// 		return this.referrer;
// 	}
// 	,setLoadTime: function(loadTime) {
// 		this.loadTime = loadTime;
// 	}
// 	,getLoadTime: function() {
// 		return this.loadTime;
// 	}
// 	,__class__: googleAnalytics_Page
// };
// var googleAnalytics_Session = function() {
// 	this.setSessionId(this.generateSessionId());
// 	this.setTrackCount(0);
// 	this.setStartTime(new googleAnalytics_DateTime());
// };
// $hxClasses["googleAnalytics.Session"] = googleAnalytics_Session;
// googleAnalytics_Session.__name__ = ["googleAnalytics","Session"];
// googleAnalytics_Session.prototype = {
// 	sessionId: null
// 	,trackCount: null
// 	,startTime: null
// 	,fromUtmb: function(value) {
// 		var parts = value.split(".");
// 		if(parts.length != 4) {
// 			googleAnalytics_Tracker._raiseError("The given \"__utmb\" cookie value is invalid.","Session.fromUtmb");
// 			return this;
// 		}
// 		this.setTrackCount(googleAnalytics_internals_Util.parseInt(parts[1],0));
// 		this.setStartTime(new googleAnalytics_DateTime(parts[3]));
// 		return this;
// 	}
// 	,generateSessionId: function() {
// 		return googleAnalytics_internals_Util.generate32bitRandom();
// 	}
// 	,getSessionId: function() {
// 		return this.sessionId;
// 	}
// 	,setSessionId: function(sessionId) {
// 		this.sessionId = sessionId;
// 	}
// 	,getTrackCount: function() {
// 		return this.trackCount;
// 	}
// 	,setTrackCount: function(trackCount) {
// 		this.trackCount = trackCount;
// 	}
// 	,increaseTrackCount: function(byAmount) {
// 		if(byAmount == null) {
// 			byAmount = 1;
// 		}
// 		this.trackCount += byAmount;
// 	}
// 	,getStartTime: function() {
// 		return this.startTime;
// 	}
// 	,setStartTime: function(startTime) {
// 		this.startTime = startTime;
// 	}
// 	,__class__: googleAnalytics_Session
// };
// var googleAnalytics_SocialInteraction = function(network,action,target) {
// 	if(network != null) {
// 		this.setNetwork(network);
// 	}
// 	if(action != null) {
// 		this.setAction(action);
// 	}
// 	if(target != null) {
// 		this.setTarget(target);
// 	}
// };
// $hxClasses["googleAnalytics.SocialInteraction"] = googleAnalytics_SocialInteraction;
// googleAnalytics_SocialInteraction.__name__ = ["googleAnalytics","SocialInteraction"];
// googleAnalytics_SocialInteraction.prototype = {
// 	network: null
// 	,action: null
// 	,target: null
// 	,validate: function() {
// 		if(this.network == null || this.action == null) {
// 			googleAnalytics_Tracker._raiseError("Social interactions need to have at least the \"network\" and \"action\" attributes defined.","SocialInteraction.validate");
// 		}
// 	}
// 	,setNetwork: function(network) {
// 		this.network = network;
// 	}
// 	,getNetwork: function() {
// 		return this.network;
// 	}
// 	,setAction: function(action) {
// 		this.action = action;
// 	}
// 	,getAction: function() {
// 		return this.action;
// 	}
// 	,setTarget: function(target) {
// 		this.target = target;
// 	}
// 	,getTarget: function() {
// 		return this.target;
// 	}
// 	,__class__: googleAnalytics_SocialInteraction
// };
// var googleAnalytics_Tracker = function(accountId,domainName,config) {
// 	this.allowHash = true;
// 	this.customVariables = [];
// 	googleAnalytics_Tracker.setConfig(config != null?config:new googleAnalytics_Config());
// 	this.setAccountId(accountId);
// 	this.setDomainName(domainName);
// };
// $hxClasses["googleAnalytics.Tracker"] = googleAnalytics_Tracker;
// googleAnalytics_Tracker.__name__ = ["googleAnalytics","Tracker"];
// googleAnalytics_Tracker.config = null;
// googleAnalytics_Tracker.getConfig = function() {
// 	return googleAnalytics_Tracker.config;
// };
// googleAnalytics_Tracker.setConfig = function(config) {
// 	googleAnalytics_Tracker.config = config;
// };
// googleAnalytics_Tracker._raiseError = function(message,method) {
// 	message = method + "(): " + message;
// 	switch(googleAnalytics_Tracker.config != null?googleAnalytics_Tracker.config.getErrorSeverity():0) {
// 	case 0:
// 		break;
// 	case 1:
// 		haxe_Log.trace(message,{ fileName : "Tracker.hx", lineNumber : 253, className : "googleAnalytics.Tracker", methodName : "_raiseError"});
// 		break;
// 	case 2:
// 		throw new js__$Boot_HaxeError(message);
// 		break;
// 	default:
// 	}
// };
// googleAnalytics_Tracker.prototype = {
// 	accountId: null
// 	,domainName: null
// 	,allowHash: null
// 	,customVariables: null
// 	,campaign: null
// 	,setAccountId: function(value) {
// 		if(!new EReg("^(UA|MO)-[0-9]*-[0-9]*$","").match(value)) {
// 			googleAnalytics_Tracker._raiseError("\"" + value + "\" is not a valid Google Analytics account ID.","Tracker.setAccountId");
// 		}
// 		this.accountId = value;
// 	}
// 	,getAccountId: function() {
// 		return this.accountId;
// 	}
// 	,setDomainName: function(value) {
// 		this.domainName = value;
// 	}
// 	,getDomainName: function() {
// 		return this.domainName;
// 	}
// 	,setAllowHash: function(value) {
// 		this.allowHash = value;
// 	}
// 	,getAllowHash: function() {
// 		return this.allowHash;
// 	}
// 	,addCustomVariable: function(customVariable) {
// 		customVariable.validate();
// 		this.customVariables[customVariable.getIndex()] = customVariable;
// 	}
// 	,getCustomVariables: function() {
// 		return this.customVariables;
// 	}
// 	,removeCustomVariable: function(index) {
// 		HxOverrides.remove(this.customVariables,this.customVariables[index]);
// 	}
// 	,setCampaign: function(campaign) {
// 		if(campaign != null) {
// 			campaign.validate();
// 		}
// 		this.campaign = campaign;
// 	}
// 	,getCampaign: function() {
// 		return this.campaign;
// 	}
// 	,trackPageview: function(page,session,visitor) {
// 		var request = new googleAnalytics_internals_request_PageviewRequest(googleAnalytics_Tracker.config);
// 		request.setPage(page);
// 		request.setSession(session);
// 		request.setVisitor(visitor);
// 		request.setTracker(this);
// 		request.send();
// 	}
// 	,trackEvent: function(event,session,visitor) {
// 		event.validate();
// 		var request = new googleAnalytics_internals_request_EventRequest(googleAnalytics_Tracker.config);
// 		request.setEvent(event);
// 		request.setSession(session);
// 		request.setVisitor(visitor);
// 		request.setTracker(this);
// 		request.send();
// 	}
// 	,trackTransaction: function(transaction,session,visitor) {
// 		transaction.validate();
// 		var transactionRequest = new googleAnalytics_internals_request_TransactionRequest(googleAnalytics_Tracker.config);
// 		transactionRequest.setTransaction(transaction);
// 		transactionRequest.setSession(session);
// 		transactionRequest.setVisitor(visitor);
// 		transactionRequest.setTracker(this);
// 		transactionRequest.send();
// 		var tmp = transaction.getItems().iterator();
// 		while(tmp.hasNext()) {
// 			var item = tmp.next();
// 			item.validate();
// 			var itemRequest = new googleAnalytics_internals_request_ItemRequest(googleAnalytics_Tracker.config);
// 			itemRequest.setItem(item);
// 			itemRequest.setSession(session);
// 			itemRequest.setVisitor(visitor);
// 			itemRequest.setTracker(this);
// 			itemRequest.send();
// 		}
// 	}
// 	,trackSocial: function(socialInteraction,page,session,visitor) {
// 		var request = new googleAnalytics_internals_request_SocialInteractionRequest(googleAnalytics_Tracker.config);
// 		request.setSocialInteraction(socialInteraction);
// 		request.setPage(page);
// 		request.setSession(session);
// 		request.setVisitor(visitor);
// 		request.setTracker(this);
// 		request.send();
// 	}
// 	,__class__: googleAnalytics_Tracker
// };
// var googleAnalytics_Transaction = function() {
// 	this.items = new haxe_ds_StringMap();
// };
// $hxClasses["googleAnalytics.Transaction"] = googleAnalytics_Transaction;
// googleAnalytics_Transaction.__name__ = ["googleAnalytics","Transaction"];
// googleAnalytics_Transaction.prototype = {
// 	orderId: null
// 	,affiliation: null
// 	,total: null
// 	,tax: null
// 	,shipping: null
// 	,city: null
// 	,region: null
// 	,country: null
// 	,items: null
// 	,validate: function() {
// 		if(this.items == null) {
// 			googleAnalytics_Tracker._raiseError("Transactions need to consist of at least one item.","Transaction.validate");
// 		}
// 	}
// 	,addItem: function(item) {
// 		item.setOrderId(this.orderId);
// 		var key = item.getSku();
// 		var _this = this.items;
// 		if(__map_reserved[key] != null) {
// 			_this.setReserved(key,item);
// 		} else {
// 			_this.h[key] = item;
// 		}
// 	}
// 	,getItems: function() {
// 		return this.items;
// 	}
// 	,getOrderId: function() {
// 		return this.orderId;
// 	}
// 	,setOrderId: function(orderId) {
// 		this.orderId = orderId;
// 		var _this = this.items;
// 		var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
// 		while(tmp.hasNext()) tmp.next().setOrderId(orderId);
// 	}
// 	,getAffiliation: function() {
// 		return this.affiliation;
// 	}
// 	,setAffiliation: function(affiliation) {
// 		this.affiliation = affiliation;
// 	}
// 	,getTotal: function() {
// 		return this.total;
// 	}
// 	,setTotal: function(total) {
// 		this.total = total;
// 	}
// 	,getTax: function() {
// 		return this.tax;
// 	}
// 	,setTax: function(tax) {
// 		this.tax = tax;
// 	}
// 	,getShipping: function() {
// 		return this.shipping;
// 	}
// 	,setShipping: function(shipping) {
// 		this.shipping = shipping;
// 	}
// 	,getCity: function() {
// 		return this.city;
// 	}
// 	,setCity: function(city) {
// 		this.city = city;
// 	}
// 	,getRegion: function() {
// 		return this.region;
// 	}
// 	,setRegion: function(region) {
// 		this.region = region;
// 	}
// 	,getCountry: function() {
// 		return this.country;
// 	}
// 	,setCountry: function(country) {
// 		this.country = country;
// 	}
// 	,__class__: googleAnalytics_Transaction
// };
// var googleAnalytics_URLParser = function(url) {
// 	this.url = url;
// 	var r = new EReg("^(?:(?![^:@]+:[^:@/]*@)([^:/?#.]+):)?(?://)?((?:(([^:@]*)(?::([^:@]*))?)?@)?([^:/?#]*)(?::(\\d*))?)(((/(?:[^?#](?![^?#/]*\\.[^?#/.]+(?:[?#]|$)))*/?)?([^?#/]*))(?:\\?([^#]*))?(?:#(.*))?)","");
// 	r.match(url);
// 	var _g1 = 0;
// 	var _g = googleAnalytics_URLParser.parts.length;
// 	while(_g1 < _g) {
// 		var i = _g1++;
// 		var value = r.matched(i);
// 		this[googleAnalytics_URLParser.parts[i]] = value;
// 	}
// };
// $hxClasses["googleAnalytics.URLParser"] = googleAnalytics_URLParser;
// googleAnalytics_URLParser.__name__ = ["googleAnalytics","URLParser"];
// googleAnalytics_URLParser.parse = function(url) {
// 	return new googleAnalytics_URLParser(url);
// };
// googleAnalytics_URLParser.prototype = {
// 	url: null
// 	,source: null
// 	,protocol: null
// 	,authority: null
// 	,userInfo: null
// 	,user: null
// 	,password: null
// 	,host: null
// 	,port: null
// 	,relative: null
// 	,path: null
// 	,directory: null
// 	,file: null
// 	,query: null
// 	,anchor: null
// 	,toString: function() {
// 		var s = "For Url -> " + this.url + "\n";
// 		var _g1 = 0;
// 		var _g = googleAnalytics_URLParser.parts.length;
// 		while(_g1 < _g) {
// 			var i = _g1++;
// 			s += googleAnalytics_URLParser.parts[i] + ": " + Std.string(Reflect.field(this,googleAnalytics_URLParser.parts[i])) + (i == googleAnalytics_URLParser.parts.length - 1?"":"\n");
// 		}
// 		return s;
// 	}
// 	,__class__: googleAnalytics_URLParser
// };
// var googleAnalytics_Visitor = function() {
// 	var now = new googleAnalytics_DateTime();
// 	this.uniqueId = 0;
// 	this.setFirstVisitTime(now);
// 	this.setPreviousVisitTime(now);
// 	this.setCurrentVisitTime(now);
// 	this.setVisitCount(1);
// };
// $hxClasses["googleAnalytics.Visitor"] = googleAnalytics_Visitor;
// googleAnalytics_Visitor.__name__ = ["googleAnalytics","Visitor"];
// googleAnalytics_Visitor.prototype = {
// 	uniqueId: null
// 	,firstVisitTime: null
// 	,previousVisitTime: null
// 	,currentVisitTime: null
// 	,visitCount: null
// 	,ipAddress: null
// 	,userAgent: null
// 	,locale: null
// 	,flashVersion: null
// 	,javaEnabled: null
// 	,screenColorDepth: null
// 	,screenResolution: null
// 	,fromUtma: function(value) {
// 		var parts = value.split(".");
// 		if(parts.length != 6) {
// 			googleAnalytics_Tracker._raiseError("The given \"__utma\" cookie value is invalid.","Visitor.fromUtma");
// 			return this;
// 		}
// 		this.setUniqueId(googleAnalytics_internals_Util.parseInt(parts[1],0));
// 		this.setFirstVisitTime(new googleAnalytics_DateTime(parts[2]));
// 		this.setPreviousVisitTime(new googleAnalytics_DateTime(parts[3]));
// 		this.setCurrentVisitTime(new googleAnalytics_DateTime(parts[4]));
// 		this.setVisitCount(googleAnalytics_internals_Util.parseInt(parts[5],0));
// 		return this;
// 	}
// 	,generateHash: function() {
// 		return googleAnalytics_internals_Util.generateHash(this.userAgent + this.screenResolution + this.screenColorDepth);
// 	}
// 	,generateUniqueId: function() {
// 		return (googleAnalytics_internals_Util.generate32bitRandom() ^ this.generateHash()) & 2147483647;
// 	}
// 	,setUniqueId: function(value) {
// 		if(value < 0 || value > 2147483647) {
// 			googleAnalytics_Tracker._raiseError("Visitor unique ID has to be a 32-bit integer between 0 and " + 2147483647 + ".","Visitor.setUniqueId");
// 		}
// 		this.uniqueId = value;
// 	}
// 	,getUniqueId: function() {
// 		if(this.uniqueId == 0) {
// 			this.uniqueId = this.generateUniqueId();
// 		}
// 		return this.uniqueId;
// 	}
// 	,addSession: function(session) {
// 		var startTime = session.getStartTime();
// 		if(startTime != this.currentVisitTime) {
// 			this.previousVisitTime = this.currentVisitTime;
// 			this.currentVisitTime = startTime;
// 			++this.visitCount;
// 		}
// 	}
// 	,setFirstVisitTime: function(value) {
// 		this.firstVisitTime = value;
// 	}
// 	,getFirstVisitTime: function() {
// 		return this.firstVisitTime;
// 	}
// 	,setPreviousVisitTime: function(value) {
// 		this.previousVisitTime = value;
// 	}
// 	,getPreviousVisitTime: function() {
// 		return this.previousVisitTime;
// 	}
// 	,setCurrentVisitTime: function(value) {
// 		this.currentVisitTime = value;
// 	}
// 	,getCurrentVisitTime: function() {
// 		return this.currentVisitTime;
// 	}
// 	,setVisitCount: function(value) {
// 		this.visitCount = value;
// 	}
// 	,getVisitCount: function() {
// 		return this.visitCount;
// 	}
// 	,setIpAddress: function(value) {
// 		this.ipAddress = value;
// 	}
// 	,getIpAddress: function() {
// 		return this.ipAddress;
// 	}
// 	,setUserAgent: function(value) {
// 		this.userAgent = value;
// 	}
// 	,getUserAgent: function() {
// 		return this.userAgent;
// 	}
// 	,setLocale: function(value) {
// 		this.locale = value;
// 	}
// 	,getLocale: function() {
// 		return this.locale;
// 	}
// 	,setFlashVersion: function(value) {
// 		this.flashVersion = value;
// 	}
// 	,getFlashVersion: function() {
// 		return this.flashVersion;
// 	}
// 	,setJavaEnabled: function(value) {
// 		this.javaEnabled = value;
// 	}
// 	,getJavaEnabled: function() {
// 		return this.javaEnabled;
// 	}
// 	,setScreenColorDepth: function(value) {
// 		this.screenColorDepth = value;
// 	}
// 	,getScreenColorDepth: function() {
// 		return this.screenColorDepth;
// 	}
// 	,setScreenResolution: function(value) {
// 		this.screenResolution = value;
// 	}
// 	,getScreenResolution: function() {
// 		return this.screenResolution;
// 	}
// 	,__class__: googleAnalytics_Visitor
// };
// var googleAnalytics_internals_ParameterHolder = function() {
// 	this.utmwv = "5.2.5";
// 	this.utmr = this.utmcs = this.utmfl = this.utmje = "0";
// };
// $hxClasses["googleAnalytics.internals.ParameterHolder"] = googleAnalytics_internals_ParameterHolder;
// googleAnalytics_internals_ParameterHolder.__name__ = ["googleAnalytics","internals","ParameterHolder"];
// googleAnalytics_internals_ParameterHolder.prototype = {
// 	utmwv: null
// 	,utmac: null
// 	,utmhn: null
// 	,utmvid: null
// 	,utmt: null
// 	,utms: null
// 	,utmn: null
// 	,utmcc: null
// 	,utme: null
// 	,utmni: null
// 	,utmu: null
// 	,utmp: null
// 	,utmdt: null
// 	,utmcs: null
// 	,utmr: null
// 	,utmip: null
// 	,utmul: null
// 	,utmfl: null
// 	,utmje: null
// 	,utmsc: null
// 	,utmsr: null
// 	,__utma: null
// 	,utmhid: null
// 	,__utmb: null
// 	,__utmc: null
// 	,utmipc: null
// 	,utmipn: null
// 	,utmipr: null
// 	,utmiqt: null
// 	,utmiva: null
// 	,utmtid: null
// 	,utmtst: null
// 	,utmtto: null
// 	,utmttx: null
// 	,utmtsp: null
// 	,utmtci: null
// 	,utmtrg: null
// 	,utmtco: null
// 	,utmcn: null
// 	,utmcr: null
// 	,utmcid: null
// 	,utmcsr: null
// 	,utmgclid: null
// 	,utmdclid: null
// 	,utmccn: null
// 	,utmcmd: null
// 	,utmctr: null
// 	,utmcct: null
// 	,utmcvr: null
// 	,__utmz: null
// 	,utmsn: null
// 	,utmsa: null
// 	,utmsid: null
// 	,__utmx: null
// 	,__utmv: null
// 	,toHashTable: function() {
// 		var hash = new haxe_ds_StringMap();
// 		var _g = 0;
// 		var _g1 = Type.getInstanceFields(googleAnalytics_internals_ParameterHolder);
// 		while(_g < _g1.length) {
// 			var property = _g1[_g];
// 			++_g;
// 			if(property.charAt(0) != "_" && !Reflect.isFunction(Reflect.field(this,property))) {
// 				var value = Reflect.field(this,property);
// 				if(__map_reserved[property] != null) {
// 					hash.setReserved(property,value);
// 				} else {
// 					hash.h[property] = value;
// 				}
// 			}
// 		}
// 		return hash;
// 	}
// 	,toQueryString: function() {
// 		var qs = "";
// 		var _g = 0;
// 		var _g1 = Type.getInstanceFields(googleAnalytics_internals_ParameterHolder);
// 		while(_g < _g1.length) {
// 			var property = _g1[_g];
// 			++_g;
// 			if(property.charAt(0) != "_" && !Reflect.isFunction(Reflect.field(this,property)) && Reflect.field(this,property) != null && Reflect.field(this,property) != "null") {
// 				qs += property + "=" + StringTools.replace(Std.string(Reflect.field(this,property)) + "","&","%26") + "&";
// 			}
// 		}
// 		return qs;
// 	}
// 	,__class__: googleAnalytics_internals_ParameterHolder
// };
// var googleAnalytics_internals_Util = function() { };
// $hxClasses["googleAnalytics.internals.Util"] = googleAnalytics_internals_Util;
// googleAnalytics_internals_Util.__name__ = ["googleAnalytics","internals","Util"];
// googleAnalytics_internals_Util.encodeUriComponent = function(value) {
// 	return googleAnalytics_internals_Util.convertToUriComponentEncoding(encodeURIComponent(value));
// };
// googleAnalytics_internals_Util.stringReplaceArray = function(s,sub,by) {
// 	var _g1 = 0;
// 	var _g = sub.length;
// 	while(_g1 < _g) {
// 		var i = _g1++;
// 		if(sub[i] == null) {
// 			continue;
// 		}
// 		s = StringTools.replace(s + " ",sub[i],by[i]);
// 	}
// 	return StringTools.trim(s);
// };
// googleAnalytics_internals_Util.parseInt = function(s,defaultVal) {
// 	if(s == null) {
// 		return defaultVal;
// 	} else {
// 		return Std.parseInt(s);
// 	}
// };
// googleAnalytics_internals_Util.convertToUriComponentEncoding = function(encodedValue) {
// 	return googleAnalytics_internals_Util.stringReplaceArray(encodedValue,["!","*","'","(",")"," ","+"],["%21","%2A","%27","%28","%29","%20","%20"]);
// };
// googleAnalytics_internals_Util.generate32bitRandom = function() {
// 	return Math.round(Math.random() * 2147483647);
// };
// googleAnalytics_internals_Util.generateHash = function(string) {
// 	var hash = 1;
// 	var current;
// 	var leftMost7;
// 	if(string != null && string != "") {
// 		hash = 0;
// 		var pos = string.length - 1;
// 		while(pos >= 0) {
// 			current = HxOverrides.cca(string,pos);
// 			hash = (hash << 6 & 268435455) + current + (current << 14);
// 			leftMost7 = hash & 266338304;
// 			if(leftMost7 != 0) {
// 				hash ^= leftMost7 >> 21;
// 			}
// 			--pos;
// 		}
// 	}
// 	return hash;
// };
// var googleAnalytics_internals_X10 = function() {
// 	this.projectData = new haxe_ds_StringMap();
// 	this.KEY = "k";
// 	this.VALUE = "v";
// 	this.SET = ["k","v"];
// 	this.DELIM_BEGIN = "(";
// 	this.DELIM_END = ")";
// 	this.DELIM_SET = "*";
// 	this.DELIM_NUM_VALUE = "!";
// 	this.MINIMUM = 1;
// 	this.ESCAPE_CHAR_MAP = new haxe_ds_StringMap();
// 	var _this = this.ESCAPE_CHAR_MAP;
// 	if(__map_reserved["'"] != null) {
// 		_this.setReserved("'","'0");
// 	} else {
// 		_this.h["'"] = "'0";
// 	}
// 	var _this1 = this.ESCAPE_CHAR_MAP;
// 	if(__map_reserved[")"] != null) {
// 		_this1.setReserved(")","'1");
// 	} else {
// 		_this1.h[")"] = "'1";
// 	}
// 	var _this2 = this.ESCAPE_CHAR_MAP;
// 	if(__map_reserved["*"] != null) {
// 		_this2.setReserved("*","'2");
// 	} else {
// 		_this2.h["*"] = "'2";
// 	}
// 	var _this3 = this.ESCAPE_CHAR_MAP;
// 	if(__map_reserved["!"] != null) {
// 		_this3.setReserved("!","'3");
// 	} else {
// 		_this3.h["!"] = "'3";
// 	}
// };
// $hxClasses["googleAnalytics.internals.X10"] = googleAnalytics_internals_X10;
// googleAnalytics_internals_X10.__name__ = ["googleAnalytics","internals","X10"];
// googleAnalytics_internals_X10.prototype = {
// 	projectData: null
// 	,KEY: null
// 	,VALUE: null
// 	,SET: null
// 	,DELIM_BEGIN: null
// 	,DELIM_END: null
// 	,DELIM_SET: null
// 	,DELIM_NUM_VALUE: null
// 	,ESCAPE_CHAR_MAP: null
// 	,MINIMUM: null
// 	,hasProject: function(projectId) {
// 		var _this = this.projectData;
// 		if(__map_reserved[projectId] != null) {
// 			return _this.existsReserved(projectId);
// 		} else {
// 			return _this.h.hasOwnProperty(projectId);
// 		}
// 	}
// 	,setKey: function(projectId,num,value) {
// 		this.setInternal(projectId,this.KEY,num,value);
// 	}
// 	,getKey: function(projectId,num) {
// 		return this.getInternal(projectId,this.KEY,num);
// 	}
// 	,clearKey: function(projectId) {
// 		this.clearInternal(projectId,this.KEY);
// 	}
// 	,setValue: function(projectId,num,value) {
// 		this.setInternal(projectId,this.VALUE,num,value);
// 	}
// 	,getValue: function(projectId,num) {
// 		return this.getInternal(projectId,this.VALUE,num);
// 	}
// 	,clearValue: function(projectId) {
// 		this.clearInternal(projectId,this.VALUE);
// 	}
// 	,setInternal: function(projectId,type,num,value) {
// 		var _this = this.projectData;
// 		if(!(__map_reserved[projectId] != null?_this.existsReserved(projectId):_this.h.hasOwnProperty(projectId))) {
// 			var value1 = new haxe_ds_StringMap();
// 			var _this1 = this.projectData;
// 			if(__map_reserved[projectId] != null) {
// 				_this1.setReserved(projectId,value1);
// 			} else {
// 				_this1.h[projectId] = value1;
// 			}
// 		}
// 		var _this2 = this.projectData;
// 		var p = __map_reserved[projectId] != null?_this2.getReserved(projectId):_this2.h[projectId];
// 		if(!(__map_reserved[type] != null?p.existsReserved(type):p.h.hasOwnProperty(type))) {
// 			var value2 = [];
// 			if(__map_reserved[type] != null) {
// 				p.setReserved(type,value2);
// 			} else {
// 				p.h[type] = value2;
// 			}
// 		}
// 		(__map_reserved[type] != null?p.getReserved(type):p.h[type])[num] = value;
// 	}
// 	,getInternal: function(projectId,type,num) {
// 		var _this = this.projectData;
// 		if(!(__map_reserved[projectId] != null?_this.existsReserved(projectId):_this.h.hasOwnProperty(projectId))) {
// 			return null;
// 		}
// 		var _this1 = this.projectData;
// 		var p = __map_reserved[projectId] != null?_this1.getReserved(projectId):_this1.h[projectId];
// 		if(!(__map_reserved[type] != null?p.existsReserved(type):p.h.hasOwnProperty(type))) {
// 			return null;
// 		}
// 		var a = __map_reserved[type] != null?p.getReserved(type):p.h[type];
// 		if(a[num] == null) {
// 			return null;
// 		}
// 		return a[num];
// 	}
// 	,clearInternal: function(projectId,type) {
// 		var tmp;
// 		var _this = this.projectData;
// 		if(__map_reserved[projectId] != null?_this.existsReserved(projectId):_this.h.hasOwnProperty(projectId)) {
// 			var _this1 = this.projectData;
// 			tmp = (__map_reserved[projectId] != null?_this1.getReserved(projectId):_this1.h[projectId]).exists(type);
// 		} else {
// 			tmp = false;
// 		}
// 		if(tmp) {
// 			var _this2 = this.projectData;
// 			(__map_reserved[projectId] != null?_this2.getReserved(projectId):_this2.h[projectId]).remove(type);
// 		}
// 	}
// 	,escapeExtensibleValue: function(value) {
// 		var result = "";
// 		var _g1 = 0;
// 		var _g = value.length;
// 		while(_g1 < _g) {
// 			var $char = value.charAt(_g1++);
// 			var _this = this.ESCAPE_CHAR_MAP;
// 			if(__map_reserved[$char] != null?_this.existsReserved($char):_this.h.hasOwnProperty($char)) {
// 				var _this1 = this.ESCAPE_CHAR_MAP;
// 				result += __map_reserved[$char] != null?_this1.getReserved($char):_this1.h[$char];
// 			} else {
// 				result += $char;
// 			}
// 		}
// 		return result;
// 	}
// 	,SORT_NUMERIC: function(v1,v2) {
// 		if(v1 == v2) {
// 			return 0;
// 		}
// 		if(v1 > v2) {
// 			return 1;
// 		}
// 		return -1;
// 	}
// 	,renderDataType: function(data) {
// 		var result = [];
// 		var lastI = 0;
// 		var _g1 = 0;
// 		var _g = data.length;
// 		while(_g1 < _g) {
// 			var i = _g1++;
// 			var entry = data[i];
// 			if(entry != null) {
// 				var str = "";
// 				if(i != this.MINIMUM && i - 1 != lastI) {
// 					str = "" + i;
// 					str += this.DELIM_NUM_VALUE;
// 				}
// 				str += this.escapeExtensibleValue(entry);
// 				result.push(str);
// 			}
// 			lastI = i;
// 		}
// 		return this.DELIM_BEGIN + result.join(this.DELIM_SET) + this.DELIM_END;
// 	}
// 	,renderProject: function(project) {
// 		var result = "";
// 		var needTypeQualifier = false;
// 		var _g1 = 0;
// 		var _g = this.SET.length;
// 		while(_g1 < _g) {
// 			var i = _g1++;
// 			var key = this.SET[i];
// 			if(__map_reserved[key] != null?project.existsReserved(key):project.h.hasOwnProperty(key)) {
// 				if(needTypeQualifier) {
// 					result += this.SET[i];
// 				}
// 				var key1 = this.SET[i];
// 				result += this.renderDataType(__map_reserved[key1] != null?project.getReserved(key1):project.h[key1]);
// 				needTypeQualifier = false;
// 			} else {
// 				needTypeQualifier = true;
// 			}
// 		}
// 		return result;
// 	}
// 	,renderUrlString: function() {
// 		var result = "";
// 		var tmp = this.projectData.keys();
// 		while(tmp.hasNext()) {
// 			var projectId = tmp.next();
// 			var _this = this.projectData;
// 			result += projectId + this.renderProject(__map_reserved[projectId] != null?_this.getReserved(projectId):_this.h[projectId]);
// 		}
// 		return result;
// 	}
// 	,__class__: googleAnalytics_internals_X10
// };
// var googleAnalytics_internals_request_Request = function(config) {
// 	this.setConfig(config != null?config:new googleAnalytics_Config());
// };
// $hxClasses["googleAnalytics.internals.request.Request"] = googleAnalytics_internals_request_Request;
// googleAnalytics_internals_request_Request.__name__ = ["googleAnalytics","internals","request","Request"];
// googleAnalytics_internals_request_Request.prototype = {
// 	type: null
// 	,config: null
// 	,userAgent: null
// 	,tracker: null
// 	,visitor: null
// 	,session: null
// 	,getConfig: function() {
// 		return this.config;
// 	}
// 	,setConfig: function(config) {
// 		this.config = config;
// 	}
// 	,setUserAgent: function(value) {
// 		this.userAgent = value;
// 	}
// 	,getTracker: function() {
// 		return this.tracker;
// 	}
// 	,setTracker: function(tracker) {
// 		this.tracker = tracker;
// 	}
// 	,getVisitor: function() {
// 		return this.visitor;
// 	}
// 	,setVisitor: function(visitor) {
// 		this.visitor = visitor;
// 	}
// 	,getSession: function() {
// 		return this.session;
// 	}
// 	,setSession: function(session) {
// 		this.session = session;
// 	}
// 	,onError: function(e) {
// 		haxe_Log.trace("ERROR: " + e,{ fileName : "Request.hx", lineNumber : 116, className : "googleAnalytics.internals.request.Request", methodName : "onError"});
// 	}
// 	,increaseTrackCount: function() {
// 		// this.session.increaseTrackCount();
// 		// if(this.session.getTrackCount() > 500) {
// 		// 	googleAnalytics_Tracker._raiseError("Google Analytics does not guarantee to process more than 500 requests per session.","Request.buildHttpRequest");
// 		// }
// 		// if(this.tracker.getCampaign() != null) {
// 		// 	this.tracker.getCampaign().increaseResponseCount();
// 		// }
// 	}
// 	,send: function() {
// 		// if(this.config.getEndPointHost() == null) {
// 		// 	return;
// 		// }
// 		// var parameters = this.buildParameters();
// 		// if(this.visitor != null) {
// 		// 	this.setUserAgent(this.visitor.getUserAgent());
// 		// 	parameters.utmvid = this.visitor.getUniqueId();
// 		// }
// 		// var queryString = googleAnalytics_internals_Util.convertToUriComponentEncoding(parameters.toQueryString());
// 		// var url = "http://" + this.config.getEndPointHost() + this.config.getEndPointPath() + "?" + queryString;
// 		// this.increaseTrackCount();
// 		// new Image().src = url;
// 	}
// 	,getType: function() {
// 		return null;
// 	}
// 	,buildParameters: function() {
// 		// var p = new googleAnalytics_internals_ParameterHolder();
// 		// p.utmac = this.tracker.getAccountId();
// 		// p.utmhn = this.tracker.getDomainName();
// 		// p.utmt = "" + this.getType();
// 		// p.utmn = googleAnalytics_internals_Util.generate32bitRandom();
// 		// p.utmip = this.visitor.getIpAddress();
// 		// p.utmhid = this.session.getSessionId();
// 		// p.utms = this.session.getTrackCount();
// 		// p = this.buildVisitorParameters(p);
// 		// p = this.buildCustomVariablesParameter(p);
// 		// p = this.buildCampaignParameters(p);
// 		// p = this.buildCookieParameters(p);
// 		// return p;
// 	}
// 	,buildVisitorParameters: function(p) {
// 		// if(this.visitor.getLocale() != null) {
// 		// 	p.utmul = StringTools.replace(this.visitor.getLocale(),"_","-").toLowerCase();
// 		// }
// 		// if(this.visitor.getFlashVersion() != null) {
// 		// 	p.utmfl = this.visitor.getFlashVersion();
// 		// }
// 		// p.utmje = this.visitor.getJavaEnabled()?"1":"0";
// 		// if(this.visitor.getScreenColorDepth() != null) {
// 		// 	p.utmsc = this.visitor.getScreenColorDepth() + "-bit";
// 		// }
// 		// p.utmsr = this.visitor.getScreenResolution();
// 		// return p;
// 	}
// 	,buildCustomVariablesParameter: function(p) {
// 		// var customVars = this.tracker.getCustomVariables();
// 		// if(customVars == null) {
// 		// 	return p;
// 		// }
// 		// if(customVars.length > 5) {
// 		// 	googleAnalytics_Tracker._raiseError("The sum of all custom variables cannot exceed 5 in any given request.","Request.buildCustomVariablesParameter");
// 		// }
// 		// var x10 = new googleAnalytics_internals_X10();
// 		// var name;
// 		// var value;
// 		// x10.clearKey("8");
// 		// x10.clearKey("9");
// 		// x10.clearKey("11");
// 		// var _g = 0;
// 		// while(_g < customVars.length) {
// 		// 	var customVar = customVars[_g];
// 		// 	++_g;
// 		// 	name = googleAnalytics_internals_Util.encodeUriComponent(customVar.getName());
// 		// 	value = googleAnalytics_internals_Util.encodeUriComponent(customVar.getValue());
// 		// 	x10.setKey("8",customVar.getIndex(),name);
// 		// 	x10.setKey("9",customVar.getIndex(),value);
// 		// 	if(customVar.getScope() != 3) {
// 		// 		x10.setKey("11",customVar.getIndex(),customVar.getScope());
// 		// 	}
// 		// }
// 		// var eventFragment = x10.renderUrlString();
// 		// if(eventFragment != null) {
// 		// 	if(p.utme == null) {
// 		// 		p.utme = eventFragment;
// 		// 	} else {
// 		// 		p.utme += eventFragment;
// 		// 	}
// 		// }
// 		// return p;
// 	}
// 	,buildCookieParameters: function(p) {
// 		// var domainHash = this.generateDomainHash();
// 		// p.__utma = domainHash + ".";
// 		// p.__utma += this.visitor.getUniqueId() + ".";
// 		// p.__utma += this.visitor.getFirstVisitTime().toString() + ".";
// 		// p.__utma += this.visitor.getPreviousVisitTime().toString() + ".";
// 		// p.__utma += this.visitor.getCurrentVisitTime().toString() + ".";
// 		// p.__utma += this.visitor.getVisitCount();
// 		// p.__utmb = domainHash + ".";
// 		// p.__utmb += this.session.getTrackCount() + ".";
// 		// p.__utmb += 10 + ".";
// 		// p.__utmb += this.session.getStartTime().toString();
// 		// p.__utmc = domainHash;
// 		// var cookies = "__utma=" + p.__utma + ";";
// 		// if(p.__utmz != null) {
// 		// 	cookies += "+__utmz=" + p.__utmz + ";";
// 		// }
// 		// if(p.__utmv != null) {
// 		// 	cookies += "+__utmv=" + p.__utmv + ";";
// 		// }
// 		// p.utmcc = cookies;
// 		// return p;
// 	}
// 	,buildCampaignParameters: function(p) {
// 		// var campaign = this.tracker.getCampaign();
// 		// if(campaign == null) {
// 		// 	return p;
// 		// }
// 		// p.__utmz = this.generateDomainHash() + ".";
// 		// p.__utmz += campaign.getCreationTime().toString() + ".";
// 		// p.__utmz += this.visitor.getVisitCount() + ".";
// 		// p.__utmz += campaign.getResponseCount() + ".";
// 		// p.__utmz += StringTools.replace(StringTools.replace("utmcid=" + campaign.getId() + "|" + "utmcsr=" + campaign.getSource() + "|" + "utmgclid=" + campaign.getGClickId() + "|" + "utmdclid=" + campaign.getDClickId() + "|" + "utmccn=" + campaign.getName() + "|" + "utmcmd=" + campaign.getMedium() + "|" + "utmctr=" + campaign.getTerm() + "|" + "utmcct=" + campaign.getContent(),"+","%20")," ","%20");
// 		// return p;
// 	}
// 	,generateDomainHash: function() {
// 		// var hash = 1;
// 		// if(this.tracker.getAllowHash()) {
// 		// 	hash = googleAnalytics_internals_Util.generateHash(this.tracker.getDomainName());
// 		// }
// 		// return hash;
// 	}
// 	,__class__: googleAnalytics_internals_request_Request
// };
// var googleAnalytics_internals_request_EventRequest = function(config) {
// 	googleAnalytics_internals_request_Request.call(this,config);
// };
// $hxClasses["googleAnalytics.internals.request.EventRequest"] = googleAnalytics_internals_request_EventRequest;
// googleAnalytics_internals_request_EventRequest.__name__ = ["googleAnalytics","internals","request","EventRequest"];
// googleAnalytics_internals_request_EventRequest.__super__ = googleAnalytics_internals_request_Request;
// googleAnalytics_internals_request_EventRequest.prototype = $extend(googleAnalytics_internals_request_Request.prototype,{
// 	event: null
// 	,getType: function() {
// 		return "event";
// 	}
// 	,buildParameters: function() {
// 		// var p = googleAnalytics_internals_request_Request.prototype.buildParameters.call(this);
// 		// var x10 = new googleAnalytics_internals_X10();
// 		// x10.clearKey("5");
// 		// x10.clearValue("5");
// 		// x10.setKey("5",1,this.event.getCategory());
// 		// x10.setKey("5",2,this.event.getAction());
// 		// if(this.event.getLabel() != null) {
// 		// 	x10.setKey("5",3,this.event.getLabel());
// 		// }
// 		// if(this.event.getValue() != 0) {
// 		// 	x10.setValue("5",1,this.event.getValue());
// 		// }
// 		// var eventFragment = x10.renderUrlString();
// 		// if(eventFragment != null) {
// 		// 	if(p.utme == null) {
// 		// 		p.utme = eventFragment;
// 		// 	} else {
// 		// 		p.utme += eventFragment;
// 		// 	}
// 		// }
// 		// if(this.event.getNoninteraction()) {
// 		// 	p.utmni = 1;
// 		// }
// 		// return p;
// 	}
// 	,getEvent: function() {
// 		return this.event;
// 	}
// 	,setEvent: function(event) {
// 		this.event = event;
// 	}
// 	,__class__: googleAnalytics_internals_request_EventRequest
// });
// var googleAnalytics_internals_request_ItemRequest = function(config) {
// 	googleAnalytics_internals_request_Request.call(this,config);
// };
// $hxClasses["googleAnalytics.internals.request.ItemRequest"] = googleAnalytics_internals_request_ItemRequest;
// googleAnalytics_internals_request_ItemRequest.__name__ = ["googleAnalytics","internals","request","ItemRequest"];
// googleAnalytics_internals_request_ItemRequest.__super__ = googleAnalytics_internals_request_Request;
// googleAnalytics_internals_request_ItemRequest.prototype = $extend(googleAnalytics_internals_request_Request.prototype,{
// 	item: null
// 	,getType: function() {
// 		return "item";
// 	}
// 	,buildParameters: function() {
// 		// var p = googleAnalytics_internals_request_Request.prototype.buildParameters.call(this);
// 		// p.utmtid = this.item.getOrderId();
// 		// p.utmipc = this.item.getSku();
// 		// p.utmipn = this.item.getName();
// 		// p.utmiva = this.item.getVariation();
// 		// p.utmipr = this.item.getPrice();
// 		// p.utmiqt = this.item.getQuantity();
// 		// return p;
// 	}
// 	,buildVisitorParameters: function(p) {
// 		return p;
// 	}
// 	,buildCustomVariablesParameter: function(p) {
// 		return p;
// 	}
// 	,getItem: function() {
// 		return this.item;
// 	}
// 	,setItem: function(item) {
// 		this.item = item;
// 	}
// 	,__class__: googleAnalytics_internals_request_ItemRequest
// });
// var googleAnalytics_internals_request_PageviewRequest = function(config) {
// 	googleAnalytics_internals_request_Request.call(this,config);
// };
// $hxClasses["googleAnalytics.internals.request.PageviewRequest"] = googleAnalytics_internals_request_PageviewRequest;
// googleAnalytics_internals_request_PageviewRequest.__name__ = ["googleAnalytics","internals","request","PageviewRequest"];
// googleAnalytics_internals_request_PageviewRequest.__super__ = googleAnalytics_internals_request_Request;
// googleAnalytics_internals_request_PageviewRequest.prototype = $extend(googleAnalytics_internals_request_Request.prototype,{
// 	page: null
// 	,getType: function() {
// 		return null;
// 	}
// 	,buildParameters: function() {
// 		// var p = googleAnalytics_internals_request_Request.prototype.buildParameters.call(this);
// 		// p.utmp = this.page.getPath();
// 		// p.utmdt = this.page.getTitle();
// 		// if(this.page.getCharset() != null) {
// 		// 	p.utmcs = this.page.getCharset();
// 		// }
// 		// if(this.page.getReferrer() != null) {
// 		// 	p.utmr = this.page.getReferrer();
// 		// }
// 		// if(this.page.getLoadTime() != 0) {
// 		// 	if(p.utmn % 100 < this.config.getSitespeedSampleRate()) {
// 		// 		if(p.utme == null) {
// 		// 			p.utme = "" + 0;
// 		// 		} else {
// 		// 			p.utme += 0;
// 		// 		}
// 		// 	}
// 		// }
// 		// return p;
// 	}
// 	,getPage: function() {
// 		return this.page;
// 	}
// 	,setPage: function(page) {
// 		this.page = page;
// 	}
// 	,__class__: googleAnalytics_internals_request_PageviewRequest
// });
// var googleAnalytics_internals_request_SocialInteractionRequest = function(config) {
// 	googleAnalytics_internals_request_PageviewRequest.call(this,config);
// };
// $hxClasses["googleAnalytics.internals.request.SocialInteractionRequest"] = googleAnalytics_internals_request_SocialInteractionRequest;
// googleAnalytics_internals_request_SocialInteractionRequest.__name__ = ["googleAnalytics","internals","request","SocialInteractionRequest"];
// googleAnalytics_internals_request_SocialInteractionRequest.__super__ = googleAnalytics_internals_request_PageviewRequest;
// googleAnalytics_internals_request_SocialInteractionRequest.prototype = $extend(googleAnalytics_internals_request_PageviewRequest.prototype,{
// 	socialInteraction: null
// 	,getType: function() {
// 		return "social";
// 	}
// 	,buildParameters: function() {
// 		// var p = googleAnalytics_internals_request_PageviewRequest.prototype.buildParameters.call(this);
// 		// p.utmsn = this.socialInteraction.getNetwork();
// 		// p.utmsa = this.socialInteraction.getAction();
// 		// p.utmsid = this.socialInteraction.getTarget();
// 		// if(p.utmsid == null) {
// 		// 	p.utmsid = this.page.getPath();
// 		// }
// 		// return p;
// 	}
// 	,getSocialInteraction: function() {
// 		return this.socialInteraction;
// 	}
// 	,setSocialInteraction: function(socialInteraction) {
// 		this.socialInteraction = socialInteraction;
// 	}
// 	,__class__: googleAnalytics_internals_request_SocialInteractionRequest
// });
// var googleAnalytics_internals_request_TransactionRequest = function(config) {
// 	googleAnalytics_internals_request_Request.call(this,config);
// };
// $hxClasses["googleAnalytics.internals.request.TransactionRequest"] = googleAnalytics_internals_request_TransactionRequest;
// googleAnalytics_internals_request_TransactionRequest.__name__ = ["googleAnalytics","internals","request","TransactionRequest"];
// googleAnalytics_internals_request_TransactionRequest.__super__ = googleAnalytics_internals_request_Request;
// googleAnalytics_internals_request_TransactionRequest.prototype = $extend(googleAnalytics_internals_request_Request.prototype,{
// 	transaction: null
// 	,getType: function() {
// 		return "tran";
// 	}
// 	,buildParameters: function() {
// 		// var p = googleAnalytics_internals_request_Request.prototype.buildParameters.call(this);
// 		// p.utmtid = this.transaction.getOrderId();
// 		// p.utmtst = this.transaction.getAffiliation();
// 		// p.utmtto = this.transaction.getTotal();
// 		// p.utmttx = this.transaction.getTax();
// 		// p.utmtsp = this.transaction.getShipping();
// 		// p.utmtci = this.transaction.getCity();
// 		// p.utmtrg = this.transaction.getRegion();
// 		// p.utmtco = this.transaction.getCountry();
// 		// return p;
// 	}
// 	,buildVisitorParameters: function(p) {
// 		return p;
// 	}
// 	,buildCustomVariablesParameter: function(p) {
// 		return p;
// 	}
// 	,getTransaction: function() {
// 		return this.transaction;
// 	}
// 	,setTransaction: function(transaction) {
// 		this.transaction = transaction;
// 	}
// 	,__class__: googleAnalytics_internals_request_TransactionRequest
// });
var haxe_StackItem = $hxClasses["haxe.StackItem"] = { __ename__ : ["haxe","StackItem"], __constructs__ : ["CFunction","Module","FilePos","Method","LocalFunction"] };
haxe_StackItem.CFunction = ["CFunction",0];
haxe_StackItem.CFunction.toString = $estr;
haxe_StackItem.CFunction.__enum__ = haxe_StackItem;
haxe_StackItem.Module = function(m) { var $x = ["Module",1,m]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.FilePos = function(s,file,line) { var $x = ["FilePos",2,s,file,line]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.Method = function(classname,method) { var $x = ["Method",3,classname,method]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
haxe_StackItem.LocalFunction = function(v) { var $x = ["LocalFunction",4,v]; $x.__enum__ = haxe_StackItem; $x.toString = $estr; return $x; };
var haxe_CallStack = function() { };
$hxClasses["haxe.CallStack"] = haxe_CallStack;
haxe_CallStack.__name__ = ["haxe","CallStack"];
haxe_CallStack.lastException = null;
haxe_CallStack.getStack = function(e) {
	if(e == null) {
		return [];
	}
	var oldValue = Error.prepareStackTrace;
	Error.prepareStackTrace = function(error,callsites) {
		var stack = [];
		var _g = 0;
		while(_g < callsites.length) {
			var site = callsites[_g];
			++_g;
			if(haxe_CallStack.wrapCallSite != null) {
				site = haxe_CallStack.wrapCallSite(site);
			}
			var method = null;
			var fullName = site.getFunctionName();
			if(fullName != null) {
				var idx = fullName.lastIndexOf(".");
				if(idx >= 0) {
					var className = HxOverrides.substr(fullName,0,idx);
					var methodName = HxOverrides.substr(fullName,idx + 1,null);
					method = haxe_StackItem.Method(className,methodName);
				}
			}
			stack.push(haxe_StackItem.FilePos(method,site.getFileName(),site.getLineNumber()));
		}
		return stack;
	};
	var a = haxe_CallStack.makeStack(e.stack);
	Error.prepareStackTrace = oldValue;
	return a;
};
haxe_CallStack.wrapCallSite = null;
haxe_CallStack.callStack = function() {
	try {
		throw new Error();
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		var a = haxe_CallStack.getStack(e);
		a.shift();
		return a;
	}
};
haxe_CallStack.exceptionStack = function() {
	return haxe_CallStack.getStack(haxe_CallStack.lastException);
};
haxe_CallStack.toString = function(stack) {
	var b = new StringBuf();
	var _g = 0;
	while(_g < stack.length) {
		var s = stack[_g];
		++_g;
		b.b += "\nCalled from ";
		haxe_CallStack.itemToString(b,s);
	}
	return b.b;
};
haxe_CallStack.itemToString = function(b,s) {
	switch(s[1]) {
	case 0:
		b.b += "a C function";
		break;
	case 1:
		var m = s[2];
		b.b += "module ";
		b.b += m == null?"null":"" + m;
		break;
	case 2:
		var line = s[4];
		var file = s[3];
		var s1 = s[2];
		if(s1 != null) {
			haxe_CallStack.itemToString(b,s1);
			b.b += " (";
		}
		b.b += file == null?"null":"" + file;
		b.b += " line ";
		b.b += line == null?"null":"" + line;
		if(s1 != null) {
			b.b += ")";
		}
		break;
	case 3:
		var meth = s[3];
		var cname = s[2];
		b.b += cname == null?"null":"" + cname;
		b.b += ".";
		b.b += meth == null?"null":"" + meth;
		break;
	case 4:
		var n = s[2];
		b.b += "local function #";
		b.b += n == null?"null":"" + n;
		break;
	}
};
haxe_CallStack.makeStack = function(s) {
	if(s == null) {
		return [];
	} else if(typeof(s) == "string") {
		var stack = s.split("\n");
		if(stack[0] == "Error") {
			stack.shift();
		}
		var m = [];
		var rie10 = new EReg("^   at ([A-Za-z0-9_. ]+) \\(([^)]+):([0-9]+):([0-9]+)\\)$","");
		var _g = 0;
		while(_g < stack.length) {
			var line = stack[_g];
			++_g;
			if(rie10.match(line)) {
				var path = rie10.matched(1).split(".");
				var meth = path.pop();
				var file = rie10.matched(2);
				var line1 = Std.parseInt(rie10.matched(3));
				m.push(haxe_StackItem.FilePos(meth == "Anonymous function"?haxe_StackItem.LocalFunction():meth == "Global code"?null:haxe_StackItem.Method(path.join("."),meth),file,line1));
			} else {
				m.push(haxe_StackItem.Module(StringTools.trim(line)));
			}
		}
		return m;
	} else {
		return s;
	}
};
var haxe_IMap = function() { };
$hxClasses["haxe.IMap"] = haxe_IMap;
haxe_IMap.__name__ = ["haxe","IMap"];
haxe_IMap.prototype = {
	exists: null
	,remove: null
	,iterator: null
	,__class__: haxe_IMap
};
var haxe__$Int64__$_$_$Int64 = function(high,low) {
	this.high = high;
	this.low = low;
};
$hxClasses["haxe._Int64.___Int64"] = haxe__$Int64__$_$_$Int64;
haxe__$Int64__$_$_$Int64.__name__ = ["haxe","_Int64","___Int64"];
haxe__$Int64__$_$_$Int64.prototype = {
	high: null
	,low: null
	,__class__: haxe__$Int64__$_$_$Int64
};
var haxe_Log = function() { };
$hxClasses["haxe.Log"] = haxe_Log;
haxe_Log.__name__ = ["haxe","Log"];
haxe_Log.trace = function(v,infos) {
	js_Boot.__trace(v,infos);
};
var haxe_Resource = function() { };
$hxClasses["haxe.Resource"] = haxe_Resource;
haxe_Resource.__name__ = ["haxe","Resource"];
haxe_Resource.content = null;
haxe_Resource.getString = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return x.str;
			}
			return haxe_crypto_Base64.decode(x.data).toString();
		}
	}
	return null;
};
haxe_Resource.getBytes = function(name) {
	var _g = 0;
	var _g1 = haxe_Resource.content;
	while(_g < _g1.length) {
		var x = _g1[_g];
		++_g;
		if(x.name == name) {
			if(x.str != null) {
				return haxe_io_Bytes.ofString(x.str);
			}
			return haxe_crypto_Base64.decode(x.data);
		}
	}
	return null;
};
var haxe_Serializer = function() {
	this.buf = new StringBuf();
	this.cache = [];
	this.useCache = haxe_Serializer.USE_CACHE;
	this.useEnumIndex = haxe_Serializer.USE_ENUM_INDEX;
	this.shash = new haxe_ds_StringMap();
	this.scount = 0;
};
$hxClasses["haxe.Serializer"] = haxe_Serializer;
haxe_Serializer.__name__ = ["haxe","Serializer"];
haxe_Serializer.run = function(v) {
	var s = new haxe_Serializer();
	s.serialize(v);
	return s.toString();
};
haxe_Serializer.prototype = {
	buf: null
	,cache: null
	,shash: null
	,scount: null
	,useCache: null
	,useEnumIndex: null
	,toString: function() {
		return this.buf.b;
	}
	,serializeString: function(s) {
		var _this = this.shash;
		var x = __map_reserved[s] != null?_this.getReserved(s):_this.h[s];
		if(x != null) {
			this.buf.b += "R";
			this.buf.b += x == null?"null":"" + x;
			return;
		}
		var _this1 = this.shash;
		var value = this.scount++;
		if(__map_reserved[s] != null) {
			_this1.setReserved(s,value);
		} else {
			_this1.h[s] = value;
		}
		this.buf.b += "y";
		s = encodeURIComponent(s);
		this.buf.b += Std.string(s.length);
		this.buf.b += ":";
		this.buf.b += s == null?"null":"" + s;
	}
	,serializeRef: function(v) {
		var vt = typeof(v);
		var _g1 = 0;
		var _g = this.cache.length;
		while(_g1 < _g) {
			var i = _g1++;
			var ci = this.cache[i];
			if(typeof(ci) == vt && ci == v) {
				this.buf.b += "r";
				this.buf.b += i == null?"null":"" + i;
				return true;
			}
		}
		this.cache.push(v);
		return false;
	}
	,serializeFields: function(v) {
		var _g = 0;
		var _g1 = Reflect.fields(v);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			this.serializeString(f);
			this.serialize(Reflect.field(v,f));
		}
		this.buf.b += "g";
	}
	,serialize: function(v) {
		var _g = Type["typeof"](v);
		switch(_g[1]) {
		case 0:
			this.buf.b += "n";
			break;
		case 1:
			var v1 = v;
			if(v1 == 0) {
				this.buf.b += "z";
				return;
			}
			this.buf.b += "i";
			this.buf.b += v1 == null?"null":"" + v1;
			break;
		case 2:
			var v2 = v;
			if(isNaN(v2)) {
				this.buf.b += "k";
			} else if(!isFinite(v2)) {
				this.buf.b += v2 < 0?"m":"p";
			} else {
				this.buf.b += "d";
				this.buf.b += v2 == null?"null":"" + v2;
			}
			break;
		case 3:
			this.buf.b += v?"t":"f";
			break;
		case 4:
			if(js_Boot.__instanceof(v,Class)) {
				var className = Type.getClassName(v);
				this.buf.b += "A";
				this.serializeString(className);
			} else if(js_Boot.__instanceof(v,Enum)) {
				this.buf.b += "B";
				this.serializeString(Type.getEnumName(v));
			} else {
				if(this.useCache && this.serializeRef(v)) {
					return;
				}
				this.buf.b += "o";
				this.serializeFields(v);
			}
			break;
		case 5:
			throw new js__$Boot_HaxeError("Cannot serialize function");
			break;
		case 6:
			var c = _g[2];
			if(c == String) {
				this.serializeString(v);
				return;
			}
			if(this.useCache && this.serializeRef(v)) {
				return;
			}
			switch(c) {
			case Array:
				var ucount = 0;
				this.buf.b += "a";
				var l = v.length;
				var _g1 = 0;
				var _g2 = l;
				while(_g1 < _g2) {
					var i = _g1++;
					if(v[i] == null) {
						++ucount;
					} else {
						if(ucount > 0) {
							if(ucount == 1) {
								this.buf.b += "n";
							} else {
								this.buf.b += "u";
								this.buf.b += ucount == null?"null":"" + ucount;
							}
							ucount = 0;
						}
						this.serialize(v[i]);
					}
				}
				if(ucount > 0) {
					if(ucount == 1) {
						this.buf.b += "n";
					} else {
						this.buf.b += "u";
						this.buf.b += ucount == null?"null":"" + ucount;
					}
				}
				this.buf.b += "h";
				break;
			case Date:
				var d = v;
				this.buf.b += "v";
				this.buf.b += Std.string(d.getTime());
				break;
			case List:
				this.buf.b += "l";
				var v3 = v;
				var _g_head = v3.h;
				while(_g_head != null) {
					var val = _g_head.item;
					_g_head = _g_head.next;
					this.serialize(val);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_IntMap:
				this.buf.b += "q";
				var v4 = v;
				var tmp = v4.keys();
				while(tmp.hasNext()) {
					var k = tmp.next();
					this.buf.b += ":";
					this.buf.b += k == null?"null":"" + k;
					this.serialize(v4.h[k]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_ObjectMap:
				this.buf.b += "M";
				var v5 = v;
				var tmp1 = v5.keys();
				while(tmp1.hasNext()) {
					var k1 = tmp1.next();
					var id = Reflect.field(k1,"__id__");
					Reflect.deleteField(k1,"__id__");
					this.serialize(k1);
					k1.__id__ = id;
					this.serialize(v5.h[k1.__id__]);
				}
				this.buf.b += "h";
				break;
			case haxe_ds_StringMap:
				this.buf.b += "b";
				var v6 = v;
				var tmp2 = v6.keys();
				while(tmp2.hasNext()) {
					var k2 = tmp2.next();
					this.serializeString(k2);
					this.serialize(__map_reserved[k2] != null?v6.getReserved(k2):v6.h[k2]);
				}
				this.buf.b += "h";
				break;
			case haxe_io_Bytes:
				var v7 = v;
				this.buf.b += "s";
				this.buf.b += Std.string(Math.ceil(v7.length * 8 / 6));
				this.buf.b += ":";
				var i1 = 0;
				var max = v7.length - 2;
				var b64 = haxe_Serializer.BASE64_CODES;
				if(b64 == null) {
					var length = haxe_Serializer.BASE64.length;
					b64 = new Array(length);
					var _g11 = 0;
					var _g3 = haxe_Serializer.BASE64.length;
					while(_g11 < _g3) {
						var i2 = _g11++;
						b64[i2] = HxOverrides.cca(haxe_Serializer.BASE64,i2);
					}
					haxe_Serializer.BASE64_CODES = b64;
				}
				while(i1 < max) {
					var b1 = v7.b[i1++];
					var b2 = v7.b[i1++];
					var b3 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b1 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b1 << 4 | b2 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[(b2 << 2 | b3 >> 6) & 63]);
					this.buf.b += String.fromCharCode(b64[b3 & 63]);
				}
				if(i1 == max) {
					var b11 = v7.b[i1++];
					var b21 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b11 >> 2]);
					this.buf.b += String.fromCharCode(b64[(b11 << 4 | b21 >> 4) & 63]);
					this.buf.b += String.fromCharCode(b64[b21 << 2 & 63]);
				} else if(i1 == max + 1) {
					var b12 = v7.b[i1++];
					this.buf.b += String.fromCharCode(b64[b12 >> 2]);
					this.buf.b += String.fromCharCode(b64[b12 << 4 & 63]);
				}
				break;
			default:
				if(this.useCache) {
					this.cache.pop();
				}
				if(v.hxSerialize != null) {
					this.buf.b += "C";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					v.hxSerialize(this);
					this.buf.b += "g";
				} else {
					this.buf.b += "c";
					this.serializeString(Type.getClassName(c));
					if(this.useCache) {
						this.cache.push(v);
					}
					this.serializeFields(v);
				}
			}
			break;
		case 7:
			if(this.useCache) {
				if(this.serializeRef(v)) {
					return;
				}
				this.cache.pop();
			}
			this.buf.b += Std.string(this.useEnumIndex?"j":"w");
			this.serializeString(Type.getEnumName(_g[2]));
			if(this.useEnumIndex) {
				this.buf.b += ":";
				this.buf.b += Std.string(v[1]);
			} else {
				this.serializeString(v[0]);
			}
			this.buf.b += ":";
			var l1 = v.length;
			this.buf.b += Std.string(l1 - 2);
			var _g12 = 2;
			var _g4 = l1;
			while(_g12 < _g4) this.serialize(v[_g12++]);
			if(this.useCache) {
				this.cache.push(v);
			}
			break;
		default:
			throw new js__$Boot_HaxeError("Cannot serialize " + Std.string(v));
		}
	}
	,__class__: haxe_Serializer
};
var haxe_Timer = function(time_ms) {
	var me = this;
	this.id = setInterval(function() {
		me.run();
	},time_ms);
};
$hxClasses["haxe.Timer"] = haxe_Timer;
haxe_Timer.__name__ = ["haxe","Timer"];
haxe_Timer.delay = function(f,time_ms) {
	var t = new haxe_Timer(time_ms);
	t.run = function() {
		t.stop();
		f();
	};
	return t;
};
haxe_Timer.measure = function(f,pos) {
	var t0 = haxe_Timer.stamp();
	var r = f();
	haxe_Log.trace(haxe_Timer.stamp() - t0 + "s",pos);
	return r;
};
haxe_Timer.stamp = function() {
	return new Date().getTime() / 1000;
};
haxe_Timer.prototype = {
	id: null
	,stop: function() {
		if(this.id == null) {
			return;
		}
		clearInterval(this.id);
		this.id = null;
	}
	,run: function() {
	}
	,__class__: haxe_Timer
};
var haxe__$Unserializer_DefaultResolver = function() {
};
$hxClasses["haxe._Unserializer.DefaultResolver"] = haxe__$Unserializer_DefaultResolver;
haxe__$Unserializer_DefaultResolver.__name__ = ["haxe","_Unserializer","DefaultResolver"];
haxe__$Unserializer_DefaultResolver.prototype = {
	resolveClass: function(name) {
		return Type.resolveClass(name);
	}
	,resolveEnum: function(name) {
		return Type.resolveEnum(name);
	}
	,__class__: haxe__$Unserializer_DefaultResolver
};
var haxe_Unserializer = function(buf) {
	this.buf = buf;
	this.length = buf.length;
	this.pos = 0;
	this.scache = [];
	this.cache = [];
	var r = haxe_Unserializer.DEFAULT_RESOLVER;
	if(r == null) {
		r = new haxe__$Unserializer_DefaultResolver();
		haxe_Unserializer.DEFAULT_RESOLVER = r;
	}
	this.resolver = r;
};
$hxClasses["haxe.Unserializer"] = haxe_Unserializer;
haxe_Unserializer.__name__ = ["haxe","Unserializer"];
haxe_Unserializer.initCodes = function() {
	var codes = [];
	var _g1 = 0;
	var _g = haxe_Unserializer.BASE64.length;
	while(_g1 < _g) {
		var i = _g1++;
		codes[haxe_Unserializer.BASE64.charCodeAt(i)] = i;
	}
	return codes;
};
haxe_Unserializer.prototype = {
	buf: null
	,pos: null
	,length: null
	,cache: null
	,scache: null
	,resolver: null
	,setResolver: function(r) {
		if(r == null) {
			if(haxe__$Unserializer_NullResolver.instance == null) {
				haxe__$Unserializer_NullResolver.instance = new haxe__$Unserializer_NullResolver();
			}
			this.resolver = haxe__$Unserializer_NullResolver.instance;
		} else {
			this.resolver = r;
		}
	}
	,readDigits: function() {
		var k = 0;
		var s = false;
		var fpos = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c == 45) {
				if(this.pos != fpos) {
					break;
				}
				s = true;
				this.pos++;
				continue;
			}
			if(c < 48 || c > 57) {
				break;
			}
			k = k * 10 + (c - 48);
			this.pos++;
		}
		if(s) {
			k *= -1;
		}
		return k;
	}
	,readFloat: function() {
		var p1 = this.pos;
		while(true) {
			var c = this.buf.charCodeAt(this.pos);
			if(c != c) {
				break;
			}
			if(c >= 43 && c < 58 || c == 101 || c == 69) {
				this.pos++;
			} else {
				break;
			}
		}
		var x = HxOverrides.substr(this.buf,p1,this.pos - p1);
		return parseFloat(x);
	}
	,unserializeObject: function(o) {
		while(true) {
			if(this.pos >= this.length) {
				throw new js__$Boot_HaxeError("Invalid object");
			}
			if(this.buf.charCodeAt(this.pos) == 103) {
				break;
			}
			var k = this.unserialize();
			if(typeof(k) != "string") {
				throw new js__$Boot_HaxeError("Invalid object key");
			}
			o[k] = this.unserialize();
		}
		this.pos++;
	}
	,unserializeEnum: function(edecl,tag) {
		if(this.buf.charCodeAt(this.pos++) != 58) {
			throw new js__$Boot_HaxeError("Invalid enum format");
		}
		var nargs = this.readDigits();
		if(nargs == 0) {
			return Type.createEnum(edecl,tag);
		}
		var args = [];
		while(nargs-- > 0) args.push(this.unserialize());
		return Type.createEnum(edecl,tag,args);
	}
	,unserialize: function() {
		switch(this.buf.charCodeAt(this.pos++)) {
		case 65:
			var name = this.unserialize();
			var cl = this.resolver.resolveClass(name);
			if(cl == null) {
				throw new js__$Boot_HaxeError("Class not found " + name);
			}
			return cl;
		case 66:
			var name1 = this.unserialize();
			var e = this.resolver.resolveEnum(name1);
			if(e == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name1);
			}
			return e;
		case 67:
			var name2 = this.unserialize();
			var cl1 = this.resolver.resolveClass(name2);
			if(cl1 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name2);
			}
			var o = Type.createEmptyInstance(cl1);
			this.cache.push(o);
			o.hxUnserialize(this);
			if(this.buf.charCodeAt(this.pos++) != 103) {
				throw new js__$Boot_HaxeError("Invalid custom data");
			}
			return o;
		case 77:
			var h = new haxe_ds_ObjectMap();
			this.cache.push(h);
			var buf = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) h.set(this.unserialize(),this.unserialize());
			this.pos++;
			return h;
		case 82:
			var n = this.readDigits();
			if(n < 0 || n >= this.scache.length) {
				throw new js__$Boot_HaxeError("Invalid string reference");
			}
			return this.scache[n];
		case 97:
			var buf1 = this.buf;
			var a = [];
			this.cache.push(a);
			while(true) {
				var c = this.buf.charCodeAt(this.pos);
				if(c == 104) {
					this.pos++;
					break;
				}
				if(c == 117) {
					this.pos++;
					var n1 = this.readDigits();
					a[a.length + n1 - 1] = null;
				} else {
					a.push(this.unserialize());
				}
			}
			return a;
		case 98:
			var h1 = new haxe_ds_StringMap();
			this.cache.push(h1);
			var buf2 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) {
				var s = this.unserialize();
				var value = this.unserialize();
				if(__map_reserved[s] != null) {
					h1.setReserved(s,value);
				} else {
					h1.h[s] = value;
				}
			}
			this.pos++;
			return h1;
		case 99:
			var name3 = this.unserialize();
			var cl2 = this.resolver.resolveClass(name3);
			if(cl2 == null) {
				throw new js__$Boot_HaxeError("Class not found " + name3);
			}
			var o1 = Type.createEmptyInstance(cl2);
			this.cache.push(o1);
			this.unserializeObject(o1);
			return o1;
		case 100:
			return this.readFloat();
		case 102:
			return false;
		case 105:
			return this.readDigits();
		case 106:
			var name4 = this.unserialize();
			var edecl = this.resolver.resolveEnum(name4);
			if(edecl == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name4);
			}
			this.pos++;
			var index = this.readDigits();
			var tag = edecl.__constructs__.slice()[index];
			if(tag == null) {
				throw new js__$Boot_HaxeError("Unknown enum index " + name4 + "@" + index);
			}
			var e1 = this.unserializeEnum(edecl,tag);
			this.cache.push(e1);
			return e1;
		case 107:
			return NaN;
		case 108:
			var l = new List();
			this.cache.push(l);
			var buf3 = this.buf;
			while(this.buf.charCodeAt(this.pos) != 104) l.add(this.unserialize());
			this.pos++;
			return l;
		case 109:
			return -Infinity;
		case 110:
			return null;
		case 111:
			var o2 = { };
			this.cache.push(o2);
			this.unserializeObject(o2);
			return o2;
		case 112:
			return Infinity;
		case 113:
			var h2 = new haxe_ds_IntMap();
			this.cache.push(h2);
			var buf4 = this.buf;
			var c1 = this.buf.charCodeAt(this.pos++);
			while(c1 == 58) {
				var i = this.readDigits();
				var value1 = this.unserialize();
				h2.h[i] = value1;
				c1 = this.buf.charCodeAt(this.pos++);
			}
			if(c1 != 104) {
				throw new js__$Boot_HaxeError("Invalid IntMap format");
			}
			return h2;
		case 114:
			var n2 = this.readDigits();
			if(n2 < 0 || n2 >= this.cache.length) {
				throw new js__$Boot_HaxeError("Invalid reference");
			}
			return this.cache[n2];
		case 115:
			var len = this.readDigits();
			var buf5 = this.buf;
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len) {
				throw new js__$Boot_HaxeError("Invalid bytes length");
			}
			var codes = haxe_Unserializer.CODES;
			if(codes == null) {
				codes = haxe_Unserializer.initCodes();
				haxe_Unserializer.CODES = codes;
			}
			var i1 = this.pos;
			var rest = len & 3;
			var size = (len >> 2) * 3 + (rest >= 2?rest - 1:0);
			var max = i1 + (len - rest);
			var bytes = new haxe_io_Bytes(new ArrayBuffer(size));
			var bpos = 0;
			while(i1 < max) {
				var c11 = codes[buf5.charCodeAt(i1++)];
				var c2 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c11 << 2 | c2 >> 4) & 255;
				var c3 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c2 << 4 | c3 >> 2) & 255;
				var c4 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c3 << 6 | c4) & 255;
			}
			if(rest >= 2) {
				var c12 = codes[buf5.charCodeAt(i1++)];
				var c21 = codes[buf5.charCodeAt(i1++)];
				bytes.b[bpos++] = (c12 << 2 | c21 >> 4) & 255;
				if(rest == 3) {
					var c31 = codes[buf5.charCodeAt(i1++)];
					bytes.b[bpos++] = (c21 << 4 | c31 >> 2) & 255;
				}
			}
			this.pos += len;
			this.cache.push(bytes);
			return bytes;
		case 116:
			return true;
		case 118:
			var d;
			if(this.buf.charCodeAt(this.pos) >= 48 && this.buf.charCodeAt(this.pos) <= 57 && this.buf.charCodeAt(this.pos + 1) >= 48 && this.buf.charCodeAt(this.pos + 1) <= 57 && this.buf.charCodeAt(this.pos + 2) >= 48 && this.buf.charCodeAt(this.pos + 2) <= 57 && this.buf.charCodeAt(this.pos + 3) >= 48 && this.buf.charCodeAt(this.pos + 3) <= 57 && this.buf.charCodeAt(this.pos + 4) == 45) {
				d = HxOverrides.strDate(HxOverrides.substr(this.buf,this.pos,19));
				this.pos += 19;
			} else {
				var t = this.readFloat();
				d = new Date(t);
			}
			this.cache.push(d);
			return d;
		case 119:
			var name5 = this.unserialize();
			var edecl1 = this.resolver.resolveEnum(name5);
			if(edecl1 == null) {
				throw new js__$Boot_HaxeError("Enum not found " + name5);
			}
			var e2 = this.unserializeEnum(edecl1,this.unserialize());
			this.cache.push(e2);
			return e2;
		case 120:
			throw js__$Boot_HaxeError.wrap(this.unserialize());
			break;
		case 121:
			var len1 = this.readDigits();
			if(this.buf.charCodeAt(this.pos++) != 58 || this.length - this.pos < len1) {
				throw new js__$Boot_HaxeError("Invalid string length");
			}
			var s1 = HxOverrides.substr(this.buf,this.pos,len1);
			this.pos += len1;
			s1 = decodeURIComponent(s1.split("+").join(" "));
			this.scache.push(s1);
			return s1;
		case 122:
			return 0;
		default:
		}
		this.pos--;
		throw new js__$Boot_HaxeError("Invalid char " + this.buf.charAt(this.pos) + " at position " + this.pos);
	}
	,__class__: haxe_Unserializer
};
var haxe__$Unserializer_NullResolver = function() {
};
$hxClasses["haxe._Unserializer.NullResolver"] = haxe__$Unserializer_NullResolver;
haxe__$Unserializer_NullResolver.__name__ = ["haxe","_Unserializer","NullResolver"];
haxe__$Unserializer_NullResolver.instance = null;
haxe__$Unserializer_NullResolver.prototype = {
	resolveClass: function(name) {
		return null;
	}
	,resolveEnum: function(name) {
		return null;
	}
	,__class__: haxe__$Unserializer_NullResolver
};
var haxe_crypto_Base64 = function() { };
$hxClasses["haxe.crypto.Base64"] = haxe_crypto_Base64;
haxe_crypto_Base64.__name__ = ["haxe","crypto","Base64"];
haxe_crypto_Base64.decode = function(str,complement) {
	if(complement == null) {
		complement = true;
	}
	if(complement) {
		while(HxOverrides.cca(str,str.length - 1) == 61) str = HxOverrides.substr(str,0,-1);
	}
	return new haxe_crypto_BaseCode(haxe_crypto_Base64.BYTES).decodeBytes(haxe_io_Bytes.ofString(str));
};
var haxe_crypto_BaseCode = function(base) {
	var len = base.length;
	var nbits = 1;
	while(len > 1 << nbits) ++nbits;
	if(nbits > 8 || len != 1 << nbits) {
		throw new js__$Boot_HaxeError("BaseCode : base length must be a power of two.");
	}
	this.base = base;
	this.nbits = nbits;
};
$hxClasses["haxe.crypto.BaseCode"] = haxe_crypto_BaseCode;
haxe_crypto_BaseCode.__name__ = ["haxe","crypto","BaseCode"];
haxe_crypto_BaseCode.prototype = {
	base: null
	,nbits: null
	,tbl: null
	,encodeBytes: function(b) {
		var nbits = this.nbits;
		var base = this.base;
		var size = b.length * 8 / nbits | 0;
		var out = new haxe_io_Bytes(new ArrayBuffer(size + (b.length * 8 % nbits == 0?0:1)));
		var buf = 0;
		var curbits = 0;
		var mask = (1 << nbits) - 1;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < nbits) {
				curbits += 8;
				buf <<= 8;
				buf |= b.b[pin++];
			}
			curbits -= nbits;
			out.b[pout++] = base.b[buf >> curbits & mask] & 255;
		}
		if(curbits > 0) {
			out.b[pout++] = base.b[buf << nbits - curbits & mask] & 255;
		}
		return out;
	}
	,initTable: function() {
		var tbl = [];
		var _g = 0;
		while(_g < 256) tbl[_g++] = -1;
		var _g1 = 0;
		var _g2 = this.base.length;
		while(_g1 < _g2) {
			var i = _g1++;
			tbl[this.base.b[i]] = i;
		}
		this.tbl = tbl;
	}
	,decodeBytes: function(b) {
		var nbits = this.nbits;
		if(this.tbl == null) {
			this.initTable();
		}
		var tbl = this.tbl;
		var size = b.length * nbits >> 3;
		var out = new haxe_io_Bytes(new ArrayBuffer(size));
		var buf = 0;
		var curbits = 0;
		var pin = 0;
		var pout = 0;
		while(pout < size) {
			while(curbits < 8) {
				curbits += nbits;
				buf <<= nbits;
				var i = tbl[b.b[pin++]];
				if(i == -1) {
					throw new js__$Boot_HaxeError("BaseCode : invalid encoded char");
				}
				buf |= i;
			}
			curbits -= 8;
			out.b[pout++] = buf >> curbits & 255 & 255;
		}
		return out;
	}
	,__class__: haxe_crypto_BaseCode
};
var haxe_crypto_Md5 = function() {
};
$hxClasses["haxe.crypto.Md5"] = haxe_crypto_Md5;
haxe_crypto_Md5.__name__ = ["haxe","crypto","Md5"];
haxe_crypto_Md5.encode = function(s) {
	var m = new haxe_crypto_Md5();
	return m.hex(m.doEncode(haxe_crypto_Md5.str2blks(s)));
};
haxe_crypto_Md5.str2blks = function(str) {
	var str1 = haxe_io_Bytes.ofString(str);
	var nblk = (str1.length + 8 >> 6) + 1;
	var blks = [];
	var blksSize = nblk * 16;
	var _g1 = 0;
	while(_g1 < blksSize) blks[_g1++] = 0;
	var i = 0;
	var max = str1.length;
	var l = max * 8;
	while(i < max) {
		blks[i >> 2] |= str1.b[i] << (l + i) % 4 * 8;
		++i;
	}
	blks[i >> 2] |= 128 << (l + i) % 4 * 8;
	var k = nblk * 16 - 2;
	blks[k] = l & 255;
	blks[k] |= (l >>> 8 & 255) << 8;
	blks[k] |= (l >>> 16 & 255) << 16;
	blks[k] |= (l >>> 24 & 255) << 24;
	return blks;
};
haxe_crypto_Md5.prototype = {
	bitOR: function(a,b) {
		return (a >>> 1 | b >>> 1) << 1 | (a & 1 | b & 1);
	}
	,bitXOR: function(a,b) {
		return (a >>> 1 ^ b >>> 1) << 1 | a & 1 ^ b & 1;
	}
	,bitAND: function(a,b) {
		return (a >>> 1 & b >>> 1) << 1 | a & 1 & (b & 1);
	}
	,addme: function(x,y) {
		var lsw = (x & 65535) + (y & 65535);
		return (x >> 16) + (y >> 16) + (lsw >> 16) << 16 | lsw & 65535;
	}
	,hex: function(a) {
		var str = "";
		var _g = 0;
		while(_g < a.length) {
			var num = a[_g];
			++_g;
			var _g1 = 0;
			while(_g1 < 4) {
				var j = _g1++;
				str += "0123456789abcdef".charAt(num >> j * 8 + 4 & 15) + "0123456789abcdef".charAt(num >> j * 8 & 15);
			}
		}
		return str;
	}
	,rol: function(num,cnt) {
		return num << cnt | num >>> 32 - cnt;
	}
	,cmn: function(q,a,b,x,s,t) {
		return this.addme(this.rol(this.addme(this.addme(a,q),this.addme(x,t)),s),b);
	}
	,ff: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,c),this.bitAND(~b,d)),a,b,x,s,t);
	}
	,gg: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitOR(this.bitAND(b,d),this.bitAND(c,~d)),a,b,x,s,t);
	}
	,hh: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(this.bitXOR(b,c),d),a,b,x,s,t);
	}
	,ii: function(a,b,c,d,x,s,t) {
		return this.cmn(this.bitXOR(c,this.bitOR(b,~d)),a,b,x,s,t);
	}
	,doEncode: function(x) {
		var a = 1732584193;
		var b = -271733879;
		var c = -1732584194;
		var d = 271733878;
		var i = 0;
		while(i < x.length) {
			var olda = a;
			var oldb = b;
			var oldc = c;
			var oldd = d;
			a = this.ff(a,b,c,d,x[i],7,-680876936);
			d = this.ff(d,a,b,c,x[i + 1],12,-389564586);
			c = this.ff(c,d,a,b,x[i + 2],17,606105819);
			b = this.ff(b,c,d,a,x[i + 3],22,-1044525330);
			a = this.ff(a,b,c,d,x[i + 4],7,-176418897);
			d = this.ff(d,a,b,c,x[i + 5],12,1200080426);
			c = this.ff(c,d,a,b,x[i + 6],17,-1473231341);
			b = this.ff(b,c,d,a,x[i + 7],22,-45705983);
			a = this.ff(a,b,c,d,x[i + 8],7,1770035416);
			d = this.ff(d,a,b,c,x[i + 9],12,-1958414417);
			c = this.ff(c,d,a,b,x[i + 10],17,-42063);
			b = this.ff(b,c,d,a,x[i + 11],22,-1990404162);
			a = this.ff(a,b,c,d,x[i + 12],7,1804603682);
			d = this.ff(d,a,b,c,x[i + 13],12,-40341101);
			c = this.ff(c,d,a,b,x[i + 14],17,-1502002290);
			b = this.ff(b,c,d,a,x[i + 15],22,1236535329);
			a = this.gg(a,b,c,d,x[i + 1],5,-165796510);
			d = this.gg(d,a,b,c,x[i + 6],9,-1069501632);
			c = this.gg(c,d,a,b,x[i + 11],14,643717713);
			b = this.gg(b,c,d,a,x[i],20,-373897302);
			a = this.gg(a,b,c,d,x[i + 5],5,-701558691);
			d = this.gg(d,a,b,c,x[i + 10],9,38016083);
			c = this.gg(c,d,a,b,x[i + 15],14,-660478335);
			b = this.gg(b,c,d,a,x[i + 4],20,-405537848);
			a = this.gg(a,b,c,d,x[i + 9],5,568446438);
			d = this.gg(d,a,b,c,x[i + 14],9,-1019803690);
			c = this.gg(c,d,a,b,x[i + 3],14,-187363961);
			b = this.gg(b,c,d,a,x[i + 8],20,1163531501);
			a = this.gg(a,b,c,d,x[i + 13],5,-1444681467);
			d = this.gg(d,a,b,c,x[i + 2],9,-51403784);
			c = this.gg(c,d,a,b,x[i + 7],14,1735328473);
			b = this.gg(b,c,d,a,x[i + 12],20,-1926607734);
			a = this.hh(a,b,c,d,x[i + 5],4,-378558);
			d = this.hh(d,a,b,c,x[i + 8],11,-2022574463);
			c = this.hh(c,d,a,b,x[i + 11],16,1839030562);
			b = this.hh(b,c,d,a,x[i + 14],23,-35309556);
			a = this.hh(a,b,c,d,x[i + 1],4,-1530992060);
			d = this.hh(d,a,b,c,x[i + 4],11,1272893353);
			c = this.hh(c,d,a,b,x[i + 7],16,-155497632);
			b = this.hh(b,c,d,a,x[i + 10],23,-1094730640);
			a = this.hh(a,b,c,d,x[i + 13],4,681279174);
			d = this.hh(d,a,b,c,x[i],11,-358537222);
			c = this.hh(c,d,a,b,x[i + 3],16,-722521979);
			b = this.hh(b,c,d,a,x[i + 6],23,76029189);
			a = this.hh(a,b,c,d,x[i + 9],4,-640364487);
			d = this.hh(d,a,b,c,x[i + 12],11,-421815835);
			c = this.hh(c,d,a,b,x[i + 15],16,530742520);
			b = this.hh(b,c,d,a,x[i + 2],23,-995338651);
			a = this.ii(a,b,c,d,x[i],6,-198630844);
			d = this.ii(d,a,b,c,x[i + 7],10,1126891415);
			c = this.ii(c,d,a,b,x[i + 14],15,-1416354905);
			b = this.ii(b,c,d,a,x[i + 5],21,-57434055);
			a = this.ii(a,b,c,d,x[i + 12],6,1700485571);
			d = this.ii(d,a,b,c,x[i + 3],10,-1894986606);
			c = this.ii(c,d,a,b,x[i + 10],15,-1051523);
			b = this.ii(b,c,d,a,x[i + 1],21,-2054922799);
			a = this.ii(a,b,c,d,x[i + 8],6,1873313359);
			d = this.ii(d,a,b,c,x[i + 15],10,-30611744);
			c = this.ii(c,d,a,b,x[i + 6],15,-1560198380);
			b = this.ii(b,c,d,a,x[i + 13],21,1309151649);
			a = this.ii(a,b,c,d,x[i + 4],6,-145523070);
			d = this.ii(d,a,b,c,x[i + 11],10,-1120210379);
			c = this.ii(c,d,a,b,x[i + 2],15,718787259);
			b = this.ii(b,c,d,a,x[i + 9],21,-343485551);
			a = this.addme(a,olda);
			b = this.addme(b,oldb);
			c = this.addme(c,oldc);
			d = this.addme(d,oldd);
			i += 16;
		}
		return [a,b,c,d];
	}
	,__class__: haxe_crypto_Md5
};
var haxe_ds_IntMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.IntMap"] = haxe_ds_IntMap;
haxe_ds_IntMap.__name__ = ["haxe","ds","IntMap"];
haxe_ds_IntMap.__interfaces__ = [haxe_IMap];
haxe_ds_IntMap.prototype = {
	h: null
	,exists: function(key) {
		return this.h.hasOwnProperty(key);
	}
	,remove: function(key) {
		if(!this.h.hasOwnProperty(key)) {
			return false;
		}
		delete(this.h[key]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h ) if(this.h.hasOwnProperty(key)) {
			a.push(key | 0);
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i];
		}};
	}
	,__class__: haxe_ds_IntMap
};
var haxe_ds_ObjectMap = function() {
	this.h = { __keys__ : { }};
};
$hxClasses["haxe.ds.ObjectMap"] = haxe_ds_ObjectMap;
haxe_ds_ObjectMap.__name__ = ["haxe","ds","ObjectMap"];
haxe_ds_ObjectMap.__interfaces__ = [haxe_IMap];
haxe_ds_ObjectMap.prototype = {
	h: null
	,set: function(key,value) {
		var id = key.__id__ || (key.__id__ = ++haxe_ds_ObjectMap.count);
		this.h[id] = value;
		this.h.__keys__[id] = key;
	}
	,exists: function(key) {
		return this.h.__keys__[key.__id__] != null;
	}
	,remove: function(key) {
		var id = key.__id__;
		if(this.h.__keys__[id] == null) {
			return false;
		}
		delete(this.h[id]);
		delete(this.h.__keys__[id]);
		return true;
	}
	,keys: function() {
		var a = [];
		for( var key in this.h.__keys__ ) {
		if(this.h.hasOwnProperty(key)) {
			a.push(this.h.__keys__[key]);
		}
		}
		return HxOverrides.iter(a);
	}
	,iterator: function() {
		return { ref : this.h, it : this.keys(), hasNext : function() {
			return this.it.hasNext();
		}, next : function() {
			var i = this.it.next();
			return this.ref[i.__id__];
		}};
	}
	,__class__: haxe_ds_ObjectMap
};
var haxe_ds__$StringMap_StringMapIterator = function(map,keys) {
	this.map = map;
	this.keys = keys;
	this.index = 0;
	this.count = keys.length;
};
$hxClasses["haxe.ds._StringMap.StringMapIterator"] = haxe_ds__$StringMap_StringMapIterator;
haxe_ds__$StringMap_StringMapIterator.__name__ = ["haxe","ds","_StringMap","StringMapIterator"];
haxe_ds__$StringMap_StringMapIterator.prototype = {
	map: null
	,keys: null
	,index: null
	,count: null
	,hasNext: function() {
		return this.index < this.count;
	}
	,next: function() {
		var _this = this.map;
		var key = this.keys[this.index++];
		if(__map_reserved[key] != null) {
			return _this.getReserved(key);
		} else {
			return _this.h[key];
		}
	}
	,__class__: haxe_ds__$StringMap_StringMapIterator
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
$hxClasses["haxe.ds.StringMap"] = haxe_ds_StringMap;
haxe_ds_StringMap.__name__ = ["haxe","ds","StringMap"];
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	h: null
	,rh: null
	,exists: function(key) {
		if(__map_reserved[key] != null) {
			return this.existsReserved(key);
		}
		return this.h.hasOwnProperty(key);
	}
	,setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,remove: function(key) {
		if(__map_reserved[key] != null) {
			key = "$" + key;
			if(this.rh == null || !this.rh.hasOwnProperty(key)) {
				return false;
			}
			delete(this.rh[key]);
			return true;
		} else {
			if(!this.h.hasOwnProperty(key)) {
				return false;
			}
			delete(this.h[key]);
			return true;
		}
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,iterator: function() {
		return new haxe_ds__$StringMap_StringMapIterator(this,this.arrayKeys());
	}
	,__class__: haxe_ds_StringMap
};
var haxe_ds__$Vector_Vector_$Impl_$ = {};
$hxClasses["haxe.ds._Vector.Vector_Impl_"] = haxe_ds__$Vector_Vector_$Impl_$;
haxe_ds__$Vector_Vector_$Impl_$.__name__ = ["haxe","ds","_Vector","Vector_Impl_"];
haxe_ds__$Vector_Vector_$Impl_$.blit = function(src,srcPos,dest,destPos,len) {
	var _g1 = 0;
	while(_g1 < len) {
		var i = _g1++;
		dest[destPos + i] = src[srcPos + i];
	}
};
haxe_ds__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var a = [];
	var len = this1.length;
	var _g1 = 0;
	while(_g1 < len) {
		var i = _g1++;
		a[i] = this1[i];
	}
	return a;
};
var haxe_io_Eof = function() { };
$hxClasses["haxe.io.Eof"] = haxe_io_Eof;
haxe_io_Eof.__name__ = ["haxe","io","Eof"];
haxe_io_Eof.prototype = {
	toString: function() {
		return "Eof";
	}
	,__class__: haxe_io_Eof
};
var haxe_io_Error = $hxClasses["haxe.io.Error"] = { __ename__ : ["haxe","io","Error"], __constructs__ : ["Blocked","Overflow","OutsideBounds","Custom"] };
haxe_io_Error.Blocked = ["Blocked",0];
haxe_io_Error.Blocked.toString = $estr;
haxe_io_Error.Blocked.__enum__ = haxe_io_Error;
haxe_io_Error.Overflow = ["Overflow",1];
haxe_io_Error.Overflow.toString = $estr;
haxe_io_Error.Overflow.__enum__ = haxe_io_Error;
haxe_io_Error.OutsideBounds = ["OutsideBounds",2];
haxe_io_Error.OutsideBounds.toString = $estr;
haxe_io_Error.OutsideBounds.__enum__ = haxe_io_Error;
haxe_io_Error.Custom = function(e) { var $x = ["Custom",3,e]; $x.__enum__ = haxe_io_Error; $x.toString = $estr; return $x; };
var haxe_io_FPHelper = function() { };
$hxClasses["haxe.io.FPHelper"] = haxe_io_FPHelper;
haxe_io_FPHelper.__name__ = ["haxe","io","FPHelper"];
haxe_io_FPHelper.i32ToFloat = function(i) {
	var sign = 1 - (i >>> 31 << 1);
	var exp = i >>> 23 & 255;
	var sig = i & 8388607;
	if(sig == 0 && exp == 0) {
		return 0.0;
	}
	return sign * (1 + Math.pow(2,-23) * sig) * Math.pow(2,exp - 127);
};
haxe_io_FPHelper.floatToI32 = function(f) {
	if(f == 0) {
		return 0;
	}
	var af = f < 0?-f:f;
	var exp = Math.floor(Math.log(af) / 0.6931471805599453);
	if(exp < -127) {
		exp = -127;
	} else if(exp > 128) {
		exp = 128;
	}
	return (f < 0?-2147483648:0) | exp + 127 << 23 | Math.round((af / Math.pow(2,exp) - 1) * 8388608) & 8388607;
};
haxe_io_FPHelper.i64ToDouble = function(low,high) {
	var sign = 1 - (high >>> 31 << 1);
	var exp = (high >> 20 & 2047) - 1023;
	var sig = (high & 1048575) * 4294967296. + (low >>> 31) * 2147483648. + (low & 2147483647);
	if(sig == 0 && exp == -1023) {
		return 0.0;
	}
	return sign * (1.0 + Math.pow(2,-52) * sig) * Math.pow(2,exp);
};
haxe_io_FPHelper.doubleToI64 = function(v) {
	var i64 = haxe_io_FPHelper.i64tmp;
	if(v == 0) {
		i64.low = 0;
		i64.high = 0;
	} else {
		var av = v < 0?-v:v;
		var exp = Math.floor(Math.log(av) / 0.6931471805599453);
		var sig = Math.round((av / Math.pow(2,exp) - 1) * 4503599627370496.);
		i64.low = sig | 0;
		i64.high = (v < 0?-2147483648:0) | exp + 1023 << 20 | (sig / 4294967296.0 | 0);
	}
	return i64;
};
var haxe_io_Path = function(path) {
	switch(path) {
	case ".":case "..":
		this.dir = path;
		this.file = "";
		return;
	}
	var c1 = path.lastIndexOf("/");
	var c2 = path.lastIndexOf("\\");
	if(c1 < c2) {
		this.dir = HxOverrides.substr(path,0,c2);
		path = HxOverrides.substr(path,c2 + 1,null);
		this.backslash = true;
	} else if(c2 < c1) {
		this.dir = HxOverrides.substr(path,0,c1);
		path = HxOverrides.substr(path,c1 + 1,null);
	} else {
		this.dir = null;
	}
	var cp = path.lastIndexOf(".");
	if(cp != -1) {
		this.ext = HxOverrides.substr(path,cp + 1,null);
		this.file = HxOverrides.substr(path,0,cp);
	} else {
		this.ext = null;
		this.file = path;
	}
};
$hxClasses["haxe.io.Path"] = haxe_io_Path;
haxe_io_Path.__name__ = ["haxe","io","Path"];
haxe_io_Path.withoutExtension = function(path) {
	var s = new haxe_io_Path(path);
	s.ext = null;
	return s.toString();
};
haxe_io_Path.prototype = {
	dir: null
	,file: null
	,ext: null
	,backslash: null
	,toString: function() {
		return (this.dir == null?"":this.dir + (this.backslash?"\\":"/")) + this.file + (this.ext == null?"":"." + this.ext);
	}
	,__class__: haxe_io_Path
};
var haxe_xml_XmlParserException = function(message,xml,position) {
	this.xml = xml;
	this.message = message;
	this.position = position;
	this.lineNumber = 1;
	this.positionAtLine = 0;
	var _g1 = 0;
	while(_g1 < position) {
		var c = xml.charCodeAt(_g1++);
		if(c == 10) {
			this.lineNumber++;
			this.positionAtLine = 0;
		} else if(c != 13) {
			this.positionAtLine++;
		}
	}
};
$hxClasses["haxe.xml.XmlParserException"] = haxe_xml_XmlParserException;
haxe_xml_XmlParserException.__name__ = ["haxe","xml","XmlParserException"];
haxe_xml_XmlParserException.prototype = {
	message: null
	,lineNumber: null
	,positionAtLine: null
	,position: null
	,xml: null
	,toString: function() {
		return Type.getClassName(js_Boot.getClass(this)) + ": " + this.message + " at line " + this.lineNumber + " char " + this.positionAtLine;
	}
	,__class__: haxe_xml_XmlParserException
};
var haxe_xml_Parser = function() { };
$hxClasses["haxe.xml.Parser"] = haxe_xml_Parser;
haxe_xml_Parser.__name__ = ["haxe","xml","Parser"];
haxe_xml_Parser.parse = function(str,strict) {
	if(strict == null) {
		strict = false;
	}
	var doc = Xml.createDocument();
	haxe_xml_Parser.doParse(str,strict,0,doc);
	return doc;
};
haxe_xml_Parser.doParse = function(str,strict,p,parent) {
	if(p == null) {
		p = 0;
	}
	var xml = null;
	var state = 1;
	var next = 1;
	var aname = null;
	var start = 0;
	var nsubs = 0;
	var nbrackets = 0;
	var c = str.charCodeAt(p);
	var buf = new StringBuf();
	var escapeNext = 1;
	var attrValQuote = -1;
	while(c == c) {
		switch(state) {
		case 0:
			switch(c) {
			case 9:case 10:case 13:case 32:
				break;
			default:
				state = next;
				continue;
			}
			break;
		case 1:
			if(c == 60) {
				state = 0;
				next = 2;
			} else {
				start = p;
				state = 13;
				continue;
			}
			break;
		case 2:
			switch(c) {
			case 33:
				if(str.charCodeAt(p + 1) == 91) {
					p += 2;
					if(HxOverrides.substr(str,p,6).toUpperCase() != "CDATA[") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <![CDATA[",str,p));
					}
					p += 5;
					state = 17;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) == 68 || str.charCodeAt(p + 1) == 100) {
					if(HxOverrides.substr(str,p + 2,6).toUpperCase() != "OCTYPE") {
						throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!DOCTYPE",str,p));
					}
					p += 8;
					state = 16;
					start = p + 1;
				} else if(str.charCodeAt(p + 1) != 45 || str.charCodeAt(p + 2) != 45) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected <!--",str,p));
				} else {
					p += 2;
					state = 15;
					start = p + 1;
				}
				break;
			case 47:
				if(parent == null) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				start = p + 1;
				state = 0;
				next = 10;
				break;
			case 63:
				state = 14;
				start = p;
				break;
			default:
				state = 3;
				start = p;
				continue;
			}
			break;
		case 3:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(p == start) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				xml = Xml.createElement(HxOverrides.substr(str,start,p - start));
				parent.addChild(xml);
				++nsubs;
				state = 0;
				next = 4;
				continue;
			}
			break;
		case 4:
			switch(c) {
			case 47:
				state = 11;
				break;
			case 62:
				state = 9;
				break;
			default:
				state = 5;
				start = p;
				continue;
			}
			break;
		case 5:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				var tmp;
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected attribute name",str,p));
				}
				tmp = HxOverrides.substr(str,start,p - start);
				aname = tmp;
				if(xml.exists(tmp)) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Duplicate attribute [" + tmp + "]",str,p));
				}
				state = 0;
				next = 6;
				continue;
			}
			break;
		case 6:
			if(c == 61) {
				state = 0;
				next = 7;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected =",str,p));
			}
			break;
		case 7:
			switch(c) {
			case 34:case 39:
				buf = new StringBuf();
				state = 8;
				start = p + 1;
				attrValQuote = c;
				break;
			default:
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected \"",str,p));
			}
			break;
		case 8:
			switch(c) {
			case 38:
				var len = p - start;
				buf.b += len == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len);
				state = 18;
				escapeNext = 8;
				start = p + 1;
				break;
			case 60:case 62:
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid unescaped " + String.fromCharCode(c) + " in attribute value",str,p));
				} else if(c == attrValQuote) {
					var len1 = p - start;
					buf.b += len1 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len1);
					var val = buf.b;
					buf = new StringBuf();
					xml.set(aname,val);
					state = 0;
					next = 4;
				}
				break;
			default:
				if(c == attrValQuote) {
					var len2 = p - start;
					buf.b += len2 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len2);
					var val1 = buf.b;
					buf = new StringBuf();
					xml.set(aname,val1);
					state = 0;
					next = 4;
				}
			}
			break;
		case 9:
			p = haxe_xml_Parser.doParse(str,strict,p,xml);
			start = p;
			state = 1;
			break;
		case 10:
			if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45)) {
				if(start == p) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected node name",str,p));
				}
				var v = HxOverrides.substr(str,start,p - start);
				if(parent.nodeType != Xml.Element) {
					throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
				}
				if(v != parent.nodeName) {
					if(parent.nodeType != Xml.Element) {
						throw new js__$Boot_HaxeError("Bad node type, expected Element but found " + parent.nodeType);
					}
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected </" + parent.nodeName + ">",str,p));
				}
				state = 0;
				next = 12;
				continue;
			}
			break;
		case 11:
			if(c == 62) {
				state = 1;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 12:
			if(c == 62) {
				if(nsubs == 0) {
					parent.addChild(Xml.createPCData(""));
				}
				return p;
			} else {
				throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Expected >",str,p));
			}
			break;
		case 13:
			if(c == 60) {
				var len3 = p - start;
				buf.b += len3 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len3);
				var child = Xml.createPCData(buf.b);
				buf = new StringBuf();
				parent.addChild(child);
				++nsubs;
				state = 0;
				next = 2;
			} else if(c == 38) {
				var len4 = p - start;
				buf.b += len4 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len4);
				state = 18;
				escapeNext = 13;
				start = p + 1;
			}
			break;
		case 14:
			if(c == 63 && str.charCodeAt(p + 1) == 62) {
				++p;
				parent.addChild(Xml.createProcessingInstruction(HxOverrides.substr(str,start + 1,p - start - 2)));
				++nsubs;
				state = 1;
			}
			break;
		case 15:
			if(c == 45 && str.charCodeAt(p + 1) == 45 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createComment(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 16:
			if(c == 91) {
				++nbrackets;
			} else if(c == 93) {
				--nbrackets;
			} else if(c == 62 && nbrackets == 0) {
				parent.addChild(Xml.createDocType(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				state = 1;
			}
			break;
		case 17:
			if(c == 93 && str.charCodeAt(p + 1) == 93 && str.charCodeAt(p + 2) == 62) {
				parent.addChild(Xml.createCData(HxOverrides.substr(str,start,p - start)));
				++nsubs;
				p += 2;
				state = 1;
			}
			break;
		case 18:
			if(c == 59) {
				var s = HxOverrides.substr(str,start,p - start);
				if(s.charCodeAt(0) == 35) {
					buf.b += String.fromCharCode(s.charCodeAt(1) == 120?Std.parseInt("0" + HxOverrides.substr(s,1,s.length - 1)):Std.parseInt(HxOverrides.substr(s,1,s.length - 1)));
				} else {
					var _this = haxe_xml_Parser.escapes;
					if(!(__map_reserved[s] != null?_this.existsReserved(s):_this.h.hasOwnProperty(s))) {
						if(strict) {
							throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Undefined entity: " + s,str,p));
						}
						buf.b += Std.string("&" + s + ";");
					} else {
						var _this1 = haxe_xml_Parser.escapes;
						buf.b += Std.string(__map_reserved[s] != null?_this1.getReserved(s):_this1.h[s]);
					}
				}
				start = p + 1;
				state = escapeNext;
			} else if(!(c >= 97 && c <= 122 || c >= 65 && c <= 90 || c >= 48 && c <= 57 || c == 58 || c == 46 || c == 95 || c == 45) && c != 35) {
				if(strict) {
					throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Invalid character in entity: " + String.fromCharCode(c),str,p));
				}
				buf.b += "&";
				var len5 = p - start;
				buf.b += len5 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len5);
				start = p--;
				state = escapeNext;
			}
			break;
		}
		c = str.charCodeAt(++p);
	}
	if(state == 1) {
		start = p;
		state = 13;
	}
	if(state == 13) {
		if(p != start || nsubs == 0) {
			var len6 = p - start;
			buf.b += len6 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len6);
			parent.addChild(Xml.createPCData(buf.b));
		}
		return p;
	}
	if(!strict && state == 18 && escapeNext == 13) {
		buf.b += "&";
		var len7 = p - start;
		buf.b += len7 == null?HxOverrides.substr(str,start,null):HxOverrides.substr(str,start,len7);
		parent.addChild(Xml.createPCData(buf.b));
		return p;
	}
	throw new js__$Boot_HaxeError(new haxe_xml_XmlParserException("Unexpected end",str,p));
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
$hxClasses["js._Boot.HaxeError"] = js__$Boot_HaxeError;
js__$Boot_HaxeError.__name__ = ["js","_Boot","HaxeError"];
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	val: null
	,__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
$hxClasses["js.Boot"] = js_Boot;
js_Boot.__name__ = ["js","Boot"];
js_Boot.__unhtml = function(s) {
	return s.split("&").join("&amp;").split("<").join("&lt;").split(">").join("&gt;");
};
js_Boot.__trace = function(v,i) {
	var msg = i != null?i.fileName + ":" + i.lineNumber + ": ":"";
	msg += js_Boot.__string_rec(v,"");
	if(i != null && i.customParams != null) {
		var _g = 0;
		var _g1 = i.customParams;
		while(_g < _g1.length) {
			var v1 = _g1[_g];
			++_g;
			msg += "," + js_Boot.__string_rec(v1,"");
		}
	}
	var d;
	var tmp;
	if(typeof(document) != "undefined") {
		d = document.getElementById("haxe:trace");
		tmp = d != null;
	} else {
		tmp = false;
	}
	if(tmp) {
		d.innerHTML += js_Boot.__unhtml(msg) + "<br/>";
	} else if(typeof console != "undefined" && console.log != null) {
		console.log(msg);
	}
};
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0?",":"") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__cast = function(o,t) {
	if(js_Boot.__instanceof(o,t)) {
		return o;
	} else {
		throw new js__$Boot_HaxeError("Cannot cast " + Std.string(o) + " to " + Std.string(t));
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var js_Browser = function() { };
$hxClasses["js.Browser"] = js_Browser;
js_Browser.__name__ = ["js","Browser"];
js_Browser.getLocalStorage = function() {
	try {
		var s = window.famobi.localStorage;
		s.getItem("");
		return s;
	} catch( e ) {
		haxe_CallStack.lastException = e;
		return null;
	}
};
js_Browser.alert = function(v) {
	window.alert(js_Boot.__string_rec(v,""));
};
var js_html_compat_ArrayBuffer = function(a) {
	if((a instanceof Array) && a.__enum__ == null) {
		this.a = a;
		this.byteLength = a.length;
	} else {
		var len = a;
		this.a = [];
		var _g1 = 0;
		var _g = len;
		while(_g1 < _g) this.a[_g1++] = 0;
		this.byteLength = len;
	}
};
$hxClasses["js.html.compat.ArrayBuffer"] = js_html_compat_ArrayBuffer;
js_html_compat_ArrayBuffer.__name__ = ["js","html","compat","ArrayBuffer"];
js_html_compat_ArrayBuffer.sliceImpl = function(begin,end) {
	var u = new Uint8Array(this,begin,end == null?null:end - begin);
	var result = new ArrayBuffer(u.byteLength);
	new Uint8Array(result).set(u);
	return result;
};
js_html_compat_ArrayBuffer.prototype = {
	byteLength: null
	,a: null
	,slice: function(begin,end) {
		return new js_html_compat_ArrayBuffer(this.a.slice(begin,end));
	}
	,__class__: js_html_compat_ArrayBuffer
};
var js_html_compat_DataView = function(buffer,byteOffset,byteLength) {
	this.buf = buffer;
	this.offset = byteOffset == null?0:byteOffset;
	this.length = byteLength == null?buffer.byteLength - this.offset:byteLength;
	if(this.offset < 0 || this.length < 0 || this.offset + this.length > buffer.byteLength) {
		throw new js__$Boot_HaxeError(haxe_io_Error.OutsideBounds);
	}
};
$hxClasses["js.html.compat.DataView"] = js_html_compat_DataView;
js_html_compat_DataView.__name__ = ["js","html","compat","DataView"];
js_html_compat_DataView.prototype = {
	buf: null
	,offset: null
	,length: null
	,getInt8: function(byteOffset) {
		var v = this.buf.a[this.offset + byteOffset];
		if(v >= 128) {
			return v - 256;
		} else {
			return v;
		}
	}
	,getUint8: function(byteOffset) {
		return this.buf.a[this.offset + byteOffset];
	}
	,getInt16: function(byteOffset,littleEndian) {
		var v = this.getUint16(byteOffset,littleEndian);
		if(v >= 32768) {
			return v - 65536;
		} else {
			return v;
		}
	}
	,getUint16: function(byteOffset,littleEndian) {
		if(littleEndian) {
			return this.buf.a[this.offset + byteOffset] | this.buf.a[this.offset + byteOffset + 1] << 8;
		} else {
			return this.buf.a[this.offset + byteOffset] << 8 | this.buf.a[this.offset + byteOffset + 1];
		}
	}
	,getInt32: function(byteOffset,littleEndian) {
		var p = this.offset + byteOffset;
		var a = this.buf.a[p++];
		var b = this.buf.a[p++];
		var c = this.buf.a[p++];
		var d = this.buf.a[p++];
		if(littleEndian) {
			return a | b << 8 | c << 16 | d << 24;
		} else {
			return d | c << 8 | b << 16 | a << 24;
		}
	}
	,getUint32: function(byteOffset,littleEndian) {
		var v = this.getInt32(byteOffset,littleEndian);
		if(v < 0) {
			return v + 4294967296.;
		} else {
			return v;
		}
	}
	,getFloat32: function(byteOffset,littleEndian) {
		return haxe_io_FPHelper.i32ToFloat(this.getInt32(byteOffset,littleEndian));
	}
	,getFloat64: function(byteOffset,littleEndian) {
		var a = this.getInt32(byteOffset,littleEndian);
		var b = this.getInt32(byteOffset + 4,littleEndian);
		return haxe_io_FPHelper.i64ToDouble(littleEndian?a:b,littleEndian?b:a);
	}
	,setInt8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value < 0?value + 128 & 255:value & 255;
	}
	,setUint8: function(byteOffset,value) {
		this.buf.a[byteOffset + this.offset] = value & 255;
	}
	,setInt16: function(byteOffset,value,littleEndian) {
		this.setUint16(byteOffset,value < 0?value + 65536:value,littleEndian);
	}
	,setUint16: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
		} else {
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p] = value & 255;
		}
	}
	,setInt32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,value,littleEndian);
	}
	,setUint32: function(byteOffset,value,littleEndian) {
		var p = byteOffset + this.offset;
		if(littleEndian) {
			this.buf.a[p++] = value & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >>> 24;
		} else {
			this.buf.a[p++] = value >>> 24;
			this.buf.a[p++] = value >> 16 & 255;
			this.buf.a[p++] = value >> 8 & 255;
			this.buf.a[p++] = value & 255;
		}
	}
	,setFloat32: function(byteOffset,value,littleEndian) {
		this.setUint32(byteOffset,haxe_io_FPHelper.floatToI32(value),littleEndian);
	}
	,setFloat64: function(byteOffset,value,littleEndian) {
		var i64 = haxe_io_FPHelper.doubleToI64(value);
		if(littleEndian) {
			this.setUint32(byteOffset,i64.low);
			this.setUint32(byteOffset,i64.high);
		} else {
			this.setUint32(byteOffset,i64.high);
			this.setUint32(byteOffset,i64.low);
		}
	}
	,__class__: js_html_compat_DataView
};
var js_html_compat_Float32Array = function() { };
$hxClasses["js.html.compat.Float32Array"] = js_html_compat_Float32Array;
js_html_compat_Float32Array.__name__ = ["js","html","compat","Float32Array"];
js_html_compat_Float32Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		var _g2 = [];
		var _g21 = 0;
		var _g11 = arr.length << 2;
		while(_g21 < _g11) {
			var i1 = _g21++;
			_g2.push(0);
		}
		arr.buffer = new js_html_compat_ArrayBuffer(_g2);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset >> 2;
		}
		arr = [];
		var _g12 = 0;
		var _g3 = length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			var val = buffer.a[offset++] | buffer.a[offset++] << 8 | buffer.a[offset++] << 16 | buffer.a[offset++] << 24;
			arr.push(haxe_io_FPHelper.i32ToFloat(val));
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		var buffer1 = [];
		var _g4 = 0;
		while(_g4 < arr.length) {
			var f = arr[_g4];
			++_g4;
			var i3 = haxe_io_FPHelper.floatToI32(f);
			buffer1.push(i3 & 255);
			buffer1.push(i3 >> 8 & 255);
			buffer1.push(i3 >> 16 & 255);
			buffer1.push(i3 >>> 24);
		}
		arr.byteLength = arr.length << 2;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(buffer1);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Float32Array._subarray;
	arr.set = js_html_compat_Float32Array._set;
	return arr;
};
js_html_compat_Float32Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Float32Array._subarray = function(start,end) {
	var a = js_html_compat_Float32Array._new(this.slice(start,end));
	a.byteOffset = start * 4;
	return a;
};
var js_html_compat_Uint8Array = function() { };
$hxClasses["js.html.compat.Uint8Array"] = js_html_compat_Uint8Array;
js_html_compat_Uint8Array.__name__ = ["js","html","compat","Uint8Array"];
js_html_compat_Uint8Array._new = function(arg1,offset,length) {
	var arr;
	if(typeof(arg1) == "number") {
		arr = [];
		var _g1 = 0;
		var _g = arg1;
		while(_g1 < _g) {
			var i = _g1++;
			arr[i] = 0;
		}
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else if(js_Boot.__instanceof(arg1,js_html_compat_ArrayBuffer)) {
		var buffer = arg1;
		if(offset == null) {
			offset = 0;
		}
		if(length == null) {
			length = buffer.byteLength - offset;
		}
		if(offset == 0) {
			arr = buffer.a;
		} else {
			arr = buffer.a.slice(offset,offset + length);
		}
		arr.byteLength = arr.length;
		arr.byteOffset = offset;
		arr.buffer = buffer;
	} else if((arg1 instanceof Array) && arg1.__enum__ == null) {
		arr = arg1.slice();
		arr.byteLength = arr.length;
		arr.byteOffset = 0;
		arr.buffer = new js_html_compat_ArrayBuffer(arr);
	} else {
		throw new js__$Boot_HaxeError("TODO " + Std.string(arg1));
	}
	arr.subarray = js_html_compat_Uint8Array._subarray;
	arr.set = js_html_compat_Uint8Array._set;
	return arr;
};
js_html_compat_Uint8Array._set = function(arg,offset) {
	if(js_Boot.__instanceof(arg.buffer,js_html_compat_ArrayBuffer)) {
		var a = arg;
		if(arg.byteLength + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g1 = 0;
		var _g = arg.byteLength;
		while(_g1 < _g) {
			var i = _g1++;
			this[i + offset] = a[i];
		}
	} else if((arg instanceof Array) && arg.__enum__ == null) {
		var a1 = arg;
		if(a1.length + offset > this.byteLength) {
			throw new js__$Boot_HaxeError("set() outside of range");
		}
		var _g11 = 0;
		var _g2 = a1.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			this[i1 + offset] = a1[i1];
		}
	} else {
		throw new js__$Boot_HaxeError("TODO");
	}
};
js_html_compat_Uint8Array._subarray = function(start,end) {
	var a = js_html_compat_Uint8Array._new(this.slice(start,end));
	a.byteOffset = start;
	return a;
};
var lime_AssetCache = function() {
	this.enabled = true;
	this.audio = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.image = new haxe_ds_StringMap();
	this.version = Math.random() * 1000000 | 0;
};
$hxClasses["lime.AssetCache"] = lime_AssetCache;
lime_AssetCache.__name__ = ["lime","AssetCache"];
lime_AssetCache.prototype = {
	audio: null
	,enabled: null
	,image: null
	,font: null
	,version: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.audio = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.image = new haxe_ds_StringMap();
		} else {
			var keys = this.audio.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.audio.remove(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.font.remove(key1);
				}
			}
			var keys2 = this.image.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.image.remove(key2);
				}
			}
		}
	}
	,__class__: lime_AssetCache
};
var lime_app_Event_$Void_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Void_Void"] = lime_app_Event_$Void_$Void;
lime_app_Event_$Void_$Void.__name__ = ["lime","app","Event_Void_Void"];
lime_app_Event_$Void_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function() {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i]();
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Void_$Void
};
var lime_Assets = function() { };
$hxClasses["lime.Assets"] = lime_Assets;
lime_Assets.__name__ = ["lime","Assets"];
lime_Assets.exists = function(id,type) {
	lime_Assets.initialize();
	if(type == null) {
		type = "BINARY";
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.exists(symbolName,type);
	}
	return false;
};
lime_Assets.getAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	lime_Assets.initialize();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.audio;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.audio;
		var audio = __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		if(lime_Assets.isValidAudio(audio)) {
			return audio;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			if(library.isLocal(symbolName,"SOUND")) {
				var audio1 = library.getAudioBuffer(symbolName);
				if(useCache && lime_Assets.cache.enabled) {
					var _this2 = lime_Assets.cache.audio;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,audio1);
					} else {
						_this2.h[id] = audio1;
					}
				}
				return audio1;
			} else {
				haxe_Log.trace("[Assets] Audio asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 122, className : "lime.Assets", methodName : "getAudioBuffer"});
			}
		} else {
			haxe_Log.trace("[Assets] There is no audio asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 128, className : "lime.Assets", methodName : "getAudioBuffer"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 134, className : "lime.Assets", methodName : "getAudioBuffer"});
	}
	return null;
};
lime_Assets.getBytes = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			if(library.isLocal(symbolName,"BINARY")) {
				return library.getBytes(symbolName);
			} else {
				haxe_Log.trace("[Assets] String or Bytes asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 171, className : "lime.Assets", methodName : "getBytes"});
			}
		} else {
			haxe_Log.trace("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 177, className : "lime.Assets", methodName : "getBytes"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 183, className : "lime.Assets", methodName : "getBytes"});
	}
	return null;
};
lime_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	lime_Assets.initialize();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.font;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.font;
		return __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			if(library.isLocal(symbolName,"FONT")) {
				var font = library.getFont(symbolName);
				if(useCache && lime_Assets.cache.enabled) {
					var _this2 = lime_Assets.cache.font;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,font);
					} else {
						_this2.h[id] = font;
					}
				}
				return font;
			} else {
				haxe_Log.trace("[Assets] Font asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 234, className : "lime.Assets", methodName : "getFont"});
			}
		} else {
			haxe_Log.trace("[Assets] There is no Font asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 240, className : "lime.Assets", methodName : "getFont"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 246, className : "lime.Assets", methodName : "getFont"});
	}
	return null;
};
lime_Assets.getImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	lime_Assets.initialize();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.image;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.image;
		var image = __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		if(lime_Assets.isValidImage(image)) {
			return image;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			if(library.isLocal(symbolName,"IMAGE")) {
				var image1 = library.getImage(symbolName);
				if(useCache && lime_Assets.cache.enabled) {
					var _this2 = lime_Assets.cache.image;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,image1);
					} else {
						_this2.h[id] = image1;
					}
				}
				return image1;
			} else {
				haxe_Log.trace("[Assets] Image asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 304, className : "lime.Assets", methodName : "getImage"});
			}
		} else {
			haxe_Log.trace("[Assets] There is no Image asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 310, className : "lime.Assets", methodName : "getImage"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 316, className : "lime.Assets", methodName : "getImage"});
	}
	return null;
};
lime_Assets.getLibrary = function(name) {
	if(name == null || name == "") {
		name = "default";
	}
	var _this = lime_Assets.libraries;
	return __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
};
lime_Assets.getPath = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,null)) {
			return library.getPath(symbolName);
		} else {
			haxe_Log.trace("[Assets] There is no asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 364, className : "lime.Assets", methodName : "getPath"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 370, className : "lime.Assets", methodName : "getPath"});
	}
	return null;
};
lime_Assets.getText = function(id) {
	lime_Assets.initialize();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			if(library.isLocal(symbolName,"TEXT")) {
				return library.getText(symbolName);
			} else {
				haxe_Log.trace("[Assets] String asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 407, className : "lime.Assets", methodName : "getText"});
			}
		} else {
			haxe_Log.trace("[Assets] There is no String asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 413, className : "lime.Assets", methodName : "getText"});
		}
	} else {
		haxe_Log.trace("[Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 419, className : "lime.Assets", methodName : "getText"});
	}
	return null;
};
lime_Assets.initialize = function() {
	if(!lime_Assets.initialized) {
		lime_Assets.registerLibrary("default",new DefaultAssetLibrary());
		lime_Assets.initialized = true;
	}
};
lime_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	lime_Assets.initialize();
	if(useCache && lime_Assets.cache.enabled) {
		if(type == "IMAGE" || type == null) {
			var _this = lime_Assets.cache.image;
			if(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			var _this1 = lime_Assets.cache.font;
			if(__map_reserved[id] != null?_this1.existsReserved(id):_this1.h.hasOwnProperty(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			var _this2 = lime_Assets.cache.audio;
			if(__map_reserved[id] != null?_this2.existsReserved(id):_this2.h.hasOwnProperty(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
lime_Assets.isValidAudio = function(buffer) {
	return buffer != null;
};
lime_Assets.isValidImage = function(buffer) {
	return true;
};
lime_Assets.list = function(type) {
	lime_Assets.initialize();
	var items = [];
	var _this = lime_Assets.libraries;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) {
		var libraryItems = tmp.next().list(type);
		if(libraryItems != null) {
			items = items.concat(libraryItems);
		}
	}
	return items;
};
lime_Assets.loadAudioBuffer = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.audio;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.audio;
		var audio = __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		if(lime_Assets.isValidAudio(audio)) {
			promise.complete(audio);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"SOUND")) {
			var future = library.loadAudioBuffer(symbolName);
			if(useCache && lime_Assets.cache.enabled) {
				future.onComplete(function(audio1) {
					var _this2 = lime_Assets.cache.audio;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,audio1);
					} else {
						_this2.h[id] = audio1;
					}
				});
			}
			promise.completeWith(future);
		} else {
			promise.error("[Assets] There is no audio asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
lime_Assets.loadBytes = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"BINARY")) {
			promise.completeWith(library.loadBytes(symbolName));
		} else {
			promise.error("[Assets] There is no String or Bytes asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
lime_Assets.loadFont = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"FONT")) {
			promise.completeWith(library.loadFont(symbolName));
		} else {
			promise.error("[Assets] There is no Font asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
lime_Assets.loadImage = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var tmp;
	if(useCache && lime_Assets.cache.enabled) {
		var _this = lime_Assets.cache.image;
		if(__map_reserved[id] != null) {
			tmp = _this.existsReserved(id);
		} else {
			tmp = _this.h.hasOwnProperty(id);
		}
	} else {
		tmp = false;
	}
	if(tmp) {
		var _this1 = lime_Assets.cache.image;
		var image = __map_reserved[id] != null?_this1.getReserved(id):_this1.h[id];
		if(lime_Assets.isValidImage(image)) {
			promise.complete(image);
			return promise.future;
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"IMAGE")) {
			var future = library.loadImage(symbolName);
			if(useCache && lime_Assets.cache.enabled) {
				future.onComplete(function(image1) {
					var _this2 = lime_Assets.cache.image;
					if(__map_reserved[id] != null) {
						_this2.setReserved(id,image1);
					} else {
						_this2.h[id] = image1;
					}
				});
			}
			promise.completeWith(future);
		} else {
			promise.error("[Assets] There is no Image asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
lime_Assets.loadLibrary = function(name) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var data = lime_Assets.getText("libraries/" + name + ".json");
	if(data != null && data != "") {
		var info = JSON.parse(data);
		var library = Type.createInstance(Type.resolveClass(info.type),info.args);
		var _this = lime_Assets.libraries;
		if(__map_reserved[name] != null) {
			_this.setReserved(name,library);
		} else {
			_this.h[name] = library;
		}
		library.onChange.add(($_=lime_Assets.onChange,$bind($_,$_.dispatch)));
		promise.completeWith(library.load());
	} else {
		promise.error("[Assets] There is no asset library named \"" + name + "\"");
	}
	return promise.future;
};
lime_Assets.loadText = function(id) {
	lime_Assets.initialize();
	var promise = new lime_app_Promise();
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = lime_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"TEXT")) {
			promise.completeWith(library.loadText(symbolName));
		} else {
			promise.error("[Assets] There is no String asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
lime_Assets.registerLibrary = function(name,library) {
	var _this = lime_Assets.libraries;
	if(__map_reserved[name] != null?_this.existsReserved(name):_this.h.hasOwnProperty(name)) {
		var _this1 = lime_Assets.libraries;
		if((__map_reserved[name] != null?_this1.getReserved(name):_this1.h[name]) == library) {
			return;
		} else {
			lime_Assets.unloadLibrary(name);
		}
	}
	if(library != null) {
		library.onChange.add(lime_Assets.library_onChange);
	}
	var _this2 = lime_Assets.libraries;
	if(__map_reserved[name] != null) {
		_this2.setReserved(name,library);
	} else {
		_this2.h[name] = library;
	}
};
lime_Assets.unloadLibrary = function(name) {
	lime_Assets.initialize();
	var _this = lime_Assets.libraries;
	var library = __map_reserved[name] != null?_this.getReserved(name):_this.h[name];
	if(library != null) {
		lime_Assets.cache.clear(name + ":");
		library.onChange.remove(lime_Assets.library_onChange);
		library.unload();
	}
	lime_Assets.libraries.remove(name);
};
lime_Assets.library_onChange = function() {
	lime_Assets.cache.clear();
	lime_Assets.onChange.dispatch();
};
var lime__$backend_html5_HTML5Application = function(parent) {
	this.gameDeviceCache = new haxe_ds_IntMap();
	this.parent = parent;
	this.currentUpdate = 0;
	this.lastUpdate = 0;
	this.nextUpdate = 0;
	this.framePeriod = -1;
	lime_audio_AudioManager.init();
};
$hxClasses["lime._backend.html5.HTML5Application"] = lime__$backend_html5_HTML5Application;
lime__$backend_html5_HTML5Application.__name__ = ["lime","_backend","html5","HTML5Application"];
lime__$backend_html5_HTML5Application.prototype = {
	gameDeviceCache: null
	,currentUpdate: null
	,deltaTime: null
	,framePeriod: null
	,lastUpdate: null
	,nextUpdate: null
	,parent: null
	,convertKeyCode: function(keyCode) {
		if(keyCode >= 65 && keyCode <= 90) {
			return keyCode + 32;
		}
		switch(keyCode) {
		case 16:
			return 1073742049;
		case 17:
			return 1073742048;
		case 18:
			return 1073742050;
		case 20:
			return 1073741881;
		case 33:
			return 1073741899;
		case 34:
			return 1073741902;
		case 35:
			return 1073741901;
		case 36:
			return 1073741898;
		case 37:
			return 1073741904;
		case 38:
			return 1073741906;
		case 39:
			return 1073741903;
		case 40:
			return 1073741905;
		case 45:
			return 1073741897;
		case 46:
			return 127;
		case 112:
			return 1073741882;
		case 113:
			return 1073741883;
		case 114:
			return 1073741884;
		case 115:
			return 1073741885;
		case 116:
			return 1073741886;
		case 117:
			return 1073741887;
		case 118:
			return 1073741888;
		case 119:
			return 1073741889;
		case 120:
			return 1073741890;
		case 121:
			return 1073741891;
		case 122:
			return 1073741892;
		case 123:
			return 1073741893;
		case 124:
			return 1073741928;
		case 125:
			return 1073741929;
		case 126:
			return 1073741930;
		case 144:
			return 1073741907;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		return keyCode;
	}
	,create: function(config) {
	}
	,exec: function() {
		window.addEventListener("keydown",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("keyup",$bind(this,this.handleKeyEvent),false);
		window.addEventListener("focus",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("blur",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("resize",$bind(this,this.handleWindowEvent),false);
		window.addEventListener("beforeunload",$bind(this,this.handleWindowEvent),false);

			if (!CanvasRenderingContext2D.prototype.isPointInStroke) {
				CanvasRenderingContext2D.prototype.isPointInStroke = function (path, x, y) {
					return false;
				};
			}

			var lastTime = 0;
			var vendors = ['ms', 'moz', 'webkit', 'o'];
			for (var x = 0; x < vendors.length && !window.requestAnimationFrame; ++x) {
				window.requestAnimationFrame = window[vendors[x]+'RequestAnimationFrame'];
				window.cancelAnimationFrame = window[vendors[x]+'CancelAnimationFrame'] || window[vendors[x]+'CancelRequestAnimationFrame'];
			}

			if (!window.requestAnimationFrame)
				window.requestAnimationFrame = function(callback, element) {
					var currTime = new Date().getTime();
					var timeToCall = Math.max(0, 16 - (currTime - lastTime));
					var id = window.setTimeout(function() { callback(currTime + timeToCall); },
					  timeToCall);
					lastTime = currTime + timeToCall;
					return id;
				};

			if (!window.cancelAnimationFrame)
				window.cancelAnimationFrame = function(id) {
					clearTimeout(id);
				};

			window.requestAnimFrame = window.requestAnimationFrame;
		;
		this.lastUpdate = new Date().getTime();
		this.handleApplicationEvent();
		return 0;
	}
	,exit: function() {
	}
	,getFrameRate: function() {
		if(this.framePeriod < 0) {
			return 60;
		} else if(this.framePeriod == 1000) {
			return 0;
		} else {
			return 1000 / this.framePeriod;
		}
	}
	,handleApplicationEvent: function(__) {
		this.updateGameDevices();
		this.currentUpdate = new Date().getTime();
		if(this.currentUpdate >= this.nextUpdate) {
			this.deltaTime = this.currentUpdate - this.lastUpdate;
			this.parent.onUpdate.dispatch(this.deltaTime | 0);
			if(this.parent.renderers[0] != null) {
				this.parent.renderers[0].onRender.dispatch();
				this.parent.renderers[0].flip();
			}
			if(this.framePeriod < 0) {
				this.nextUpdate = this.currentUpdate;
				this.nextUpdate = this.currentUpdate;
			} else {
				this.nextUpdate = this.currentUpdate + this.framePeriod;
			}
			this.lastUpdate = this.currentUpdate;
		}
		window.requestAnimationFrame($bind(this,this.handleApplicationEvent));
	}
	,handleKeyEvent: function(event) {
		if(this.parent.windows[0] != null) {
			var keyCode = this.convertKeyCode(event.keyCode != null?event.keyCode:event.which);
			var modifier = (event.shiftKey?3:0) | (event.ctrlKey?192:0) | (event.altKey?768:0) | (event.metaKey?3072:0);
			if(event.type == "keydown") {
				this.parent.windows[0].onKeyDown.dispatch(keyCode,modifier);
				if(this.parent.windows[0].onKeyDown.canceled) {
					event.preventDefault();
				}
			} else {
				this.parent.windows[0].onKeyUp.dispatch(keyCode,modifier);
				if(this.parent.windows[0].onKeyUp.canceled) {
					event.preventDefault();
				}
			}
		}
	}
	,handleWindowEvent: function(event) {
		if(this.parent.windows[0] != null) {
			switch(event.type) {
			case "beforeunload":
				this.parent.windows[0].onClose.dispatch();
				break;
			case "blur":
				this.parent.windows[0].onFocusOut.dispatch();
				this.parent.windows[0].onDeactivate.dispatch();
				break;
			case "focus":
				this.parent.windows[0].onFocusIn.dispatch();
				this.parent.windows[0].onActivate.dispatch();
				break;
			case "resize":
				var cacheWidth = this.parent.windows[0].__width;
				var cacheHeight = this.parent.windows[0].__height;
				this.parent.windows[0].backend.handleResize();
				if(this.parent.windows[0].__width != cacheWidth || this.parent.windows[0].__height != cacheHeight) {
					this.parent.windows[0].onResize.dispatch(this.parent.windows[0].__width,this.parent.windows[0].__height);
				}
				break;
			}
		}
	}
	,setFrameRate: function(value) {
		if(value >= 60) {
			this.framePeriod = -1;
		} else if(value > 0) {
			this.framePeriod = 1000 / value;
		} else {
			this.framePeriod = 1000;
		}
		return value;
	}
	,updateGameDevices: function() {
		var devices = lime_ui_Joystick.__getDeviceData();
		if(devices == null) {
			return;
		}
		var gamepad;
		var joystick;
		var data;
		var cache;
		var _g1 = 0;
		var _g = devices.length;
		while(_g1 < _g) {
			var i = _g1++;
			data = devices[i];
			if(data == null) {
				continue;
			}
			if(!this.gameDeviceCache.h.hasOwnProperty(i)) {
				cache = new lime__$backend_html5_GameDeviceData();
				cache.id = i;
				cache.connected = data.connected;
				var _g3 = 0;
				var _g2 = data.buttons.length;
				while(_g3 < _g2) cache.buttons.push(data.buttons[_g3++].value);
				var _g31 = 0;
				var _g21 = data.axes.length;
				while(_g31 < _g21) cache.axes.push(data.axes[_g31++]);
				if(data.mapping == "standard") {
					cache.isGamepad = true;
				}
				this.gameDeviceCache.h[i] = cache;
				if(data.connected) {
					lime_ui_Joystick.__connect(i);
					if(cache.isGamepad) {
						lime_ui_Gamepad.__connect(i);
					}
				}
			}
			cache = this.gameDeviceCache.h[i];
			joystick = lime_ui_Joystick.devices.h[i];
			gamepad = lime_ui_Gamepad.devices.h[i];
			if(data.connected) {
				var button;
				var value;
				var _g32 = 0;
				var _g22 = data.buttons.length;
				while(_g32 < _g22) {
					var i1 = _g32++;
					value = data.buttons[i1].value;
					if(value != cache.buttons[i1]) {
						if(i1 == 6) {
							joystick.onAxisMove.dispatch(data.axes.length,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(4,value);
							}
						} else if(i1 == 7) {
							joystick.onAxisMove.dispatch(data.axes.length + 1,value);
							if(gamepad != null) {
								gamepad.onAxisMove.dispatch(5,value);
							}
						} else {
							if(value > 0) {
								joystick.onButtonDown.dispatch(i1);
							} else {
								joystick.onButtonUp.dispatch(i1);
							}
							if(gamepad != null) {
								switch(i1) {
								case 0:
									button = 0;
									break;
								case 1:
									button = 1;
									break;
								case 2:
									button = 2;
									break;
								case 3:
									button = 3;
									break;
								case 4:
									button = 9;
									break;
								case 5:
									button = 10;
									break;
								case 8:
									button = 4;
									break;
								case 9:
									button = 6;
									break;
								case 10:
									button = 7;
									break;
								case 11:
									button = 8;
									break;
								case 12:
									button = 11;
									break;
								case 13:
									button = 12;
									break;
								case 14:
									button = 13;
									break;
								case 15:
									button = 14;
									break;
								case 16:
									button = 5;
									break;
								default:
									continue;
								}
								if(value > 0) {
									gamepad.onButtonDown.dispatch(button);
								} else {
									gamepad.onButtonUp.dispatch(button);
								}
							}
						}
						cache.buttons[i1] = value;
					}
				}
				var _g33 = 0;
				var _g23 = data.axes.length;
				while(_g33 < _g23) {
					var i2 = _g33++;
					if(data.axes[i2] != cache.axes[i2]) {
						joystick.onAxisMove.dispatch(i2,data.axes[i2]);
						if(gamepad != null) {
							gamepad.onAxisMove.dispatch(i2,data.axes[i2]);
						}
						cache.axes[i2] = data.axes[i2];
					}
				}
			} else if(cache.connected) {
				cache.connected = false;
				lime_ui_Joystick.__disconnect(i);
				lime_ui_Gamepad.__disconnect(i);
			}
		}
	}
	,__class__: lime__$backend_html5_HTML5Application
};
var lime__$backend_html5_GameDeviceData = function() {
	this.connected = true;
	this.buttons = [];
	this.axes = [];
};
$hxClasses["lime._backend.html5.GameDeviceData"] = lime__$backend_html5_GameDeviceData;
lime__$backend_html5_GameDeviceData.__name__ = ["lime","_backend","html5","GameDeviceData"];
lime__$backend_html5_GameDeviceData.prototype = {
	connected: null
	,id: null
	,isGamepad: null
	,buttons: null
	,axes: null
	,__class__: lime__$backend_html5_GameDeviceData
};
var lime__$backend_html5_HTML5Mouse = function() { };
$hxClasses["lime._backend.html5.HTML5Mouse"] = lime__$backend_html5_HTML5Mouse;
lime__$backend_html5_HTML5Mouse.__name__ = ["lime","_backend","html5","HTML5Mouse"];
lime__$backend_html5_HTML5Mouse.__cursor = null;
lime__$backend_html5_HTML5Mouse.__hidden = null;
lime__$backend_html5_HTML5Mouse.hide = function() {
	if(!lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = true;
		var _g = 0;
		var _g1 = lime_app_Application.current.windows;
		while(_g < _g1.length) {
			var $window = _g1[_g];
			++_g;
			$window.backend.element.style.cursor = "none";
		}
	}
};
lime__$backend_html5_HTML5Mouse.show = function() {
	if(lime__$backend_html5_HTML5Mouse.__hidden) {
		lime__$backend_html5_HTML5Mouse.__hidden = false;
		var cacheValue = lime__$backend_html5_HTML5Mouse.__cursor;
		lime__$backend_html5_HTML5Mouse.__cursor = null;
		lime__$backend_html5_HTML5Mouse.set_cursor(cacheValue);
	}
};
lime__$backend_html5_HTML5Mouse.warp = function(x,y,window) {
};
lime__$backend_html5_HTML5Mouse.get_cursor = function() {
	if(lime__$backend_html5_HTML5Mouse.__cursor == null) {
		return lime_ui_MouseCursor.DEFAULT;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.set_cursor = function(value) {
	if(lime__$backend_html5_HTML5Mouse.__cursor != value) {
		if(!lime__$backend_html5_HTML5Mouse.__hidden) {
			var _g = 0;
			var _g1 = lime_app_Application.current.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				var tmp;
				switch(value[1]) {
				case 0:
					tmp = "default";
					break;
				case 1:
					tmp = "crosshair";
					break;
				case 3:
					tmp = "move";
					break;
				case 4:
					tmp = "pointer";
					break;
				case 5:
					tmp = "nesw-resize";
					break;
				case 6:
					tmp = "ns-resize";
					break;
				case 7:
					tmp = "nwse-resize";
					break;
				case 8:
					tmp = "ew-resize";
					break;
				case 9:
					tmp = "text";
					break;
				case 10:
					tmp = "wait";
					break;
				case 11:
					tmp = "wait";
					break;
				default:
					tmp = "auto";
				}
				$window.backend.element.style.cursor = tmp;
			}
		}
		lime__$backend_html5_HTML5Mouse.__cursor = value;
	}
	return lime__$backend_html5_HTML5Mouse.__cursor;
};
lime__$backend_html5_HTML5Mouse.get_lock = function() {
	return false;
};
lime__$backend_html5_HTML5Mouse.set_lock = function(value) {
	return value;
};
var lime__$backend_html5_HTML5Renderer = function(parent) {
	this.parent = parent;
};
$hxClasses["lime._backend.html5.HTML5Renderer"] = lime__$backend_html5_HTML5Renderer;
lime__$backend_html5_HTML5Renderer.__name__ = ["lime","_backend","html5","HTML5Renderer"];
lime__$backend_html5_HTML5Renderer.prototype = {
	parent: null
	,create: function() {
		this.createContext();
		if(this.parent.context[1] == 0) {
			this.parent.window.backend.canvas.addEventListener("webglcontextlost",$bind(this,this.handleEvent),false);
			this.parent.window.backend.canvas.addEventListener("webglcontextrestored",$bind(this,this.handleEvent),false);
		}
	}
	,createContext: function() {
		if(this.parent.window.backend.div != null) {
			this.parent.context = lime_graphics_RenderContext.DOM(this.parent.window.backend.div);
			this.parent.type = lime_graphics_RendererType.DOM;
		} else if(this.parent.window.backend.canvas != null) {
			var webgl = null;
			if(webgl == null) {
				this.parent.context = lime_graphics_RenderContext.CANVAS(this.parent.window.backend.canvas.getContext("2d"));
				this.parent.type = lime_graphics_RendererType.CANVAS;
			} else {
				lime_graphics_opengl_GL.context = webgl;
				this.parent.context = lime_graphics_RenderContext.OPENGL(lime_graphics_opengl_GL.context);
				this.parent.type = lime_graphics_RendererType.OPENGL;
			}
		}
	}
	,flip: function() {
	}
	,handleEvent: function(event) {
		switch(event.type) {
		case "webglcontextlost":
			event.preventDefault();
			this.parent.context = null;
			this.parent.onContextLost.dispatch();
			break;
		case "webglcontextrestored":
			this.createContext();
			this.parent.onContextRestored.dispatch(this.parent.context);
			break;
		default:
		}
	}
	,readPixels: function(rect) {
		if(this.parent.window.backend.canvas != null) {
			if(rect == null) {
				rect = new lime_math_Rectangle(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			} else {
				rect.__contract(0,0,this.parent.window.backend.canvas.width,this.parent.window.backend.canvas.height);
			}
			if(rect.width > 0 && rect.height > 0) {
				var canvas = window.document.createElement("canvas");
				canvas.width = rect.width | 0;
				canvas.height = rect.height | 0;
				var context = canvas.getContext("2d");
				context.drawImage(this.parent.window.backend.canvas,-rect.x,-rect.y);
				return lime_graphics_Image.fromCanvas(canvas);
			}
		}
		return null;
	}
	,render: function() {
	}
	,__class__: lime__$backend_html5_HTML5Renderer
};
var lime__$backend_html5_HTML5Window = function(parent) {
	this.unusedTouchesPool = new List();
	this.currentTouches = new haxe_ds_IntMap();
	this.parent = parent;
	if(parent.config != null && Object.prototype.hasOwnProperty.call(parent.config,"element")) {
		this.element = parent.config.element;
	}
};
$hxClasses["lime._backend.html5.HTML5Window"] = lime__$backend_html5_HTML5Window;
lime__$backend_html5_HTML5Window.__name__ = ["lime","_backend","html5","HTML5Window"];
lime__$backend_html5_HTML5Window.textInput = null;
lime__$backend_html5_HTML5Window.prototype = {
	canvas: null
	,div: null
	,element: null
	,currentTouches: null
	,enableTextEvents: null
	,parent: null
	,primaryTouch: null
	,setHeight: null
	,setWidth: null
	,unusedTouchesPool: null
	,alert: function(message,title) {
		if(message != null) {
			js_Browser.alert(message);
		}
	}
	,close: function() {
		this.parent.application.removeWindow(this.parent);
	}
	,create: function(application) {
		this.setWidth = this.parent.__width;
		this.setHeight = this.parent.__height;
		this.parent.id = lime__$backend_html5_HTML5Window.windowID++;
		if(js_Boot.__instanceof(this.element,HTMLCanvasElement)) {
			this.canvas = this.element;
		} else {
			this.canvas = window.document.createElement("canvas");
		}
		if(this.canvas != null) {
			var style = this.canvas.style;
			style.setProperty("-webkit-transform","translateZ(0)",null);
			style.setProperty("transform","translateZ(0)",null);
		} else if(this.div != null) {
			var style1 = this.div.style;
			style1.setProperty("-webkit-transform","translate3D(0,0,0)",null);
			style1.setProperty("transform","translate3D(0,0,0)",null);
			style1.position = "relative";
			style1.overflow = "hidden";
			style1.setProperty("-webkit-user-select","none",null);
			style1.setProperty("-moz-user-select","none",null);
			style1.setProperty("-ms-user-select","none",null);
			style1.setProperty("-o-user-select","none",null);
		}
		if(this.parent.__width == 0 && this.parent.__height == 0) {
			if(this.element != null) {
				this.parent.set_width(this.element.clientWidth);
				this.parent.set_height(this.element.clientHeight);
			} else {
				this.parent.set_width(window.innerWidth);
				this.parent.set_height(window.innerHeight);
			}
			this.parent.set_fullscreen(true);
		}
		if(this.canvas != null) {
			this.canvas.width = this.parent.__width;
			this.canvas.height = this.parent.__height;
		} else {
			this.div.style.width = this.parent.__width + "px";
			this.div.style.height = this.parent.__height + "px";
		}
		this.handleResize();
		if(this.element != null) {
			if(this.canvas != null) {
				if(this.element != this.canvas) {
					this.element.appendChild(this.canvas);
				}
			} else {
				this.element.appendChild(this.div);
			}
			var events = ["mousedown","mouseenter","mouseleave","mousemove","mouseup","wheel"];
			var _g = 0;
			while(_g < events.length) {
				var event = events[_g];
				++_g;
				this.element.addEventListener(event,$bind(this,this.handleMouseEvent),true);
			}
			window.document.addEventListener("dragstart",function(e) {
				if(e.target.nodeName.toLowerCase() == "img") {
					e.preventDefault();
					return false;
				}
				return true;
			},false);
			this.element.addEventListener("touchstart",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchmove",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("touchend",$bind(this,this.handleTouchEvent),true);
			this.element.addEventListener("gamepadconnected",$bind(this,this.handleGamepadEvent),true);
			this.element.addEventListener("gamepaddisconnected",$bind(this,this.handleGamepadEvent),true);
		}
	}
	,focus: function() {
	}
	,getDisplay: function() {
		return lime_system_System.getDisplay(0);
	}
	,getEnableTextEvents: function() {
		return this.enableTextEvents;
	}
	,handleFocusEvent: function(event) {
		if(this.enableTextEvents) {
			haxe_Timer.delay(function() {
				lime__$backend_html5_HTML5Window.textInput.focus();
			},20);
		}
	}
	,handleGamepadEvent: function(event) {
		switch(event.type) {
		case "gamepadconnected":
			lime_ui_Joystick.__connect(event.gamepad.index);
			if(event.gamepad.mapping == "standard") {
				lime_ui_Gamepad.__connect(event.gamepad.index);
			}
			break;
		case "gamepaddisconnected":
			lime_ui_Joystick.__disconnect(event.gamepad.index);
			lime_ui_Gamepad.__disconnect(event.gamepad.index);
			break;
		default:
		}
	}
	,handleInputEvent: function(event) {
		if(lime__$backend_html5_HTML5Window.textInput.value != "") {
			this.parent.onTextInput.dispatch(lime__$backend_html5_HTML5Window.textInput.value);
			lime__$backend_html5_HTML5Window.textInput.value = "";
		}
	}
	,handleMouseEvent: function(event) {
		var x = 0.0;
		var y = 0.0;
		if(event.type != "wheel") {
			if(this.element != null) {
				if(this.canvas != null) {
					var rect = this.canvas.getBoundingClientRect();
					x = (event.clientX - rect.left) * (this.parent.__width / rect.width);
					y = (event.clientY - rect.top) * (this.parent.__height / rect.height);
				} else if(this.div != null) {
					var rect1 = this.div.getBoundingClientRect();
					x = event.clientX - rect1.left;
					y = event.clientY - rect1.top;
				} else {
					var rect2 = this.element.getBoundingClientRect();
					x = (event.clientX - rect2.left) * (this.parent.__width / rect2.width);
					y = (event.clientY - rect2.top) * (this.parent.__height / rect2.height);
				}
			} else {
				x = event.clientX;
				y = event.clientY;
			}
			var _g = event.type;
			switch(_g) {
			case "mousedown":
				this.parent.onMouseDown.dispatch(x,y,event.button);
				break;
			case "mouseenter":
				this.parent.onEnter.dispatch();
				break;
			case "mouseleave":
				this.parent.onLeave.dispatch();
				break;
			case "mousemove":
				this.parent.onMouseMove.dispatch(x,y);
				break;
			case "mouseup":
				this.parent.onMouseUp.dispatch(x,y,event.button);
				break;
			default:
			}
		} else {
			this.parent.onMouseWheel.dispatch(event.deltaX,-event.deltaY);
		}
	}
	,handleResize: function() {
		var stretch = this.parent.__fullscreen || this.setWidth == 0 && this.setHeight == 0;
		if(this.element != null && (this.div == null || this.div != null && stretch)) {
			if(stretch) {
				if(this.parent.__width != this.element.clientWidth || this.parent.__height != this.element.clientHeight) {
					this.parent.set_width(this.element.clientWidth);
					this.parent.set_height(this.element.clientHeight);
					if(this.canvas != null) {
						if(this.element != this.canvas) {
							this.canvas.width = this.element.clientWidth;
							this.canvas.height = this.element.clientHeight;
						}
					} else {
						this.div.style.width = this.element.clientWidth + "px";
						this.div.style.height = this.element.clientHeight + "px";
					}
				}
			} else {
				var targetRatio = Math.min(this.element.clientWidth / this.setWidth,this.element.clientHeight / this.setHeight);
				if(this.canvas != null) {
					if(this.element != this.canvas) {
						this.canvas.style.width = this.setWidth * targetRatio + "px";
						this.canvas.style.height = this.setHeight * targetRatio + "px";
						this.canvas.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
						this.canvas.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
					}
				} else {
					this.div.style.width = this.setWidth * targetRatio + "px";
					this.div.style.height = this.setHeight * targetRatio + "px";
					this.div.style.marginLeft = (this.element.clientWidth - this.setWidth * targetRatio) / 2 + "px";
					this.div.style.marginTop = (this.element.clientHeight - this.setHeight * targetRatio) / 2 + "px";
				}
			}
		}
	}
	,handleTouchEvent: function(event) {
		event.preventDefault();
		var rect = null;
		if(this.element != null) {
			if(this.canvas != null) {
				rect = this.canvas.getBoundingClientRect();
			} else if(this.div != null) {
				rect = this.div.getBoundingClientRect();
			} else {
				rect = this.element.getBoundingClientRect();
			}
		}
		var windowWidth = this.setWidth;
		var windowHeight = this.setHeight;
		if(windowWidth == 0 || windowHeight == 0) {
			if(rect != null) {
				windowWidth = rect.width;
				windowHeight = rect.height;
			} else {
				windowWidth = 1;
				windowHeight = 1;
			}
		}
		var _g = 0;
		var _g1 = event.changedTouches;
		while(_g < _g1.length) {
			var data = _g1[_g];
			++_g;
			var x = 0.0;
			var y = 0.0;
			if(rect != null) {
				x = (data.clientX - rect.left) * (windowWidth / rect.width);
				y = (data.clientY - rect.top) * (windowHeight / rect.height);
			} else {
				x = data.clientX;
				y = data.clientY;
			}
			switch(event.type) {
			case "touchend":
				var touch = this.currentTouches.h[data.identifier];
				if(touch != null) {
					var cacheX = touch.x;
					var cacheY = touch.y;
					touch.x = x / windowWidth;
					touch.y = y / windowHeight;
					touch.dx = touch.x - cacheX;
					touch.dy = touch.y - cacheY;
					touch.pressure = data.force;
					lime_ui_Touch.onEnd.dispatch(touch);
					this.currentTouches.remove(data.identifier);
					this.unusedTouchesPool.add(touch);
					if(touch == this.primaryTouch) {
						this.parent.onMouseUp.dispatch(x,y,0);
						this.primaryTouch = null;
					}
				}
				break;
			case "touchmove":
				var touch1 = this.currentTouches.h[data.identifier];
				if(touch1 != null) {
					var cacheX1 = touch1.x;
					var cacheY1 = touch1.y;
					touch1.x = x / windowWidth;
					touch1.y = y / windowHeight;
					touch1.dx = touch1.x - cacheX1;
					touch1.dy = touch1.y - cacheY1;
					touch1.pressure = data.force;
					lime_ui_Touch.onMove.dispatch(touch1);
					if(touch1 == this.primaryTouch) {
						this.parent.onMouseMove.dispatch(x,y);
					}
				}
				break;
			case "touchstart":
				var touch2 = this.unusedTouchesPool.pop();
				if(touch2 == null) {
					touch2 = new lime_ui_Touch(x / windowWidth,y / windowHeight,data.identifier,0,0,data.force,this.parent.id);
				} else {
					touch2.x = x / windowWidth;
					touch2.y = y / windowHeight;
					touch2.id = data.identifier;
					touch2.dx = 0;
					touch2.dy = 0;
					touch2.pressure = data.force;
					touch2.device = this.parent.id;
				}
				this.currentTouches.h[data.identifier] = touch2;
				lime_ui_Touch.onStart.dispatch(touch2);
				if(this.primaryTouch == null) {
					this.primaryTouch = touch2;
				}
				if(touch2 == this.primaryTouch) {
					this.parent.onMouseDown.dispatch(x,y,0);
				}
				break;
			default:
			}
		}
	}
	,move: function(x,y) {
	}
	,resize: function(width,height) {
	}
	,setBorderless: function(value) {
		return value;
	}
	,setEnableTextEvents: function(value) {
		if(value) {
			if(lime__$backend_html5_HTML5Window.textInput == null) {
				lime__$backend_html5_HTML5Window.textInput = window.document.createElement("input");
				lime__$backend_html5_HTML5Window.textInput.type = "text";
				lime__$backend_html5_HTML5Window.textInput.style.position = "absolute";
				lime__$backend_html5_HTML5Window.textInput.style.opacity = "0";
				lime__$backend_html5_HTML5Window.textInput.style.color = "transparent";
				lime__$backend_html5_HTML5Window.textInput.value = "";
				lime__$backend_html5_HTML5Window.textInput.autocapitalize = "off";
				lime__$backend_html5_HTML5Window.textInput.autocorrect = "off";
				lime__$backend_html5_HTML5Window.textInput.autocomplete = "off";
				lime__$backend_html5_HTML5Window.textInput.style.left = "0px";
				lime__$backend_html5_HTML5Window.textInput.style.top = "50%";
				if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
					lime__$backend_html5_HTML5Window.textInput.style.fontSize = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.width = "0px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "0px";
				} else {
					lime__$backend_html5_HTML5Window.textInput.style.width = "1px";
					lime__$backend_html5_HTML5Window.textInput.style.height = "1px";
				}
				lime__$backend_html5_HTML5Window.textInput.style.pointerEvents = "none";
				lime__$backend_html5_HTML5Window.textInput.style.zIndex = "-10000000";
				window.document.body.appendChild(lime__$backend_html5_HTML5Window.textInput);
			}
			if(!this.enableTextEvents) {
				lime__$backend_html5_HTML5Window.textInput.addEventListener("input",$bind(this,this.handleInputEvent),true);
				lime__$backend_html5_HTML5Window.textInput.addEventListener("blur",$bind(this,this.handleFocusEvent),true);
			}
			lime__$backend_html5_HTML5Window.textInput.focus();
		} else if(lime__$backend_html5_HTML5Window.textInput != null) {
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("input",$bind(this,this.handleInputEvent),true);
			lime__$backend_html5_HTML5Window.textInput.removeEventListener("blur",$bind(this,this.handleFocusEvent),true);
			lime__$backend_html5_HTML5Window.textInput.blur();
		}
		return this.enableTextEvents = value;
	}
	,setFullscreen: function(value) {
		return false;
	}
	,setIcon: function(image) {
	}
	,setMaximized: function(value) {
		return false;
	}
	,setMinimized: function(value) {
		return false;
	}
	,setResizable: function(value) {
		return value;
	}
	,setTitle: function(value) {
		return value;
	}
	,__class__: lime__$backend_html5_HTML5Window
};
var lime_app_IModule = function() { };
$hxClasses["lime.app.IModule"] = lime_app_IModule;
lime_app_IModule.__name__ = ["lime","app","IModule"];
lime_app_IModule.prototype = {
	onGamepadAxisMove: null
	,onGamepadButtonDown: null
	,onGamepadButtonUp: null
	,onGamepadConnect: null
	,onGamepadDisconnect: null
	,onJoystickAxisMove: null
	,onJoystickButtonDown: null
	,onJoystickButtonUp: null
	,onJoystickConnect: null
	,onJoystickDisconnect: null
	,onJoystickHatMove: null
	,onJoystickTrackballMove: null
	,onKeyDown: null
	,onKeyUp: null
	,onModuleExit: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onPreloadComplete: null
	,onPreloadProgress: null
	,onRenderContextLost: null
	,onRenderContextRestored: null
	,onTextEdit: null
	,onTextInput: null
	,onTouchEnd: null
	,onTouchMove: null
	,onTouchStart: null
	,onWindowActivate: null
	,onWindowClose: null
	,onWindowCreate: null
	,onWindowDeactivate: null
	,onWindowDropFile: null
	,onWindowEnter: null
	,onWindowFocusIn: null
	,onWindowFocusOut: null
	,onWindowFullscreen: null
	,onWindowLeave: null
	,onWindowMove: null
	,onWindowMinimize: null
	,onWindowResize: null
	,onWindowRestore: null
	,render: null
	,update: null
	,__class__: lime_app_IModule
};
var lime_app_Module = function() {
	this.onExit = new lime_app_Event_$Int_$Void();
};
$hxClasses["lime.app.Module"] = lime_app_Module;
lime_app_Module.__name__ = ["lime","app","Module"];
lime_app_Module.__interfaces__ = [lime_app_IModule];
lime_app_Module.prototype = {
	onExit: null
	,onGamepadAxisMove: function(gamepad,axis,value) {
	}
	,onGamepadButtonDown: function(gamepad,button) {
	}
	,onGamepadButtonUp: function(gamepad,button) {
	}
	,onGamepadConnect: function(gamepad) {
		haxe_Log.trace("onGamepadConnect (module)",{ fileName : "Module.hx", lineNumber : 64, className : "lime.app.Module", methodName : "onGamepadConnect"});
	}
	,onGamepadDisconnect: function(gamepad) {
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
	}
	,onKeyUp: function(window,keyCode,modifier) {
	}
	,onModuleExit: function(code) {
	}
	,onMouseDown: function(window,x,y,button) {
	}
	,onMouseMove: function(window,x,y) {
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
	}
	,onTouchEnd: function(touch) {
	}
	,onTouchMove: function(touch) {
	}
	,onTouchStart: function(touch) {
	}
	,onWindowActivate: function(window) {
	}
	,onWindowClose: function(window) {
	}
	,onWindowCreate: function(window) {
	}
	,onWindowDeactivate: function(window) {
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
	}
	,onWindowFocusOut: function(window) {
	}
	,onWindowFullscreen: function(window) {
	}
	,onWindowLeave: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowResize: function(window,width,height) {
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
	}
	,update: function(deltaTime) {
	}
	,__class__: lime_app_Module
};
var lime_app_Application = function() {
	this.onUpdate = new lime_app_Event_$Int_$Void();
	lime_app_Module.call(this);
	if(lime_app_Application.current == null) {
		lime_app_Application.current = this;
	}
	this.modules = [];
	this.renderers = [];
	this.windows = [];
	this.windowByID = new haxe_ds_IntMap();
	this.backend = new lime__$backend_html5_HTML5Application(this);
	this.onExit.add($bind(this,this.onModuleExit));
	this.onUpdate.add($bind(this,this.update));
	lime_ui_Gamepad.onConnect.add($bind(this,this.__onGamepadConnect));
	lime_ui_Joystick.onConnect.add($bind(this,this.__onJoystickConnect));
	lime_ui_Touch.onStart.add($bind(this,this.onTouchStart));
	lime_ui_Touch.onMove.add($bind(this,this.onTouchMove));
	lime_ui_Touch.onEnd.add($bind(this,this.onTouchEnd));
};
$hxClasses["lime.app.Application"] = lime_app_Application;
lime_app_Application.__name__ = ["lime","app","Application"];
lime_app_Application.current = null;
lime_app_Application.__super__ = lime_app_Module;
lime_app_Application.prototype = $extend(lime_app_Module.prototype,{
	config: null
	,modules: null
	,preloader: null
	,onUpdate: null
	,renderer: null
	,renderers: null
	,window: null
	,windows: null
	,backend: null
	,windowByID: null
	,addModule: function(module) {
		this.modules.push(module);
		if(this.windows.length > 0) {
			var _g = 0;
			var _g1 = this.windows;
			while(_g < _g1.length) {
				var $window = _g1[_g];
				++_g;
				module.onWindowCreate($window);
			}
			if(this.preloader == null || this.preloader.complete) {
				module.onPreloadComplete();
			}
		}
	}
	,addRenderer: function(renderer) {
		var f = $bind(this,this.render);
		var a1 = renderer;
		renderer.onRender.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.onRenderContextLost);
		var a11 = renderer;
		renderer.onContextLost.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onRenderContextRestored);
		var a12 = renderer;
		renderer.onContextRestored.add(function(a2) {
			f2(a12,a2);
		});
		this.renderers.push(renderer);
	}
	,create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new lime_ui_Window(_g1[0]));
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) {
				this.onPreloadComplete();
			}
		}
	}
	,createWindow: function(window) {
		var f = $bind(this,this.onWindowActivate);
		var a1 = window;
		window.onActivate.add(function() {
			f(a1);
		});
		var f1 = $bind(this,this.onWindowClose);
		var a11 = window;
		window.onClose.add(function() {
			f1(a11);
		});
		var f2 = $bind(this,this.onWindowCreate);
		var a12 = window;
		window.onCreate.add(function() {
			f2(a12);
		});
		var f3 = $bind(this,this.onWindowDeactivate);
		var a13 = window;
		window.onDeactivate.add(function() {
			f3(a13);
		});
		var f4 = $bind(this,this.onWindowDropFile);
		var a14 = window;
		window.onDropFile.add(function(a2) {
			f4(a14,a2);
		});
		var f5 = $bind(this,this.onWindowEnter);
		var a15 = window;
		window.onEnter.add(function() {
			f5(a15);
		});
		var f6 = $bind(this,this.onWindowFocusIn);
		var a16 = window;
		window.onFocusIn.add(function() {
			f6(a16);
		});
		var f7 = $bind(this,this.onWindowFocusOut);
		var a17 = window;
		window.onFocusOut.add(function() {
			f7(a17);
		});
		var f8 = $bind(this,this.onWindowFullscreen);
		var a18 = window;
		window.onFullscreen.add(function() {
			f8(a18);
		});
		var f9 = $bind(this,this.onKeyDown);
		var a19 = window;
		window.onKeyDown.add(function(a21,a3) {
			f9(a19,a21,a3);
		});
		var f10 = $bind(this,this.onKeyUp);
		var a110 = window;
		window.onKeyUp.add(function(a22,a31) {
			f10(a110,a22,a31);
		});
		var f11 = $bind(this,this.onWindowLeave);
		var a111 = window;
		window.onLeave.add(function() {
			f11(a111);
		});
		var f12 = $bind(this,this.onWindowMinimize);
		var a112 = window;
		window.onMinimize.add(function() {
			f12(a112);
		});
		var f13 = $bind(this,this.onMouseDown);
		var a113 = window;
		window.onMouseDown.add(function(x,y,a23) {
			f13(a113,x,y,a23);
		});
		var f14 = $bind(this,this.onMouseMove);
		var a114 = window;
		window.onMouseMove.add(function(x1,y1) {
			f14(a114,x1,y1);
		});
		var f15 = $bind(this,this.onMouseMoveRelative);
		var a115 = window;
		window.onMouseMoveRelative.add(function(x2,y2) {
			f15(a115,x2,y2);
		});
		var f16 = $bind(this,this.onMouseUp);
		var a116 = window;
		window.onMouseUp.add(function(x3,y3,a24) {
			f16(a116,x3,y3,a24);
		});
		var f17 = $bind(this,this.onMouseWheel);
		var a117 = window;
		window.onMouseWheel.add(function(a25,a32) {
			f17(a117,a25,a32);
		});
		var f18 = $bind(this,this.onWindowMove);
		var a118 = window;
		window.onMove.add(function(x4,y4) {
			f18(a118,x4,y4);
		});
		var f19 = $bind(this,this.onWindowResize);
		var a119 = window;
		window.onResize.add(function(a26,a33) {
			f19(a119,a26,a33);
		});
		var f20 = $bind(this,this.onWindowRestore);
		var a120 = window;
		window.onRestore.add(function() {
			f20(a120);
		});
		var f21 = $bind(this,this.onTextEdit);
		var a121 = window;
		window.onTextEdit.add(function(a27,a34,a4) {
			f21(a121,a27,a34,a4);
		});
		var f22 = $bind(this,this.onTextInput);
		var a122 = window;
		window.onTextInput.add(function(a28) {
			f22(a122,a28);
		});
		if(window.renderer == null) {
			this.addRenderer(new lime_graphics_Renderer(window));
		}
		window.create(this);
		this.windows.push(window);
		this.windowByID.h[window.id] = window;
		window.onCreate.dispatch();
	}
	,exec: function() {
		lime_app_Application.current = this;
		return this.backend.exec();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadAxisMove(gamepad,axis,value);
		}
	}
	,onGamepadButtonDown: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonDown(gamepad,button);
		}
	}
	,onGamepadButtonUp: function(gamepad,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadButtonUp(gamepad,button);
		}
	}
	,onGamepadConnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadConnect(gamepad);
		}
	}
	,onGamepadDisconnect: function(gamepad) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onGamepadDisconnect(gamepad);
		}
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickAxisMove(joystick,axis,value);
		}
	}
	,onJoystickButtonDown: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonDown(joystick,button);
		}
	}
	,onJoystickButtonUp: function(joystick,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickButtonUp(joystick,button);
		}
	}
	,onJoystickConnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickConnect(joystick);
		}
	}
	,onJoystickDisconnect: function(joystick) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickDisconnect(joystick);
		}
	}
	,onJoystickHatMove: function(joystick,hat,position) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickHatMove(joystick,hat,position);
		}
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onJoystickTrackballMove(joystick,trackball,value);
		}
	}
	,onKeyDown: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyDown(window,keyCode,modifier);
		}
	}
	,onKeyUp: function(window,keyCode,modifier) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onKeyUp(window,keyCode,modifier);
		}
	}
	,onModuleExit: function(code) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onModuleExit(code);
		}
		this.backend.exit();
	}
	,onMouseDown: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseDown(window,x,y,button);
		}
	}
	,onMouseMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMove(window,x,y);
		}
	}
	,onMouseMoveRelative: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseMoveRelative(window,x,y);
		}
	}
	,onMouseUp: function(window,x,y,button) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseUp(window,x,y,button);
		}
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onMouseWheel(window,deltaX,deltaY);
		}
	}
	,onPreloadComplete: function() {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadComplete();
		}
	}
	,onPreloadProgress: function(loaded,total) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onPreloadProgress(loaded,total);
		}
	}
	,onRenderContextLost: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextLost(renderer);
		}
	}
	,onRenderContextRestored: function(renderer,context) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onRenderContextRestored(renderer,context);
		}
	}
	,onTextEdit: function(window,text,start,length) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextEdit(window,text,start,length);
		}
	}
	,onTextInput: function(window,text) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTextInput(window,text);
		}
	}
	,onTouchEnd: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchEnd(touch);
		}
	}
	,onTouchMove: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchMove(touch);
		}
	}
	,onTouchStart: function(touch) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onTouchStart(touch);
		}
	}
	,onWindowActivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowActivate(window);
		}
	}
	,onWindowClose: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowClose(window);
		}
		this.removeWindow(window);
	}
	,onWindowCreate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowCreate(window);
		}
	}
	,onWindowDeactivate: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDeactivate(window);
		}
	}
	,onWindowDropFile: function(window,file) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowDropFile(window,file);
		}
	}
	,onWindowEnter: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowEnter(window);
		}
	}
	,onWindowFocusIn: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusIn(window);
		}
	}
	,onWindowFocusOut: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFocusOut(window);
		}
	}
	,onWindowFullscreen: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowFullscreen(window);
		}
	}
	,onWindowLeave: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowLeave(window);
		}
	}
	,onWindowMinimize: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMinimize(window);
		}
	}
	,onWindowMove: function(window,x,y) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowMove(window,x,y);
		}
	}
	,onWindowResize: function(window,width,height) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowResize(window,width,height);
		}
	}
	,onWindowRestore: function(window) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.onWindowRestore(window);
		}
	}
	,removeModule: function(module) {
		if(module != null) {
			module.onModuleExit(0);
			HxOverrides.remove(this.modules,module);
		}
	}
	,removeRenderer: function(renderer) {
		if(renderer != null && this.renderers.indexOf(renderer) > -1) {
			HxOverrides.remove(this.renderers,renderer);
		}
	}
	,removeWindow: function(window) {
		if(window != null && this.windowByID.h.hasOwnProperty(window.id)) {
			HxOverrides.remove(this.windows,window);
			this.windowByID.remove(window.id);
			window.close();
			if(this.windows[0] == window) {
				this.window = null;
			}
		}
	}
	,render: function(renderer) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.render(renderer);
		}
	}
	,setPreloader: function(preloader) {
		if(this.preloader != null) {
			this.preloader.onProgress.remove($bind(this,this.onPreloadProgress));
			this.preloader.onComplete.remove($bind(this,this.onPreloadComplete));
		}
		this.preloader = preloader;
		if(preloader.complete) {
			this.onPreloadComplete();
		} else {
			preloader.onProgress.add($bind(this,this.onPreloadProgress));
			preloader.onComplete.add($bind(this,this.onPreloadComplete));
		}
	}
	,update: function(deltaTime) {
		var _g = 0;
		var _g1 = this.modules;
		while(_g < _g1.length) {
			var module = _g1[_g];
			++_g;
			module.update(deltaTime);
		}
	}
	,__onGamepadConnect: function(gamepad) {
		this.onGamepadConnect(gamepad);
		var f = $bind(this,this.onGamepadAxisMove);
		var a1 = gamepad;
		gamepad.onAxisMove.add(function(a2,a3) {
			f(a1,a2,a3);
		});
		var f1 = $bind(this,this.onGamepadButtonDown);
		var a11 = gamepad;
		gamepad.onButtonDown.add(function(a21) {
			f1(a11,a21);
		});
		var f2 = $bind(this,this.onGamepadButtonUp);
		var a12 = gamepad;
		gamepad.onButtonUp.add(function(a22) {
			f2(a12,a22);
		});
		var f3 = $bind(this,this.onGamepadDisconnect);
		var a13 = gamepad;
		gamepad.onDisconnect.add(function() {
			f3(a13);
		});
	}
	,__onJoystickConnect: function(joystick) {
		this.onJoystickConnect(joystick);
		var f = $bind(this,this.onJoystickAxisMove);
		var a1 = joystick;
		joystick.onAxisMove.add(function(a2,a3) {
			f(a1,a2,a3);
		});
		var f1 = $bind(this,this.onJoystickButtonDown);
		var a11 = joystick;
		joystick.onButtonDown.add(function(a21) {
			f1(a11,a21);
		});
		var f2 = $bind(this,this.onJoystickButtonUp);
		var a12 = joystick;
		joystick.onButtonUp.add(function(a22) {
			f2(a12,a22);
		});
		var f3 = $bind(this,this.onJoystickDisconnect);
		var a13 = joystick;
		joystick.onDisconnect.add(function() {
			f3(a13);
		});
		var f4 = $bind(this,this.onJoystickHatMove);
		var a14 = joystick;
		joystick.onHatMove.add(function(a23,a31) {
			f4(a14,a23,a31);
		});
		var f5 = $bind(this,this.onJoystickTrackballMove);
		var a15 = joystick;
		joystick.onTrackballMove.add(function(a24,a32) {
			f5(a15,a24,a32);
		});
	}
	,get_frameRate: function() {
		return this.backend.getFrameRate();
	}
	,set_frameRate: function(value) {
		return this.backend.setFrameRate(value);
	}
	,get_renderer: function() {
		return this.renderers[0];
	}
	,get_window: function() {
		return this.windows[0];
	}
	,__class__: lime_app_Application
	,__properties__: {get_window:"get_window",get_renderer:"get_renderer",set_frameRate:"set_frameRate",get_frameRate:"get_frameRate"}
});
var lime_app_Event = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event"] = lime_app_Event;
lime_app_Event.__name__ = ["lime","app","Event"];
lime_app_Event.prototype = {
	canceled: null
	,__listeners: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,dispatch: null
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__class__: lime_app_Event
};
var lime_app_Event_$Dynamic_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Dynamic_Void"] = lime_app_Event_$Dynamic_$Void;
lime_app_Event_$Dynamic_$Void.__name__ = ["lime","app","Event_Dynamic_Void"];
lime_app_Event_$Dynamic_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Dynamic_$Void
};
var lime_app_Event_$Float_$Float_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Int_Void"] = lime_app_Event_$Float_$Float_$Int_$Void;
lime_app_Event_$Float_$Float_$Int_$Void.__name__ = ["lime","app","Event_Float_Float_Int_Void"];
lime_app_Event_$Float_$Float_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Int_$Void
};
var lime_app_Event_$Float_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Float_Float_Void"] = lime_app_Event_$Float_$Float_$Void;
lime_app_Event_$Float_$Float_$Void.__name__ = ["lime","app","Event_Float_Float_Void"];
lime_app_Event_$Float_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Float_$Float_$Void
};
var lime_app_Event_$Int_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Float_Void"] = lime_app_Event_$Int_$Float_$Void;
lime_app_Event_$Int_$Float_$Void.__name__ = ["lime","app","Event_Int_Float_Void"];
lime_app_Event_$Int_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Int_$Float_$Void
};
var lime_app_Event_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Int_Void"] = lime_app_Event_$Int_$Int_$Void;
lime_app_Event_$Int_$Int_$Void.__name__ = ["lime","app","Event_Int_Int_Void"];
lime_app_Event_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Int_$Int_$Void
};
var lime_app_Event_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_Void"] = lime_app_Event_$Int_$Void;
lime_app_Event_$Int_$Void.__name__ = ["lime","app","Event_Int_Void"];
lime_app_Event_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Int_$Void
};
var lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_Int_lime_ui_JoystickHatPosition_Void"] = lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void;
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.__name__ = ["lime","app","Event_Int_lime_ui_JoystickHatPosition_Void"];
lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void
};
var lime_app_Event_$String_$Int_$Int_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Int_Int_Void"] = lime_app_Event_$String_$Int_$Int_$Void;
lime_app_Event_$String_$Int_$Int_$Void.__name__ = ["lime","app","Event_String_Int_Int_Void"];
lime_app_Event_$String_$Int_$Int_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1,a2) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1,a2);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$String_$Int_$Int_$Void
};
var lime_app_Event_$String_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_String_Void"] = lime_app_Event_$String_$Void;
lime_app_Event_$String_$Void.__name__ = ["lime","app","Event_String_Void"];
lime_app_Event_$String_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$String_$Void
};
var lime_app_Event_$lime_$graphics_$RenderContext_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_graphics_RenderContext_Void"] = lime_app_Event_$lime_$graphics_$RenderContext_$Void;
lime_app_Event_$lime_$graphics_$RenderContext_$Void.__name__ = ["lime","app","Event_lime_graphics_RenderContext_Void"];
lime_app_Event_$lime_$graphics_$RenderContext_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$graphics_$RenderContext_$Void
};
var lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadAxis_Float_Void"] = lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void;
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadAxis_Float_Void"];
lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void
};
var lime_app_Event_$lime_$ui_$GamepadButton_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_GamepadButton_Void"] = lime_app_Event_$lime_$ui_$GamepadButton_$Void;
lime_app_Event_$lime_$ui_$GamepadButton_$Void.__name__ = ["lime","app","Event_lime_ui_GamepadButton_Void"];
lime_app_Event_$lime_$ui_$GamepadButton_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$GamepadButton_$Void
};
var lime_app_Event_$lime_$ui_$Gamepad_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Gamepad_Void"] = lime_app_Event_$lime_$ui_$Gamepad_$Void;
lime_app_Event_$lime_$ui_$Gamepad_$Void.__name__ = ["lime","app","Event_lime_ui_Gamepad_Void"];
lime_app_Event_$lime_$ui_$Gamepad_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Gamepad_$Void
};
var lime_app_Event_$lime_$ui_$Joystick_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Joystick_Void"] = lime_app_Event_$lime_$ui_$Joystick_$Void;
lime_app_Event_$lime_$ui_$Joystick_$Void.__name__ = ["lime","app","Event_lime_ui_Joystick_Void"];
lime_app_Event_$lime_$ui_$Joystick_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Joystick_$Void
};
var lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"] = lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void;
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.__name__ = ["lime","app","Event_lime_ui_KeyCode_lime_ui_KeyModifier_Void"];
lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a,a1) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a,a1);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void
};
var lime_app_Event_$lime_$ui_$Touch_$Void = function() {
	this.canceled = false;
	this.__listeners = [];
	this.__priorities = [];
	this.__repeat = [];
};
$hxClasses["lime.app.Event_lime_ui_Touch_Void"] = lime_app_Event_$lime_$ui_$Touch_$Void;
lime_app_Event_$lime_$ui_$Touch_$Void.__name__ = ["lime","app","Event_lime_ui_Touch_Void"];
lime_app_Event_$lime_$ui_$Touch_$Void.prototype = {
	canceled: null
	,__repeat: null
	,__priorities: null
	,add: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		var _g1 = 0;
		var _g = this.__priorities.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(priority > this.__priorities[i]) {
				this.__listeners.splice(i,0,listener);
				this.__priorities.splice(i,0,priority);
				this.__repeat.splice(i,0,!once);
				return;
			}
		}
		this.__listeners.push(listener);
		this.__priorities.push(priority);
		this.__repeat.push(!once);
	}
	,cancel: function() {
		this.canceled = true;
	}
	,has: function(listener) {
		var _g = 0;
		var _g1 = this.__listeners;
		while(_g < _g1.length) {
			var l = _g1[_g];
			++_g;
			if(Reflect.compareMethods(l,listener)) {
				return true;
			}
		}
		return false;
	}
	,remove: function(listener) {
		var i = this.__listeners.length;
		while(--i >= 0) if(Reflect.compareMethods(this.__listeners[i],listener)) {
			this.__listeners.splice(i,1);
			this.__priorities.splice(i,1);
			this.__repeat.splice(i,1);
		}
	}
	,__listeners: null
	,dispatch: function(a) {
		this.canceled = false;
		var listeners = this.__listeners;
		var repeat = this.__repeat;
		var i = 0;
		while(i < listeners.length) {
			listeners[i](a);
			if(!repeat[i]) {
				this.remove(listeners[i]);
			} else {
				++i;
			}
			if(this.canceled) {
				break;
			}
		}
	}
	,__class__: lime_app_Event_$lime_$ui_$Touch_$Void
};
var lime_app_Future = function(work) {
	if(work != null) {
		if(lime_app_Future.__threadPool == null) {
			lime_app_Future.__threadPool = new lime_system_ThreadPool();
			lime_app_Future.__threadPool.doWork.add(lime_app_Future.threadPool_doWork);
			lime_app_Future.__threadPool.onComplete.add(lime_app_Future.threadPool_onComplete);
			lime_app_Future.__threadPool.onError.add(lime_app_Future.threadPool_onError);
		}
		var promise = new lime_app_Promise();
		promise.future = this;
		lime_app_Future.__threadPool.queue({ promise : promise, work : work});
	}
};
$hxClasses["lime.app.Future"] = lime_app_Future;
lime_app_Future.__name__ = ["lime","app","Future"];
lime_app_Future.__threadPool = null;
lime_app_Future.threadPool_doWork = function(state) {
	try {
		var result = state.work();
		lime_app_Future.__threadPool.sendComplete({ promise : state.promise, result : result});
	} catch( e ) {
		haxe_CallStack.lastException = e;
		if (e instanceof js__$Boot_HaxeError) e = e.val;
		lime_app_Future.__threadPool.sendError({ promise : state.promise, error : e});
	}
};
lime_app_Future.threadPool_onComplete = function(state) {
	state.promise.complete(state.result);
};
lime_app_Future.threadPool_onError = function(state) {
	state.promise.error(state.error);
};
lime_app_Future.prototype = {
	isCompleted: null
	,value: null
	,__completed: null
	,__completeListeners: null
	,__errored: null
	,__errorListeners: null
	,__errorMessage: null
	,__progressListeners: null
	,onComplete: function(listener) {
		if(listener != null) {
			if(this.__completed) {
				listener(this.value);
			} else if(!this.__errored) {
				if(this.__completeListeners == null) {
					this.__completeListeners = [];
				}
				this.__completeListeners.push(listener);
			}
		}
		return this;
	}
	,onError: function(listener) {
		if(listener != null) {
			if(this.__errored) {
				listener(this.__errorMessage);
			} else if(!this.__completed) {
				if(this.__errorListeners == null) {
					this.__errorListeners = [];
				}
				this.__errorListeners.push(listener);
			}
		}
		return this;
	}
	,onProgress: function(listener) {
		if(listener != null) {
			if(this.__progressListeners == null) {
				this.__progressListeners = [];
			}
			this.__progressListeners.push(listener);
		}
		return this;
	}
	,then: function(next) {
		if(this.__completed) {
			return next(this.value);
		} else if(this.__errored) {
			var future = new lime_app_Future();
			future.onError(this.__errorMessage);
			return future;
		} else {
			var promise = new lime_app_Promise();
			this.onError($bind(promise,promise.error));
			this.onProgress($bind(promise,promise.progress));
			this.onComplete(function(val) {
				var future1 = next(val);
				future1.onError($bind(promise,promise.error));
				future1.onComplete($bind(promise,promise.complete));
			});
			return promise.future;
		}
	}
	,get_isCompleted: function() {
		if(!this.__completed) {
			return this.__errored;
		} else {
			return true;
		}
	}
	,__class__: lime_app_Future
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_app_Preloader = function() {
	this.total = 0;
	this.loaded = 0;
	this.onProgress = new lime_app_Event_$Int_$Int_$Void();
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.onProgress.add($bind(this,this.update));
};
$hxClasses["lime.app.Preloader"] = lime_app_Preloader;
lime_app_Preloader.__name__ = ["lime","app","Preloader"];
lime_app_Preloader.prototype = {
	complete: null
	,onComplete: null
	,onProgress: null
	,loaded: null
	,total: null
	,create: function(config) {
	}
	,load: function(urls,types) {
		var url = null;
		var cacheVersion = lime_Assets.cache.version;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			switch(types[i]) {
			case "BINARY":
				var _this = lime_app_Preloader.loaders;
				if(!(__map_reserved[url] != null?_this.existsReserved(url):_this.h.hasOwnProperty(url))) {
					var loader = new lime_net_HTTPRequest();
					var _this1 = lime_app_Preloader.loaders;
					if(__map_reserved[url] != null) {
						_this1.setReserved(url,loader);
					} else {
						_this1.h[url] = loader;
					}
					this.total++;
				}
				break;
			case "FONT":
				this.total++;
				this.loadFont(url);
				break;
			case "IMAGE":
				var _this2 = lime_app_Preloader.images;
				if(!(__map_reserved[url] != null?_this2.existsReserved(url):_this2.h.hasOwnProperty(url))) {
					var image = new Image();
					var _this3 = lime_app_Preloader.images;
					if(__map_reserved[url] != null) {
						_this3.setReserved(url,image);
					} else {
						_this3.h[url] = image;
					}
					image.onload = $bind(this,this.image_onLoad);
					image.src = url + "?" + cacheVersion;
					this.total++;
				}
				break;
			case "TEXT":
				var _this4 = lime_app_Preloader.loaders;
				if(!(__map_reserved[url] != null?_this4.existsReserved(url):_this4.h.hasOwnProperty(url))) {
					var loader1 = new lime_net_HTTPRequest();
					var _this5 = lime_app_Preloader.loaders;
					if(__map_reserved[url] != null) {
						_this5.setReserved(url,loader1);
					} else {
						_this5.h[url] = loader1;
					}
					this.total++;
				}
				break;
			default:
			}
		}
		var tmp = lime_app_Preloader.loaders.keys();
		while(tmp.hasNext()) {
			var url1 = tmp.next();
			var _this6 = lime_app_Preloader.loaders;
			(__map_reserved[url1] != null?_this6.getReserved(url1):_this6.h[url1]).load(url1 + "?" + cacheVersion).onComplete($bind(this,this.loader_onComplete));
		}
		if(this.total == 0) {
			this.start();
		}
	}
	,loadFont: function(font) {
		var _gthis = this;
		if(window.document.fonts && ($_=window.document.fonts,$bind($_,$_.load))) {
			window.document.fonts.load("1em '" + font + "'").then(function(_) {
				_gthis.loaded++;
				_gthis.onProgress.dispatch(_gthis.loaded,_gthis.total);
				if(_gthis.loaded == _gthis.total) {
					_gthis.start();
				}
			});
		} else {
			var node = window.document.createElement("span");
			node.innerHTML = "giItT1WQy@!-/#";
			var style = node.style;
			style.position = "absolute";
			style.left = "-10000px";
			style.top = "-10000px";
			style.fontSize = "300px";
			style.fontFamily = "sans-serif";
			style.fontVariant = "normal";
			style.fontStyle = "normal";
			style.fontWeight = "normal";
			style.letterSpacing = "0";
			window.document.body.appendChild(node);
			var width = node.offsetWidth;
			style.fontFamily = "'" + font + "', sans-serif";
			var interval = null;
			var found = false;
			var checkFont = function() {
				if(node.offsetWidth != width) {
					if(!found) {
						found = true;
						return false;
					}
					_gthis.loaded++;
					if(interval != null) {
						window.clearInterval(interval);
					}
					node.parentNode.removeChild(node);
					node = null;
					_gthis.onProgress.dispatch(_gthis.loaded,_gthis.total);
					if(_gthis.loaded == _gthis.total) {
						_gthis.start();
					}
					return true;
				}
				return false;
			};
			if(!checkFont()) {
				interval = window.setInterval(checkFont,50);
			}
		}
	}
	,start: function() {
		this.complete = true;
		this.onComplete.dispatch();
	}
	,update: function(loaded,total) {
	}
	,image_onLoad: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,loader_onComplete: function(_) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,__class__: lime_app_Preloader
};
var lime_app_Promise = function() {
	this.future = new lime_app_Future();
};
$hxClasses["lime.app.Promise"] = lime_app_Promise;
lime_app_Promise.__name__ = ["lime","app","Promise"];
lime_app_Promise.prototype = {
	future: null
	,isCompleted: null
	,complete: function(data) {
		if(!this.future.__errored) {
			this.future.__completed = true;
			this.future.value = data;
			if(this.future.__completeListeners != null) {
				var _g = 0;
				var _g1 = this.future.__completeListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(data);
				}
				this.future.__completeListeners = null;
			}
		}
		return this;
	}
	,completeWith: function(future) {
		future.onComplete($bind(this,this.complete));
		future.onError($bind(this,this.error));
		future.onProgress($bind(this,this.progress));
		return this;
	}
	,error: function(msg) {
		if(!this.future.__completed) {
			this.future.__errored = true;
			this.future.__errorMessage = msg;
			if(this.future.__errorListeners != null) {
				var _g = 0;
				var _g1 = this.future.__errorListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(msg);
				}
				this.future.__errorListeners = null;
			}
		}
		return this;
	}
	,progress: function(progress) {
		if(!this.future.__errored && !this.future.__completed) {
			if(this.future.__progressListeners != null) {
				var _g = 0;
				var _g1 = this.future.__progressListeners;
				while(_g < _g1.length) {
					var listener = _g1[_g];
					++_g;
					listener(progress);
				}
			}
		}
		return this;
	}
	,get_isCompleted: function() {
		return this.future.get_isCompleted();
	}
	,__class__: lime_app_Promise
	,__properties__: {get_isCompleted:"get_isCompleted"}
};
var lime_audio_ALAudioContext = function() {
	this.EXPONENT_DISTANCE_CLAMPED = 53254;
	this.EXPONENT_DISTANCE = 53253;
	this.LINEAR_DISTANCE_CLAMPED = 53252;
	this.LINEAR_DISTANCE = 53251;
	this.INVERSE_DISTANCE_CLAMPED = 53250;
	this.INVERSE_DISTANCE = 53249;
	this.DISTANCE_MODEL = 53248;
	this.DOPPLER_VELOCITY = 49153;
	this.SPEED_OF_SOUND = 49155;
	this.DOPPLER_FACTOR = 49152;
	this.EXTENSIONS = 45060;
	this.RENDERER = 45059;
	this.VERSION = 45058;
	this.VENDOR = 45057;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_OPERATION = 40964;
	this.INVALID_VALUE = 40963;
	this.INVALID_ENUM = 40962;
	this.INVALID_NAME = 40961;
	this.NO_ERROR = 0;
	this.SIZE = 8196;
	this.CHANNELS = 8195;
	this.BITS = 8194;
	this.FREQUENCY = 8193;
	this.FORMAT_STEREO16 = 4355;
	this.FORMAT_STEREO8 = 4354;
	this.FORMAT_MONO16 = 4353;
	this.FORMAT_MONO8 = 4352;
	this.UNDETERMINED = 4144;
	this.STREAMING = 4137;
	this.STATIC = 4136;
	this.SOURCE_TYPE = 4135;
	this.BYTE_OFFSET = 4134;
	this.SAMPLE_OFFSET = 4133;
	this.SEC_OFFSET = 4132;
	this.MAX_DISTANCE = 4131;
	this.CONE_OUTER_GAIN = 4130;
	this.ROLLOFF_FACTOR = 4129;
	this.REFERENCE_DISTANCE = 4128;
	this.BUFFERS_PROCESSED = 4118;
	this.BUFFERS_QUEUED = 4117;
	this.STOPPED = 4116;
	this.PAUSED = 4115;
	this.PLAYING = 4114;
	this.INITIAL = 4113;
	this.SOURCE_STATE = 4112;
	this.ORIENTATION = 4111;
	this.MAX_GAIN = 4110;
	this.MIN_GAIN = 4109;
	this.GAIN = 4106;
	this.BUFFER = 4105;
	this.LOOPING = 4103;
	this.VELOCITY = 4102;
	this.DIRECTION = 4101;
	this.POSITION = 4100;
	this.PITCH = 4099;
	this.CONE_OUTER_ANGLE = 4098;
	this.CONE_INNER_ANGLE = 4097;
	this.SOURCE_RELATIVE = 514;
	this.TRUE = 1;
	this.FALSE = 0;
	this.NONE = 0;
};
$hxClasses["lime.audio.ALAudioContext"] = lime_audio_ALAudioContext;
lime_audio_ALAudioContext.__name__ = ["lime","audio","ALAudioContext"];
lime_audio_ALAudioContext.prototype = {
	NONE: null
	,FALSE: null
	,TRUE: null
	,SOURCE_RELATIVE: null
	,CONE_INNER_ANGLE: null
	,CONE_OUTER_ANGLE: null
	,PITCH: null
	,POSITION: null
	,DIRECTION: null
	,VELOCITY: null
	,LOOPING: null
	,BUFFER: null
	,GAIN: null
	,MIN_GAIN: null
	,MAX_GAIN: null
	,ORIENTATION: null
	,SOURCE_STATE: null
	,INITIAL: null
	,PLAYING: null
	,PAUSED: null
	,STOPPED: null
	,BUFFERS_QUEUED: null
	,BUFFERS_PROCESSED: null
	,REFERENCE_DISTANCE: null
	,ROLLOFF_FACTOR: null
	,CONE_OUTER_GAIN: null
	,MAX_DISTANCE: null
	,SEC_OFFSET: null
	,SAMPLE_OFFSET: null
	,BYTE_OFFSET: null
	,SOURCE_TYPE: null
	,STATIC: null
	,STREAMING: null
	,UNDETERMINED: null
	,FORMAT_MONO8: null
	,FORMAT_MONO16: null
	,FORMAT_STEREO8: null
	,FORMAT_STEREO16: null
	,FREQUENCY: null
	,BITS: null
	,CHANNELS: null
	,SIZE: null
	,NO_ERROR: null
	,INVALID_NAME: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,INVALID_OPERATION: null
	,OUT_OF_MEMORY: null
	,VENDOR: null
	,VERSION: null
	,RENDERER: null
	,EXTENSIONS: null
	,DOPPLER_FACTOR: null
	,SPEED_OF_SOUND: null
	,DOPPLER_VELOCITY: null
	,DISTANCE_MODEL: null
	,INVERSE_DISTANCE: null
	,INVERSE_DISTANCE_CLAMPED: null
	,LINEAR_DISTANCE: null
	,LINEAR_DISTANCE_CLAMPED: null
	,EXPONENT_DISTANCE: null
	,EXPONENT_DISTANCE_CLAMPED: null
	,bufferData: function(buffer,format,data,size,freq) {
		lime_audio_openal_AL.bufferData(buffer,format,data,size,freq);
	}
	,buffer3f: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3f(buffer,param,value1,value2,value3);
	}
	,buffer3i: function(buffer,param,value1,value2,value3) {
		lime_audio_openal_AL.buffer3i(buffer,param,value1,value2,value3);
	}
	,bufferf: function(buffer,param,value) {
		lime_audio_openal_AL.bufferf(buffer,param,value);
	}
	,bufferfv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferfv(buffer,param,values);
	}
	,bufferi: function(buffer,param,value) {
		lime_audio_openal_AL.bufferi(buffer,param,value);
	}
	,bufferiv: function(buffer,param,values) {
		lime_audio_openal_AL.bufferiv(buffer,param,values);
	}
	,deleteBuffer: function(buffer) {
		lime_audio_openal_AL.deleteBuffer(buffer);
	}
	,deleteBuffers: function(buffers) {
		lime_audio_openal_AL.deleteBuffers(buffers);
	}
	,deleteSource: function(source) {
		lime_audio_openal_AL.deleteSource(source);
	}
	,deleteSources: function(sources) {
		lime_audio_openal_AL.deleteSources(sources);
	}
	,disable: function(capability) {
		lime_audio_openal_AL.disable(capability);
	}
	,distanceModel: function(distanceModel) {
		lime_audio_openal_AL.distanceModel(distanceModel);
	}
	,dopplerFactor: function(value) {
		lime_audio_openal_AL.dopplerFactor(value);
	}
	,dopplerVelocity: function(value) {
		lime_audio_openal_AL.dopplerVelocity(value);
	}
	,enable: function(capability) {
		lime_audio_openal_AL.enable(capability);
	}
	,genSource: function() {
		return lime_audio_openal_AL.genSource();
	}
	,genSources: function(n) {
		return lime_audio_openal_AL.genSources(n);
	}
	,genBuffer: function() {
		return lime_audio_openal_AL.genBuffer();
	}
	,genBuffers: function(n) {
		return lime_audio_openal_AL.genBuffers(n);
	}
	,getBoolean: function(param) {
		return lime_audio_openal_AL.getBoolean(param);
	}
	,getBooleanv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBooleanv(param,count);
	}
	,getBuffer3f: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3f(buffer,param);
	}
	,getBuffer3i: function(buffer,param) {
		return lime_audio_openal_AL.getBuffer3i(buffer,param);
	}
	,getBufferf: function(buffer,param) {
		return lime_audio_openal_AL.getBufferf(buffer,param);
	}
	,getBufferfv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBufferfv(buffer,param,count);
	}
	,getBufferi: function(buffer,param) {
		return lime_audio_openal_AL.getBufferi(buffer,param);
	}
	,getBufferiv: function(buffer,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getBufferiv(buffer,param,count);
	}
	,getDouble: function(param) {
		return lime_audio_openal_AL.getDouble(param);
	}
	,getDoublev: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getDoublev(param,count);
	}
	,getEnumValue: function(ename) {
		return lime_audio_openal_AL.getEnumValue(ename);
	}
	,getError: function() {
		return lime_audio_openal_AL.getError();
	}
	,getErrorString: function() {
		return lime_audio_openal_AL.getErrorString();
	}
	,getFloat: function(param) {
		return lime_audio_openal_AL.getFloat(param);
	}
	,getFloatv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getFloatv(param,count);
	}
	,getInteger: function(param) {
		return lime_audio_openal_AL.getInteger(param);
	}
	,getIntegerv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getIntegerv(param,count);
	}
	,getListener3f: function(param) {
		return lime_audio_openal_AL.getListener3f(param);
	}
	,getListener3i: function(param) {
		return lime_audio_openal_AL.getListener3i(param);
	}
	,getListenerf: function(param) {
		return lime_audio_openal_AL.getListenerf(param);
	}
	,getListenerfv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getListenerfv(param,count);
	}
	,getListeneri: function(param) {
		return lime_audio_openal_AL.getListeneri(param);
	}
	,getListeneriv: function(param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getListeneriv(param,count);
	}
	,getProcAddress: function(fname) {
		return lime_audio_openal_AL.getProcAddress(fname);
	}
	,getSource3f: function(source,param) {
		return lime_audio_openal_AL.getSource3f(source,param);
	}
	,getSourcef: function(source,param) {
		return lime_audio_openal_AL.getSourcef(source,param);
	}
	,getSource3i: function(source,param) {
		return lime_audio_openal_AL.getSource3i(source,param);
	}
	,getSourcefv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getSourcefv(source,param);
	}
	,getSourcei: function(source,param) {
		return lime_audio_openal_AL.getSourcei(source,param);
	}
	,getSourceiv: function(source,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_AL.getSourceiv(source,param,count);
	}
	,getString: function(param) {
		return lime_audio_openal_AL.getString(param);
	}
	,isBuffer: function(buffer) {
		return lime_audio_openal_AL.isBuffer(buffer);
	}
	,isEnabled: function(capability) {
		return lime_audio_openal_AL.isEnabled(capability);
	}
	,isExtensionPresent: function(extname) {
		return lime_audio_openal_AL.isExtensionPresent(extname);
	}
	,isSource: function(source) {
		return lime_audio_openal_AL.isSource(source);
	}
	,listener3f: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3f(param,value1,value2,value3);
	}
	,listener3i: function(param,value1,value2,value3) {
		lime_audio_openal_AL.listener3i(param,value1,value2,value3);
	}
	,listenerf: function(param,value) {
		lime_audio_openal_AL.listenerf(param,value);
	}
	,listenerfv: function(param,values) {
		lime_audio_openal_AL.listenerfv(param,values);
	}
	,listeneri: function(param,value) {
		lime_audio_openal_AL.listeneri(param,value);
	}
	,listeneriv: function(param,values) {
		lime_audio_openal_AL.listeneriv(param,values);
	}
	,source3f: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3f(source,param,value1,value2,value3);
	}
	,source3i: function(source,param,value1,value2,value3) {
		lime_audio_openal_AL.source3i(source,param,value1,value2,value3);
	}
	,sourcef: function(source,param,value) {
		lime_audio_openal_AL.sourcef(source,param,value);
	}
	,sourcefv: function(source,param,values) {
		lime_audio_openal_AL.sourcefv(source,param,values);
	}
	,sourcei: function(source,param,value) {
		lime_audio_openal_AL.sourcei(source,param,value);
	}
	,sourceiv: function(source,param,values) {
		lime_audio_openal_AL.sourceiv(source,param,values);
	}
	,sourcePlay: function(source) {
		lime_audio_openal_AL.sourcePlay(source);
	}
	,sourcePlayv: function(sources) {
		lime_audio_openal_AL.sourcePlayv(sources);
	}
	,sourceStop: function(source) {
		lime_audio_openal_AL.sourceStop(source);
	}
	,sourceStopv: function(sources) {
		lime_audio_openal_AL.sourceStopv(sources);
	}
	,sourceRewind: function(source) {
		lime_audio_openal_AL.sourceRewind(source);
	}
	,sourceRewindv: function(sources) {
		lime_audio_openal_AL.sourceRewindv(sources);
	}
	,sourcePause: function(source) {
		lime_audio_openal_AL.sourcePause(source);
	}
	,sourcePausev: function(sources) {
		lime_audio_openal_AL.sourcePausev(sources);
	}
	,sourceQueueBuffer: function(source,buffer) {
		lime_audio_openal_AL.sourceQueueBuffer(source,buffer);
	}
	,sourceQueueBuffers: function(source,nb,buffers) {
		lime_audio_openal_AL.sourceQueueBuffers(source,nb,buffers);
	}
	,sourceUnqueueBuffer: function(source) {
		return lime_audio_openal_AL.sourceUnqueueBuffer(source);
	}
	,sourceUnqueueBuffers: function(source,nb) {
		return lime_audio_openal_AL.sourceUnqueueBuffers(source,nb);
	}
	,speedOfSound: function(value) {
		lime_audio_openal_AL.speedOfSound(value);
	}
	,__class__: lime_audio_ALAudioContext
};
var lime_audio_ALCAudioContext = function() {
	this.ALL_DEVICES_SPECIFIER = 4115;
	this.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
	this.ENUMERATE_ALL_EXT = 1;
	this.EXTENSIONS = 4102;
	this.DEVICE_SPECIFIER = 4101;
	this.DEFAULT_DEVICE_SPECIFIER = 4100;
	this.ALL_ATTRIBUTES = 4099;
	this.ATTRIBUTES_SIZE = 4098;
	this.OUT_OF_MEMORY = 40965;
	this.INVALID_VALUE = 40964;
	this.INVALID_ENUM = 40963;
	this.INVALID_CONTEXT = 40962;
	this.INVALID_DEVICE = 40961;
	this.NO_ERROR = 0;
	this.STEREO_SOURCES = 4113;
	this.MONO_SOURCES = 4112;
	this.SYNC = 4105;
	this.REFRESH = 4104;
	this.FREQUENCY = 4103;
	this.TRUE = 1;
	this.FALSE = 0;
};
$hxClasses["lime.audio.ALCAudioContext"] = lime_audio_ALCAudioContext;
lime_audio_ALCAudioContext.__name__ = ["lime","audio","ALCAudioContext"];
lime_audio_ALCAudioContext.prototype = {
	FALSE: null
	,TRUE: null
	,FREQUENCY: null
	,REFRESH: null
	,SYNC: null
	,MONO_SOURCES: null
	,STEREO_SOURCES: null
	,NO_ERROR: null
	,INVALID_DEVICE: null
	,INVALID_CONTEXT: null
	,INVALID_ENUM: null
	,INVALID_VALUE: null
	,OUT_OF_MEMORY: null
	,ATTRIBUTES_SIZE: null
	,ALL_ATTRIBUTES: null
	,DEFAULT_DEVICE_SPECIFIER: null
	,DEVICE_SPECIFIER: null
	,EXTENSIONS: null
	,ENUMERATE_ALL_EXT: null
	,DEFAULT_ALL_DEVICES_SPECIFIER: null
	,ALL_DEVICES_SPECIFIER: null
	,closeDevice: function(device) {
		return lime_audio_openal_ALC.closeDevice(device);
	}
	,createContext: function(device,attrlist) {
		return lime_audio_openal_ALC.createContext(device,attrlist);
	}
	,destroyContext: function(context) {
		lime_audio_openal_ALC.destroyContext(context);
	}
	,getContextsDevice: function(context) {
		return lime_audio_openal_ALC.getContextsDevice(context);
	}
	,getCurrentContext: function() {
		return lime_audio_openal_ALC.getCurrentContext();
	}
	,getError: function(device) {
		return lime_audio_openal_ALC.getError(device);
	}
	,getErrorString: function(device) {
		return lime_audio_openal_ALC.getErrorString(device);
	}
	,getIntegerv: function(device,param,count) {
		if(count == null) {
			count = 1;
		}
		return lime_audio_openal_ALC.getIntegerv(device,param,count);
	}
	,getString: function(device,param) {
		return lime_audio_openal_ALC.getString(device,param);
	}
	,makeContextCurrent: function(context) {
		return lime_audio_openal_ALC.makeContextCurrent(context);
	}
	,openDevice: function(deviceName) {
		return lime_audio_openal_ALC.openDevice(deviceName);
	}
	,processContext: function(context) {
		lime_audio_openal_ALC.processContext(context);
	}
	,suspendContext: function(context) {
		lime_audio_openal_ALC.suspendContext(context);
	}
	,__class__: lime_audio_ALCAudioContext
};
var lime_audio_AudioBuffer = function() {
	this.id = 0;
};
$hxClasses["lime.audio.AudioBuffer"] = lime_audio_AudioBuffer;
lime_audio_AudioBuffer.__name__ = ["lime","audio","AudioBuffer"];
lime_audio_AudioBuffer.fromBytes = function(bytes) {
	return null;
};
lime_audio_AudioBuffer.fromFile = function(path) {
	return null;
};
lime_audio_AudioBuffer.fromURL = function(url,handler) {
	if(url != null && url.indexOf("http://") == -1 && url.indexOf("https://") == -1) {
		handler(lime_audio_AudioBuffer.fromFile(url));
	}
};
lime_audio_AudioBuffer.prototype = {
	bitsPerSample: null
	,channels: null
	,data: null
	,id: null
	,sampleRate: null
	,src: null
	,dispose: function() {
	}
	,__class__: lime_audio_AudioBuffer
};
var lime_audio_AudioContext = $hxClasses["lime.audio.AudioContext"] = { __ename__ : ["lime","audio","AudioContext"], __constructs__ : ["OPENAL","HTML5","WEB","FLASH","CUSTOM"] };
lime_audio_AudioContext.OPENAL = function(alc,al) { var $x = ["OPENAL",0,alc,al]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.HTML5 = function(context) { var $x = ["HTML5",1,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.WEB = function(context) { var $x = ["WEB",2,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.FLASH = function(context) { var $x = ["FLASH",3,context]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
lime_audio_AudioContext.CUSTOM = function(data) { var $x = ["CUSTOM",4,data]; $x.__enum__ = lime_audio_AudioContext; $x.toString = $estr; return $x; };
var lime_audio_AudioManager = function() { };
$hxClasses["lime.audio.AudioManager"] = lime_audio_AudioManager;
lime_audio_AudioManager.__name__ = ["lime","audio","AudioManager"];
lime_audio_AudioManager.context = null;
lime_audio_AudioManager.init = function(context) {
	if(lime_audio_AudioManager.context == null) {
		if(context == null) {
			try {
				window.AudioContext = window.AudioContext || window.webkitAudioContext;
				lime_audio_AudioManager.context = lime_audio_AudioContext.WEB(new AudioContext ());
			} catch( e ) {
				haxe_CallStack.lastException = e;
				lime_audio_AudioManager.context = lime_audio_AudioContext.HTML5(new lime_audio_HTML5AudioContext());
			}
		} else {
			lime_audio_AudioManager.context = context;
		}
	}
};
lime_audio_AudioManager.resume = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			alc.processContext(alc.getCurrentContext());
		}
	}
};
lime_audio_AudioManager.shutdown = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			var currentContext = alc.getCurrentContext();
			if(currentContext != null) {
				var device = alc.getContextsDevice(currentContext);
				alc.makeContextCurrent(null);
				alc.destroyContext(currentContext);
				alc.closeDevice(device);
			}
		}
	}
};
lime_audio_AudioManager.suspend = function() {
	if(lime_audio_AudioManager.context != null) {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var alc = _g[2];
			alc.suspendContext(alc.getCurrentContext());
		}
	}
};
var lime_audio_AudioSource = function(buffer,offset,length,loops) {
	if(loops == null) {
		loops = 0;
	}
	if(offset == null) {
		offset = 0;
	}
	this.onComplete = new lime_app_Event_$Void_$Void();
	this.buffer = buffer;
	this.offset = offset;
	if(length != null && length != 0) {
		this.set_length(length);
	}
	this.set_loops(loops);
	this.id = 0;
	if(buffer != null) {
		this.init();
	}
};
$hxClasses["lime.audio.AudioSource"] = lime_audio_AudioSource;
lime_audio_AudioSource.__name__ = ["lime","audio","AudioSource"];
lime_audio_AudioSource.prototype = {
	onComplete: null
	,buffer: null
	,offset: null
	,id: null
	,playing: null
	,pauseTime: null
	,__length: null
	,__loops: null
	,dispose: function() {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var al = _g[3];
			if(this.id != 0) {
				al.deleteSource(this.id);
			}
		}
	}
	,init: function() {
		var _g = lime_audio_AudioManager.context;
		if(_g[1] == 0) {
			var al = _g[3];
			if(this.buffer.id == 0) {
				this.buffer.id = al.genBuffer();
				var format = 0;
				if(this.buffer.channels == 1) {
					if(this.buffer.bitsPerSample == 8) {
						format = al.FORMAT_MONO8;
					} else if(this.buffer.bitsPerSample == 16) {
						format = al.FORMAT_MONO16;
					}
				} else if(this.buffer.channels == 2) {
					if(this.buffer.bitsPerSample == 8) {
						format = al.FORMAT_STEREO8;
					} else if(this.buffer.bitsPerSample == 16) {
						format = al.FORMAT_STEREO16;
					}
				}
				al.bufferData(this.buffer.id,format,this.buffer.data,this.buffer.data.length,this.buffer.sampleRate);
			}
			this.id = al.genSource();
			al.sourcei(this.id,al.BUFFER,this.buffer.id);
		}
	}
	,play: function() {
	}
	,pause: function() {
	}
	,stop: function() {
	}
	,timer_onRun: function() {
	}
	,get_currentTime: function() {
		return 0;
	}
	,set_currentTime: function(value) {
		return this.pauseTime = value;
	}
	,get_gain: function() {
		return 1;
	}
	,set_gain: function(value) {
		return 1;
	}
	,get_length: function() {
		if(this.__length != null) {
			return this.__length;
		}
		return 0;
	}
	,set_length: function(value) {
		return this.__length = value;
	}
	,get_loops: function() {
		return this.__loops;
	}
	,set_loops: function(loops) {
		return this.__loops = loops;
	}
	,__class__: lime_audio_AudioSource
	,__properties__: {set_loops:"set_loops",get_loops:"get_loops",set_length:"set_length",get_length:"get_length",set_gain:"set_gain",get_gain:"get_gain",set_currentTime:"set_currentTime",get_currentTime:"get_currentTime"}
};
var lime_audio_FlashAudioContext = function() {
};
$hxClasses["lime.audio.FlashAudioContext"] = lime_audio_FlashAudioContext;
lime_audio_FlashAudioContext.__name__ = ["lime","audio","FlashAudioContext"];
lime_audio_FlashAudioContext.prototype = {
	createBuffer: function(stream,context) {
		return null;
	}
	,getBytesLoaded: function(buffer) {
		return 0;
	}
	,getBytesTotal: function(buffer) {
		return 0;
	}
	,getID3: function(buffer) {
		return null;
	}
	,getIsBuffering: function(buffer) {
		return false;
	}
	,getIsURLInaccessible: function(buffer) {
		return false;
	}
	,getLength: function(buffer) {
		return 0;
	}
	,getURL: function(buffer) {
		return null;
	}
	,close: function(buffer) {
	}
	,extract: function(buffer,target,length,startPosition) {
		if(startPosition == null) {
			startPosition = -1;
		}
		return 0;
	}
	,load: function(buffer,stream,context) {
	}
	,loadCompressedDataFromByteArray: function(buffer,bytes,bytesLength) {
	}
	,loadPCMFromByteArray: function(buffer,bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
	}
	,play: function(buffer,startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0;
		}
		return null;
	}
	,__class__: lime_audio_FlashAudioContext
};
var lime_audio_HTML5AudioContext = function() {
	this.NETWORK_NO_SOURCE = 3;
	this.NETWORK_LOADING = 2;
	this.NETWORK_IDLE = 1;
	this.NETWORK_EMPTY = 0;
	this.HAVE_NOTHING = 0;
	this.HAVE_METADATA = 1;
	this.HAVE_FUTURE_DATA = 3;
	this.HAVE_ENOUGH_DATA = 4;
	this.HAVE_CURRENT_DATA = 2;
};
$hxClasses["lime.audio.HTML5AudioContext"] = lime_audio_HTML5AudioContext;
lime_audio_HTML5AudioContext.__name__ = ["lime","audio","HTML5AudioContext"];
lime_audio_HTML5AudioContext.prototype = {
	HAVE_CURRENT_DATA: null
	,HAVE_ENOUGH_DATA: null
	,HAVE_FUTURE_DATA: null
	,HAVE_METADATA: null
	,HAVE_NOTHING: null
	,NETWORK_EMPTY: null
	,NETWORK_IDLE: null
	,NETWORK_LOADING: null
	,NETWORK_NO_SOURCE: null
	,canPlayType: function(buffer,type) {
		if(buffer.src != null) {
			return buffer.src.canPlayType(type);
		}
		return null;
	}
	,createBuffer: function(urlString) {
		var buffer = new lime_audio_AudioBuffer();
		buffer.src = new Audio();
		buffer.src.src = urlString;
		return buffer;
	}
	,getAutoplay: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.autoplay;
		}
		return false;
	}
	,getBuffered: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.buffered;
		}
		return null;
	}
	,getCurrentSrc: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.currentSrc;
		}
		return null;
	}
	,getCurrentTime: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.currentTime;
		}
		return 0;
	}
	,getDefaultPlaybackRate: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.defaultPlaybackRate;
		}
		return 1;
	}
	,getDuration: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.duration;
		}
		return 0;
	}
	,getEnded: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.ended;
		}
		return false;
	}
	,getError: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.error;
		}
		return null;
	}
	,getLoop: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.loop;
		}
		return false;
	}
	,getMuted: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.muted;
		}
		return false;
	}
	,getNetworkState: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.networkState;
		}
		return 0;
	}
	,getPaused: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.paused;
		}
		return false;
	}
	,getPlaybackRate: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.playbackRate;
		}
		return 1;
	}
	,getPlayed: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.played;
		}
		return null;
	}
	,getPreload: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.preload;
		}
		return null;
	}
	,getReadyState: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.readyState;
		}
		return 0;
	}
	,getSeekable: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.seekable;
		}
		return null;
	}
	,getSeeking: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.seeking;
		}
		return false;
	}
	,getSrc: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.src;
		}
		return null;
	}
	,getStartTime: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.playbackRate;
		}
		return 0;
	}
	,getVolume: function(buffer) {
		if(buffer.src != null) {
			return buffer.src.volume;
		}
		return 1;
	}
	,load: function(buffer) {
		if(buffer.src != null) {
			buffer.src.load();
			return;
		}
	}
	,pause: function(buffer) {
		if(buffer.src != null) {
			buffer.src.pause();
			return;
		}
	}
	,play: function(buffer) {
		if(buffer.src != null) {
			buffer.src.play();
			return;
		}
	}
	,setAutoplay: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.autoplay = value;
		}
	}
	,setCurrentTime: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.currentTime = value;
		}
	}
	,setDefaultPlaybackRate: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.defaultPlaybackRate = value;
		}
	}
	,setLoop: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.loop = value;
		}
	}
	,setMuted: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.muted = value;
		}
	}
	,setPlaybackRate: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.playbackRate = value;
		}
	}
	,setPreload: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.preload = value;
		}
	}
	,setSrc: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.src = value;
		}
	}
	,setVolume: function(buffer,value) {
		if(buffer.src != null) {
			buffer.src.volume = value;
		}
	}
	,__class__: lime_audio_HTML5AudioContext
};
var lime_audio_openal_AL = function() { };
$hxClasses["lime.audio.openal.AL"] = lime_audio_openal_AL;
lime_audio_openal_AL.__name__ = ["lime","audio","openal","AL"];
lime_audio_openal_AL.bufferData = function(buffer,format,data,size,freq) {
};
lime_audio_openal_AL.buffer3f = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.buffer3i = function(buffer,param,value1,value2,value3) {
};
lime_audio_openal_AL.bufferf = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferfv = function(buffer,param,values) {
};
lime_audio_openal_AL.bufferi = function(buffer,param,value) {
};
lime_audio_openal_AL.bufferiv = function(buffer,param,values) {
};
lime_audio_openal_AL.deleteBuffer = function(buffer) {
};
lime_audio_openal_AL.deleteBuffers = function(buffers) {
};
lime_audio_openal_AL.deleteSource = function(source) {
};
lime_audio_openal_AL.deleteSources = function(sources) {
};
lime_audio_openal_AL.disable = function(capability) {
};
lime_audio_openal_AL.distanceModel = function(distanceModel) {
};
lime_audio_openal_AL.dopplerFactor = function(value) {
};
lime_audio_openal_AL.dopplerVelocity = function(value) {
};
lime_audio_openal_AL.enable = function(capability) {
};
lime_audio_openal_AL.genSource = function() {
	return 0;
};
lime_audio_openal_AL.genSources = function(n) {
	return null;
};
lime_audio_openal_AL.genBuffer = function() {
	return 0;
};
lime_audio_openal_AL.genBuffers = function(n) {
	return null;
};
lime_audio_openal_AL.getBoolean = function(param) {
	return false;
};
lime_audio_openal_AL.getBooleanv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getBuffer3f = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBuffer3i = function(buffer,param) {
	return null;
};
lime_audio_openal_AL.getBufferf = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferfv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getBufferi = function(buffer,param) {
	return 0;
};
lime_audio_openal_AL.getBufferiv = function(buffer,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getDouble = function(param) {
	return 0;
};
lime_audio_openal_AL.getDoublev = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getEnumValue = function(ename) {
	return 0;
};
lime_audio_openal_AL.getError = function() {
	return 0;
};
lime_audio_openal_AL.getErrorString = function() {
	switch(lime_audio_openal_AL.getError()) {
	case 40961:
		return "INVALID_NAME: Invalid parameter name";
	case 40962:
		return "INVALID_ENUM: Invalid enum value";
	case 40963:
		return "INVALID_VALUE: Invalid parameter value";
	case 40964:
		return "INVALID_OPERATION: Illegal operation or call";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_AL.getFloat = function(param) {
	return 0;
};
lime_audio_openal_AL.getFloatv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getInteger = function(param) {
	return 0;
};
lime_audio_openal_AL.getIntegerv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getListener3f = function(param) {
	return null;
};
lime_audio_openal_AL.getListener3i = function(param) {
	return null;
};
lime_audio_openal_AL.getListenerf = function(param) {
	return 0;
};
lime_audio_openal_AL.getListenerfv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getListeneri = function(param) {
	return 0;
};
lime_audio_openal_AL.getListeneriv = function(param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getProcAddress = function(fname) {
	return null;
};
lime_audio_openal_AL.getSource3f = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcef = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSource3i = function(source,param) {
	return null;
};
lime_audio_openal_AL.getSourcefv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getSourcei = function(source,param) {
	return 0;
};
lime_audio_openal_AL.getSourceiv = function(source,param,count) {
	if(count == null) {
		count = 1;
	}
	return null;
};
lime_audio_openal_AL.getString = function(param) {
	return null;
};
lime_audio_openal_AL.isBuffer = function(buffer) {
	return false;
};
lime_audio_openal_AL.isEnabled = function(capability) {
	return false;
};
lime_audio_openal_AL.isExtensionPresent = function(extname) {
	return false;
};
lime_audio_openal_AL.isSource = function(source) {
	return false;
};
lime_audio_openal_AL.listener3f = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listener3i = function(param,value1,value2,value3) {
};
lime_audio_openal_AL.listenerf = function(param,value) {
};
lime_audio_openal_AL.listenerfv = function(param,values) {
};
lime_audio_openal_AL.listeneri = function(param,value) {
};
lime_audio_openal_AL.listeneriv = function(param,values) {
};
lime_audio_openal_AL.source3f = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.source3i = function(source,param,value1,value2,value3) {
};
lime_audio_openal_AL.sourcef = function(source,param,value) {
};
lime_audio_openal_AL.sourcefv = function(source,param,values) {
};
lime_audio_openal_AL.sourcei = function(source,param,value) {
};
lime_audio_openal_AL.sourceiv = function(source,param,values) {
};
lime_audio_openal_AL.sourcePlay = function(source) {
};
lime_audio_openal_AL.sourcePlayv = function(sources) {
};
lime_audio_openal_AL.sourceStop = function(source) {
};
lime_audio_openal_AL.sourceStopv = function(sources) {
};
lime_audio_openal_AL.sourceRewind = function(source) {
};
lime_audio_openal_AL.sourceRewindv = function(sources) {
};
lime_audio_openal_AL.sourcePause = function(source) {
};
lime_audio_openal_AL.sourcePausev = function(sources) {
};
lime_audio_openal_AL.sourceQueueBuffer = function(source,buffer) {
};
lime_audio_openal_AL.sourceQueueBuffers = function(source,nb,buffers) {
};
lime_audio_openal_AL.sourceUnqueueBuffer = function(source) {
	return 0;
};
lime_audio_openal_AL.sourceUnqueueBuffers = function(source,nb) {
	return null;
};
lime_audio_openal_AL.speedOfSound = function(value) {
};
var lime_audio_openal_ALC = function() { };
$hxClasses["lime.audio.openal.ALC"] = lime_audio_openal_ALC;
lime_audio_openal_ALC.__name__ = ["lime","audio","openal","ALC"];
lime_audio_openal_ALC.closeDevice = function(device) {
	return false;
};
lime_audio_openal_ALC.createContext = function(device,attrlist) {
	return null;
};
lime_audio_openal_ALC.destroyContext = function(context) {
};
lime_audio_openal_ALC.getContextsDevice = function(context) {
	return null;
};
lime_audio_openal_ALC.getCurrentContext = function() {
	return null;
};
lime_audio_openal_ALC.getError = function(device) {
	return 0;
};
lime_audio_openal_ALC.getErrorString = function(device) {
	switch(lime_audio_openal_ALC.getError(device)) {
	case 40961:
		return "INVALID_DEVICE: Invalid device (or no device?)";
	case 40962:
		return "INVALID_CONTEXT: Invalid context (or no context?)";
	case 40963:
		return "INVALID_ENUM: Invalid enum value";
	case 40964:
		return "INVALID_VALUE: Invalid param value";
	case 40965:
		return "OUT_OF_MEMORY: OpenAL has run out of memory";
	default:
		return "";
	}
};
lime_audio_openal_ALC.getIntegerv = function(device,param,size) {
	return null;
};
lime_audio_openal_ALC.getString = function(device,param) {
	return null;
};
lime_audio_openal_ALC.makeContextCurrent = function(context) {
	return false;
};
lime_audio_openal_ALC.openDevice = function(deviceName) {
	return null;
};
lime_audio_openal_ALC.processContext = function(context) {
};
lime_audio_openal_ALC.suspendContext = function(context) {
};
var lime_audio_openal__$ALContext_ALContext_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALContext.ALContext_Impl_"] = lime_audio_openal__$ALContext_ALContext_$Impl_$;
lime_audio_openal__$ALContext_ALContext_$Impl_$.__name__ = ["lime","audio","openal","_ALContext","ALContext_Impl_"];
lime_audio_openal__$ALContext_ALContext_$Impl_$._new = function(handle) {
	return handle;
};
var lime_audio_openal__$ALDevice_ALDevice_$Impl_$ = {};
$hxClasses["lime.audio.openal._ALDevice.ALDevice_Impl_"] = lime_audio_openal__$ALDevice_ALDevice_$Impl_$;
lime_audio_openal__$ALDevice_ALDevice_$Impl_$.__name__ = ["lime","audio","openal","_ALDevice","ALDevice_Impl_"];
lime_audio_openal__$ALDevice_ALDevice_$Impl_$._new = function(handle) {
	return handle;
};
var lime_graphics_ConsoleRenderContext = function() {
};
$hxClasses["lime.graphics.ConsoleRenderContext"] = lime_graphics_ConsoleRenderContext;
lime_graphics_ConsoleRenderContext.__name__ = ["lime","graphics","ConsoleRenderContext"];
lime_graphics_ConsoleRenderContext.prototype = {
	createIndexBuffer: function(indices,count) {
		return new lime_graphics_console_IndexBuffer();
	}
	,createVertexBuffer: function(decl,count) {
		return new lime_graphics_console_VertexBuffer();
	}
	,lookupShader: function(name) {
		return new lime_graphics_console_Shader();
	}
	,clear: function(r,g,b,a,depth,stencil) {
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1.0;
		}
	}
	,bindShader: function(shader) {
	}
	,setViewport: function(x,y,width,height,nearPlane,farPlane) {
		if(farPlane == null) {
			farPlane = 1.0;
		}
		if(nearPlane == null) {
			nearPlane = 0.0;
		}
	}
	,setVertexShaderConstantF: function(startRegister,vec4,vec4count) {
	}
	,setVertexSource: function(vb) {
	}
	,setIndexSource: function(ib) {
	}
	,draw: function(primitive,startVertex,primitiveCount) {
	}
	,drawIndexed: function(primitive,vertexCount,startIndex,primitiveCount) {
	}
	,get_width: function() {
		return 0;
	}
	,get_height: function() {
		return 0;
	}
	,__class__: lime_graphics_ConsoleRenderContext
	,__properties__: {get_height:"get_height",get_width:"get_width"}
};
var lime_graphics_FlashRenderContext = function() {
};
$hxClasses["lime.graphics.FlashRenderContext"] = lime_graphics_FlashRenderContext;
lime_graphics_FlashRenderContext.__name__ = ["lime","graphics","FlashRenderContext"];
lime_graphics_FlashRenderContext.prototype = {
	accessibilityImplementation: null
	,accessibilityProperties: null
	,alpha: null
	,blendMode: null
	,blendShader: null
	,buttonMode: null
	,cacheAsBitmap: null
	,contextMenu: null
	,doubleClickEnabled: null
	,dropTarget: null
	,filters: null
	,focusRect: null
	,graphics: null
	,height: null
	,hitArea: null
	,loaderInfo: null
	,mask: null
	,mouseChildren: null
	,mouseEnabled: null
	,mouseX: null
	,mouseY: null
	,name: null
	,needsSoftKeyboard: null
	,numChildren: null
	,opaqueBackground: null
	,parent: null
	,root: null
	,rotation: null
	,rotationX: null
	,rotationY: null
	,rotationZ: null
	,scale9Grid: null
	,scaleX: null
	,scaleY: null
	,scaleZ: null
	,scrollRect: null
	,softKeyboardInputAreaOfInterest: null
	,soundTransform: null
	,stage: null
	,tabChildren: null
	,tabEnabled: null
	,tabIndex: null
	,textSnapshot: null
	,transform: null
	,useHandCursor: null
	,visible: null
	,width: null
	,x: null
	,y: null
	,z: null
	,addChild: function(child) {
		return null;
	}
	,addChildAt: function(child,index) {
		return null;
	}
	,addEventListener: function(type,listener,useCapture,priority,useWeakReference) {
		if(useWeakReference == null) {
			useWeakReference = false;
		}
		if(priority == null) {
			priority = 0;
		}
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,areInaccessibleObjectsUnderPoint: function(point) {
		return false;
	}
	,contains: function(child) {
		return false;
	}
	,dispatchEvent: function(event) {
		return false;
	}
	,getBounds: function(targetCoordinateSpace) {
		return null;
	}
	,getChildAt: function(index) {
		return null;
	}
	,getChildByName: function(name) {
		return null;
	}
	,getChildIndex: function(child) {
		return 0;
	}
	,getObjectsUnderPoint: function(point) {
		return null;
	}
	,getRect: function(targetCoordinateSpace) {
		return null;
	}
	,globalToLocal: function(point) {
		return null;
	}
	,globalToLocal3D: function(point) {
		return null;
	}
	,hasEventListener: function(type) {
		return false;
	}
	,hitTestObject: function(obj) {
		return false;
	}
	,hitTestPoint: function(x,y,shapeFlag) {
		if(shapeFlag == null) {
			shapeFlag = false;
		}
		return false;
	}
	,local3DToGlobal: function(point3d) {
		return null;
	}
	,localToGlobal: function(point) {
		return null;
	}
	,removeChild: function(child) {
		return null;
	}
	,removeChildAt: function(index) {
		return null;
	}
	,removeChildren: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 2147483647;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
	}
	,removeEventListener: function(type,listener,useCapture) {
		if(useCapture == null) {
			useCapture = false;
		}
	}
	,requestSoftKeyboard: function() {
		return false;
	}
	,setChildIndex: function(child,index) {
	}
	,startDrag: function(lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,startTouchDrag: function(touchPointID,lockCenter,bounds) {
		if(lockCenter == null) {
			lockCenter = false;
		}
	}
	,stopAllMovieClips: function() {
	}
	,stopDrag: function() {
	}
	,stopTouchDrag: function(touchPointID) {
	}
	,swapChildren: function(child1,child2) {
	}
	,swapChildrenAt: function(index1,index2) {
	}
	,toString: function() {
		return null;
	}
	,willTrigger: function(type) {
		return false;
	}
	,__class__: lime_graphics_FlashRenderContext
};
var lime_graphics_Image = function(buffer,offsetX,offsetY,width,height,color,type) {
	if(height == null) {
		height = -1;
	}
	if(width == null) {
		width = -1;
	}
	if(offsetY == null) {
		offsetY = 0;
	}
	if(offsetX == null) {
		offsetX = 0;
	}
	this.offsetX = offsetX;
	this.offsetY = offsetY;
	this.width = width;
	this.height = height;
	if(type == null) {
		if(lime_app_Application.current != null && lime_app_Application.current.renderers[0] != null) {
			var _g = lime_app_Application.current.renderers[0].context;
			var tmp;
			switch(_g[1]) {
			case 1:case 2:
				tmp = lime_graphics_ImageType.CANVAS;
				break;
			case 3:
				tmp = lime_graphics_ImageType.FLASH;
				break;
			default:
				tmp = lime_graphics_ImageType.DATA;
			}
			this.type = tmp;
		} else {
			this.type = lime_graphics_ImageType.DATA;
		}
	} else {
		this.type = type;
	}
	if(buffer == null) {
		if(width > 0 && height > 0) {
			switch(this.type[1]) {
			case 0:
				this.buffer = new lime_graphics_ImageBuffer(null,width,height);
				lime_graphics_utils_ImageCanvasUtil.createCanvas(this,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 1:
				var elements = width * height * 4;
				this.buffer = new lime_graphics_ImageBuffer(elements != null?new Uint8Array(elements):null,width,height);
				if(color != null) {
					this.fillRect(new lime_math_Rectangle(0,0,width,height),color);
				}
				break;
			case 2:
				break;
			default:
			}
		}
	} else {
		this.__fromImageBuffer(buffer);
	}
};
$hxClasses["lime.graphics.Image"] = lime_graphics_Image;
lime_graphics_Image.__name__ = ["lime","graphics","Image"];
lime_graphics_Image.__base64Encoder = null;
lime_graphics_Image.fromBase64 = function(base64,type,onload) {
	if(base64 == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBase64(base64,type,onload);
	return image;
};
lime_graphics_Image.fromBitmapData = function(bitmapData) {
	if(bitmapData == null) {
		return null;
	}
	return bitmapData.image;
};
lime_graphics_Image.fromBytes = function(bytes,onload) {
	if(bytes == null) {
		return null;
	}
	var image = new lime_graphics_Image();
	image.__fromBytes(bytes,onload);
	return image;
};
lime_graphics_Image.fromCanvas = function(canvas) {
	if(canvas == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,canvas.width,canvas.height);
	buffer.set_src(canvas);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.fromFile = function(path,onload,onerror) {
	var image = new lime_graphics_Image();
	image.__fromFile(path,onload,onerror);
	return image;
};
lime_graphics_Image.fromImageElement = function(image) {
	if(image == null) {
		return null;
	}
	var buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
	buffer.set_src(image);
	return new lime_graphics_Image(buffer);
};
lime_graphics_Image.__base64Encode = function(bytes) {
	var extension;
	switch(bytes.length % 3) {
	case 1:
		extension = "==";
		break;
	case 2:
		extension = "=";
		break;
	default:
		extension = "";
	}
	if(lime_graphics_Image.__base64Encoder == null) {
		lime_graphics_Image.__base64Encoder = new haxe_crypto_BaseCode(haxe_io_Bytes.ofString(lime_graphics_Image.__base64Chars));
	}
	return lime_graphics_Image.__base64Encoder.encodeBytes(bytes).toString() + extension;
};
lime_graphics_Image.__isJPG = function(bytes) {
	if(bytes.b[0] == 255) {
		return bytes.b[1] == 216;
	} else {
		return false;
	}
};
lime_graphics_Image.__isPNG = function(bytes) {
	if(bytes.b[0] == 137 && bytes.b[1] == 80 && bytes.b[2] == 78 && bytes.b[3] == 71 && bytes.b[4] == 13 && bytes.b[5] == 10 && bytes.b[6] == 26) {
		return bytes.b[7] == 10;
	} else {
		return false;
	}
};
lime_graphics_Image.__isGIF = function(bytes) {
	if(bytes.b[0] == 71 && bytes.b[1] == 73 && bytes.b[2] == 70 && bytes.b[3] == 56) {
		var b = bytes.b[4];
		if(b == 55 || b == 57) {
			return bytes.b[5] == 97;
		} else {
			return false;
		}
	}
	return false;
};
lime_graphics_Image.prototype = {
	buffer: null
	,dirty: null
	,height: null
	,offsetX: null
	,offsetY: null
	,rect: null
	,type: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		if(this.buffer != null) {
			if(this.type == lime_graphics_ImageType.CANVAS && this.buffer.__srcImage == null) {
				lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
				lime_graphics_utils_ImageCanvasUtil.sync(this,true);
			}
			var image = new lime_graphics_Image(this.buffer.clone(),this.offsetX,this.offsetY,this.width,this.height,null,this.type);
			image.dirty = this.dirty;
			return image;
		} else {
			return new lime_graphics_Image(null,this.offsetX,this.offsetY,this.width,this.height,null,this.type);
		}
	}
	,colorTransform: function(rect,colorMatrix) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.colorTransform(this,rect,colorMatrix);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.colorTransform(rect.__toFlashRectangle(),lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform(colorMatrix));
			break;
		default:
		}
	}
	,copyChannel: function(sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
		sourceRect = this.__clipRect(sourceRect);
		if(this.buffer == null || sourceRect == null) {
			return;
		}
		if(destChannel == lime_graphics_ImageChannel.ALPHA && !this.get_transparent()) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.copyChannel(this,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
			break;
		case 2:
			var srcChannel;
			switch(sourceChannel[1]) {
			case 0:
				srcChannel = 1;
				break;
			case 1:
				srcChannel = 2;
				break;
			case 2:
				srcChannel = 4;
				break;
			case 3:
				srcChannel = 8;
				break;
			}
			var dstChannel;
			switch(destChannel[1]) {
			case 0:
				dstChannel = 1;
				break;
			case 1:
				dstChannel = 2;
				break;
			case 2:
				dstChannel = 4;
				break;
			case 3:
				dstChannel = 8;
				break;
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.copyChannel(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),srcChannel,dstChannel);
			break;
		default:
		}
	}
	,copyPixels: function(sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
		if(mergeAlpha == null) {
			mergeAlpha = false;
		}
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		if(sourceRect.width <= 0 || sourceRect.height <= 0) {
			return;
		}
		if(this.width <= 0 || this.height <= 0) {
			return;
		}
		if(sourceRect.x + sourceRect.width > sourceImage.width) {
			sourceRect.width = sourceImage.width - sourceRect.x;
		}
		if(sourceRect.y + sourceRect.height > sourceImage.height) {
			sourceRect.height = sourceImage.height - sourceRect.y;
		}
		if(sourceRect.x < 0) {
			sourceRect.width += sourceRect.x;
			sourceRect.x = 0;
		}
		if(sourceRect.y < 0) {
			sourceRect.height += sourceRect.y;
			sourceRect.y = 0;
		}
		if(destPoint.x + sourceRect.width > this.width) {
			sourceRect.width = this.width - destPoint.x;
		}
		if(destPoint.y + sourceRect.height > this.height) {
			sourceRect.height = this.height - destPoint.y;
		}
		if(destPoint.x < 0) {
			sourceRect.width += destPoint.x;
			sourceRect.x = -destPoint.x;
			destPoint.x = 0;
		}
		if(destPoint.y < 0) {
			sourceRect.height += destPoint.y;
			sourceRect.y = -destPoint.y;
			destPoint.y = 0;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.copyPixels(this,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha);
			break;
		case 2:
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			if(alphaImage != null && alphaPoint != null) {
				alphaPoint.offset(alphaImage.offsetX,alphaImage.offsetY);
			}
			this.buffer.__srcBitmapData.copyPixels(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),alphaImage != null?alphaImage.buffer.get_src():null,alphaPoint != null?alphaPoint.__toFlashPoint():null,mergeAlpha);
			break;
		default:
		}
	}
	,encode: function(format,quality) {
		if(quality == null) {
			quality = 90;
		}
		if(format == null) {
			format = "png";
		}
		switch(format) {
		case "bmp":
			return lime_graphics_format_BMP.encode(this);
		case "jpeg":case "jpg":
			return lime_graphics_format_JPEG.encode(this,quality);
		case "png":
			return lime_graphics_format_PNG.encode(this);
		default:
		}
		return null;
	}
	,fillRect: function(rect,color,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.fillRect(this,rect,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			if(this.buffer.data.length == 0) {
				return;
			}
			lime_graphics_utils_ImageDataUtil.fillRect(this,rect,color,format);
			break;
		case 2:
			rect.offset(this.offsetX,this.offsetY);
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.fillRect(rect.__toFlashRectangle(),argb);
			break;
		default:
		}
	}
	,floodFill: function(x,y,color,format) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.floodFill(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.floodFill(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.floodFill(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,getColorBoundsRect: function(mask,color,findColor,format) {
		if(findColor == null) {
			findColor = true;
		}
		if(this.buffer == null) {
			return null;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 1:
			return lime_graphics_utils_ImageDataUtil.getColorBoundsRect(this,mask,color,findColor,format);
		case 2:
			var rect = this.buffer.__srcBitmapData.getColorBoundsRect(mask,color,findColor);
			return new lime_math_Rectangle(rect.x,rect.y,rect.width,rect.height);
		default:
			return null;
		}
	}
	,getPixel: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					return bgra;
				default:
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixel32: function(x,y,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixel32(this,x,y,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixel32(this,x,y,format);
		case 2:
			var color = this.buffer.__srcBitmapData.getPixel32(x + this.offsetX,y + this.offsetY);
			if(format == null) {
				var rgba = 0;
				rgba = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
				return rgba;
			} else {
				switch(format) {
				case 1:
					return color;
				case 2:
					var bgra = 0;
					bgra = (color & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color >> 16 & 255 & 255) << 8 | color >> 24 & 255 & 255;
					return bgra;
				default:
					var rgba1 = 0;
					rgba1 = (color >> 16 & 255 & 255) << 24 | (color >> 8 & 255 & 255) << 16 | (color & 255 & 255) << 8 | color >> 24 & 255 & 255;
					return rgba1;
				}
			}
			break;
		default:
			return 0;
		}
	}
	,getPixels: function(rect,format) {
		if(this.buffer == null) {
			return null;
		}
		switch(this.type[1]) {
		case 0:
			return lime_graphics_utils_ImageCanvasUtil.getPixels(this,rect,format);
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.getPixels(this,rect,format);
		case 2:
			return null;
		default:
			return null;
		}
	}
	,merge: function(sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
		if(this.buffer == null || sourceImage == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageCanvasUtil.convertToData(sourceImage);
			lime_graphics_utils_ImageDataUtil.merge(this,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		case 2:
			sourceRect.offset(this.offsetX,this.offsetY);
			this.buffer.__srcBitmapData.merge(sourceImage.buffer.__srcBitmapData,sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
			break;
		default:
			return;
		}
	}
	,resize: function(newWidth,newHeight) {
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.resize(this,newWidth,newHeight);
			break;
		case 1:
			lime_graphics_utils_ImageDataUtil.resize(this,newWidth,newHeight);
			break;
		case 2:
			break;
		default:
		}
		this.buffer.width = newWidth;
		this.buffer.height = newHeight;
		this.offsetX = 0;
		this.offsetY = 0;
		this.width = newWidth;
		this.height = newHeight;
	}
	,scroll: function(x,y) {
		if(this.buffer == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.scroll(this,x,y);
			break;
		case 1:
			this.copyPixels(this,this.get_rect(),new lime_math_Vector2(x,y));
			break;
		case 2:
			this.buffer.__srcBitmapData.scroll(x + this.offsetX,y + this.offsetX);
			break;
		default:
		}
	}
	,setPixel: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel(x + this.offsetX,y + this.offsetX,argb);
			break;
		default:
		}
	}
	,setPixel32: function(x,y,color,format) {
		if(this.buffer == null || x < 0 || y < 0 || x >= this.width || y >= this.height) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixel32(this,x,y,color,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixel32(this,x,y,color,format);
			break;
		case 2:
			var argb;
			if(format == null) {
				var rgba = color;
				var argb1 = 0;
				argb1 = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				argb = argb1;
			} else {
				switch(format) {
				case 1:
					argb = color;
					break;
				case 2:
					var bgra = color;
					var argb2 = 0;
					argb2 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					argb = argb2;
					break;
				default:
					var rgba1 = color;
					var argb3 = 0;
					argb3 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					argb = argb3;
				}
			}
			this.buffer.__srcBitmapData.setPixel32(x + this.offsetX,y + this.offsetY,argb);
			break;
		default:
		}
	}
	,setPixels: function(rect,bytes,format) {
		rect = this.__clipRect(rect);
		if(this.buffer == null || rect == null) {
			return;
		}
		switch(this.type[1]) {
		case 0:
			lime_graphics_utils_ImageCanvasUtil.setPixels(this,rect,bytes,format);
			break;
		case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			lime_graphics_utils_ImageDataUtil.setPixels(this,rect,bytes,format);
			break;
		case 2:
			break;
		default:
		}
	}
	,threshold: function(sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
		if(copySource == null) {
			copySource = false;
		}
		if(mask == null) {
			mask = -1;
		}
		if(color == null) {
			color = 0;
		}
		if(this.buffer == null || sourceImage == null || sourceRect == null) {
			return 0;
		}
		switch(this.type[1]) {
		case 0:case 1:
			lime_graphics_utils_ImageCanvasUtil.convertToData(this);
			return lime_graphics_utils_ImageDataUtil.threshold(this,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format);
		case 2:
			var _color;
			if(format == null) {
				var rgba = color;
				var argb = 0;
				argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
				_color = argb;
			} else {
				switch(format) {
				case 1:
					_color = color;
					break;
				case 2:
					var bgra = color;
					var argb1 = 0;
					argb1 = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
					_color = argb1;
					break;
				default:
					var rgba1 = color;
					var argb2 = 0;
					argb2 = (rgba1 & 255 & 255) << 24 | (rgba1 >> 24 & 255 & 255) << 16 | (rgba1 >> 16 & 255 & 255) << 8 | rgba1 >> 8 & 255 & 255;
					_color = argb2;
				}
			}
			var _mask;
			if(format == null) {
				var rgba2 = mask;
				var argb3 = 0;
				argb3 = (rgba2 & 255 & 255) << 24 | (rgba2 >> 24 & 255 & 255) << 16 | (rgba2 >> 16 & 255 & 255) << 8 | rgba2 >> 8 & 255 & 255;
				_mask = argb3;
			} else {
				switch(format) {
				case 1:
					_mask = mask;
					break;
				case 2:
					var bgra1 = mask;
					var argb4 = 0;
					argb4 = (bgra1 & 255 & 255) << 24 | (bgra1 >> 8 & 255 & 255) << 16 | (bgra1 >> 16 & 255 & 255) << 8 | bgra1 >> 24 & 255 & 255;
					_mask = argb4;
					break;
				default:
					var rgba3 = mask;
					var argb5 = 0;
					argb5 = (rgba3 & 255 & 255) << 24 | (rgba3 >> 24 & 255 & 255) << 16 | (rgba3 >> 16 & 255 & 255) << 8 | rgba3 >> 8 & 255 & 255;
					_mask = argb5;
				}
			}
			sourceRect.offset(sourceImage.offsetX,sourceImage.offsetY);
			destPoint.offset(this.offsetX,this.offsetY);
			return this.buffer.__srcBitmapData.threshold(sourceImage.buffer.get_src(),sourceRect.__toFlashRectangle(),destPoint.__toFlashPoint(),operation,threshold,_color,_mask,copySource);
		default:
		}
		return 0;
	}
	,__clipRect: function(r) {
		if(r == null) {
			return null;
		}
		if(r.x < 0) {
			r.width -= -r.x;
			r.x = 0;
			if(r.x + r.width <= 0) {
				return null;
			}
		}
		if(r.y < 0) {
			r.height -= -r.y;
			r.y = 0;
			if(r.y + r.height <= 0) {
				return null;
			}
		}
		if(r.x + r.width >= this.width) {
			r.width -= r.x + r.width - this.width;
			if(r.width <= 0) {
				return null;
			}
		}
		if(r.y + r.height >= this.height) {
			r.height -= r.y + r.height - this.height;
			if(r.height <= 0) {
				return null;
			}
		}
		return r;
	}
	,__fromBase64: function(base64,type,onload) {
		var _gthis = this;
		var image = new Image();
		image.addEventListener("load",function(event) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.offsetX = 0;
			_gthis.offsetY = 0;
			_gthis.width = _gthis.buffer.width;
			_gthis.height = _gthis.buffer.height;
			if(onload != null) {
				onload(_gthis);
			}
		},false);
		image.src = "data:" + type + ";base64," + base64;
	}
	,__fromBytes: function(bytes,onload) {
		var type = "";
		if(lime_graphics_Image.__isPNG(bytes)) {
			type = "image/png";
		} else if(lime_graphics_Image.__isJPG(bytes)) {
			type = "image/jpeg";
		} else if(lime_graphics_Image.__isGIF(bytes)) {
			type = "image/gif";
		} else {
			throw new js__$Boot_HaxeError("Image tried to read PNG/JPG Bytes, but found an invalid header.");
		}
		this.__fromBase64(lime_graphics_Image.__base64Encode(bytes),type,onload);
	}
	,__fromFile: function(path,onload,onerror) {
		var _gthis = this;
		var image = new Image();
		var a = window.document.createElement("a");
		a.href = path;
		var tmp = a.hostname != lime_graphics_Image.__origin_hostname || a.port != lime_graphics_Image.__origin_port || a.protocol != lime_graphics_Image.__origin_protocol;
		image.onload = function(_) {
			_gthis.buffer = new lime_graphics_ImageBuffer(null,image.width,image.height);
			_gthis.buffer.__srcImage = image;
			_gthis.width = image.width;
			_gthis.height = image.height;
			if(onload != null) {
				onload(_gthis);
			}
		};
		image.onerror = function(_1) {
			if(onerror != null) {
				onerror();
			}
		};
		image.src = path;
	}
	,__fromImageBuffer: function(buffer) {
		this.buffer = buffer;
		if(buffer != null) {
			if(this.width == -1) {
				this.width = buffer.width;
			}
			if(this.height == -1) {
				this.height = buffer.height;
			}
		}
	}
	,get_data: function() {
		if(this.buffer.data == null && this.buffer.width > 0 && this.buffer.height > 0) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
			lime_graphics_utils_ImageCanvasUtil.sync(this,false);
			lime_graphics_utils_ImageCanvasUtil.createImageData(this);
		}
		return this.buffer.data;
	}
	,set_data: function(value) {
		return this.buffer.data = value;
	}
	,get_format: function() {
		return this.buffer.format;
	}
	,set_format: function(value) {
		if(this.buffer.format != value) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageDataUtil.setFormat(this,value);
			}
		}
		return this.buffer.format = value;
	}
	,get_powerOfTwo: function() {
		if(this.buffer.width != 0 && (this.buffer.width & ~this.buffer.width + 1) == this.buffer.width) {
			if(this.buffer.height != 0) {
				return (this.buffer.height & ~this.buffer.height + 1) == this.buffer.height;
			} else {
				return false;
			}
		} else {
			return false;
		}
	}
	,set_powerOfTwo: function(value) {
		if(value != this.get_powerOfTwo()) {
			var newWidth = 1;
			var newHeight = 1;
			while(newWidth < this.buffer.width) newWidth <<= 1;
			while(newHeight < this.buffer.height) newHeight <<= 1;
			switch(this.type[1]) {
			case 0:
				break;
			case 1:
				lime_graphics_utils_ImageDataUtil.resizeBuffer(this,newWidth,newHeight);
				break;
			case 2:
				break;
			default:
			}
		}
		return value;
	}
	,get_premultiplied: function() {
		return this.buffer.premultiplied;
	}
	,set_premultiplied: function(value) {
		if(value && !this.buffer.premultiplied) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.multiplyAlpha(this);
			}
		} else if(!value && this.buffer.premultiplied) {
			if(this.type[1] == 1) {
				lime_graphics_utils_ImageCanvasUtil.convertToData(this);
				lime_graphics_utils_ImageDataUtil.unmultiplyAlpha(this);
			}
		}
		return value;
	}
	,get_rect: function() {
		return new lime_math_Rectangle(0,0,this.width,this.height);
	}
	,get_src: function() {
		if(this.buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.convertToCanvas(this);
		}
		return this.buffer.get_src();
	}
	,set_src: function(value) {
		return this.buffer.set_src(value);
	}
	,get_transparent: function() {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent;
	}
	,set_transparent: function(value) {
		if(this.buffer == null) {
			return false;
		}
		return this.buffer.transparent = value;
	}
	,__class__: lime_graphics_Image
	,__properties__: {set_transparent:"set_transparent",get_transparent:"get_transparent",set_src:"set_src",get_src:"get_src",get_rect:"get_rect",set_premultiplied:"set_premultiplied",get_premultiplied:"get_premultiplied",set_powerOfTwo:"set_powerOfTwo",get_powerOfTwo:"get_powerOfTwo",set_format:"set_format",get_format:"get_format",set_data:"set_data",get_data:"get_data"}
};
var lime_graphics_ImageBuffer = function(data,width,height,bitsPerPixel,format) {
	if(bitsPerPixel == null) {
		bitsPerPixel = 32;
	}
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	this.data = data;
	this.width = width;
	this.height = height;
	this.bitsPerPixel = bitsPerPixel;
	this.format = format == null?0:format;
	this.transparent = true;
};
$hxClasses["lime.graphics.ImageBuffer"] = lime_graphics_ImageBuffer;
lime_graphics_ImageBuffer.__name__ = ["lime","graphics","ImageBuffer"];
lime_graphics_ImageBuffer.prototype = {
	bitsPerPixel: null
	,data: null
	,format: null
	,height: null
	,premultiplied: null
	,transparent: null
	,width: null
	,__srcBitmapData: null
	,__srcCanvas: null
	,__srcContext: null
	,__srcCustom: null
	,__srcImage: null
	,__srcImageData: null
	,clone: function() {
		var buffer = new lime_graphics_ImageBuffer(this.data,this.width,this.height,this.bitsPerPixel);
		if(this.data != null) {
			var elements = this.data.byteLength;
			buffer.data = elements != null?new Uint8Array(elements):null;
			var view = this.data;
			buffer.data.set(view != null?new Uint8Array(view):null);
		} else if(this.__srcImageData != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcImageData.width;
			buffer.__srcCanvas.height = this.__srcImageData.height;
			buffer.__srcImageData = buffer.__srcContext.createImageData(this.__srcImageData.width,this.__srcImageData.height);
			buffer.__srcImageData.data.set(new Uint8ClampedArray(this.__srcImageData.data));
		} else if(this.__srcCanvas != null) {
			buffer.__srcCanvas = window.document.createElement("canvas");
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
			buffer.__srcCanvas.width = this.__srcCanvas.width;
			buffer.__srcCanvas.height = this.__srcCanvas.height;
			buffer.__srcContext.drawImage(this.__srcCanvas,0,0);
		} else {
			buffer.__srcImage = this.__srcImage;
		}
		buffer.bitsPerPixel = this.bitsPerPixel;
		buffer.format = this.format;
		buffer.premultiplied = this.premultiplied;
		buffer.transparent = this.transparent;
		return buffer;
	}
	,get_src: function() {
		if(this.__srcImage != null) {
			return this.__srcImage;
		}
		return this.__srcCanvas;
	}
	,set_src: function(value) {
		if(js_Boot.__instanceof(value,Image)) {
			this.__srcImage = value;
		} else if(js_Boot.__instanceof(value,HTMLCanvasElement)) {
			this.__srcCanvas = value;
			this.__srcContext = this.__srcCanvas.getContext("2d");
		}
		return value;
	}
	,get_stride: function() {
		return this.width * 4;
	}
	,__class__: lime_graphics_ImageBuffer
	,__properties__: {get_stride:"get_stride",set_src:"set_src",get_src:"get_src"}
};
var lime_graphics_ImageChannel = $hxClasses["lime.graphics.ImageChannel"] = { __ename__ : ["lime","graphics","ImageChannel"], __constructs__ : ["RED","GREEN","BLUE","ALPHA"] };
lime_graphics_ImageChannel.RED = ["RED",0];
lime_graphics_ImageChannel.RED.toString = $estr;
lime_graphics_ImageChannel.RED.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.GREEN = ["GREEN",1];
lime_graphics_ImageChannel.GREEN.toString = $estr;
lime_graphics_ImageChannel.GREEN.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.BLUE = ["BLUE",2];
lime_graphics_ImageChannel.BLUE.toString = $estr;
lime_graphics_ImageChannel.BLUE.__enum__ = lime_graphics_ImageChannel;
lime_graphics_ImageChannel.ALPHA = ["ALPHA",3];
lime_graphics_ImageChannel.ALPHA.toString = $estr;
lime_graphics_ImageChannel.ALPHA.__enum__ = lime_graphics_ImageChannel;
var lime_graphics_ImageType = $hxClasses["lime.graphics.ImageType"] = { __ename__ : ["lime","graphics","ImageType"], __constructs__ : ["CANVAS","DATA","FLASH","CUSTOM"] };
lime_graphics_ImageType.CANVAS = ["CANVAS",0];
lime_graphics_ImageType.CANVAS.toString = $estr;
lime_graphics_ImageType.CANVAS.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.DATA = ["DATA",1];
lime_graphics_ImageType.DATA.toString = $estr;
lime_graphics_ImageType.DATA.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.FLASH = ["FLASH",2];
lime_graphics_ImageType.FLASH.toString = $estr;
lime_graphics_ImageType.FLASH.__enum__ = lime_graphics_ImageType;
lime_graphics_ImageType.CUSTOM = ["CUSTOM",3];
lime_graphics_ImageType.CUSTOM.toString = $estr;
lime_graphics_ImageType.CUSTOM.__enum__ = lime_graphics_ImageType;
var lime_graphics_RenderContext = $hxClasses["lime.graphics.RenderContext"] = { __ename__ : ["lime","graphics","RenderContext"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM","NONE"] };
lime_graphics_RenderContext.OPENGL = function(gl) { var $x = ["OPENGL",0,gl]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CANVAS = function(context) { var $x = ["CANVAS",1,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.DOM = function(element) { var $x = ["DOM",2,element]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.FLASH = function(stage) { var $x = ["FLASH",3,stage]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CAIRO = function(cairo) { var $x = ["CAIRO",4,cairo]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CONSOLE = function(context) { var $x = ["CONSOLE",5,context]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.CUSTOM = function(data) { var $x = ["CUSTOM",6,data]; $x.__enum__ = lime_graphics_RenderContext; $x.toString = $estr; return $x; };
lime_graphics_RenderContext.NONE = ["NONE",7];
lime_graphics_RenderContext.NONE.toString = $estr;
lime_graphics_RenderContext.NONE.__enum__ = lime_graphics_RenderContext;
var lime_graphics_Renderer = function(window) {
	this.onRender = new lime_app_Event_$Void_$Void();
	this.onContextRestored = new lime_app_Event_$lime_$graphics_$RenderContext_$Void();
	this.onContextLost = new lime_app_Event_$Void_$Void();
	this.window = window;
	this.backend = new lime__$backend_html5_HTML5Renderer(this);
	this.window.renderer = this;
};
$hxClasses["lime.graphics.Renderer"] = lime_graphics_Renderer;
lime_graphics_Renderer.__name__ = ["lime","graphics","Renderer"];
lime_graphics_Renderer.prototype = {
	context: null
	,onContextLost: null
	,onContextRestored: null
	,onRender: null
	,type: null
	,window: null
	,backend: null
	,create: function() {
		this.backend.create();
	}
	,flip: function() {
		this.backend.flip();
	}
	,readPixels: function(rect) {
		return this.backend.readPixels(rect);
	}
	,render: function() {
		this.backend.render();
	}
	,__class__: lime_graphics_Renderer
};
var lime_graphics_RendererType = $hxClasses["lime.graphics.RendererType"] = { __ename__ : ["lime","graphics","RendererType"], __constructs__ : ["OPENGL","CANVAS","DOM","FLASH","CAIRO","CONSOLE","CUSTOM"] };
lime_graphics_RendererType.OPENGL = ["OPENGL",0];
lime_graphics_RendererType.OPENGL.toString = $estr;
lime_graphics_RendererType.OPENGL.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CANVAS = ["CANVAS",1];
lime_graphics_RendererType.CANVAS.toString = $estr;
lime_graphics_RendererType.CANVAS.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.DOM = ["DOM",2];
lime_graphics_RendererType.DOM.toString = $estr;
lime_graphics_RendererType.DOM.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.FLASH = ["FLASH",3];
lime_graphics_RendererType.FLASH.toString = $estr;
lime_graphics_RendererType.FLASH.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CAIRO = ["CAIRO",4];
lime_graphics_RendererType.CAIRO.toString = $estr;
lime_graphics_RendererType.CAIRO.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CONSOLE = ["CONSOLE",5];
lime_graphics_RendererType.CONSOLE.toString = $estr;
lime_graphics_RendererType.CONSOLE.__enum__ = lime_graphics_RendererType;
lime_graphics_RendererType.CUSTOM = ["CUSTOM",6];
lime_graphics_RendererType.CUSTOM.toString = $estr;
lime_graphics_RendererType.CUSTOM.__enum__ = lime_graphics_RendererType;
var lime_graphics_cairo_Cairo = function(surface) {
};
$hxClasses["lime.graphics.cairo.Cairo"] = lime_graphics_cairo_Cairo;
lime_graphics_cairo_Cairo.__name__ = ["lime","graphics","cairo","Cairo"];
lime_graphics_cairo_Cairo.__properties__ = {get_versionString:"get_versionString",get_version:"get_version"}
lime_graphics_cairo_Cairo.version = null;
lime_graphics_cairo_Cairo.versionString = null;
lime_graphics_cairo_Cairo.get_version = function() {
	return 0;
};
lime_graphics_cairo_Cairo.get_versionString = function() {
	return "";
};
lime_graphics_cairo_Cairo.prototype = {
	target: null
	,userData: null
	,handle: null
	,arc: function(xc,yc,radius,angle1,angle2) {
	}
	,arcNegative: function(xc,yc,radius,angle1,angle2) {
	}
	,clip: function() {
	}
	,clipExtents: function(x1,y1,x2,y2) {
	}
	,clipPreserve: function() {
	}
	,closePath: function() {
	}
	,copyPage: function() {
	}
	,curveTo: function(x1,y1,x2,y2,x3,y3) {
	}
	,fill: function() {
	}
	,fillExtents: function(x1,y1,x2,y2) {
	}
	,fillPreserve: function() {
	}
	,identityMatrix: function() {
	}
	,inClip: function(x,y) {
		return false;
	}
	,inFill: function(x,y) {
		return false;
	}
	,inStroke: function(x,y) {
		return false;
	}
	,lineTo: function(x,y) {
	}
	,moveTo: function(x,y) {
	}
	,mask: function(pattern) {
	}
	,maskSurface: function(surface,x,y) {
	}
	,newPath: function() {
	}
	,paint: function() {
	}
	,paintWithAlpha: function(alpha) {
	}
	,popGroup: function() {
		return null;
	}
	,popGroupToSource: function() {
	}
	,pushGroup: function() {
	}
	,pushGroupWithContent: function(content) {
	}
	,recreate: function(surface) {
	}
	,rectangle: function(x,y,width,height) {
	}
	,relCurveTo: function(dx1,dy1,dx2,dy2,dx3,dy3) {
	}
	,relLineTo: function(dx,dy) {
	}
	,relMoveTo: function(dx,dy) {
	}
	,resetClip: function() {
	}
	,restore: function() {
	}
	,save: function() {
	}
	,setFontSize: function(size) {
	}
	,setSourceRGB: function(r,g,b) {
	}
	,setSourceRGBA: function(r,g,b,a) {
	}
	,setSourceSurface: function(surface,x,y) {
	}
	,showPage: function() {
	}
	,showText: function(utf8) {
	}
	,status: function() {
		return 0;
	}
	,stroke: function() {
	}
	,strokeExtents: function(x1,y1,x2,y2) {
	}
	,strokePreserve: function() {
	}
	,transform: function(matrix) {
	}
	,rotate: function(amount) {
	}
	,scale: function(x,y) {
	}
	,translate: function(x,y) {
	}
	,get_antialias: function() {
		return 0;
	}
	,set_antialias: function(value) {
		return value;
	}
	,get_currentPoint: function() {
		return null;
	}
	,get_dash: function() {
		return [];
	}
	,set_dash: function(value) {
		return value;
	}
	,get_dashCount: function() {
		return 0;
	}
	,get_fillRule: function() {
		return 0;
	}
	,set_fillRule: function(value) {
		return value;
	}
	,get_fontFace: function() {
		return 0;
	}
	,set_fontFace: function(value) {
		return value;
	}
	,get_fontOptions: function() {
		return null;
	}
	,set_fontOptions: function(value) {
		return value;
	}
	,get_groupTarget: function() {
		return 0;
	}
	,get_hasCurrentPoint: function() {
		return false;
	}
	,get_lineCap: function() {
		return 0;
	}
	,set_lineCap: function(value) {
		return value;
	}
	,get_lineJoin: function() {
		return 0;
	}
	,set_lineJoin: function(value) {
		return value;
	}
	,get_lineWidth: function() {
		return 0;
	}
	,set_lineWidth: function(value) {
		return value;
	}
	,get_matrix: function() {
		return null;
	}
	,set_matrix: function(value) {
		return value;
	}
	,get_miterLimit: function() {
		return 0;
	}
	,set_miterLimit: function(value) {
		return value;
	}
	,get_operator: function() {
		return 0;
	}
	,set_operator: function(value) {
		return value;
	}
	,get_source: function() {
		return 0;
	}
	,set_source: function(value) {
		return value;
	}
	,get_target: function() {
		return 0;
	}
	,get_tolerance: function() {
		return 0;
	}
	,set_tolerance: function(value) {
		return value;
	}
	,__class__: lime_graphics_cairo_Cairo
	,__properties__: {set_tolerance:"set_tolerance",get_tolerance:"get_tolerance",get_target:"get_target",set_source:"set_source",get_source:"get_source",set_operator:"set_operator",get_operator:"get_operator",set_miterLimit:"set_miterLimit",get_miterLimit:"get_miterLimit",set_matrix:"set_matrix",get_matrix:"get_matrix",set_lineWidth:"set_lineWidth",get_lineWidth:"get_lineWidth",set_lineJoin:"set_lineJoin",get_lineJoin:"get_lineJoin",set_lineCap:"set_lineCap",get_lineCap:"get_lineCap",get_hasCurrentPoint:"get_hasCurrentPoint",get_groupTarget:"get_groupTarget",set_fontOptions:"set_fontOptions",get_fontOptions:"get_fontOptions",set_fontFace:"set_fontFace",get_fontFace:"get_fontFace",set_fillRule:"set_fillRule",get_fillRule:"get_fillRule",get_dashCount:"get_dashCount",set_dash:"set_dash",get_dash:"get_dash",get_currentPoint:"get_currentPoint",set_antialias:"set_antialias",get_antialias:"get_antialias"}
};
var lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFTFontFace.CairoFTFontFace_Impl_"] = lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFTFontFace","CairoFTFontFace_Impl_"];
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$._new = function() {
	return 0;
};
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.create = function(face,loadFlags) {
	return 0;
};
var lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontFace.CairoFontFace_Impl_"] = lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$;
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontFace","CairoFontFace_Impl_"];
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontFace_CairoFontFace_$Impl_$.status = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoFontOptions.CairoFontOptions_Impl_"] = lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$;
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoFontOptions","CairoFontOptions_Impl_"];
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.__properties__ = {set_subpixelOrder:"set_subpixelOrder",get_subpixelOrder:"get_subpixelOrder",set_hintStyle:"set_hintStyle",get_hintStyle:"get_hintStyle",set_hintMetrics:"set_hintMetrics",get_hintMetrics:"get_hintMetrics",set_antialias:"set_antialias",get_antialias:"get_antialias"}
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$._new = function() {
	return null;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_antialias = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_antialias = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintMetrics = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintMetrics = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_hintStyle = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_hintStyle = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.get_subpixelOrder = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoFontOptions_CairoFontOptions_$Impl_$.set_subpixelOrder = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoImageSurface.CairoImageSurface_Impl_"] = lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$;
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoImageSurface","CairoImageSurface_Impl_"];
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.__properties__ = {get_width:"get_width",get_stride:"get_stride",get_height:"get_height",get_format:"get_format",get_data:"get_data"}
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$._new = function(format,width,height) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.create = function(data,format,width,height,stride) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.fromImage = function(image) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_data = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_format = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_height = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_stride = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoImageSurface_CairoImageSurface_$Impl_$.get_width = function(this1) {
	return 0;
};
var lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoPattern.CairoPattern_Impl_"] = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$;
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoPattern","CairoPattern_Impl_"];
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.__properties__ = {set_matrix:"set_matrix",get_matrix:"get_matrix",set_filter:"set_filter",get_filter:"get_filter",set_extend:"set_extend",get_extend:"get_extend",get_colorStopCount:"get_colorStopCount"}
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$._new = function(handle) {
	return handle;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGB = function(this1,offset,r,g,b) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA = function(this1,offset,r,g,b,a) {
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface = function(surface) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear = function(x0,y0,x1,y1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial = function(cx0,cy0,radius0,cx1,cy1,radius1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB = function(r,g,b) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA = function(r,g,b,a) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_colorStopCount = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_extend = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_filter = function(this1) {
	return 0;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter = function(this1,value) {
	return value;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix = function(this1) {
	return null;
};
lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix = function(this1,value) {
	return value;
};
var lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$ = {};
$hxClasses["lime.graphics.cairo._CairoSurface.CairoSurface_Impl_"] = lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$;
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.__name__ = ["lime","graphics","cairo","_CairoSurface","CairoSurface_Impl_"];
lime_graphics_cairo__$CairoSurface_CairoSurface_$Impl_$.flush = function(this1) {
};
var lime_graphics_console_IndexBuffer = function() {
};
$hxClasses["lime.graphics.console.IndexBuffer"] = lime_graphics_console_IndexBuffer;
lime_graphics_console_IndexBuffer.__name__ = ["lime","graphics","console","IndexBuffer"];
lime_graphics_console_IndexBuffer.prototype = {
	__class__: lime_graphics_console_IndexBuffer
};
var lime_graphics_console_Primitive = $hxClasses["lime.graphics.console.Primitive"] = { __ename__ : ["lime","graphics","console","Primitive"], __constructs__ : ["Point","Line","LineStrip","Triangle","TriangleStrip"] };
lime_graphics_console_Primitive.Point = ["Point",0];
lime_graphics_console_Primitive.Point.toString = $estr;
lime_graphics_console_Primitive.Point.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Line = ["Line",1];
lime_graphics_console_Primitive.Line.toString = $estr;
lime_graphics_console_Primitive.Line.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.LineStrip = ["LineStrip",2];
lime_graphics_console_Primitive.LineStrip.toString = $estr;
lime_graphics_console_Primitive.LineStrip.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.Triangle = ["Triangle",3];
lime_graphics_console_Primitive.Triangle.toString = $estr;
lime_graphics_console_Primitive.Triangle.__enum__ = lime_graphics_console_Primitive;
lime_graphics_console_Primitive.TriangleStrip = ["TriangleStrip",4];
lime_graphics_console_Primitive.TriangleStrip.toString = $estr;
lime_graphics_console_Primitive.TriangleStrip.__enum__ = lime_graphics_console_Primitive;
var lime_graphics_console_Shader = function() {
};
$hxClasses["lime.graphics.console.Shader"] = lime_graphics_console_Shader;
lime_graphics_console_Shader.__name__ = ["lime","graphics","console","Shader"];
lime_graphics_console_Shader.prototype = {
	__class__: lime_graphics_console_Shader
};
var lime_graphics_console_VertexBuffer = function() {
};
$hxClasses["lime.graphics.console.VertexBuffer"] = lime_graphics_console_VertexBuffer;
lime_graphics_console_VertexBuffer.__name__ = ["lime","graphics","console","VertexBuffer"];
lime_graphics_console_VertexBuffer.prototype = {
	lock: function() {
		return new lime_graphics_console_VertexOutput();
	}
	,unlock: function() {
	}
	,__class__: lime_graphics_console_VertexBuffer
};
var lime_graphics_console_VertexOutput = function() {
};
$hxClasses["lime.graphics.console.VertexOutput"] = lime_graphics_console_VertexOutput;
lime_graphics_console_VertexOutput.__name__ = ["lime","graphics","console","VertexOutput"];
lime_graphics_console_VertexOutput.prototype = {
	vec2: function(x,y) {
	}
	,vec3: function(x,y,z) {
	}
	,color: function(r,g,b,a) {
	}
	,__class__: lime_graphics_console_VertexOutput
};
var lime_graphics_format_BMP = function() { };
$hxClasses["lime.graphics.format.BMP"] = lime_graphics_format_BMP;
lime_graphics_format_BMP.__name__ = ["lime","graphics","format","BMP"];
lime_graphics_format_BMP.encode = function(image,type) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	if(type == null) {
		type = lime_graphics_format_BMPType.RGB;
	}
	var fileHeaderLength = 14;
	var infoHeaderLength = 40;
	var pixelValuesLength = image.width * image.height * 4;
	if(type != null) {
		switch(type[1]) {
		case 0:
			pixelValuesLength = image.width * 3 + image.width * 3 % 4 + image.height * 3 + image.height * 3;
			break;
		case 1:
			infoHeaderLength = 108;
			break;
		case 2:
			fileHeaderLength = 0;
			pixelValuesLength += image.width * image.height;
			break;
		}
	}
	var data = new haxe_io_Bytes(new ArrayBuffer(fileHeaderLength + infoHeaderLength + pixelValuesLength));
	var position = 0;
	if(fileHeaderLength > 0) {
		position = 1;
		data.b[0] = 66;
		position = 2;
		data.b[1] = 77;
		data.setInt32(2,data.length);
		position = 6;
		data.setUInt16(6,0);
		position = 8;
		data.setUInt16(8,0);
		position = 10;
		data.setInt32(10,fileHeaderLength + infoHeaderLength);
		position = 14;
	}
	data.setInt32(position,infoHeaderLength);
	position += 4;
	data.setInt32(position,image.width);
	position += 4;
	data.setInt32(position,type == lime_graphics_format_BMPType.ICO?image.height * 2:image.height);
	position += 4;
	data.setUInt16(position,1);
	position += 2;
	data.setUInt16(position,type == lime_graphics_format_BMPType.RGB?24:32);
	position += 2;
	data.setInt32(position,type == lime_graphics_format_BMPType.BITFIELD?3:0);
	position += 4;
	data.setInt32(position,pixelValuesLength);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,11824);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	data.setInt32(position,0);
	position += 4;
	if(type == lime_graphics_format_BMPType.BITFIELD) {
		data.setInt32(position,16711680);
		position += 4;
		data.setInt32(position,65280);
		position += 4;
		data.setInt32(position,255);
		position += 4;
		data.setInt32(position,-16777216);
		position += 4;
		data.b[position++] = 32;
		data.b[position++] = 110;
		data.b[position++] = 105;
		data.b[position++] = 87;
		var _g = 0;
		while(_g < 48) {
			++_g;
			data.b[position++] = 0;
		}
	}
	var pixels = image.getPixels(new lime_math_Rectangle(0,0,image.width,image.height),1);
	var readPosition = 0;
	var a;
	var r;
	var g;
	var b;
	if(type != null) {
		switch(type[1]) {
		case 0:
			var _g1 = 0;
			var _g2 = image.height;
			while(_g1 < _g2) {
				readPosition = (image.height - 1 - _g1++) * 4 * image.width;
				var _g3 = 0;
				var _g21 = image.width;
				while(_g3 < _g21) {
					++_g3;
					++readPosition;
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
				}
				var _g31 = 0;
				var _g22 = image.width * 3 % 4;
				while(_g31 < _g22) {
					++_g31;
					data.b[position++] = 0;
				}
			}
			break;
		case 1:
			var _g11 = 0;
			var _g4 = image.height;
			while(_g11 < _g4) {
				readPosition = (image.height - 1 - _g11++) * 4 * image.width;
				var _g32 = 0;
				var _g23 = image.width;
				while(_g32 < _g23) {
					++_g32;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
				}
			}
			break;
		case 2:
			var andMask = new haxe_io_Bytes(new ArrayBuffer(image.width * image.height));
			var maskPosition = 0;
			var _g12 = 0;
			var _g5 = image.height;
			while(_g12 < _g5) {
				readPosition = (image.height - 1 - _g12++) * 4 * image.width;
				var _g33 = 0;
				var _g24 = image.width;
				while(_g33 < _g24) {
					++_g33;
					a = pixels.b[readPosition++];
					r = pixels.b[readPosition++];
					g = pixels.b[readPosition++];
					b = pixels.b[readPosition++];
					data.b[position++] = b & 255;
					data.b[position++] = g & 255;
					data.b[position++] = r & 255;
					data.b[position++] = a & 255;
					andMask.b[maskPosition++] = 0;
				}
			}
			data.blit(position,andMask,0,image.width * image.height);
			break;
		}
	}
	return data;
};
var lime_graphics_format_BMPType = $hxClasses["lime.graphics.format.BMPType"] = { __ename__ : ["lime","graphics","format","BMPType"], __constructs__ : ["RGB","BITFIELD","ICO"] };
lime_graphics_format_BMPType.RGB = ["RGB",0];
lime_graphics_format_BMPType.RGB.toString = $estr;
lime_graphics_format_BMPType.RGB.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.BITFIELD = ["BITFIELD",1];
lime_graphics_format_BMPType.BITFIELD.toString = $estr;
lime_graphics_format_BMPType.BITFIELD.__enum__ = lime_graphics_format_BMPType;
lime_graphics_format_BMPType.ICO = ["ICO",2];
lime_graphics_format_BMPType.ICO.toString = $estr;
lime_graphics_format_BMPType.ICO.__enum__ = lime_graphics_format_BMPType;
var lime_graphics_format_JPEG = function() { };
$hxClasses["lime.graphics.format.JPEG"] = lime_graphics_format_JPEG;
lime_graphics_format_JPEG.__name__ = ["lime","graphics","format","JPEG"];
lime_graphics_format_JPEG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_JPEG.encode = function(image,quality) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,false);
	if(image.buffer.__srcCanvas != null) {
		var data = image.buffer.__srcCanvas.toDataURL("image/jpeg",quality / 100);
		var buffer = window.atob(data.split(";base64,")[1]);
		var bytes = new haxe_io_Bytes(new ArrayBuffer(buffer.length));
		var _g1 = 0;
		var _g = buffer.length;
		while(_g1 < _g) {
			var i = _g1++;
			bytes.b[i] = HxOverrides.cca(buffer,i) & 255;
		}
		return bytes;
	}
	return null;
};
var lime_graphics_format_PNG = function() { };
$hxClasses["lime.graphics.format.PNG"] = lime_graphics_format_PNG;
lime_graphics_format_PNG.__name__ = ["lime","graphics","format","PNG"];
lime_graphics_format_PNG.decodeBytes = function(bytes,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.decodeFile = function(path,decodeData) {
	if(decodeData == null) {
		decodeData = true;
	}
	return null;
};
lime_graphics_format_PNG.encode = function(image) {
	if(image.get_premultiplied() || image.get_format() != 0) {
		image = image.clone();
		image.set_premultiplied(false);
		image.set_format(0);
	}
	return null;
};
var lime_graphics_opengl_GL = function() { };
$hxClasses["lime.graphics.opengl.GL"] = lime_graphics_opengl_GL;
lime_graphics_opengl_GL.__name__ = ["lime","graphics","opengl","GL"];
lime_graphics_opengl_GL.__properties__ = {get_version:"get_version"}
lime_graphics_opengl_GL.version = null;
lime_graphics_opengl_GL.context = null;
lime_graphics_opengl_GL.activeTexture = function(texture) {
	lime_graphics_opengl_GL.context.activeTexture(texture);
};
lime_graphics_opengl_GL.attachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.attachShader(program,shader);
};
lime_graphics_opengl_GL.bindAttribLocation = function(program,index,name) {
	lime_graphics_opengl_GL.context.bindAttribLocation(program,index,name);
};
lime_graphics_opengl_GL.bindBuffer = function(target,buffer) {
	lime_graphics_opengl_GL.context.bindBuffer(target,buffer);
};
lime_graphics_opengl_GL.bindFramebuffer = function(target,framebuffer) {
	lime_graphics_opengl_GL.context.bindFramebuffer(target,framebuffer);
};
lime_graphics_opengl_GL.bindRenderbuffer = function(target,renderbuffer) {
	lime_graphics_opengl_GL.context.bindRenderbuffer(target,renderbuffer);
};
lime_graphics_opengl_GL.bindTexture = function(target,texture) {
	lime_graphics_opengl_GL.context.bindTexture(target,texture);
};
lime_graphics_opengl_GL.blendColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.blendColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.blendEquation = function(mode) {
	lime_graphics_opengl_GL.context.blendEquation(mode);
};
lime_graphics_opengl_GL.blendEquationSeparate = function(modeRGB,modeAlpha) {
	lime_graphics_opengl_GL.context.blendEquationSeparate(modeRGB,modeAlpha);
};
lime_graphics_opengl_GL.blendFunc = function(sfactor,dfactor) {
	lime_graphics_opengl_GL.context.blendFunc(sfactor,dfactor);
};
lime_graphics_opengl_GL.blendFuncSeparate = function(srcRGB,dstRGB,srcAlpha,dstAlpha) {
	lime_graphics_opengl_GL.context.blendFuncSeparate(srcRGB,dstRGB,srcAlpha,dstAlpha);
};
lime_graphics_opengl_GL.bufferData = function(target,data,usage) {
	lime_graphics_opengl_GL.context.bufferData(target,data,usage);
};
lime_graphics_opengl_GL.bufferSubData = function(target,offset,data) {
	lime_graphics_opengl_GL.context.bufferSubData(target,offset,data);
};
lime_graphics_opengl_GL.checkFramebufferStatus = function(target) {
	return lime_graphics_opengl_GL.context.checkFramebufferStatus(target);
};
lime_graphics_opengl_GL.clear = function(mask) {
	lime_graphics_opengl_GL.context.clear(mask);
};
lime_graphics_opengl_GL.clearColor = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
};
lime_graphics_opengl_GL.clearDepth = function(depth) {
	lime_graphics_opengl_GL.context.clearDepth(depth);
};
lime_graphics_opengl_GL.clearStencil = function(s) {
	lime_graphics_opengl_GL.context.clearStencil(s);
};
lime_graphics_opengl_GL.colorMask = function(red,green,blue,alpha) {
	lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
};
lime_graphics_opengl_GL.compileShader = function(shader) {
	lime_graphics_opengl_GL.context.compileShader(shader);
};
lime_graphics_opengl_GL.compressedTexImage2D = function(target,level,internalformat,width,height,border,data) {
	lime_graphics_opengl_GL.context.compressedTexImage2D(target,level,internalformat,width,height,border,data);
};
lime_graphics_opengl_GL.compressedTexSubImage2D = function(target,level,xoffset,yoffset,width,height,format,data) {
	lime_graphics_opengl_GL.context.compressedTexSubImage2D(target,level,xoffset,yoffset,width,height,format,data);
};
lime_graphics_opengl_GL.copyTexImage2D = function(target,level,internalformat,x,y,width,height,border) {
	lime_graphics_opengl_GL.context.copyTexImage2D(target,level,internalformat,x,y,width,height,border);
};
lime_graphics_opengl_GL.copyTexSubImage2D = function(target,level,xoffset,yoffset,x,y,width,height) {
	lime_graphics_opengl_GL.context.copyTexSubImage2D(target,level,xoffset,yoffset,x,y,width,height);
};
lime_graphics_opengl_GL.createBuffer = function() {
	return lime_graphics_opengl_GL.context.createBuffer();
};
lime_graphics_opengl_GL.createFramebuffer = function() {
	return lime_graphics_opengl_GL.context.createFramebuffer();
};
lime_graphics_opengl_GL.createProgram = function() {
	return lime_graphics_opengl_GL.context.createProgram();
};
lime_graphics_opengl_GL.createRenderbuffer = function() {
	return lime_graphics_opengl_GL.context.createRenderbuffer();
};
lime_graphics_opengl_GL.createShader = function(type) {
	return lime_graphics_opengl_GL.context.createShader(type);
};
lime_graphics_opengl_GL.createTexture = function() {
	return lime_graphics_opengl_GL.context.createTexture();
};
lime_graphics_opengl_GL.cullFace = function(mode) {
	lime_graphics_opengl_GL.context.cullFace(mode);
};
lime_graphics_opengl_GL.deleteBuffer = function(buffer) {
	lime_graphics_opengl_GL.context.deleteBuffer(buffer);
};
lime_graphics_opengl_GL.deleteFramebuffer = function(framebuffer) {
	lime_graphics_opengl_GL.context.deleteFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.deleteProgram = function(program) {
	lime_graphics_opengl_GL.context.deleteProgram(program);
};
lime_graphics_opengl_GL.deleteRenderbuffer = function(renderbuffer) {
	lime_graphics_opengl_GL.context.deleteRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.deleteShader = function(shader) {
	lime_graphics_opengl_GL.context.deleteShader(shader);
};
lime_graphics_opengl_GL.deleteTexture = function(texture) {
	lime_graphics_opengl_GL.context.deleteTexture(texture);
};
lime_graphics_opengl_GL.depthFunc = function(func) {
	lime_graphics_opengl_GL.context.depthFunc(func);
};
lime_graphics_opengl_GL.depthMask = function(flag) {
	lime_graphics_opengl_GL.context.depthMask(flag);
};
lime_graphics_opengl_GL.depthRange = function(zNear,zFar) {
	lime_graphics_opengl_GL.context.depthRange(zNear,zFar);
};
lime_graphics_opengl_GL.detachShader = function(program,shader) {
	lime_graphics_opengl_GL.context.detachShader(program,shader);
};
lime_graphics_opengl_GL.disable = function(cap) {
	lime_graphics_opengl_GL.context.disable(cap);
};
lime_graphics_opengl_GL.disableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.disableVertexAttribArray(index);
};
lime_graphics_opengl_GL.drawArrays = function(mode,first,count) {
	lime_graphics_opengl_GL.context.drawArrays(mode,first,count);
};
lime_graphics_opengl_GL.drawElements = function(mode,count,type,offset) {
	lime_graphics_opengl_GL.context.drawElements(mode,count,type,offset);
};
lime_graphics_opengl_GL.enable = function(cap) {
	lime_graphics_opengl_GL.context.enable(cap);
};
lime_graphics_opengl_GL.enableVertexAttribArray = function(index) {
	lime_graphics_opengl_GL.context.enableVertexAttribArray(index);
};
lime_graphics_opengl_GL.finish = function() {
	lime_graphics_opengl_GL.context.finish();
};
lime_graphics_opengl_GL.flush = function() {
	lime_graphics_opengl_GL.context.flush();
};
lime_graphics_opengl_GL.framebufferRenderbuffer = function(target,attachment,renderbuffertarget,renderbuffer) {
	lime_graphics_opengl_GL.context.framebufferRenderbuffer(target,attachment,renderbuffertarget,renderbuffer);
};
lime_graphics_opengl_GL.framebufferTexture2D = function(target,attachment,textarget,texture,level) {
	lime_graphics_opengl_GL.context.framebufferTexture2D(target,attachment,textarget,texture,level);
};
lime_graphics_opengl_GL.frontFace = function(mode) {
	lime_graphics_opengl_GL.context.frontFace(mode);
};
lime_graphics_opengl_GL.generateMipmap = function(target) {
	lime_graphics_opengl_GL.context.generateMipmap(target);
};
lime_graphics_opengl_GL.getActiveAttrib = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveAttrib(program,index);
};
lime_graphics_opengl_GL.getActiveUniform = function(program,index) {
	return lime_graphics_opengl_GL.context.getActiveUniform(program,index);
};
lime_graphics_opengl_GL.getAttachedShaders = function(program) {
	return lime_graphics_opengl_GL.context.getAttachedShaders(program);
};
lime_graphics_opengl_GL.getAttribLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getAttribLocation(program,name);
};
lime_graphics_opengl_GL.getBufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getBufferParameter(target,pname);
};
lime_graphics_opengl_GL.getContextAttributes = function() {
	return lime_graphics_opengl_GL.context.getContextAttributes();
};
lime_graphics_opengl_GL.getError = function() {
	return lime_graphics_opengl_GL.context.getError();
};
lime_graphics_opengl_GL.getExtension = function(name) {
	return lime_graphics_opengl_GL.context.getExtension(name);
};
lime_graphics_opengl_GL.getFramebufferAttachmentParameter = function(target,attachment,pname) {
	return lime_graphics_opengl_GL.context.getFramebufferAttachmentParameter(target,attachment,pname);
};
lime_graphics_opengl_GL.getParameter = function(pname) {
	return lime_graphics_opengl_GL.context.getParameter(pname);
};
lime_graphics_opengl_GL.getProgramInfoLog = function(program) {
	return lime_graphics_opengl_GL.context.getProgramInfoLog(program);
};
lime_graphics_opengl_GL.getProgramParameter = function(program,pname) {
	return lime_graphics_opengl_GL.context.getProgramParameter(program,pname);
};
lime_graphics_opengl_GL.getRenderbufferParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getRenderbufferParameter(target,pname);
};
lime_graphics_opengl_GL.getShaderInfoLog = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderInfoLog(shader);
};
lime_graphics_opengl_GL.getShaderParameter = function(shader,pname) {
	return lime_graphics_opengl_GL.context.getShaderParameter(shader,pname);
};
lime_graphics_opengl_GL.getShaderPrecisionFormat = function(shadertype,precisiontype) {
	return lime_graphics_opengl_GL.context.getShaderPrecisionFormat(shadertype,precisiontype);
};
lime_graphics_opengl_GL.getShaderSource = function(shader) {
	return lime_graphics_opengl_GL.context.getShaderSource(shader);
};
lime_graphics_opengl_GL.getSupportedExtensions = function() {
	return lime_graphics_opengl_GL.context.getSupportedExtensions();
};
lime_graphics_opengl_GL.getTexParameter = function(target,pname) {
	return lime_graphics_opengl_GL.context.getTexParameter(target,pname);
};
lime_graphics_opengl_GL.getUniform = function(program,location) {
	return lime_graphics_opengl_GL.context.getUniform(program,location);
};
lime_graphics_opengl_GL.getUniformLocation = function(program,name) {
	return lime_graphics_opengl_GL.context.getUniformLocation(program,name);
};
lime_graphics_opengl_GL.getVertexAttrib = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttrib(index,pname);
};
lime_graphics_opengl_GL.getVertexAttribOffset = function(index,pname) {
	return lime_graphics_opengl_GL.context.getVertexAttribOffset(index,pname);
};
lime_graphics_opengl_GL.hint = function(target,mode) {
	lime_graphics_opengl_GL.context.hint(target,mode);
};
lime_graphics_opengl_GL.isBuffer = function(buffer) {
	return lime_graphics_opengl_GL.context.isBuffer(buffer);
};
lime_graphics_opengl_GL.isContextLost = function() {
	return lime_graphics_opengl_GL.context.isContextLost();
};
lime_graphics_opengl_GL.isEnabled = function(cap) {
	return lime_graphics_opengl_GL.context.isEnabled(cap);
};
lime_graphics_opengl_GL.isFramebuffer = function(framebuffer) {
	return lime_graphics_opengl_GL.context.isFramebuffer(framebuffer);
};
lime_graphics_opengl_GL.isProgram = function(program) {
	return lime_graphics_opengl_GL.context.isProgram(program);
};
lime_graphics_opengl_GL.isRenderbuffer = function(renderbuffer) {
	return lime_graphics_opengl_GL.context.isRenderbuffer(renderbuffer);
};
lime_graphics_opengl_GL.isShader = function(shader) {
	return lime_graphics_opengl_GL.context.isShader(shader);
};
lime_graphics_opengl_GL.isTexture = function(texture) {
	return lime_graphics_opengl_GL.context.isTexture(texture);
};
lime_graphics_opengl_GL.lineWidth = function(width) {
	lime_graphics_opengl_GL.context.lineWidth(width);
};
lime_graphics_opengl_GL.linkProgram = function(program) {
	lime_graphics_opengl_GL.context.linkProgram(program);
};
lime_graphics_opengl_GL.pixelStorei = function(pname,param) {
	lime_graphics_opengl_GL.context.pixelStorei(pname,param);
};
lime_graphics_opengl_GL.polygonOffset = function(factor,units) {
	lime_graphics_opengl_GL.context.polygonOffset(factor,units);
};
lime_graphics_opengl_GL.readPixels = function(x,y,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.readPixels(x,y,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.renderbufferStorage = function(target,internalformat,width,height) {
	lime_graphics_opengl_GL.context.renderbufferStorage(target,internalformat,width,height);
};
lime_graphics_opengl_GL.sampleCoverage = function(value,invert) {
	lime_graphics_opengl_GL.context.sampleCoverage(value,invert);
};
lime_graphics_opengl_GL.scissor = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.scissor(x,y,width,height);
};
lime_graphics_opengl_GL.shaderSource = function(shader,source) {
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
};
lime_graphics_opengl_GL.stencilFunc = function(func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFunc(func,ref,mask);
};
lime_graphics_opengl_GL.stencilFuncSeparate = function(face,func,ref,mask) {
	lime_graphics_opengl_GL.context.stencilFuncSeparate(face,func,ref,mask);
};
lime_graphics_opengl_GL.stencilMask = function(mask) {
	lime_graphics_opengl_GL.context.stencilMask(mask);
};
lime_graphics_opengl_GL.stencilMaskSeparate = function(face,mask) {
	lime_graphics_opengl_GL.context.stencilMaskSeparate(face,mask);
};
lime_graphics_opengl_GL.stencilOp = function(fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOp(fail,zfail,zpass);
};
lime_graphics_opengl_GL.stencilOpSeparate = function(face,fail,zfail,zpass) {
	lime_graphics_opengl_GL.context.stencilOpSeparate(face,fail,zfail,zpass);
};
lime_graphics_opengl_GL.texImage2D = function(target,level,internalformat,width,height,border,format,type,pixels) {
	lime_graphics_opengl_GL.context.texImage2D(target,level,internalformat,width,height,border,format,type,pixels);
};
lime_graphics_opengl_GL.texParameterf = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameterf(target,pname,param);
};
lime_graphics_opengl_GL.texParameteri = function(target,pname,param) {
	lime_graphics_opengl_GL.context.texParameteri(target,pname,param);
};
lime_graphics_opengl_GL.texSubImage2D = function(target,level,xoffset,yoffset,width,height,format,type,pixels) {
	lime_graphics_opengl_GL.context.texSubImage2D(target,level,xoffset,yoffset,width,height,format,type,pixels);
};
lime_graphics_opengl_GL.uniform1f = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1f(location,x);
};
lime_graphics_opengl_GL.uniform1fv = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1fv(location,x);
};
lime_graphics_opengl_GL.uniform1i = function(location,x) {
	lime_graphics_opengl_GL.context.uniform1i(location,x);
};
lime_graphics_opengl_GL.uniform1iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform1iv(location,v);
};
lime_graphics_opengl_GL.uniform2f = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2f(location,x,y);
};
lime_graphics_opengl_GL.uniform2fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2fv(location,v);
};
lime_graphics_opengl_GL.uniform2i = function(location,x,y) {
	lime_graphics_opengl_GL.context.uniform2i(location,x,y);
};
lime_graphics_opengl_GL.uniform2iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform2iv(location,v);
};
lime_graphics_opengl_GL.uniform3f = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3f(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3fv(location,v);
};
lime_graphics_opengl_GL.uniform3i = function(location,x,y,z) {
	lime_graphics_opengl_GL.context.uniform3i(location,x,y,z);
};
lime_graphics_opengl_GL.uniform3iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform3iv(location,v);
};
lime_graphics_opengl_GL.uniform4f = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4f(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4fv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4fv(location,v);
};
lime_graphics_opengl_GL.uniform4i = function(location,x,y,z,w) {
	lime_graphics_opengl_GL.context.uniform4i(location,x,y,z,w);
};
lime_graphics_opengl_GL.uniform4iv = function(location,v) {
	lime_graphics_opengl_GL.context.uniform4iv(location,v);
};
lime_graphics_opengl_GL.uniformMatrix2fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix2fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix3fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix3fv(location,transpose,v);
};
lime_graphics_opengl_GL.uniformMatrix4fv = function(location,transpose,v) {
	lime_graphics_opengl_GL.context.uniformMatrix4fv(location,transpose,v);
};
lime_graphics_opengl_GL.useProgram = function(program) {
	lime_graphics_opengl_GL.context.useProgram(program);
};
lime_graphics_opengl_GL.validateProgram = function(program) {
	lime_graphics_opengl_GL.context.validateProgram(program);
};
lime_graphics_opengl_GL.vertexAttrib1f = function(indx,x) {
	lime_graphics_opengl_GL.context.vertexAttrib1f(indx,x);
};
lime_graphics_opengl_GL.vertexAttrib1fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib1fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib2f = function(indx,x,y) {
	lime_graphics_opengl_GL.context.vertexAttrib2f(indx,x,y);
};
lime_graphics_opengl_GL.vertexAttrib2fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib2fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib3f = function(indx,x,y,z) {
	lime_graphics_opengl_GL.context.vertexAttrib3f(indx,x,y,z);
};
lime_graphics_opengl_GL.vertexAttrib3fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib3fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttrib4f = function(indx,x,y,z,w) {
	lime_graphics_opengl_GL.context.vertexAttrib4f(indx,x,y,z,w);
};
lime_graphics_opengl_GL.vertexAttrib4fv = function(indx,values) {
	lime_graphics_opengl_GL.context.vertexAttrib4fv(indx,values);
};
lime_graphics_opengl_GL.vertexAttribPointer = function(indx,size,type,normalized,stride,offset) {
	lime_graphics_opengl_GL.context.vertexAttribPointer(indx,size,type,normalized,stride,offset);
};
lime_graphics_opengl_GL.viewport = function(x,y,width,height) {
	lime_graphics_opengl_GL.context.viewport(x,y,width,height);
};
lime_graphics_opengl_GL.get_version = function() {
	return 2;
};
var lime_graphics_utils_ImageCanvasUtil = function() { };
$hxClasses["lime.graphics.utils.ImageCanvasUtil"] = lime_graphics_utils_ImageCanvasUtil;
lime_graphics_utils_ImageCanvasUtil.__name__ = ["lime","graphics","utils","ImageCanvasUtil"];
lime_graphics_utils_ImageCanvasUtil.colorTransform = function(image,rect,colorMatrix) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.colorTransform(image,rect,colorMatrix);
};
lime_graphics_utils_ImageCanvasUtil.convertToCanvas = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImage != null) {
		if(buffer.__srcCanvas == null) {
			lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.__srcImage.width,buffer.__srcImage.height);
			buffer.__srcContext.drawImage(buffer.__srcImage,0,0);
		}
		buffer.__srcImage = null;
	} else if(buffer.data != null && buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,buffer.width,buffer.height);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	} else if(buffer.data == null && buffer.__srcImageData != null) {
		buffer.data = buffer.__srcImageData.data;
	}
};
lime_graphics_utils_ImageCanvasUtil.convertToData = function(image) {
	if(image.buffer.data == null) {
		lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
		lime_graphics_utils_ImageCanvasUtil.sync(image,false);
		lime_graphics_utils_ImageCanvasUtil.createImageData(image);
		image.buffer.__srcCanvas = null;
		image.buffer.__srcContext = null;
	}
};
lime_graphics_utils_ImageCanvasUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.copyChannel(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel);
};
lime_graphics_utils_ImageCanvasUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	if(destPoint == null || destPoint.x >= image.width || destPoint.y >= image.height || sourceRect == null || sourceRect.width < 1 || sourceRect.height < 1) {
		return;
	}
	if(alphaImage != null && alphaImage.get_transparent()) {
		if(alphaPoint == null) {
			alphaPoint = new lime_math_Vector2();
		}
		var tempData = image.clone();
		tempData.copyChannel(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,sourceRect.width,sourceRect.height),new lime_math_Vector2(sourceRect.x,sourceRect.y),lime_graphics_ImageChannel.ALPHA,lime_graphics_ImageChannel.ALPHA);
		sourceImage = tempData;
	}
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(!mergeAlpha) {
		if(image.get_transparent() && sourceImage.get_transparent()) {
			image.buffer.__srcContext.clearRect(destPoint.x + image.offsetX,destPoint.y + image.offsetY,sourceRect.width + image.offsetX,sourceRect.height + image.offsetY);
		}
	}
	lime_graphics_utils_ImageCanvasUtil.sync(sourceImage,false);
	if(sourceImage.buffer.get_src() != null) {
		image.buffer.__srcContext.drawImage(sourceImage.buffer.get_src(),sourceRect.x + sourceImage.offsetX | 0,sourceRect.y + sourceImage.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0,destPoint.x + image.offsetX | 0,destPoint.y + image.offsetY | 0,sourceRect.width | 0,sourceRect.height | 0);
	}
};
lime_graphics_utils_ImageCanvasUtil.createCanvas = function(image,width,height) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		buffer.__srcCanvas = window.document.createElement("canvas");
		buffer.__srcCanvas.width = width;
		buffer.__srcCanvas.height = height;
		if(!image.get_transparent()) {
			if(!image.get_transparent()) {
				buffer.__srcCanvas.setAttribute("moz-opaque","true");
			}
			buffer.__srcContext = buffer.__srcCanvas.getContext ("2d", { alpha: false });
		} else {
			buffer.__srcContext = buffer.__srcCanvas.getContext("2d");
		}
		buffer.__srcContext.mozImageSmoothingEnabled = false;
		buffer.__srcContext.msImageSmoothingEnabled = false;
		buffer.__srcContext.imageSmoothingEnabled = false;
	}
};
lime_graphics_utils_ImageCanvasUtil.createImageData = function(image) {
	var buffer = image.buffer;
	if(buffer.__srcImageData == null) {
		if(buffer.data == null) {
			buffer.__srcImageData = buffer.__srcContext.getImageData(0,0,buffer.width,buffer.height);
		} else {
			buffer.__srcImageData = buffer.__srcContext.createImageData(buffer.width,buffer.height);
			buffer.__srcImageData.data.set(buffer.data);
		}
		var elements = buffer.__srcImageData.data.buffer;
		buffer.data = elements != null?new Uint8Array(elements):null;
	}
};
lime_graphics_utils_ImageCanvasUtil.fillRect = function(image,rect,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	if(rect.x == 0 && rect.y == 0 && rect.width == image.width && rect.height == image.height) {
		if(image.get_transparent() && (color & 255) == 0) {
			image.buffer.__srcCanvas.width = image.buffer.width;
			return;
		}
	}
	var r;
	var g;
	var b;
	var a;
	if(format == 1) {
		r = color >> 16 & 255;
		g = color >> 8 & 255;
		b = color & 255;
		if(image.get_transparent()) {
			a = color >> 24 & 255;
		} else {
			a = 255;
		}
	} else {
		r = color >> 24 & 255;
		g = color >> 16 & 255;
		b = color >> 8 & 255;
		if(image.get_transparent()) {
			a = color & 255;
		} else {
			a = 255;
		}
	}
	image.buffer.__srcContext.fillStyle = "rgba(" + r + ", " + g + ", " + b + ", " + a / 255 + ")";
	image.buffer.__srcContext.fillRect(rect.x + image.offsetX,rect.y + image.offsetY,rect.width + image.offsetX,rect.height + image.offsetY);
};
lime_graphics_utils_ImageCanvasUtil.floodFill = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.floodFill(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixel32 = function(image,x,y,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixel32(image,x,y,format);
};
lime_graphics_utils_ImageCanvasUtil.getPixels = function(image,rect,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	return lime_graphics_utils_ImageDataUtil.getPixels(image,rect,format);
};
lime_graphics_utils_ImageCanvasUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.createImageData(sourceImage);
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.merge(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier);
};
lime_graphics_utils_ImageCanvasUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.__srcCanvas == null) {
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(buffer.get_src(),0,0,newWidth,newHeight);
	} else {
		lime_graphics_utils_ImageCanvasUtil.sync(image,true);
		var sourceCanvas = buffer.__srcCanvas;
		buffer.__srcCanvas = null;
		lime_graphics_utils_ImageCanvasUtil.createCanvas(image,newWidth,newHeight);
		buffer.__srcContext.drawImage(sourceCanvas,0,0,newWidth,newHeight);
	}
};
lime_graphics_utils_ImageCanvasUtil.scroll = function(image,x,y) {
	if(x % image.width == 0 && y % image.height == 0) {
		return;
	}
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.sync(image,true);
	image.buffer.__srcContext.clearRect(x,y,image.width,image.height);
	image.buffer.__srcContext.drawImage(image.buffer.__srcCanvas,x,y);
};
lime_graphics_utils_ImageCanvasUtil.setPixel = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixel32 = function(image,x,y,color,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixel32(image,x,y,color,format);
};
lime_graphics_utils_ImageCanvasUtil.setPixels = function(image,rect,bytes,format) {
	lime_graphics_utils_ImageCanvasUtil.convertToCanvas(image);
	lime_graphics_utils_ImageCanvasUtil.createImageData(image);
	lime_graphics_utils_ImageDataUtil.setPixels(image,rect,bytes,format);
};
lime_graphics_utils_ImageCanvasUtil.sync = function(image,clear) {
	if(image.dirty && image.buffer.__srcImageData != null && image.type != lime_graphics_ImageType.DATA) {
		image.buffer.__srcContext.putImageData(image.buffer.__srcImageData,0,0);
		image.buffer.data = null;
		image.dirty = false;
	}
	if(clear) {
		image.buffer.__srcImageData = null;
		image.buffer.data = null;
	}
};
var lime_graphics_utils_ImageDataUtil = function() { };
$hxClasses["lime.graphics.utils.ImageDataUtil"] = lime_graphics_utils_ImageDataUtil;
lime_graphics_utils_ImageDataUtil.__name__ = ["lime","graphics","utils","ImageDataUtil"];
lime_graphics_utils_ImageDataUtil.colorTransform = function(image,rect,colorMatrix) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var alphaTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable(colorMatrix);
	var redTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable(colorMatrix);
	var greenTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable(colorMatrix);
	var blueTable = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable(colorMatrix);
	var row;
	var offset;
	var pixel;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			offset = row + _g3++ * 4;
			switch(format) {
			case 0:
				pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
				break;
			case 1:
				pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
				break;
			case 2:
				pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			pixel = (redTable[pixel >> 24 & 255] & 255) << 24 | (greenTable[pixel >> 16 & 255] & 255) << 16 | (blueTable[pixel >> 8 & 255] & 255) << 8 | alphaTable[pixel & 255] & 255;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyChannel = function(image,sourceImage,sourceRect,destPoint,sourceChannel,destChannel) {
	var destIdx;
	switch(destChannel[1]) {
	case 0:
		destIdx = 0;
		break;
	case 1:
		destIdx = 1;
		break;
	case 2:
		destIdx = 2;
		break;
	case 3:
		destIdx = 3;
		break;
	}
	var srcIdx;
	switch(sourceChannel[1]) {
	case 0:
		srcIdx = 0;
		break;
	case 1:
		srcIdx = 1;
		break;
	case 2:
		srcIdx = 2;
		break;
	case 3:
		srcIdx = 3;
		break;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return;
	}
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var destPixel;
	var value = 0;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(srcIdx) {
			case 0:
				value = srcPixel >> 24 & 255;
				break;
			case 1:
				value = srcPixel >> 16 & 255;
				break;
			case 2:
				value = srcPixel >> 8 & 255;
				break;
			case 3:
				value = srcPixel & 255;
				break;
			}
			switch(destIdx) {
			case 0:
				destPixel = (value & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 1:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
				break;
			case 2:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (value & 255) << 8 | destPixel & 255 & 255;
				break;
			case 3:
				destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | value & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.copyPixels = function(image,sourceImage,sourceRect,destPoint,alphaImage,alphaPoint,mergeAlpha) {
	if(mergeAlpha == null) {
		mergeAlpha = false;
	}
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(sourceData == null || destData == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	if(!mergeAlpha || !sourceImage.get_transparent()) {
		var _g1 = 0;
		var _g = destView.height;
		while(_g1 < _g) {
			var y = _g1++;
			sourcePosition = sourceView.offset + sourceView.stride * y;
			destPosition = destView.offset + destView.stride * y;
			var _g3 = 0;
			var _g2 = destView.width;
			while(_g3 < _g2) {
				++_g3;
				switch(sourceFormat) {
				case 0:
					sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				case 1:
					sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
					break;
				case 2:
					sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
					break;
				}
				if(sourcePremultiplied) {
					if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
						sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				if(destPremultiplied) {
					if((sourcePixel & 255) == 0) {
						if(sourcePixel != 0) {
							sourcePixel = 0;
						}
					} else if((sourcePixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[sourcePixel & 255];
						sourcePixel = ((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | sourcePixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = sourcePixel >> 24 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 8 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				case 1:
					destData[destPosition] = sourcePixel & 255;
					destData[destPosition + 1] = sourcePixel >> 24 & 255;
					destData[destPosition + 2] = sourcePixel >> 16 & 255;
					destData[destPosition + 3] = sourcePixel >> 8 & 255;
					break;
				case 2:
					destData[destPosition] = sourcePixel >> 8 & 255;
					destData[destPosition + 1] = sourcePixel >> 16 & 255;
					destData[destPosition + 2] = sourcePixel >> 24 & 255;
					destData[destPosition + 3] = sourcePixel & 255;
					break;
				}
				sourcePosition += 4;
				destPosition += 4;
			}
		}
	} else {
		var sourceAlpha;
		var destAlpha;
		var oneMinusSourceAlpha;
		var blendAlpha;
		var destPixel;
		if(alphaImage == null) {
			var _g11 = 0;
			var _g4 = destView.height;
			while(_g11 < _g4) {
				var y1 = _g11++;
				sourcePosition = sourceView.offset + sourceView.stride * y1;
				destPosition = destView.offset + destView.stride * y1;
				var _g31 = 0;
				var _g21 = destView.width;
				while(_g31 < _g21) {
					++_g31;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					sourceAlpha = (sourcePixel & 255) / 255.0;
					destAlpha = (destPixel & 255) / 255.0;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		} else {
			if(alphaPoint == null) {
				alphaPoint = new lime_math_Vector2();
			}
			var alphaData = alphaImage.buffer.data;
			var alphaFormat = alphaImage.buffer.format;
			var alphaPremultiplied = alphaImage.buffer.premultiplied;
			var alphaView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(alphaImage,new lime_math_Rectangle(alphaPoint.x,alphaPoint.y,destView.width,destView.height));
			var alphaPosition;
			var alphaPixel;
			var _g12 = 0;
			var _g5 = alphaView.height;
			while(_g12 < _g5) {
				var y2 = _g12++;
				sourcePosition = sourceView.offset + sourceView.stride * y2;
				destPosition = destView.offset + destView.stride * y2;
				alphaPosition = alphaView.offset + alphaView.stride * y2;
				var _g32 = 0;
				var _g22 = alphaView.width;
				while(_g32 < _g22) {
					++_g32;
					switch(sourceFormat) {
					case 0:
						sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					case 1:
						sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
						break;
					case 2:
						sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
						break;
					}
					if(sourcePremultiplied) {
						if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
							sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					case 1:
						destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
						break;
					case 2:
						destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
						break;
					}
					if(destPremultiplied) {
						if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
							destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(alphaFormat) {
					case 0:
						alphaPixel = (alphaData[alphaPosition] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition + 2] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					case 1:
						alphaPixel = (alphaData[alphaPosition + 1] & 255) << 24 | (alphaData[alphaPosition + 2] & 255) << 16 | (alphaData[alphaPosition + 3] & 255) << 8 | alphaData[alphaPosition] & 255;
						break;
					case 2:
						alphaPixel = (alphaData[alphaPosition + 2] & 255) << 24 | (alphaData[alphaPosition + 1] & 255) << 16 | (alphaData[alphaPosition] & 255) << 8 | alphaData[alphaPosition + 3] & 255;
						break;
					}
					if(alphaPremultiplied) {
						if((alphaPixel & 255) != 0 && (alphaPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (alphaPixel & 255);
							alphaPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((alphaPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | alphaPixel & 255 & 255;
						}
					}
					sourceAlpha = (alphaPixel & 255) / 255;
					destAlpha = (destPixel & 255) / 255;
					oneMinusSourceAlpha = 1 - sourceAlpha;
					blendAlpha = sourceAlpha + destAlpha * oneMinusSourceAlpha;
					if(blendAlpha == 0) {
						destPixel = 0;
					} else {
						destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 24 & 255) * sourceAlpha + (destPixel >> 24 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 16 & 255) * sourceAlpha + (destPixel >> 16 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(((sourcePixel >> 8 & 255) * sourceAlpha + (destPixel >> 8 & 255) * destAlpha * oneMinusSourceAlpha) / blendAlpha)] & 255) << 8 | destPixel & 255 & 255;
						destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round(blendAlpha * 255.0)] & 255;
					}
					if(destPremultiplied) {
						if((destPixel & 255) == 0) {
							if(destPixel != 0) {
								destPixel = 0;
							}
						} else if((destPixel & 255) != 255) {
							lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
							destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
						}
					}
					switch(destFormat) {
					case 0:
						destData[destPosition] = destPixel >> 24 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 8 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					case 1:
						destData[destPosition] = destPixel & 255;
						destData[destPosition + 1] = destPixel >> 24 & 255;
						destData[destPosition + 2] = destPixel >> 16 & 255;
						destData[destPosition + 3] = destPixel >> 8 & 255;
						break;
					case 2:
						destData[destPosition] = destPixel >> 8 & 255;
						destData[destPosition + 1] = destPixel >> 16 & 255;
						destData[destPosition + 2] = destPixel >> 24 & 255;
						destData[destPosition + 3] = destPixel & 255;
						break;
					}
					sourcePosition += 4;
					destPosition += 4;
				}
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.fillRect = function(image,rect,color,format) {
	var fillColor;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		fillColor = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		fillColor = rgba1;
		break;
	default:
		fillColor = color;
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var offset = row + _g3++ * 4;
			if(premultiplied) {
				if((fillColor & 255) == 0) {
					if(fillColor != 0) {
						fillColor = 0;
					}
				} else if((fillColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
					fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
				}
			}
			switch(format1) {
			case 0:
				data[offset] = fillColor >> 24 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 8 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			case 1:
				data[offset] = fillColor & 255;
				data[offset + 1] = fillColor >> 24 & 255;
				data[offset + 2] = fillColor >> 16 & 255;
				data[offset + 3] = fillColor >> 8 & 255;
				break;
			case 2:
				data[offset] = fillColor >> 8 & 255;
				data[offset + 1] = fillColor >> 16 & 255;
				data[offset + 2] = fillColor >> 24 & 255;
				data[offset + 3] = fillColor & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.floodFill = function(image,x,y,color,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	if(format == 1) {
		color = (color & 16777215) << 8 | color >> 24 & 255;
	}
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var fillColor = color;
	var hitColor;
	var offset = (y + image.offsetY) * (image.buffer.width * 4) + (x + image.offsetX) * 4;
	switch(format1) {
	case 0:
		hitColor = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		hitColor = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		hitColor = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((hitColor & 255) != 0 && (hitColor & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (hitColor & 255);
			hitColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((hitColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | hitColor & 255 & 255;
		}
	}
	if(!image.get_transparent()) {
		fillColor = (fillColor >> 24 & 255 & 255) << 24 | (fillColor >> 16 & 255 & 255) << 16 | (fillColor >> 8 & 255 & 255) << 8 | 255;
		hitColor = (hitColor >> 24 & 255 & 255) << 24 | (hitColor >> 16 & 255 & 255) << 16 | (hitColor >> 8 & 255 & 255) << 8 | 255;
	}
	if(fillColor == hitColor) {
		return;
	}
	var dx = [0,-1,1,0];
	var dy = [-1,0,0,1];
	var minX = -image.offsetX;
	var minY = -image.offsetY;
	var maxX = minX + image.width;
	var maxY = minY + image.height;
	var queue = [];
	queue.push(x);
	queue.push(y);
	var curPointX;
	var curPointY;
	var nextPointX;
	var nextPointY;
	var nextPointOffset;
	var readColor;
	while(queue.length > 0) {
		curPointY = queue.pop();
		curPointX = queue.pop();
		var _g = 0;
		while(_g < 4) {
			var i = _g++;
			nextPointX = curPointX + dx[i];
			nextPointY = curPointY + dy[i];
			if(nextPointX < minX || nextPointY < minY || nextPointX >= maxX || nextPointY >= maxY) {
				continue;
			}
			nextPointOffset = (nextPointY * image.width + nextPointX) * 4;
			switch(format1) {
			case 0:
				readColor = (data[nextPointOffset] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset + 2] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			case 1:
				readColor = (data[nextPointOffset + 1] & 255) << 24 | (data[nextPointOffset + 2] & 255) << 16 | (data[nextPointOffset + 3] & 255) << 8 | data[nextPointOffset] & 255;
				break;
			case 2:
				readColor = (data[nextPointOffset + 2] & 255) << 24 | (data[nextPointOffset + 1] & 255) << 16 | (data[nextPointOffset] & 255) << 8 | data[nextPointOffset + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((readColor & 255) != 0 && (readColor & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (readColor & 255);
					readColor = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((readColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | readColor & 255 & 255;
				}
			}
			if(readColor == hitColor) {
				if(premultiplied) {
					if((fillColor & 255) == 0) {
						if(fillColor != 0) {
							fillColor = 0;
						}
					} else if((fillColor & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[fillColor & 255];
						fillColor = ((fillColor >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((fillColor >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((fillColor >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | fillColor & 255 & 255;
					}
				}
				switch(format1) {
				case 0:
					data[nextPointOffset] = fillColor >> 24 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 8 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				case 1:
					data[nextPointOffset] = fillColor & 255;
					data[nextPointOffset + 1] = fillColor >> 24 & 255;
					data[nextPointOffset + 2] = fillColor >> 16 & 255;
					data[nextPointOffset + 3] = fillColor >> 8 & 255;
					break;
				case 2:
					data[nextPointOffset] = fillColor >> 8 & 255;
					data[nextPointOffset + 1] = fillColor >> 16 & 255;
					data[nextPointOffset + 2] = fillColor >> 24 & 255;
					data[nextPointOffset + 3] = fillColor & 255;
					break;
				}
				queue.push(nextPointX);
				queue.push(nextPointY);
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.getColorBoundsRect = function(image,mask,color,findColor,format) {
	if(findColor == null) {
		findColor = true;
	}
	var left = image.width + 1;
	var right = 0;
	var top = image.height + 1;
	var bottom = 0;
	var _color;
	var _mask;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var rgba1 = 0;
		rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
		_mask = rgba1;
		break;
	case 2:
		var bgra = color;
		var rgba2 = 0;
		rgba2 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba2;
		var bgra1 = mask;
		var rgba3 = 0;
		rgba3 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba3;
		break;
	default:
		_color = color;
		_mask = mask;
	}
	if(!image.get_transparent()) {
		_color = (_color >> 24 & 255 & 255) << 24 | (_color >> 16 & 255 & 255) << 16 | (_color >> 8 & 255 & 255) << 8 | 255;
		_mask = (_mask >> 24 & 255 & 255) << 24 | (_mask >> 16 & 255 & 255) << 16 | (_mask >> 8 & 255 & 255) << 8 | 255;
	}
	var pixel;
	var hit;
	var _g1 = 0;
	var _g = image.width;
	while(_g1 < _g) {
		var x = _g1++;
		hit = false;
		var _g3 = 0;
		var _g2 = image.height;
		while(_g3 < _g2) {
			pixel = image.getPixel32(x,_g3++,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(x < left) {
					left = x;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var ix;
	var _g11 = 0;
	var _g4 = image.width;
	while(_g11 < _g4) {
		ix = image.width - 1 - _g11++;
		hit = false;
		var _g31 = 0;
		var _g21 = image.height;
		while(_g31 < _g21) {
			pixel = image.getPixel32(ix,_g31++,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(ix > right) {
					right = ix;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var _g12 = 0;
	var _g5 = image.height;
	while(_g12 < _g5) {
		var y = _g12++;
		hit = false;
		var _g32 = 0;
		var _g22 = image.width;
		while(_g32 < _g22) {
			pixel = image.getPixel32(_g32++,y,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(y < top) {
					top = y;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var iy;
	var _g13 = 0;
	var _g6 = image.height;
	while(_g13 < _g6) {
		iy = image.height - 1 - _g13++;
		hit = false;
		var _g33 = 0;
		var _g23 = image.width;
		while(_g33 < _g23) {
			pixel = image.getPixel32(_g33++,iy,0);
			if(findColor) {
				hit = (pixel & _mask) == _color;
			} else {
				hit = (pixel & _mask) != _color;
			}
			if(hit) {
				if(iy > bottom) {
					bottom = iy;
				}
				break;
			}
		}
		if(hit) {
			break;
		}
	}
	var w = right - left;
	var h = bottom - top;
	if(w > 0) {
		++w;
	}
	if(h > 0) {
		++h;
	}
	if(w < 0) {
		w = 0;
	}
	if(h < 0) {
		h = 0;
	}
	if(left == right) {
		w = 1;
	}
	if(top == bottom) {
		h = 1;
	}
	if(left > image.width) {
		left = 0;
	}
	if(top > image.height) {
		top = 0;
	}
	return new lime_math_Rectangle(left,top,w,h);
};
lime_graphics_utils_ImageDataUtil.getPixel = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 0;
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixel32 = function(image,x,y,format) {
	var pixel;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format) {
	case 1:
		var argb = 0;
		argb = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
		return argb;
	case 2:
		var bgra = 0;
		bgra = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
		return bgra;
	default:
		return pixel;
	}
};
lime_graphics_utils_ImageDataUtil.getPixels = function(image,rect,format) {
	if(image.buffer.data == null) {
		return null;
	}
	var bytes = new haxe_io_Bytes(new ArrayBuffer((rect.width * rect.height | 0) * 4));
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var position;
	var argb;
	var bgra;
	var pixel;
	var destPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		position = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				pixel = (data[position] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position + 2] & 255) << 8 | data[position + 3] & 255;
				break;
			case 1:
				pixel = (data[position + 1] & 255) << 24 | (data[position + 2] & 255) << 16 | (data[position + 3] & 255) << 8 | data[position] & 255;
				break;
			case 2:
				pixel = (data[position + 2] & 255) << 24 | (data[position + 1] & 255) << 16 | (data[position] & 255) << 8 | data[position + 3] & 255;
				break;
			}
			if(premultiplied) {
				if((pixel & 255) != 0 && (pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
					pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(format) {
			case 1:
				var argb1 = 0;
				argb1 = (pixel & 255 & 255) << 24 | (pixel >> 24 & 255 & 255) << 16 | (pixel >> 16 & 255 & 255) << 8 | pixel >> 8 & 255 & 255;
				argb = argb1;
				pixel = argb;
				break;
			case 2:
				var bgra1 = 0;
				bgra1 = (pixel >> 8 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 24 & 255 & 255) << 8 | pixel & 255 & 255;
				bgra = bgra1;
				pixel = bgra;
				break;
			default:
			}
			bytes.b[destPosition++] = pixel >> 24 & 255 & 255;
			bytes.b[destPosition++] = pixel >> 16 & 255 & 255;
			bytes.b[destPosition++] = pixel >> 8 & 255 & 255;
			bytes.b[destPosition++] = pixel & 255 & 255;
			position += 4;
		}
	}
	return bytes;
};
lime_graphics_utils_ImageDataUtil.merge = function(image,sourceImage,sourceRect,destPoint,redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier) {
	if(image.buffer.data == null || sourceImage.buffer.data == null) {
		return;
	}
	var sourceView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,sourceView.width,sourceView.height));
	var sourceData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	var sourceFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var sourcePremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var sourcePosition;
	var destPosition;
	var sourcePixel;
	var destPixel;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		sourcePosition = sourceView.offset + sourceView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(sourceFormat) {
			case 0:
				sourcePixel = (sourceData[sourcePosition] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition + 2] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			case 1:
				sourcePixel = (sourceData[sourcePosition + 1] & 255) << 24 | (sourceData[sourcePosition + 2] & 255) << 16 | (sourceData[sourcePosition + 3] & 255) << 8 | sourceData[sourcePosition] & 255;
				break;
			case 2:
				sourcePixel = (sourceData[sourcePosition + 2] & 255) << 24 | (sourceData[sourcePosition + 1] & 255) << 16 | (sourceData[sourcePosition] & 255) << 8 | sourceData[sourcePosition + 3] & 255;
				break;
			}
			if(sourcePremultiplied) {
				if((sourcePixel & 255) != 0 && (sourcePixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (sourcePixel & 255);
					sourcePixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((sourcePixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | sourcePixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destPixel = (destData[destPosition] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition + 2] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			case 1:
				destPixel = (destData[destPosition + 1] & 255) << 24 | (destData[destPosition + 2] & 255) << 16 | (destData[destPosition + 3] & 255) << 8 | destData[destPosition] & 255;
				break;
			case 2:
				destPixel = (destData[destPosition + 2] & 255) << 24 | (destData[destPosition + 1] & 255) << 16 | (destData[destPosition] & 255) << 8 | destData[destPosition + 3] & 255;
				break;
			}
			if(destPremultiplied) {
				if((destPixel & 255) != 0 && (destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (destPixel & 255);
					destPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | destPixel & 255 & 255;
				}
			}
			destPixel = ((((sourcePixel >> 24 & 255) * redMultiplier + (destPixel >> 24 & 255) * (256 - redMultiplier)) / 256 | 0) & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | ((((sourcePixel >> 16 & 255) * greenMultiplier + (destPixel >> 16 & 255) * (256 - greenMultiplier)) / 256 | 0) & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | ((((sourcePixel >> 8 & 255) * blueMultiplier + (destPixel >> 8 & 255) * (256 - blueMultiplier)) / 256 | 0) & 255) << 8 | destPixel & 255 & 255;
			destPixel = (destPixel >> 24 & 255 & 255) << 24 | (destPixel >> 16 & 255 & 255) << 16 | (destPixel >> 8 & 255 & 255) << 8 | (((sourcePixel & 255) * alphaMultiplier + (destPixel & 255) * (256 - alphaMultiplier)) / 256 | 0) & 255;
			if(destPremultiplied) {
				if((destPixel & 255) == 0) {
					if(destPixel != 0) {
						destPixel = 0;
					}
				} else if((destPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[destPixel & 255];
					destPixel = ((destPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((destPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((destPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | destPixel & 255 & 255;
				}
			}
			switch(destFormat) {
			case 0:
				destData[destPosition] = destPixel >> 24 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 8 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			case 1:
				destData[destPosition] = destPixel & 255;
				destData[destPosition + 1] = destPixel >> 24 & 255;
				destData[destPosition + 2] = destPixel >> 16 & 255;
				destData[destPosition + 3] = destPixel >> 8 & 255;
				break;
			case 2:
				destData[destPosition] = destPixel >> 8 & 255;
				destData[destPosition + 1] = destPixel >> 16 & 255;
				destData[destPosition + 2] = destPixel >> 24 & 255;
				destData[destPosition + 3] = destPixel & 255;
				break;
			}
			sourcePosition += 4;
			destPosition += 4;
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.multiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null || !image.buffer.transparent) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		var offset1 = i * 4;
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
		switch(format) {
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = true;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.resize = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	if(buffer.width == newWidth && buffer.height == newHeight) {
		return;
	}
	var elements = newWidth * newHeight * 4;
	var newBuffer = new lime_graphics_ImageBuffer(elements != null?new Uint8Array(elements):null,newWidth,newHeight);
	var imageWidth = image.width;
	var imageHeight = image.height;
	var data = image.get_data();
	var newData = newBuffer.data;
	var sourceIndex;
	var sourceIndexX;
	var sourceIndexY;
	var sourceIndexXY;
	var index;
	var sourceX;
	var sourceY;
	var u;
	var v;
	var uRatio;
	var vRatio;
	var uOpposite;
	var vOpposite;
	var _g1 = 0;
	while(_g1 < newHeight) {
		var y = _g1++;
		var _g3 = 0;
		while(_g3 < newWidth) {
			var x = _g3++;
			u = (x + 0.5) / newWidth * imageWidth - 0.5;
			v = (y + 0.5) / newHeight * imageHeight - 0.5;
			sourceX = u | 0;
			sourceY = v | 0;
			sourceIndex = (sourceY * imageWidth + sourceX) * 4;
			if(sourceX < imageWidth - 1) {
				sourceIndexX = sourceIndex + 4;
			} else {
				sourceIndexX = sourceIndex;
			}
			if(sourceY < imageHeight - 1) {
				sourceIndexY = sourceIndex + imageWidth * 4;
			} else {
				sourceIndexY = sourceIndex;
			}
			if(sourceIndexX != sourceIndex) {
				sourceIndexXY = sourceIndexY + 4;
			} else {
				sourceIndexXY = sourceIndexY;
			}
			index = (y * newWidth + x) * 4;
			uRatio = u - sourceX;
			vRatio = v - sourceY;
			uOpposite = 1 - uRatio;
			vOpposite = 1 - vRatio;
			newData[index] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY]) * uRatio) * vRatio | 0;
			newData[index + 1] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 1]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 1]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 1]) * uRatio) * vRatio | 0;
			newData[index + 2] = (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndex + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexX + 2]) * uRatio) * vOpposite + (_$UInt_UInt_$Impl_$.toFloat(data[sourceIndexY + 2]) * uOpposite + _$UInt_UInt_$Impl_$.toFloat(data[sourceIndexXY + 2]) * uRatio) * vRatio | 0;
			if(data[sourceIndexX + 3] == 0 || data[sourceIndexY + 3] == 0 || data[sourceIndexXY + 3] == 0) {
				newData[index + 3] = 0;
			} else {
				newData[index + 3] = data[sourceIndex + 3];
			}
		}
	}
	buffer.data = newBuffer.data;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.resizeBuffer = function(image,newWidth,newHeight) {
	var buffer = image.buffer;
	var data = image.get_data();
	var elements = newWidth * newHeight * 4;
	var newData = elements != null?new Uint8Array(elements):null;
	var sourceIndex;
	var index;
	var _g1 = 0;
	var _g = buffer.height;
	while(_g1 < _g) {
		var y = _g1++;
		var _g3 = 0;
		var _g2 = buffer.width;
		while(_g3 < _g2) {
			var x = _g3++;
			sourceIndex = (y * buffer.width + x) * 4;
			index = (y * newWidth + x) * 4;
			newData[index] = data[sourceIndex];
			newData[index + 1] = data[sourceIndex + 1];
			newData[index + 2] = data[sourceIndex + 2];
			newData[index + 3] = data[sourceIndex + 3];
		}
	}
	buffer.data = newData;
	buffer.width = newWidth;
	buffer.height = newHeight;
};
lime_graphics_utils_ImageDataUtil.setFormat = function(image,format) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var index;
	var length = data.length / 4 | 0;
	var r1;
	var g1;
	var b1;
	var a1;
	var r2;
	var g2;
	var b2;
	var a2;
	var r;
	var g;
	var b;
	var a;
	switch(image.get_format()) {
	case 0:
		r1 = 0;
		g1 = 1;
		b1 = 2;
		a1 = 3;
		break;
	case 1:
		r1 = 1;
		g1 = 2;
		b1 = 3;
		a1 = 0;
		break;
	case 2:
		r1 = 2;
		g1 = 1;
		b1 = 0;
		a1 = 3;
		break;
	}
	switch(format) {
	case 0:
		r2 = 0;
		g2 = 1;
		b2 = 2;
		a2 = 3;
		break;
	case 1:
		r2 = 1;
		g2 = 2;
		b2 = 3;
		a2 = 0;
		break;
	case 2:
		r2 = 2;
		g2 = 1;
		b2 = 0;
		a2 = 3;
		break;
	}
	var _g2 = 0;
	while(_g2 < length) {
		index = _g2++ * 4;
		r = data[index + r1];
		g = data[index + g1];
		b = data[index + b1];
		a = data[index + a1];
		data[index + r2] = r;
		data[index + g2] = g;
		data[index + b2] = b;
		data[index + a2] = a;
	}
	image.buffer.format = format;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	var source = 0;
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	switch(format1) {
	case 0:
		source = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		source = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		source = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((source & 255) != 0 && (source & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (source & 255);
			source = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((source >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | source & 255 & 255;
		}
	}
	pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | source & 255 & 255;
	var data1 = image.buffer.data;
	var offset1 = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format2 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format2) {
	case 0:
		data1[offset1] = pixel >> 24 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 8 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	case 1:
		data1[offset1] = pixel & 255;
		data1[offset1 + 1] = pixel >> 24 & 255;
		data1[offset1 + 2] = pixel >> 16 & 255;
		data1[offset1 + 3] = pixel >> 8 & 255;
		break;
	case 2:
		data1[offset1] = pixel >> 8 & 255;
		data1[offset1 + 1] = pixel >> 16 & 255;
		data1[offset1 + 2] = pixel >> 24 & 255;
		data1[offset1 + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixel32 = function(image,x,y,color,format) {
	var pixel;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		pixel = rgba;
		break;
	case 2:
		var bgra = color;
		var rgba1 = 0;
		rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		pixel = rgba1;
		break;
	default:
		pixel = color;
	}
	if(!image.get_transparent()) {
		pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
	}
	var data = image.buffer.data;
	var offset = 4 * (y + image.offsetY) * image.buffer.width + (x + image.offsetX) * 4;
	var format1 = image.buffer.format;
	if(image.buffer.premultiplied) {
		if((pixel & 255) == 0) {
			if(pixel != 0) {
				pixel = 0;
			}
		} else if((pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
			pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
		}
	}
	switch(format1) {
	case 0:
		data[offset] = pixel >> 24 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 8 & 255;
		data[offset + 3] = pixel & 255;
		break;
	case 1:
		data[offset] = pixel & 255;
		data[offset + 1] = pixel >> 24 & 255;
		data[offset + 2] = pixel >> 16 & 255;
		data[offset + 3] = pixel >> 8 & 255;
		break;
	case 2:
		data[offset] = pixel >> 8 & 255;
		data[offset + 1] = pixel >> 16 & 255;
		data[offset + 2] = pixel >> 24 & 255;
		data[offset + 3] = pixel & 255;
		break;
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.setPixels = function(image,rect,bytes,format) {
	if(image.buffer.data == null) {
		return;
	}
	var data = image.buffer.data;
	var sourceFormat = image.buffer.format;
	var premultiplied = image.buffer.premultiplied;
	var dataView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,rect);
	var row;
	var color;
	var pixel;
	var transparent = image.get_transparent();
	var dataPosition = 0;
	var _g1 = 0;
	var _g = dataView.height;
	while(_g1 < _g) {
		row = dataView.offset + dataView.stride * _g1++;
		var _g3 = 0;
		var _g2 = dataView.width;
		while(_g3 < _g2) {
			var x = _g3++;
			color = bytes.b[dataPosition + 3] | bytes.b[dataPosition + 2] << 8 | bytes.b[dataPosition + 1] << 16 | bytes.b[dataPosition] << 24;
			dataPosition += 4;
			switch(format) {
			case 1:
				var argb = color;
				var rgba = 0;
				rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
				pixel = rgba;
				break;
			case 2:
				var bgra = color;
				var rgba1 = 0;
				rgba1 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
				pixel = rgba1;
				break;
			default:
				pixel = color;
			}
			if(!transparent) {
				pixel = (pixel >> 24 & 255 & 255) << 24 | (pixel >> 16 & 255 & 255) << 16 | (pixel >> 8 & 255 & 255) << 8 | 255;
			}
			var offset = row + x * 4;
			if(premultiplied) {
				if((pixel & 255) == 0) {
					if(pixel != 0) {
						pixel = 0;
					}
				} else if((pixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[pixel & 255];
					pixel = ((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | pixel & 255 & 255;
				}
			}
			switch(sourceFormat) {
			case 0:
				data[offset] = pixel >> 24 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 8 & 255;
				data[offset + 3] = pixel & 255;
				break;
			case 1:
				data[offset] = pixel & 255;
				data[offset + 1] = pixel >> 24 & 255;
				data[offset + 2] = pixel >> 16 & 255;
				data[offset + 3] = pixel >> 8 & 255;
				break;
			case 2:
				data[offset] = pixel >> 8 & 255;
				data[offset + 1] = pixel >> 16 & 255;
				data[offset + 2] = pixel >> 24 & 255;
				data[offset + 3] = pixel & 255;
				break;
			}
		}
	}
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.threshold = function(image,sourceImage,sourceRect,destPoint,operation,threshold,color,mask,copySource,format) {
	var _color;
	var _mask;
	var _threshold;
	switch(format) {
	case 1:
		var argb = color;
		var rgba = 0;
		rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
		_color = rgba;
		var argb1 = mask;
		var rgba1 = 0;
		rgba1 = (argb1 >> 16 & 255 & 255) << 24 | (argb1 >> 8 & 255 & 255) << 16 | (argb1 & 255 & 255) << 8 | argb1 >> 24 & 255 & 255;
		_mask = rgba1;
		var argb2 = threshold;
		var rgba2 = 0;
		rgba2 = (argb2 >> 16 & 255 & 255) << 24 | (argb2 >> 8 & 255 & 255) << 16 | (argb2 & 255 & 255) << 8 | argb2 >> 24 & 255 & 255;
		_threshold = rgba2;
		break;
	case 2:
		var bgra = color;
		var rgba3 = 0;
		rgba3 = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
		_color = rgba3;
		var bgra1 = mask;
		var rgba4 = 0;
		rgba4 = (bgra1 >> 8 & 255 & 255) << 24 | (bgra1 >> 16 & 255 & 255) << 16 | (bgra1 >> 24 & 255 & 255) << 8 | bgra1 & 255 & 255;
		_mask = rgba4;
		var bgra2 = threshold;
		var rgba5 = 0;
		rgba5 = (bgra2 >> 8 & 255 & 255) << 24 | (bgra2 >> 16 & 255 & 255) << 16 | (bgra2 >> 24 & 255 & 255) << 8 | bgra2 & 255 & 255;
		_threshold = rgba5;
		break;
	default:
		_color = color;
		_mask = mask;
		_threshold = threshold;
	}
	var _operation;
	switch(operation) {
	case "!=":
		_operation = 0;
		break;
	case "<":
		_operation = 2;
		break;
	case "<=":
		_operation = 3;
		break;
	case "==":
		_operation = 1;
		break;
	case ">":
		_operation = 4;
		break;
	case ">=":
		_operation = 5;
		break;
	default:
		_operation = -1;
	}
	if(_operation == -1) {
		return 0;
	}
	var srcData = sourceImage.buffer.data;
	var destData = image.buffer.data;
	if(srcData == null || destData == null) {
		return 0;
	}
	var hits = 0;
	var srcView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(sourceImage,sourceRect);
	var destView = new lime_graphics_utils__$ImageDataUtil_ImageDataView(image,new lime_math_Rectangle(destPoint.x,destPoint.y,srcView.width,srcView.height));
	var srcFormat = sourceImage.buffer.format;
	var destFormat = image.buffer.format;
	var srcPremultiplied = sourceImage.buffer.premultiplied;
	var destPremultiplied = image.buffer.premultiplied;
	var srcPosition;
	var destPosition;
	var srcPixel;
	var pixelMask;
	var test;
	var value;
	var _g1 = 0;
	var _g = destView.height;
	while(_g1 < _g) {
		var y = _g1++;
		srcPosition = srcView.offset + srcView.stride * y;
		destPosition = destView.offset + destView.stride * y;
		var _g3 = 0;
		var _g2 = destView.width;
		while(_g3 < _g2) {
			++_g3;
			switch(srcFormat) {
			case 0:
				srcPixel = (srcData[srcPosition] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition + 2] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			case 1:
				srcPixel = (srcData[srcPosition + 1] & 255) << 24 | (srcData[srcPosition + 2] & 255) << 16 | (srcData[srcPosition + 3] & 255) << 8 | srcData[srcPosition] & 255;
				break;
			case 2:
				srcPixel = (srcData[srcPosition + 2] & 255) << 24 | (srcData[srcPosition + 1] & 255) << 16 | (srcData[srcPosition] & 255) << 8 | srcData[srcPosition + 3] & 255;
				break;
			}
			if(srcPremultiplied) {
				if((srcPixel & 255) != 0 && (srcPixel & 255) != 255) {
					lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (srcPixel & 255);
					srcPixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | srcPixel & 255 & 255;
				}
			}
			pixelMask = srcPixel & _mask;
			var tmp1;
			var tmp2;
			tmp1 = pixelMask >> 24 & 255;
			tmp2 = _threshold >> 24 & 255;
			if(tmp1 != tmp2) {
				if(tmp1 > tmp2) {
					value = 1;
				} else {
					value = -1;
				}
			} else {
				tmp1 = pixelMask >> 16 & 255;
				tmp2 = _threshold >> 16 & 255;
				if(tmp1 != tmp2) {
					if(tmp1 > tmp2) {
						value = 1;
					} else {
						value = -1;
					}
				} else {
					tmp1 = pixelMask >> 8 & 255;
					tmp2 = _threshold >> 8 & 255;
					if(tmp1 != tmp2) {
						if(tmp1 > tmp2) {
							value = 1;
						} else {
							value = -1;
						}
					} else {
						tmp1 = pixelMask & 255;
						tmp2 = _threshold & 255;
						if(tmp1 != tmp2) {
							if(tmp1 > tmp2) {
								value = 1;
							} else {
								value = -1;
							}
						} else {
							value = 0;
						}
					}
				}
			}
			switch(_operation) {
			case 0:
				test = value != 0;
				break;
			case 1:
				test = value == 0;
				break;
			case 2:
				test = value == -1;
				break;
			case 3:
				if(value != 0) {
					test = value == -1;
				} else {
					test = true;
				}
				break;
			case 4:
				test = value == 1;
				break;
			case 5:
				if(value != 0) {
					test = value == 1;
				} else {
					test = true;
				}
				break;
			default:
				test = false;
			}
			if(test) {
				if(destPremultiplied) {
					if((_color & 255) == 0) {
						if(_color != 0) {
							_color = 0;
						}
					} else if((_color & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[_color & 255];
						_color = ((_color >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((_color >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((_color >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | _color & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = _color >> 24 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 8 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				case 1:
					destData[destPosition] = _color & 255;
					destData[destPosition + 1] = _color >> 24 & 255;
					destData[destPosition + 2] = _color >> 16 & 255;
					destData[destPosition + 3] = _color >> 8 & 255;
					break;
				case 2:
					destData[destPosition] = _color >> 8 & 255;
					destData[destPosition + 1] = _color >> 16 & 255;
					destData[destPosition + 2] = _color >> 24 & 255;
					destData[destPosition + 3] = _color & 255;
					break;
				}
				++hits;
			} else if(copySource) {
				if(destPremultiplied) {
					if((srcPixel & 255) == 0) {
						if(srcPixel != 0) {
							srcPixel = 0;
						}
					} else if((srcPixel & 255) != 255) {
						lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[srcPixel & 255];
						srcPixel = ((srcPixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((srcPixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((srcPixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | srcPixel & 255 & 255;
					}
				}
				switch(destFormat) {
				case 0:
					destData[destPosition] = srcPixel >> 24 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 8 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				case 1:
					destData[destPosition] = srcPixel & 255;
					destData[destPosition + 1] = srcPixel >> 24 & 255;
					destData[destPosition + 2] = srcPixel >> 16 & 255;
					destData[destPosition + 3] = srcPixel >> 8 & 255;
					break;
				case 2:
					destData[destPosition] = srcPixel >> 8 & 255;
					destData[destPosition + 1] = srcPixel >> 16 & 255;
					destData[destPosition + 2] = srcPixel >> 24 & 255;
					destData[destPosition + 3] = srcPixel & 255;
					break;
				}
			}
			srcPosition += 4;
			destPosition += 4;
		}
	}
	if(hits > 0) {
		image.dirty = true;
	}
	return hits;
};
lime_graphics_utils_ImageDataUtil.unmultiplyAlpha = function(image) {
	var data = image.buffer.data;
	if(data == null) {
		return;
	}
	var format = image.buffer.format;
	var length = data.length / 4 | 0;
	var pixel;
	var _g1 = 0;
	while(_g1 < length) {
		var i = _g1++;
		var offset = i * 4;
		switch(format) {
		case 0:
			pixel = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
			break;
		case 1:
			pixel = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
			break;
		case 2:
			pixel = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
			break;
		}
		if((pixel & 255) != 0 && (pixel & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (pixel & 255);
			pixel = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((pixel >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | pixel & 255 & 255;
		}
		var offset1 = i * 4;
		switch(format) {
		case 0:
			data[offset1] = pixel >> 24 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 8 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		case 1:
			data[offset1] = pixel & 255;
			data[offset1 + 1] = pixel >> 24 & 255;
			data[offset1 + 2] = pixel >> 16 & 255;
			data[offset1 + 3] = pixel >> 8 & 255;
			break;
		case 2:
			data[offset1] = pixel >> 8 & 255;
			data[offset1 + 1] = pixel >> 16 & 255;
			data[offset1 + 2] = pixel >> 24 & 255;
			data[offset1 + 3] = pixel & 255;
			break;
		}
	}
	image.buffer.premultiplied = false;
	image.dirty = true;
};
lime_graphics_utils_ImageDataUtil.__pixelCompare = function(n1,n2) {
	var tmp1;
	var tmp2;
	tmp1 = n1 >> 24 & 255;
	tmp2 = n2 >> 24 & 255;
	if(tmp1 != tmp2) {
		if(tmp1 > tmp2) {
			return 1;
		} else {
			return -1;
		}
	} else {
		tmp1 = n1 >> 16 & 255;
		tmp2 = n2 >> 16 & 255;
		if(tmp1 != tmp2) {
			if(tmp1 > tmp2) {
				return 1;
			} else {
				return -1;
			}
		} else {
			tmp1 = n1 >> 8 & 255;
			tmp2 = n2 >> 8 & 255;
			if(tmp1 != tmp2) {
				if(tmp1 > tmp2) {
					return 1;
				} else {
					return -1;
				}
			} else {
				tmp1 = n1 & 255;
				tmp2 = n2 & 255;
				if(tmp1 != tmp2) {
					if(tmp1 > tmp2) {
						return 1;
					} else {
						return -1;
					}
				} else {
					return 0;
				}
			}
		}
	}
};
var lime_graphics_utils__$ImageDataUtil_ImageDataView = function(image,rect) {
	this.image = image;
	if(rect == null) {
		this.rect = image.get_rect();
	} else {
		if(rect.x < 0) {
			rect.x = 0;
		}
		if(rect.y < 0) {
			rect.y = 0;
		}
		if(rect.x + rect.width > image.width) {
			rect.width = image.width - rect.x;
		}
		if(rect.y + rect.height > image.height) {
			rect.height = image.height - rect.y;
		}
		if(rect.width < 0) {
			rect.width = 0;
		}
		if(rect.height < 0) {
			rect.height = 0;
		}
		this.rect = rect;
	}
	this.stride = image.buffer.get_stride();
	this.x = Math.ceil(this.rect.x);
	this.y = Math.ceil(this.rect.y);
	this.width = Math.floor(this.rect.width);
	this.height = Math.floor(this.rect.height);
	this.offset = this.stride * (this.y + image.offsetY) + (this.x + image.offsetX) * 4;
};
$hxClasses["lime.graphics.utils._ImageDataUtil.ImageDataView"] = lime_graphics_utils__$ImageDataUtil_ImageDataView;
lime_graphics_utils__$ImageDataUtil_ImageDataView.__name__ = ["lime","graphics","utils","_ImageDataUtil","ImageDataView"];
lime_graphics_utils__$ImageDataUtil_ImageDataView.prototype = {
	x: null
	,y: null
	,height: null
	,width: null
	,image: null
	,offset: null
	,rect: null
	,stride: null
	,clip: function(x,y,width,height) {
		this.rect.__contract(x,y,width,height);
		this.x = Math.ceil(this.rect.x);
		this.y = Math.ceil(this.rect.y);
		this.width = Math.floor(this.rect.width);
		this.height = Math.floor(this.rect.height);
		this.offset = this.stride * (this.y + this.image.offsetY) + (this.x + this.image.offsetX) * 4;
	}
	,row: function(y) {
		return this.offset + this.stride * y;
	}
	,__class__: lime_graphics_utils__$ImageDataUtil_ImageDataView
};
var lime_math__$ColorMatrix_ColorMatrix_$Impl_$ = {};
$hxClasses["lime.math._ColorMatrix.ColorMatrix_Impl_"] = lime_math__$ColorMatrix_ColorMatrix_$Impl_$;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__name__ = ["lime","math","_ColorMatrix","ColorMatrix_Impl_"];
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__properties__ = {set_redOffset:"set_redOffset",get_redOffset:"get_redOffset",set_redMultiplier:"set_redMultiplier",get_redMultiplier:"get_redMultiplier",set_greenOffset:"set_greenOffset",get_greenOffset:"get_greenOffset",set_greenMultiplier:"set_greenMultiplier",get_greenMultiplier:"get_greenMultiplier",set_color:"set_color",get_color:"get_color",set_blueOffset:"set_blueOffset",get_blueOffset:"get_blueOffset",set_blueMultiplier:"set_blueMultiplier",get_blueMultiplier:"get_blueMultiplier",set_alphaOffset:"set_alphaOffset",get_alphaOffset:"get_alphaOffset",set_alphaMultiplier:"set_alphaMultiplier",get_alphaMultiplier:"get_alphaMultiplier"}
lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 20) {
		this1 = data;
	} else {
		var array = lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity;
		this1 = array != null?new Float32Array(array):null;
	}
	return this1;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.clone = function(this1) {
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$._new(this1 != null?new Float32Array(this1):null);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.concat = function(this1,second) {
	var _g = this1;
	_g[0] = _g[0] + second[0];
	var _g1 = this1;
	_g1[6] = _g1[6] + second[6];
	var _g2 = this1;
	_g2[12] = _g2[12] + second[12];
	var _g3 = this1;
	_g3[18] = _g3[18] + second[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 0;
	this1[6] = 1;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 0;
	this1[11] = 0;
	this1[12] = 1;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 0;
	this1[16] = 0;
	this1[17] = 0;
	this1[18] = 1;
	this1[19] = 0;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getAlphaTable = function(this1) {
	var table = new Uint8Array(256);
	var multiplier = this1[18];
	var offset = this1[19] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getBlueTable = function(this1) {
	var table = new Uint8Array(256);
	var multiplier = this1[12];
	var offset = this1[14] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getGreenTable = function(this1) {
	var table = new Uint8Array(256);
	var multiplier = this1[6];
	var offset = this1[9] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.getRedTable = function(this1) {
	var table = new Uint8Array(256);
	var multiplier = this1[0];
	var offset = this1[4] * 255;
	var value;
	var _g = 0;
	while(_g < 256) {
		var i = _g++;
		value = Math.floor(i * multiplier + offset);
		if(value > 255) {
			value = 255;
		}
		if(value < 0) {
			value = 0;
		}
		table[i] = value;
	}
	return table;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__toFlashColorTransform = function(this1) {
	return null;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaMultiplier = function(this1) {
	return this1[18];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaMultiplier = function(this1,value) {
	return this1[18] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_alphaOffset = function(this1) {
	return this1[19] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_alphaOffset = function(this1,value) {
	return this1[19] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueMultiplier = function(this1) {
	return this1[12];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueMultiplier = function(this1,value) {
	return this1[12] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_blueOffset = function(this1) {
	return this1[14] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_blueOffset = function(this1,value) {
	return this1[14] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color = function(this1) {
	return (this1[4] * 255 | 0) << 16 | (this1[9] * 255 | 0) << 8 | (this1[14] * 255 | 0);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_color = function(this1,value) {
	this1[4] = (value >> 16 & 255) / 255;
	this1[9] = (value >> 8 & 255) / 255;
	this1[14] = (value & 255) / 255;
	this1[0] = 0;
	this1[6] = 0;
	this1[12] = 0;
	return lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_color(this1);
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenMultiplier = function(this1) {
	return this1[6];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenMultiplier = function(this1,value) {
	return this1[6] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_greenOffset = function(this1) {
	return this1[9] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_greenOffset = function(this1,value) {
	return this1[9] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redMultiplier = function(this1) {
	return this1[0];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redMultiplier = function(this1,value) {
	return this1[0] = value;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get_redOffset = function(this1) {
	return this1[4] * 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set_redOffset = function(this1,value) {
	return this1[4] = value / 255;
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.set = function(this1,index,value) {
	return this1[index] = value;
};
var lime_math_Matrix3 = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["lime.math.Matrix3"] = lime_math_Matrix3;
lime_math_Matrix3.__name__ = ["lime","math","Matrix3"];
lime_math_Matrix3.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,clone: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(column == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyColumnTo: function(column,vector4) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector4.x = this.a;
			vector4.y = this.c;
			vector4.z = 0;
		} else if(column == 1) {
			vector4.x = this.b;
			vector4.y = this.d;
			vector4.z = 0;
		} else {
			vector4.x = this.tx;
			vector4.y = this.ty;
			vector4.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix3) {
		this.a = sourceMatrix3.a;
		this.b = sourceMatrix3.b;
		this.c = sourceMatrix3.c;
		this.d = sourceMatrix3.d;
		this.tx = sourceMatrix3.tx;
		this.ty = sourceMatrix3.ty;
	}
	,copyRowFrom: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector4.x;
			this.c = vector4.y;
		} else if(row == 1) {
			this.b = vector4.x;
			this.d = vector4.y;
		} else {
			this.tx = vector4.x;
			this.ty = vector4.y;
		}
	}
	,copyRowTo: function(row,vector4) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector4.x = this.a;
			vector4.y = this.b;
			vector4.z = this.tx;
		} else if(row == 1) {
			vector4.x = this.c;
			vector4.y = this.d;
			vector4.z = this.ty;
		} else {
			vector4.x = 0;
			vector4.y = 0;
			vector4.z = 1;
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = scaleX;
		this.d = scaleY;
		this.b = rotation;
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,equals: function(Matrix3) {
		if(Matrix3 != null && this.tx == Matrix3.tx && this.ty == Matrix3.ty && this.a == Matrix3.a && this.b == Matrix3.b && this.c == Matrix3.c) {
			return this.d == Matrix3.d;
		} else {
			return false;
		}
	}
	,deltaTransformVector2: function(Vector2) {
		return new lime_math_Vector2(Vector2.x * this.a + Vector2.y * this.c,Vector2.x * this.b + Vector2.y * this.d);
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,mult: function(m) {
		var result = new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
		result.concat(m);
		return result;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "Matrix33d(" + this.a + ", " + this.b + ", " + "0, 0, " + this.c + ", " + this.d + ", " + "0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "Matrix3(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformVector2: function(pos) {
		return new lime_math_Vector2(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__transformX: function(pos) {
		return pos.x * this.a + pos.y * this.c + this.tx;
	}
	,__transformY: function(pos) {
		return pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__translateTransformed: function(pos) {
		this.tx = pos.x * this.a + pos.y * this.c + this.tx;
		this.ty = pos.x * this.b + pos.y * this.d + this.ty;
	}
	,__class__: lime_math_Matrix3
};
var lime_math__$Matrix4_Matrix4_$Impl_$ = {};
$hxClasses["lime.math._Matrix4.Matrix4_Impl_"] = lime_math__$Matrix4_Matrix4_$Impl_$;
lime_math__$Matrix4_Matrix4_$Impl_$.__name__ = ["lime","math","_Matrix4","Matrix4_Impl_"];
lime_math__$Matrix4_Matrix4_$Impl_$.__properties__ = {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
lime_math__$Matrix4_Matrix4_$Impl_$._new = function(data) {
	var this1;
	if(data != null && data.length == 16) {
		this1 = data;
	} else {
		var array = lime_math__$Matrix4_Matrix4_$Impl_$.__identity;
		this1 = array != null?new Float32Array(array):null;
	}
	return this1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.append = function(this1,lhs) {
	var m111 = this1[0];
	var m121 = this1[4];
	var m131 = this1[8];
	var m141 = this1[12];
	var m112 = this1[1];
	var m122 = this1[5];
	var m132 = this1[9];
	var m142 = this1[13];
	var m113 = this1[2];
	var m123 = this1[6];
	var m133 = this1[10];
	var m143 = this1[14];
	var m114 = this1[3];
	var m124 = this1[7];
	var m134 = this1[11];
	var m144 = this1[15];
	var m211 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,0);
	var m221 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,4);
	var m231 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,8);
	var m241 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,12);
	var m212 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,1);
	var m222 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,5);
	var m232 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,9);
	var m242 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,13);
	var m213 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,2);
	var m223 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,6);
	var m233 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,10);
	var m243 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,14);
	var m214 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,3);
	var m224 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,7);
	var m234 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,11);
	var m244 = lime_math__$Matrix4_Matrix4_$Impl_$.get(lhs,15);
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,pivotPoint.x,pivotPoint.y,pivotPoint.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	lime_math__$Matrix4_Matrix4_$Impl_$.append(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null));
};
lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation = function(this1,x,y,z) {
	this1[12] = this1[12] + x;
	this1[13] = this1[13] + y;
	this1[14] = this1[14] + z;
};
lime_math__$Matrix4_Matrix4_$Impl_$.clone = function(this1) {
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(this1 != null?new Float32Array(this1):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnFrom = function(this1,column,vector) {
	switch(column) {
	case 0:
		this1[0] = vector.x;
		this1[1] = vector.y;
		this1[2] = vector.z;
		this1[3] = vector.w;
		break;
	case 1:
		this1[4] = vector.x;
		this1[5] = vector.y;
		this1[6] = vector.z;
		this1[7] = vector.w;
		break;
	case 2:
		this1[8] = vector.x;
		this1[9] = vector.y;
		this1[10] = vector.z;
		this1[11] = vector.w;
		break;
	case 3:
		this1[12] = vector.x;
		this1[13] = vector.y;
		this1[14] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyColumnTo = function(this1,column,vector) {
	switch(column) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[1];
		vector.z = this1[2];
		vector.w = this1[3];
		break;
	case 1:
		vector.x = this1[4];
		vector.y = this1[5];
		vector.z = this1[6];
		vector.w = this1[7];
		break;
	case 2:
		vector.x = this1[8];
		vector.y = this1[9];
		vector.z = this1[10];
		vector.w = this1[11];
		break;
	case 3:
		vector.x = this1[12];
		vector.y = this1[13];
		vector.z = this1[14];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Column " + column + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyFrom = function(this1,other) {
	this1.set(other);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisFrom = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var l = array.length - index;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		this1[c] = array[c + index];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copythisTo = function(this1,array,index,transposeValues) {
	if(transposeValues == null) {
		transposeValues = false;
	}
	if(index == null) {
		index = 0;
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
	var l = this1.length;
	var _g1 = 0;
	var _g = l;
	while(_g1 < _g) {
		var c = _g1++;
		array[c + index] = this1[c];
	}
	if(transposeValues) {
		lime_math__$Matrix4_Matrix4_$Impl_$.transpose(this1);
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowFrom = function(this1,row,vector) {
	switch(row) {
	case 0:
		this1[0] = vector.x;
		this1[4] = vector.y;
		this1[8] = vector.z;
		this1[12] = vector.w;
		break;
	case 1:
		this1[1] = vector.x;
		this1[5] = vector.y;
		this1[9] = vector.z;
		this1[13] = vector.w;
		break;
	case 2:
		this1[2] = vector.x;
		this1[6] = vector.y;
		this1[10] = vector.z;
		this1[14] = vector.w;
		break;
	case 3:
		this1[3] = vector.x;
		this1[7] = vector.y;
		this1[11] = vector.z;
		this1[15] = vector.w;
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + Std.string(_$UInt_UInt_$Impl_$.toFloat(row)) + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var array = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createABCD = function(a,b,c,d,tx,ty) {
	var array = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var array = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	return lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null);
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyRowTo = function(this1,row,vector) {
	switch(row) {
	case 0:
		vector.x = this1[0];
		vector.y = this1[4];
		vector.z = this1[8];
		vector.w = this1[12];
		break;
	case 1:
		vector.x = this1[1];
		vector.y = this1[5];
		vector.z = this1[9];
		vector.w = this1[13];
		break;
	case 2:
		vector.x = this1[2];
		vector.y = this1[6];
		vector.z = this1[10];
		vector.w = this1[14];
		break;
	case 3:
		vector.x = this1[3];
		vector.y = this1[7];
		vector.z = this1[11];
		vector.w = this1[15];
		break;
	default:
		throw new js__$Boot_HaxeError("Error, Row " + row + " out of bounds [0, ..., 3]");
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.copyToMatrix4 = function(this1,other) {
	(js_Boot.__cast(other , Float32Array)).set(this1);
};
lime_math__$Matrix4_Matrix4_$Impl_$.deltaTransformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[3],x * this1[1] + y * this1[5] + z * this1[9] + this1[7],x * this1[2] + y * this1[6] + z * this1[10] + this1[11],0);
};
lime_math__$Matrix4_Matrix4_$Impl_$.identity = function(this1) {
	this1[0] = 1;
	this1[1] = 0;
	this1[2] = 0;
	this1[3] = 0;
	this1[4] = 0;
	this1[5] = 1;
	this1[6] = 0;
	this1[7] = 0;
	this1[8] = 0;
	this1[9] = 0;
	this1[10] = 1;
	this1[11] = 0;
	this1[12] = 0;
	this1[13] = 0;
	this1[14] = 0;
	this1[15] = 1;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolate = function(thisMat,toMat,percent) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		lime_math__$Matrix4_Matrix4_$Impl_$.set(m,i,lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i) + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - lime_math__$Matrix4_Matrix4_$Impl_$.get(thisMat,i)) * percent);
	}
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.interpolateTo = function(this1,toMat,percent) {
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		this1[i] = this1[i] + (lime_math__$Matrix4_Matrix4_$Impl_$.get(toMat,i) - this1[i]) * percent;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.invert = function(this1) {
	var d = lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant(this1);
	var invertable = Math.abs(d) > 0.00000000001;
	if(invertable) {
		d = 1 / d;
		var m11 = this1[0];
		var m21 = this1[4];
		var m31 = this1[8];
		var m41 = this1[12];
		var m12 = this1[1];
		var m22 = this1[5];
		var m32 = this1[9];
		var m42 = this1[13];
		var m13 = this1[2];
		var m23 = this1[6];
		var m33 = this1[10];
		var m43 = this1[14];
		var m14 = this1[3];
		var m24 = this1[7];
		var m34 = this1[11];
		var m44 = this1[15];
		this1[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
		this1[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
		this1[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
		this1[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
		this1[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
		this1[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
		this1[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
		this1[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
		this1[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
		this1[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
		this1[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
		this1[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
		this1[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
		this1[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
		this1[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
		this1[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
	}
	return invertable;
};
lime_math__$Matrix4_Matrix4_$Impl_$.pointAt = function(this1,pos,at,up) {
	if(at == null) {
		at = new lime_math_Vector4(0,0,-1);
	}
	if(up == null) {
		up = new lime_math_Vector4(0,-1,0);
	}
	var dir = new lime_math_Vector4(at.x - pos.x,at.y - pos.y,at.z - pos.z);
	var vup = new lime_math_Vector4(up.x,up.y,up.z,up.w);
	var right;
	var l = Math.sqrt(dir.x * dir.x + dir.y * dir.y + dir.z * dir.z);
	if(l != 0) {
		dir.x /= l;
		dir.y /= l;
		dir.z /= l;
	}
	var l1 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
	if(l1 != 0) {
		vup.x /= l1;
		vup.y /= l1;
		vup.z /= l1;
	}
	var dir2 = new lime_math_Vector4(dir.x,dir.y,dir.z,dir.w);
	var s = vup.x * dir.x + vup.y * dir.y + vup.z * dir.z;
	dir2.x *= s;
	dir2.y *= s;
	dir2.z *= s;
	vup = new lime_math_Vector4(vup.x - dir2.x,vup.y - dir2.y,vup.z - dir2.z);
	if(Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z) > 0) {
		var l2 = Math.sqrt(vup.x * vup.x + vup.y * vup.y + vup.z * vup.z);
		if(l2 != 0) {
			vup.x /= l2;
			vup.y /= l2;
			vup.z /= l2;
		}
	} else if(dir.x != 0) {
		vup = new lime_math_Vector4(-dir.y,dir.x,0);
	} else {
		vup = new lime_math_Vector4(1,0,0);
	}
	right = new lime_math_Vector4(vup.y * dir.z - vup.z * dir.y,vup.z * dir.x - vup.x * dir.z,vup.x * dir.y - vup.y * dir.x,1);
	var l3 = Math.sqrt(right.x * right.x + right.y * right.y + right.z * right.z);
	if(l3 != 0) {
		right.x /= l3;
		right.y /= l3;
		right.z /= l3;
	}
	this1[0] = right.x;
	this1[4] = right.y;
	this1[8] = right.z;
	this1[12] = 0.0;
	this1[1] = vup.x;
	this1[5] = vup.y;
	this1[9] = vup.z;
	this1[13] = 0.0;
	this1[2] = dir.x;
	this1[6] = dir.y;
	this1[10] = dir.z;
	this1[14] = 0.0;
	this1[3] = pos.x;
	this1[7] = pos.y;
	this1[11] = pos.z;
	this1[15] = 1.0;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prepend = function(this1,rhs) {
	var m111 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,0);
	var m121 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,4);
	var m131 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,8);
	var m141 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,12);
	var m112 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,1);
	var m122 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,5);
	var m132 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,9);
	var m142 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,13);
	var m113 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,2);
	var m123 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,6);
	var m133 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,10);
	var m143 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,14);
	var m114 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,3);
	var m124 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,7);
	var m134 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,11);
	var m144 = lime_math__$Matrix4_Matrix4_$Impl_$.get(rhs,15);
	var m211 = this1[0];
	var m221 = this1[4];
	var m231 = this1[8];
	var m241 = this1[12];
	var m212 = this1[1];
	var m222 = this1[5];
	var m232 = this1[9];
	var m242 = this1[13];
	var m213 = this1[2];
	var m223 = this1[6];
	var m233 = this1[10];
	var m243 = this1[14];
	var m214 = this1[3];
	var m224 = this1[7];
	var m234 = this1[11];
	var m244 = this1[15];
	this1[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
	this1[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
	this1[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
	this1[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
	this1[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
	this1[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
	this1[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
	this1[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
	this1[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
	this1[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
	this1[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
	this1[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
	this1[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
	this1[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
	this1[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
	this1[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependRotation = function(this1,degrees,axis,pivotPoint) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation(axis.x,axis.y,axis.z,degrees);
	if(pivotPoint != null) {
		lime_math__$Matrix4_Matrix4_$Impl_$.appendTranslation(m,pivotPoint.x,pivotPoint.y,pivotPoint.z);
	}
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependScale = function(this1,xScale,yScale,zScale) {
	var array = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,lime_math__$Matrix4_Matrix4_$Impl_$._new(array != null?new Float32Array(array):null));
};
lime_math__$Matrix4_Matrix4_$Impl_$.prependTranslation = function(this1,x,y,z) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	lime_math__$Matrix4_Matrix4_$Impl_$.set_position(m,new lime_math_Vector4(x,y,z));
	lime_math__$Matrix4_Matrix4_$Impl_$.prepend(this1,m);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVector = function(this1,v) {
	var x = v.x;
	var y = v.y;
	var z = v.z;
	return new lime_math_Vector4(x * this1[0] + y * this1[4] + z * this1[8] + this1[12],x * this1[1] + y * this1[5] + z * this1[9] + this1[13],x * this1[2] + y * this1[6] + z * this1[10] + this1[14],x * this1[3] + y * this1[7] + z * this1[11] + this1[15]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.transformVectors = function(this1,ain,aout) {
	var i = 0;
	while(i + 3 <= ain.length) {
		var x = ain[i];
		var y = ain[i + 1];
		var z = ain[i + 2];
		aout[i] = x * this1[0] + y * this1[4] + z * this1[8] + this1[12];
		aout[i + 1] = x * this1[1] + y * this1[5] + z * this1[9] + this1[13];
		aout[i + 2] = x * this1[2] + y * this1[6] + z * this1[10] + this1[14];
		i += 3;
	}
};
lime_math__$Matrix4_Matrix4_$Impl_$.transpose = function(this1) {
	var othis = this1 != null?new Float32Array(this1):null;
	this1[1] = othis[4];
	this1[2] = othis[8];
	this1[3] = othis[12];
	this1[4] = othis[1];
	this1[6] = othis[9];
	this1[7] = othis[13];
	this1[8] = othis[2];
	this1[9] = othis[6];
	this1[11] = othis[14];
	this1[12] = othis[3];
	this1[13] = othis[7];
	this1[14] = othis[11];
};
lime_math__$Matrix4_Matrix4_$Impl_$.getAxisRotation = function(x,y,z,degrees) {
	var m = lime_math__$Matrix4_Matrix4_$Impl_$._new();
	var a1 = new lime_math_Vector4(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,0,c + a1.x * a1.x * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,5,c + a1.y * a1.y * t);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,10,c + a1.z * a1.z * t);
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,4,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,1,tmp1 - tmp2);
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,8,tmp1 - tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,2,tmp1 + tmp2);
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,9,tmp1 + tmp2);
	lime_math__$Matrix4_Matrix4_$Impl_$.set(m,6,tmp1 - tmp2);
	return m;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_determinant = function(this1) {
	return (this1[0] * this1[5] - this1[4] * this1[1]) * (this1[10] * this1[15] - this1[14] * this1[11]) - (this1[0] * this1[9] - this1[8] * this1[1]) * (this1[6] * this1[15] - this1[14] * this1[7]) + (this1[0] * this1[13] - this1[12] * this1[1]) * (this1[6] * this1[11] - this1[10] * this1[7]) + (this1[4] * this1[9] - this1[8] * this1[5]) * (this1[2] * this1[15] - this1[14] * this1[3]) - (this1[4] * this1[13] - this1[12] * this1[5]) * (this1[2] * this1[11] - this1[10] * this1[3]) + (this1[8] * this1[13] - this1[12] * this1[9]) * (this1[2] * this1[7] - this1[6] * this1[3]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.get_position = function(this1) {
	return new lime_math_Vector4(this1[12],this1[13],this1[14]);
};
lime_math__$Matrix4_Matrix4_$Impl_$.set_position = function(this1,val) {
	this1[12] = val.x;
	this1[13] = val.y;
	this1[14] = val.z;
	return val;
};
lime_math__$Matrix4_Matrix4_$Impl_$.get = function(this1,index) {
	return this1[index];
};
lime_math__$Matrix4_Matrix4_$Impl_$.set = function(this1,index,value) {
	this1[index] = value;
	return value;
};
var lime_math_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["lime.math.Rectangle"] = lime_math_Rectangle;
lime_math_Rectangle.__name__ = ["lime","math","Rectangle"];
lime_math_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
		if(x1 <= x0) {
			return new lime_math_Rectangle();
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
		if(y1 <= y0) {
			return new lime_math_Rectangle();
		}
		return new lime_math_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		if((this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right()) <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		return (this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom()) > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,transform: function(m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		return new lime_math_Rectangle(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x?toUnion.x:this.x;
		var x1 = this.get_right() < toUnion.get_right()?toUnion.get_right():this.get_right();
		var y0 = this.y > toUnion.y?toUnion.y:this.y;
		return new lime_math_Rectangle(x0,y0,x1 - x0,(this.get_bottom() < toUnion.get_bottom()?toUnion.get_bottom():this.get_bottom()) - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
		}
		if(this.y > y) {
			this.y = y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toFlashRectangle: function() {
		return null;
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new lime_math_Vector2(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new lime_math_Vector2(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: lime_math_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var lime_math_Vector2 = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["lime.math.Vector2"] = lime_math_Vector2;
lime_math_Vector2.__name__ = ["lime","math","Vector2"];
lime_math_Vector2.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
lime_math_Vector2.interpolate = function(pt1,pt2,f) {
	return new lime_math_Vector2(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
lime_math_Vector2.polar = function(len,angle) {
	return new lime_math_Vector2(len * Math.cos(angle),len * Math.sin(angle));
};
lime_math_Vector2.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new lime_math_Vector2(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new lime_math_Vector2(this.x - v.x,this.y - v.y);
	}
	,__toFlashPoint: function() {
		return null;
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: lime_math_Vector2
	,__properties__: {get_length:"get_length"}
};
var lime_math_Vector4 = function(x,y,z,w) {
	if(w == null) {
		w = 0.;
	}
	if(z == null) {
		z = 0.;
	}
	if(y == null) {
		y = 0.;
	}
	if(x == null) {
		x = 0.;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["lime.math.Vector4"] = lime_math_Vector4;
lime_math_Vector4.__name__ = ["lime","math","Vector4"];
lime_math_Vector4.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
lime_math_Vector4.X_AXIS = null;
lime_math_Vector4.Y_AXIS = null;
lime_math_Vector4.Z_AXIS = null;
lime_math_Vector4.angleBetween = function(a,b) {
	var a0 = new lime_math_Vector4(a.x,a.y,a.z,a.w);
	var l = Math.sqrt(a0.x * a0.x + a0.y * a0.y + a0.z * a0.z);
	if(l != 0) {
		a0.x /= l;
		a0.y /= l;
		a0.z /= l;
	}
	var b0 = new lime_math_Vector4(b.x,b.y,b.z,b.w);
	var l1 = Math.sqrt(b0.x * b0.x + b0.y * b0.y + b0.z * b0.z);
	if(l1 != 0) {
		b0.x /= l1;
		b0.y /= l1;
		b0.z /= l1;
	}
	return Math.acos(a0.x * b0.x + a0.y * b0.y + a0.z * b0.z);
};
lime_math_Vector4.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
lime_math_Vector4.get_X_AXIS = function() {
	return new lime_math_Vector4(1,0,0);
};
lime_math_Vector4.get_Y_AXIS = function() {
	return new lime_math_Vector4(0,1,0);
};
lime_math_Vector4.get_Z_AXIS = function() {
	return new lime_math_Vector4(0,0,1);
};
lime_math_Vector4.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new lime_math_Vector4(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new lime_math_Vector4(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector4) {
		this.x = sourceVector4.x;
		this.y = sourceVector4.y;
		this.z = sourceVector4.z;
	}
	,crossProduct: function(a) {
		return new lime_math_Vector4(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new lime_math_Vector4(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector4(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: lime_math_Vector4
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var lime_math_color__$ARGB_ARGB_$Impl_$ = {};
$hxClasses["lime.math.color._ARGB.ARGB_Impl_"] = lime_math_color__$ARGB_ARGB_$Impl_$;
lime_math_color__$ARGB_ARGB_$Impl_$.__name__ = ["lime","math","color","_ARGB","ARGB_Impl_"];
lime_math_color__$ARGB_ARGB_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$ARGB_ARGB_$Impl_$.a16 = null;
lime_math_color__$ARGB_ARGB_$Impl_$.unmult = null;
lime_math_color__$ARGB_ARGB_$Impl_$._new = function(argb) {
	if(argb == null) {
		argb = 0;
	}
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.create = function(a,r,g,b) {
	var argb = 0;
	argb = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) == 0) {
		this1 = 0;
	} else if((this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
		this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 1:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 3] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 1] & 255;
		break;
	case 2:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset + 2] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
			this1 = (this1 >> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
		}
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.set = function(this1,a,r,g,b) {
	this1 = (a & 255) << 24 | (r & 255) << 16 | (g & 255) << 8 | b & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 >> 24 & 255) != 0 && (this1 >> 24 & 255) != 255) {
		lime_math_color__$ARGB_ARGB_$Impl_$.unmult = 255.0 / (this1 >> 24 & 255);
		this1 = (this1 >> 24 & 255 & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255) << 8 | lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.unmult)] & 255;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 >> 24 & 255) == 0) {
			this1 = 0;
		} else if((this1 >> 24 & 255) != 255) {
			lime_math_color__$ARGB_ARGB_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 >> 24 & 255];
			this1 = (this1 >> 24 & 255 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255) << 8 | (this1 & 255) * lime_math_color__$ARGB_ARGB_$Impl_$.a16 >> 16 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >> 16 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 1:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 2:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	}
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromBGRA = function(bgra) {
	var argb = 0;
	argb = (bgra & 255 & 255) << 24 | (bgra >> 8 & 255 & 255) << 16 | (bgra >> 16 & 255 & 255) << 8 | bgra >> 24 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.__fromRGBA = function(rgba) {
	var argb = 0;
	argb = (rgba & 255 & 255) << 24 | (rgba >> 24 & 255 & 255) << 16 | (rgba >> 16 & 255 & 255) << 8 | rgba >> 8 & 255 & 255;
	return argb;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_a = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_a = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_b = function(this1) {
	return this1 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_g = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$ARGB_ARGB_$Impl_$.get_r = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$ARGB_ARGB_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$BGRA_BGRA_$Impl_$ = {};
$hxClasses["lime.math.color._BGRA.BGRA_Impl_"] = lime_math_color__$BGRA_BGRA_$Impl_$;
lime_math_color__$BGRA_BGRA_$Impl_$.__name__ = ["lime","math","color","_BGRA","BGRA_Impl_"];
lime_math_color__$BGRA_BGRA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$BGRA_BGRA_$Impl_$.a16 = null;
lime_math_color__$BGRA_BGRA_$Impl_$.unmult = null;
lime_math_color__$BGRA_BGRA_$Impl_$._new = function(bgra) {
	if(bgra == null) {
		bgra = 0;
	}
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.create = function(b,g,r,a) {
	var bgra = 0;
	bgra = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		this1 = 0;
	} else if((this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 3] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 1] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.set = function(this1,b,g,r,a) {
	this1 = (b & 255) << 24 | (g & 255) << 16 | (r & 255) << 8 | a & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$BGRA_BGRA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.floor((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			this1 = 0;
		} else if((this1 & 255) != 255) {
			lime_math_color__$BGRA_BGRA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$BGRA_BGRA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 8 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 24 & 255;
		break;
	case 2:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromARGB = function(argb) {
	var bgra = 0;
	bgra = (argb & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb >> 16 & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.__fromRGBA = function(rgba) {
	var bgra = 0;
	bgra = (rgba >> 8 & 255 & 255) << 24 | (rgba >> 16 & 255 & 255) << 16 | (rgba >> 24 & 255 & 255) << 8 | rgba & 255 & 255;
	return bgra;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_b = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_b = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$BGRA_BGRA_$Impl_$.get_r = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$BGRA_BGRA_$Impl_$.set_r = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_math_color__$RGBA_RGBA_$Impl_$ = {};
$hxClasses["lime.math.color._RGBA.RGBA_Impl_"] = lime_math_color__$RGBA_RGBA_$Impl_$;
lime_math_color__$RGBA_RGBA_$Impl_$.__name__ = ["lime","math","color","_RGBA","RGBA_Impl_"];
lime_math_color__$RGBA_RGBA_$Impl_$.__properties__ = {set_r:"set_r",get_r:"get_r",set_g:"set_g",get_g:"get_g",set_b:"set_b",get_b:"get_b",set_a:"set_a",get_a:"get_a"}
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = null;
lime_math_color__$RGBA_RGBA_$Impl_$.a16 = null;
lime_math_color__$RGBA_RGBA_$Impl_$.unmult = null;
lime_math_color__$RGBA_RGBA_$Impl_$._new = function(rgba) {
	if(rgba == null) {
		rgba = 0;
	}
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.create = function(r,g,b,a) {
	var rgba = 0;
	rgba = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.multiplyAlpha = function(this1) {
	if((this1 & 255) == 0) {
		if(this1 != 0) {
			this1 = 0;
		}
	} else if((this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
		this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.readUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	switch(format) {
	case 0:
		this1 = (data[offset] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset + 2] & 255) << 8 | data[offset + 3] & 255;
		break;
	case 1:
		this1 = (data[offset + 1] & 255) << 24 | (data[offset + 2] & 255) << 16 | (data[offset + 3] & 255) << 8 | data[offset] & 255;
		break;
	case 2:
		this1 = (data[offset + 2] & 255) << 24 | (data[offset + 1] & 255) << 16 | (data[offset] & 255) << 8 | data[offset + 3] & 255;
		break;
	}
	if(premultiplied) {
		if((this1 & 255) != 0 && (this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
			this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
		}
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.set = function(this1,r,g,b,a) {
	this1 = (r & 255) << 24 | (g & 255) << 16 | (b & 255) << 8 | a & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.unmultiplyAlpha = function(this1) {
	if((this1 & 255) != 0 && (this1 & 255) != 255) {
		lime_math_color__$RGBA_RGBA_$Impl_$.unmult = 255.0 / (this1 & 255);
		this1 = (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 24 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 16 | (lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[Math.round((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.unmult)] & 255) << 8 | this1 & 255 & 255;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.writeUInt8 = function(this1,data,offset,format,premultiplied) {
	if(premultiplied == null) {
		premultiplied = false;
	}
	if(format == null) {
		format = 0;
	}
	if(premultiplied) {
		if((this1 & 255) == 0) {
			if(this1 != 0) {
				this1 = 0;
			}
		} else if((this1 & 255) != 255) {
			lime_math_color__$RGBA_RGBA_$Impl_$.a16 = lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[this1 & 255];
			this1 = ((this1 >> 24 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 24 | ((this1 >> 16 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 16 | ((this1 >> 8 & 255) * lime_math_color__$RGBA_RGBA_$Impl_$.a16 >> 16 & 255) << 8 | this1 & 255 & 255;
		}
	}
	switch(format) {
	case 0:
		data[offset] = this1 >> 24 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 8 & 255;
		data[offset + 3] = this1 & 255;
		break;
	case 1:
		data[offset] = this1 & 255;
		data[offset + 1] = this1 >> 24 & 255;
		data[offset + 2] = this1 >> 16 & 255;
		data[offset + 3] = this1 >> 8 & 255;
		break;
	case 2:
		data[offset] = this1 >> 8 & 255;
		data[offset + 1] = this1 >> 16 & 255;
		data[offset + 2] = this1 >> 24 & 255;
		data[offset + 3] = this1 & 255;
		break;
	}
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromARGB = function(argb) {
	var rgba = 0;
	rgba = (argb >> 16 & 255 & 255) << 24 | (argb >> 8 & 255 & 255) << 16 | (argb & 255 & 255) << 8 | argb >> 24 & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.__fromBGRA = function(bgra) {
	var rgba = 0;
	rgba = (bgra >> 8 & 255 & 255) << 24 | (bgra >> 16 & 255 & 255) << 16 | (bgra >> 24 & 255 & 255) << 8 | bgra & 255 & 255;
	return rgba;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_a = function(this1) {
	return this1 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_a = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | value & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_b = function(this1) {
	return this1 >> 8 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_b = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (value & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_g = function(this1) {
	return this1 >> 16 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_g = function(this1,value) {
	this1 = (this1 >> 24 & 255 & 255) << 24 | (value & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
lime_math_color__$RGBA_RGBA_$Impl_$.get_r = function(this1) {
	return this1 >> 24 & 255;
};
lime_math_color__$RGBA_RGBA_$Impl_$.set_r = function(this1,value) {
	this1 = (value & 255) << 24 | (this1 >> 16 & 255 & 255) << 16 | (this1 >> 8 & 255 & 255) << 8 | this1 & 255 & 255;
	return value;
};
var lime_net_HTTPRequest = function() {
	this.promise = new lime_app_Promise();
};
$hxClasses["lime.net.HTTPRequest"] = lime_net_HTTPRequest;
lime_net_HTTPRequest.__name__ = ["lime","net","HTTPRequest"];
lime_net_HTTPRequest.prototype = {
	bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,promise: null
	,load: function(url) {
		var _gthis = this;
		this.bytesLoaded = 0;
		this.bytesTotal = 0;
		var request = new XMLHttpRequest();
		request.addEventListener("progress",$bind(this,this.request_onProgress),false);
		request.onreadystatechange = function() {
			if(request.readyState != 4) {
				return;
			}
			if(request.status != null && request.status >= 200 && request.status <= 400) {
				_gthis.bytes = lime_utils_Bytes.ofData(request.response);
				_gthis.promise.complete(_gthis.bytes);
			} else {
				_gthis.promise.error(request.status);
			}
		};
		request.open("GET",url,true);
		request.responseType = "arraybuffer";
		request.send("");
		return this.promise.future;
	}
	,curl_onProgress: function(dltotal,dlnow,uptotal,upnow) {
		if(upnow > this.bytesLoaded || dlnow > this.bytesLoaded || uptotal > this.bytesTotal || dltotal > this.bytesTotal) {
			if(upnow > this.bytesLoaded) {
				this.bytesLoaded = upnow | 0;
			}
			if(dlnow > this.bytesLoaded) {
				this.bytesLoaded = dlnow | 0;
			}
			if(uptotal > this.bytesTotal) {
				this.bytesTotal = uptotal | 0;
			}
			if(dltotal > this.bytesTotal) {
				this.bytesTotal = dltotal | 0;
			}
			this.promise.progress(this.bytesLoaded / this.bytesTotal);
		}
		return 0;
	}
	,curl_onWrite: function(output,size,nmemb) {
		var cacheBytes = this.bytes;
		this.bytes = lime_utils_Bytes.alloc(this.bytes.length + output.length);
		this.bytes.blit(0,cacheBytes,0,cacheBytes.length);
		this.bytes.blit(cacheBytes.length,output,0,output.length);
		return size * nmemb;
	}
	,request_onProgress: function(event) {
		this.promise.progress(event.loaded / event.total);
	}
	,__class__: lime_net_HTTPRequest
};
var lime_net_curl__$CURL_CURL_$Impl_$ = {};
$hxClasses["lime.net.curl._CURL.CURL_Impl_"] = lime_net_curl__$CURL_CURL_$Impl_$;
lime_net_curl__$CURL_CURL_$Impl_$.__name__ = ["lime","net","curl","_CURL","CURL_Impl_"];
lime_net_curl__$CURL_CURL_$Impl_$.getDate = function(date,now) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.globalCleanup = function() {
};
lime_net_curl__$CURL_CURL_$Impl_$.globalInit = function(flags) {
	return 0;
};
lime_net_curl__$CURL_CURL_$Impl_$.version = function() {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.versionInfo = function(type) {
	return null;
};
lime_net_curl__$CURL_CURL_$Impl_$.intGt = function(a,b) {
	return a > b;
};
var lime_net_curl_CURLEasy = function() { };
$hxClasses["lime.net.curl.CURLEasy"] = lime_net_curl_CURLEasy;
lime_net_curl_CURLEasy.__name__ = ["lime","net","curl","CURLEasy"];
lime_net_curl_CURLEasy.cleanup = function(handle) {
};
lime_net_curl_CURLEasy.duphandle = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.escape = function(handle,url,length) {
	return null;
};
lime_net_curl_CURLEasy.getinfo = function(handle,info) {
	return null;
};
lime_net_curl_CURLEasy.init = function() {
	return 0;
};
lime_net_curl_CURLEasy.pause = function(handle,bitMask) {
	return 0;
};
lime_net_curl_CURLEasy.perform = function(handle) {
	return 0;
};
lime_net_curl_CURLEasy.reset = function(handle) {
};
lime_net_curl_CURLEasy.setopt = function(handle,option,parameter) {
	return 0;
};
lime_net_curl_CURLEasy.strerror = function(code) {
	return null;
};
lime_net_curl_CURLEasy.unescape = function(handle,url,inLength,outLength) {
	return null;
};
lime_net_curl_CURLEasy.__writeCallback = function(callback,output,size,nmemb) {
	return 0;
};
var lime_system_BackgroundWorker = function() {
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
};
$hxClasses["lime.system.BackgroundWorker"] = lime_system_BackgroundWorker;
lime_system_BackgroundWorker.__name__ = ["lime","system","BackgroundWorker"];
lime_system_BackgroundWorker.prototype = {
	canceled: null
	,doWork: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,__runMessage: null
	,cancel: function() {
		this.canceled = true;
	}
	,run: function(message) {
		this.canceled = false;
		this.__runMessage = message;
		this.__doWork();
	}
	,sendComplete: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onComplete.dispatch(message);
		}
	}
	,sendError: function(message) {
		if(!this.canceled) {
			this.canceled = true;
			this.onError.dispatch(message);
		}
	}
	,sendProgress: function(message) {
		if(!this.canceled) {
			this.onProgress.dispatch(message);
		}
	}
	,__doWork: function() {
		this.doWork.dispatch(this.__runMessage);
	}
	,__update: function(deltaTime) {
	}
	,__class__: lime_system_BackgroundWorker
};
var lime_system_CFFI = function() { };
$hxClasses["lime.system.CFFI"] = lime_system_CFFI;
lime_system_CFFI.__name__ = ["lime","system","CFFI"];
lime_system_CFFI.available = null;
lime_system_CFFI.enabled = null;
lime_system_CFFI.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	if(!lime_system_CFFI.enabled) {
		return Reflect.makeVarArgs(function(__) {
			return { };
		});
	}
	return null;
};
lime_system_CFFI.__findHaxelib = function(library) {
	return "";
};
lime_system_CFFI.__loaderTrace = function(message) {
};
lime_system_CFFI.__sysName = function() {
	return null;
};
lime_system_CFFI.__tryLoad = function(name,library,func,args) {
	return null;
};
var lime_system__$CFFIPointer_CFFIPointer_$Impl_$ = {};
$hxClasses["lime.system._CFFIPointer.CFFIPointer_Impl_"] = lime_system__$CFFIPointer_CFFIPointer_$Impl_$;
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.__name__ = ["lime","system","_CFFIPointer","CFFIPointer_Impl_"];
lime_system__$CFFIPointer_CFFIPointer_$Impl_$._new = function(handle) {
	return handle;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get = function(this1) {
	return 0;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.equalsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) == lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) > lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.greaterThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) >= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThan = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) < lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqual = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.lessThanOrEqualPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) <= lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEquals = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != b;
};
lime_system__$CFFIPointer_CFFIPointer_$Impl_$.notEqualsPointer = function(a,b) {
	return lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(a) != lime_system__$CFFIPointer_CFFIPointer_$Impl_$.get(b);
};
var lime_system_Clipboard = function() { };
$hxClasses["lime.system.Clipboard"] = lime_system_Clipboard;
lime_system_Clipboard.__name__ = ["lime","system","Clipboard"];
lime_system_Clipboard.__properties__ = {set_text:"set_text",get_text:"get_text"}
lime_system_Clipboard.get_text = function() {
	return null;
};
lime_system_Clipboard.set_text = function(value) {
	return null;
};
var lime_system_Display = function() {
};
$hxClasses["lime.system.Display"] = lime_system_Display;
lime_system_Display.__name__ = ["lime","system","Display"];
lime_system_Display.prototype = {
	bounds: null
	,currentMode: null
	,id: null
	,dpi: null
	,name: null
	,supportedModes: null
	,__class__: lime_system_Display
};
var lime_system_DisplayMode = function(width,height,refreshRate,pixelFormat) {
	this.width = width;
	this.height = height;
	this.refreshRate = refreshRate;
	this.pixelFormat = pixelFormat;
};
$hxClasses["lime.system.DisplayMode"] = lime_system_DisplayMode;
lime_system_DisplayMode.__name__ = ["lime","system","DisplayMode"];
lime_system_DisplayMode.prototype = {
	height: null
	,pixelFormat: null
	,refreshRate: null
	,width: null
	,__class__: lime_system_DisplayMode
};
var lime_system_Endian = $hxClasses["lime.system.Endian"] = { __ename__ : ["lime","system","Endian"], __constructs__ : ["LITTLE_ENDIAN","BIG_ENDIAN"] };
lime_system_Endian.LITTLE_ENDIAN = ["LITTLE_ENDIAN",0];
lime_system_Endian.LITTLE_ENDIAN.toString = $estr;
lime_system_Endian.LITTLE_ENDIAN.__enum__ = lime_system_Endian;
lime_system_Endian.BIG_ENDIAN = ["BIG_ENDIAN",1];
lime_system_Endian.BIG_ENDIAN.toString = $estr;
lime_system_Endian.BIG_ENDIAN.__enum__ = lime_system_Endian;
var lime_system_System = function() { };
$hxClasses["lime.system.System"] = lime_system_System;
lime_system_System.__name__ = ["lime","system","System"];
lime_system_System.__properties__ = {get_userDirectory:"get_userDirectory",get_numDisplays:"get_numDisplays",get_fontsDirectory:"get_fontsDirectory",get_endianness:"get_endianness",get_documentsDirectory:"get_documentsDirectory",get_desktopDirectory:"get_desktopDirectory",get_applicationStorageDirectory:"get_applicationStorageDirectory",get_applicationDirectory:"get_applicationDirectory",set_allowScreenTimeout:"set_allowScreenTimeout",get_allowScreenTimeout:"get_allowScreenTimeout"}
lime_system_System.applicationDirectory = null;
lime_system_System.applicationStorageDirectory = null;
lime_system_System.desktopDirectory = null;
lime_system_System.disableCFFI = null;
lime_system_System.documentsDirectory = null;
lime_system_System.endianness = null;
lime_system_System.fontsDirectory = null;
lime_system_System.numDisplays = null;
lime_system_System.userDirectory = null;
lime_system_System.embed = $hx_exports["lime"]["embed"] = function(element,width,height,background,assetsPrefix) {
	var htmlElement = null;
	if(typeof(element) == "string") {
		htmlElement = window.document.getElementById(js_Boot.__cast(element , String));
	} else if(element == null) {
		htmlElement = window.document.createElement("div");
	} else {
		htmlElement = element;
	}
	var color = null;
	if(background != null) {
		background = StringTools.replace(background,"#","");
		if(background.indexOf("0x") > -1) {
			color = Std.parseInt(background);
		} else {
			color = Std.parseInt("0x" + background);
		}
	}
	if(width == null) {
		width = 0;
	}
	if(height == null) {
		height = 0;
	}
	ApplicationMain.config.windows[0].background = color;
	ApplicationMain.config.windows[0].element = htmlElement;
	ApplicationMain.config.windows[0].width = width;
	ApplicationMain.config.windows[0].height = height;
	ApplicationMain.config.assetsPrefix = assetsPrefix;
	ApplicationMain.create();
};
lime_system_System.exit = function(code) {
};
lime_system_System.getDisplay = function(id) {
	if(id == 0) {
		var display = new lime_system_Display();
		display.id = 0;
		display.name = "Generic Display";
		display.dpi = 96;
		display.currentMode = new lime_system_DisplayMode(window.screen.width,window.screen.height,60,1);
		display.supportedModes = [display.currentMode];
		display.bounds = new lime_math_Rectangle(0,0,display.currentMode.width,display.currentMode.height);
		return display;
	}
	return null;
};
lime_system_System.getTimer = function() {
	return new Date().getTime();
};
lime_system_System.load = function(library,method,args,lazy) {
	if(lazy == null) {
		lazy = false;
	}
	if(args == null) {
		args = 0;
	}
	return lime_system_CFFI.load(library,method,args,lazy);
};
lime_system_System.get_allowScreenTimeout = function() {
	return true;
};
lime_system_System.set_allowScreenTimeout = function(value) {
	return true;
};
lime_system_System.get_applicationDirectory = function() {
	return null;
};
lime_system_System.get_applicationStorageDirectory = function() {
	var tmp = lime_app_Application.current != null && lime_app_Application.current.config != null;
	return null;
};
lime_system_System.get_desktopDirectory = function() {
	return null;
};
lime_system_System.get_documentsDirectory = function() {
	return null;
};
lime_system_System.get_fontsDirectory = function() {
	return null;
};
lime_system_System.get_numDisplays = function() {
	return 1;
};
lime_system_System.get_userDirectory = function() {
	return null;
};
lime_system_System.get_endianness = function() {
	return lime_system_Endian.LITTLE_ENDIAN;
};
var lime_system_ThreadPool = function(minThreads,maxThreads) {
	if(maxThreads == null) {
		maxThreads = 1;
	}
	if(minThreads == null) {
		minThreads = 0;
	}
	this.onProgress = new lime_app_Event_$Dynamic_$Void();
	this.onError = new lime_app_Event_$Dynamic_$Void();
	this.onComplete = new lime_app_Event_$Dynamic_$Void();
	this.doWork = new lime_app_Event_$Dynamic_$Void();
	this.minThreads = minThreads;
	this.maxThreads = maxThreads;
	this.currentThreads = 0;
};
$hxClasses["lime.system.ThreadPool"] = lime_system_ThreadPool;
lime_system_ThreadPool.__name__ = ["lime","system","ThreadPool"];
lime_system_ThreadPool.prototype = {
	currentThreads: null
	,doWork: null
	,maxThreads: null
	,minThreads: null
	,onComplete: null
	,onError: null
	,onProgress: null
	,queue: function(state) {
		this.doWork.dispatch(state);
	}
	,sendComplete: function(state) {
		this.onComplete.dispatch(state);
	}
	,sendError: function(state) {
		this.onError.dispatch(state);
	}
	,sendProgress: function(state) {
		this.onProgress.dispatch(state);
	}
	,__class__: lime_system_ThreadPool
};
var lime_system__$ThreadPool_ThreadPoolMessageType = $hxClasses["lime.system._ThreadPool.ThreadPoolMessageType"] = { __ename__ : ["lime","system","_ThreadPool","ThreadPoolMessageType"], __constructs__ : ["COMPLETE","ERROR","EXIT","PROGRESS","WORK"] };
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE = ["COMPLETE",0];
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.COMPLETE.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR = ["ERROR",1];
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.ERROR.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT = ["EXIT",2];
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.EXIT.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS = ["PROGRESS",3];
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.PROGRESS.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK = ["WORK",4];
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.toString = $estr;
lime_system__$ThreadPool_ThreadPoolMessageType.WORK.__enum__ = lime_system__$ThreadPool_ThreadPoolMessageType;
var lime_system__$ThreadPool_ThreadPoolMessage = function(type,state) {
	this.type = type;
	this.state = state;
};
$hxClasses["lime.system._ThreadPool.ThreadPoolMessage"] = lime_system__$ThreadPool_ThreadPoolMessage;
lime_system__$ThreadPool_ThreadPoolMessage.__name__ = ["lime","system","_ThreadPool","ThreadPoolMessage"];
lime_system__$ThreadPool_ThreadPoolMessage.prototype = {
	state: null
	,type: null
	,__class__: lime_system__$ThreadPool_ThreadPoolMessage
};
var lime_text__$Glyph_Glyph_$Impl_$ = {};
$hxClasses["lime.text._Glyph.Glyph_Impl_"] = lime_text__$Glyph_Glyph_$Impl_$;
lime_text__$Glyph_Glyph_$Impl_$.__name__ = ["lime","text","_Glyph","Glyph_Impl_"];
lime_text__$Glyph_Glyph_$Impl_$._new = function(i) {
	return i;
};
var lime_text_GlyphMetrics = function() {
};
$hxClasses["lime.text.GlyphMetrics"] = lime_text_GlyphMetrics;
lime_text_GlyphMetrics.__name__ = ["lime","text","GlyphMetrics"];
lime_text_GlyphMetrics.prototype = {
	advance: null
	,height: null
	,horizontalBearing: null
	,verticalBearing: null
	,__class__: lime_text_GlyphMetrics
};
var lime_text_GlyphPosition = function(glyph,advance,offset) {
	this.glyph = glyph;
	this.advance = advance;
	if(offset != null) {
		this.offset = offset;
	} else {
		this.offset = new lime_math_Vector2();
	}
};
$hxClasses["lime.text.GlyphPosition"] = lime_text_GlyphPosition;
lime_text_GlyphPosition.__name__ = ["lime","text","GlyphPosition"];
lime_text_GlyphPosition.prototype = {
	advance: null
	,glyph: null
	,offset: null
	,__class__: lime_text_GlyphPosition
};
var lime_text__$TextDirection_TextDirection_$Impl_$ = {};
$hxClasses["lime.text._TextDirection.TextDirection_Impl_"] = lime_text__$TextDirection_TextDirection_$Impl_$;
lime_text__$TextDirection_TextDirection_$Impl_$.__name__ = ["lime","text","_TextDirection","TextDirection_Impl_"];
lime_text__$TextDirection_TextDirection_$Impl_$.__properties__ = {get_vertical:"get_vertical",get_horizontal:"get_horizontal",get_forward:"get_forward",get_backward:"get_backward"}
lime_text__$TextDirection_TextDirection_$Impl_$.reverse = function(this1) {
	this1 ^= 1;
};
lime_text__$TextDirection_TextDirection_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 4:
		return "leftToRight";
	case 5:
		return "rightToLeft";
	case 6:
		return "topToBottom";
	case 7:
		return "bottomToTop";
	default:
		return "";
	}
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_backward = function(this1) {
	return (this1 & -3) == 5;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_forward = function(this1) {
	return (this1 & -3) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_horizontal = function(this1) {
	return (this1 & -2) == 4;
};
lime_text__$TextDirection_TextDirection_$Impl_$.get_vertical = function(this1) {
	return (this1 & -2) == 6;
};
var lime_text_TextLayout = function(text,font,size,direction,script,language) {
	if(language == null) {
		language = "en";
	}
	if(script == null) {
		script = "Zyyy";
	}
	if(direction == null) {
		direction = 4;
	}
	if(size == null) {
		size = 12;
	}
	if(text == null) {
		text = "";
	}
	this.set_text(text);
	this.set_font(font);
	this.set_size(size);
	this.__direction = direction;
	this.__script = script;
	this.__language = language;
	this.positions = [];
	this.__dirty = true;
};
$hxClasses["lime.text.TextLayout"] = lime_text_TextLayout;
lime_text_TextLayout.__name__ = ["lime","text","TextLayout"];
lime_text_TextLayout.prototype = {
	font: null
	,glyphs: null
	,positions: null
	,size: null
	,text: null
	,__dirty: null
	,__buffer: null
	,__direction: null
	,__handle: null
	,__language: null
	,__script: null
	,__position: function() {
		this.positions = [];
	}
	,get_positions: function() {
		if(this.__dirty) {
			this.__dirty = false;
			this.__position();
		}
		return this.positions;
	}
	,get_direction: function() {
		return this.__direction;
	}
	,set_direction: function(value) {
		if(value == this.__direction) {
			return value;
		}
		this.__direction = value;
		this.__dirty = true;
		return value;
	}
	,set_font: function(value) {
		if(value == this.font) {
			return value;
		}
		this.font = value;
		this.__dirty = true;
		return value;
	}
	,get_glyphs: function() {
		var glyphs = [];
		var _g = 0;
		var _g1 = this.get_positions();
		while(_g < _g1.length) {
			var position = _g1[_g];
			++_g;
			glyphs.push(position.glyph);
		}
		return glyphs;
	}
	,get_language: function() {
		return this.__language;
	}
	,set_language: function(value) {
		if(value == this.__language) {
			return value;
		}
		this.__language = value;
		this.__dirty = true;
		return value;
	}
	,get_script: function() {
		return this.__script;
	}
	,set_script: function(value) {
		if(value == this.__script) {
			return value;
		}
		this.__script = value;
		this.__dirty = true;
		return value;
	}
	,set_size: function(value) {
		if(value == this.size) {
			return value;
		}
		this.size = value;
		this.__dirty = true;
		return value;
	}
	,set_text: function(value) {
		if(value == this.text) {
			return value;
		}
		this.text = value;
		this.__dirty = true;
		return value;
	}
	,__class__: lime_text_TextLayout
	,__properties__: {set_text:"set_text",set_size:"set_size",set_script:"set_script",get_script:"get_script",get_positions:"get_positions",set_language:"set_language",get_language:"get_language",get_glyphs:"get_glyphs",set_font:"set_font",set_direction:"set_direction",get_direction:"get_direction"}
};
var lime_text__$TextScript_TextScript_$Impl_$ = {};
$hxClasses["lime.text._TextScript.TextScript_Impl_"] = lime_text__$TextScript_TextScript_$Impl_$;
lime_text__$TextScript_TextScript_$Impl_$.__name__ = ["lime","text","_TextScript","TextScript_Impl_"];
lime_text__$TextScript_TextScript_$Impl_$.__properties__ = {get_rightToLeft:"get_rightToLeft"}
lime_text__$TextScript_TextScript_$Impl_$.get_rightToLeft = function(this1) {
	switch(this1) {
	case "Arab":case "Armi":case "Avst":case "Cprt":case "Hebr":case "Khar":case "Lydi":case "Mand":case "Nkoo":case "Orkh":case "Phli":case "Phlp":case "Phnx":case "Samr":case "Sarb":case "Syrc":case "Thaa":
		return true;
	default:
		return false;
	}
};
var lime_ui_Gamepad = function(id) {
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onButtonDown = new lime_app_Event_$lime_$ui_$GamepadButton_$Void();
	this.onAxisMove = new lime_app_Event_$lime_$ui_$GamepadAxis_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Gamepad"] = lime_ui_Gamepad;
lime_ui_Gamepad.__name__ = ["lime","ui","Gamepad"];
lime_ui_Gamepad.addMappings = function(mappings) {
};
lime_ui_Gamepad.__connect = function(id) {
	if(!lime_ui_Gamepad.devices.h.hasOwnProperty(id)) {
		var gamepad = new lime_ui_Gamepad(id);
		lime_ui_Gamepad.devices.h[id] = gamepad;
		lime_ui_Gamepad.onConnect.dispatch(gamepad);
	}
};
lime_ui_Gamepad.__disconnect = function(id) {
	var gamepad = lime_ui_Gamepad.devices.h[id];
	if(gamepad != null) {
		gamepad.connected = false;
	}
	lime_ui_Gamepad.devices.remove(id);
	if(gamepad != null) {
		gamepad.onDisconnect.dispatch();
	}
};
lime_ui_Gamepad.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,get_guid: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_name: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,__class__: lime_ui_Gamepad
	,__properties__: {get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$GamepadAxis_GamepadAxis_$Impl_$ = {};
$hxClasses["lime.ui._GamepadAxis.GamepadAxis_Impl_"] = lime_ui__$GamepadAxis_GamepadAxis_$Impl_$;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.__name__ = ["lime","ui","_GamepadAxis","GamepadAxis_Impl_"];
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "LEFT_X";
	case 1:
		return "LEFT_Y";
	case 2:
		return "RIGHT_X";
	case 3:
		return "RIGHT_Y";
	case 4:
		return "TRIGGER_LEFT";
	case 5:
		return "TRIGGER_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui__$GamepadButton_GamepadButton_$Impl_$ = {};
$hxClasses["lime.ui._GamepadButton.GamepadButton_Impl_"] = lime_ui__$GamepadButton_GamepadButton_$Impl_$;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.__name__ = ["lime","ui","_GamepadButton","GamepadButton_Impl_"];
lime_ui__$GamepadButton_GamepadButton_$Impl_$.toString = function(this1) {
	switch(this1) {
	case 0:
		return "A";
	case 1:
		return "B";
	case 2:
		return "X";
	case 3:
		return "Y";
	case 4:
		return "BACK";
	case 5:
		return "GUIDE";
	case 6:
		return "START";
	case 7:
		return "LEFT_STICK";
	case 8:
		return "RIGHT_STICK";
	case 9:
		return "LEFT_SHOULDER";
	case 10:
		return "RIGHT_SHOULDER";
	case 11:
		return "DPAD_UP";
	case 12:
		return "DPAD_DOWN";
	case 13:
		return "DPAD_LEFT";
	case 14:
		return "DPAD_RIGHT";
	default:
		return "UNKNOWN (" + this1 + ")";
	}
};
var lime_ui_Joystick = function(id) {
	this.onTrackballMove = new lime_app_Event_$Int_$Float_$Void();
	this.onHatMove = new lime_app_Event_$Int_$lime_$ui_$JoystickHatPosition_$Void();
	this.onDisconnect = new lime_app_Event_$Void_$Void();
	this.onButtonUp = new lime_app_Event_$Int_$Void();
	this.onButtonDown = new lime_app_Event_$Int_$Void();
	this.onAxisMove = new lime_app_Event_$Int_$Float_$Void();
	this.id = id;
	this.connected = true;
};
$hxClasses["lime.ui.Joystick"] = lime_ui_Joystick;
lime_ui_Joystick.__name__ = ["lime","ui","Joystick"];
lime_ui_Joystick.__connect = function(id) {
	if(!lime_ui_Joystick.devices.h.hasOwnProperty(id)) {
		var joystick = new lime_ui_Joystick(id);
		lime_ui_Joystick.devices.h[id] = joystick;
		lime_ui_Joystick.onConnect.dispatch(joystick);
	}
};
lime_ui_Joystick.__disconnect = function(id) {
	var joystick = lime_ui_Joystick.devices.h[id];
	if(joystick != null) {
		joystick.connected = false;
	}
	lime_ui_Joystick.devices.remove(id);
	if(joystick != null) {
		joystick.onDisconnect.dispatch();
	}
};
lime_ui_Joystick.__getDeviceData = function() {
	if(navigator.getGamepads) {
		return navigator.getGamepads();
	} else if(navigator.webkitGetGamepads) {
		return navigator.webkitGetGamepads();
	} else {
		return null;
	}
};
lime_ui_Joystick.prototype = {
	connected: null
	,id: null
	,onAxisMove: null
	,onButtonDown: null
	,onButtonUp: null
	,onDisconnect: null
	,onHatMove: null
	,onTrackballMove: null
	,get_guid: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_name: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].id;
	}
	,get_numAxes: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].axes.length;
	}
	,get_numButtons: function() {
		return lime_ui_Joystick.__getDeviceData()[this.id].buttons.length;
	}
	,get_numHats: function() {
		return 0;
	}
	,get_numTrackballs: function() {
		return 0;
	}
	,__class__: lime_ui_Joystick
	,__properties__: {get_numTrackballs:"get_numTrackballs",get_numHats:"get_numHats",get_numButtons:"get_numButtons",get_numAxes:"get_numAxes",get_name:"get_name",get_guid:"get_guid"}
};
var lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$ = {};
$hxClasses["lime.ui._JoystickHatPosition.JoystickHatPosition_Impl_"] = lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__name__ = ["lime","ui","_JoystickHatPosition","JoystickHatPosition_Impl_"];
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.__properties__ = {set_up:"set_up",get_up:"get_up",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_down:"set_down",get_down:"get_down",set_center:"set_center",get_center:"get_center"}
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$._new = function(value) {
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_center = function(this1) {
	return this1 == 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_center = function(this1,value) {
	if(value) {
		this1 = 0;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_down = function(this1) {
	return (this1 & 4) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_down = function(this1,value) {
	if(value) {
		this1 |= 4;
	} else {
		this1 &= 268435451;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_left = function(this1) {
	return (this1 & 8) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_left = function(this1,value) {
	if(value) {
		this1 |= 8;
	} else {
		this1 &= 268435447;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_right = function(this1) {
	return (this1 & 2) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_right = function(this1,value) {
	if(value) {
		this1 |= 2;
	} else {
		this1 &= 268435453;
	}
	return value;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.get_up = function(this1) {
	return (this1 & 1) > 0;
};
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.set_up = function(this1,value) {
	if(value) {
		this1 |= 1;
	} else {
		this1 &= 268435454;
	}
	return value;
};
var lime_ui__$KeyCode_KeyCode_$Impl_$ = {};
$hxClasses["lime.ui._KeyCode.KeyCode_Impl_"] = lime_ui__$KeyCode_KeyCode_$Impl_$;
lime_ui__$KeyCode_KeyCode_$Impl_$.__name__ = ["lime","ui","_KeyCode","KeyCode_Impl_"];
lime_ui__$KeyCode_KeyCode_$Impl_$.gt = function(a,b) {
	return a > b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.gte = function(a,b) {
	return a >= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lt = function(a,b) {
	return a < b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.lte = function(a,b) {
	return a <= b;
};
lime_ui__$KeyCode_KeyCode_$Impl_$.plus = function(a,b) {
	return a + b;
};
var lime_ui__$KeyModifier_KeyModifier_$Impl_$ = {};
$hxClasses["lime.ui._KeyModifier.KeyModifier_Impl_"] = lime_ui__$KeyModifier_KeyModifier_$Impl_$;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__name__ = ["lime","ui","_KeyModifier","KeyModifier_Impl_"];
lime_ui__$KeyModifier_KeyModifier_$Impl_$.__properties__ = {set_shiftKey:"set_shiftKey",get_shiftKey:"get_shiftKey",set_numLock:"set_numLock",get_numLock:"get_numLock",set_metaKey:"set_metaKey",get_metaKey:"get_metaKey",set_ctrlKey:"set_ctrlKey",get_ctrlKey:"get_ctrlKey",set_capsLock:"set_capsLock",get_capsLock:"get_capsLock",set_altKey:"set_altKey",get_altKey:"get_altKey"}
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey = function(this1) {
	if((this1 & 256) <= 0) {
		return (this1 & 512) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_altKey = function(this1,value) {
	if(value) {
		this1 |= 768;
	} else {
		this1 &= 268434687;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_capsLock = function(this1) {
	if((this1 & 8192) <= 0) {
		return (this1 & 8192) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_capsLock = function(this1,value) {
	if(value) {
		this1 |= 8192;
	} else {
		this1 &= 268427263;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey = function(this1) {
	if((this1 & 64) <= 0) {
		return (this1 & 128) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_ctrlKey = function(this1,value) {
	if(value) {
		this1 |= 192;
	} else {
		this1 &= 268435263;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey = function(this1) {
	if((this1 & 1024) <= 0) {
		return (this1 & 2048) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_metaKey = function(this1,value) {
	if(value) {
		this1 |= 3072;
	} else {
		this1 &= 268432383;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_numLock = function(this1) {
	if((this1 & 4096) <= 0) {
		return (this1 & 4096) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_numLock = function(this1,value) {
	if(value) {
		this1 |= 4096;
	} else {
		this1 &= 268431359;
	}
	return value;
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey = function(this1) {
	if((this1 & 1) <= 0) {
		return (this1 & 2) > 0;
	} else {
		return true;
	}
};
lime_ui__$KeyModifier_KeyModifier_$Impl_$.set_shiftKey = function(this1,value) {
	if(value) {
		this1 |= 3;
	} else {
		this1 &= 268435452;
	}
	return value;
};
var lime_ui_Mouse = function() { };
$hxClasses["lime.ui.Mouse"] = lime_ui_Mouse;
lime_ui_Mouse.__name__ = ["lime","ui","Mouse"];
lime_ui_Mouse.__properties__ = {set_lock:"set_lock",get_lock:"get_lock",set_cursor:"set_cursor",get_cursor:"get_cursor"}
lime_ui_Mouse.hide = function() {
	lime__$backend_html5_HTML5Mouse.hide();
};
lime_ui_Mouse.show = function() {
	lime__$backend_html5_HTML5Mouse.show();
};
lime_ui_Mouse.warp = function(x,y,window) {
	lime__$backend_html5_HTML5Mouse.warp(x,y,window);
};
lime_ui_Mouse.get_cursor = function() {
	return lime__$backend_html5_HTML5Mouse.get_cursor();
};
lime_ui_Mouse.set_cursor = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_cursor(value);
};
lime_ui_Mouse.get_lock = function() {
	return lime__$backend_html5_HTML5Mouse.get_lock();
};
lime_ui_Mouse.set_lock = function(value) {
	return lime__$backend_html5_HTML5Mouse.set_lock(value);
};
var lime_ui_MouseCursor = $hxClasses["lime.ui.MouseCursor"] = { __ename__ : ["lime","ui","MouseCursor"], __constructs__ : ["ARROW","CROSSHAIR","DEFAULT","MOVE","POINTER","RESIZE_NESW","RESIZE_NS","RESIZE_NWSE","RESIZE_WE","TEXT","WAIT","WAIT_ARROW","CUSTOM"] };
lime_ui_MouseCursor.ARROW = ["ARROW",0];
lime_ui_MouseCursor.ARROW.toString = $estr;
lime_ui_MouseCursor.ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CROSSHAIR = ["CROSSHAIR",1];
lime_ui_MouseCursor.CROSSHAIR.toString = $estr;
lime_ui_MouseCursor.CROSSHAIR.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.DEFAULT = ["DEFAULT",2];
lime_ui_MouseCursor.DEFAULT.toString = $estr;
lime_ui_MouseCursor.DEFAULT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.MOVE = ["MOVE",3];
lime_ui_MouseCursor.MOVE.toString = $estr;
lime_ui_MouseCursor.MOVE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.POINTER = ["POINTER",4];
lime_ui_MouseCursor.POINTER.toString = $estr;
lime_ui_MouseCursor.POINTER.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NESW = ["RESIZE_NESW",5];
lime_ui_MouseCursor.RESIZE_NESW.toString = $estr;
lime_ui_MouseCursor.RESIZE_NESW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NS = ["RESIZE_NS",6];
lime_ui_MouseCursor.RESIZE_NS.toString = $estr;
lime_ui_MouseCursor.RESIZE_NS.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_NWSE = ["RESIZE_NWSE",7];
lime_ui_MouseCursor.RESIZE_NWSE.toString = $estr;
lime_ui_MouseCursor.RESIZE_NWSE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.RESIZE_WE = ["RESIZE_WE",8];
lime_ui_MouseCursor.RESIZE_WE.toString = $estr;
lime_ui_MouseCursor.RESIZE_WE.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.TEXT = ["TEXT",9];
lime_ui_MouseCursor.TEXT.toString = $estr;
lime_ui_MouseCursor.TEXT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT = ["WAIT",10];
lime_ui_MouseCursor.WAIT.toString = $estr;
lime_ui_MouseCursor.WAIT.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.WAIT_ARROW = ["WAIT_ARROW",11];
lime_ui_MouseCursor.WAIT_ARROW.toString = $estr;
lime_ui_MouseCursor.WAIT_ARROW.__enum__ = lime_ui_MouseCursor;
lime_ui_MouseCursor.CUSTOM = ["CUSTOM",12];
lime_ui_MouseCursor.CUSTOM.toString = $estr;
lime_ui_MouseCursor.CUSTOM.__enum__ = lime_ui_MouseCursor;
var lime_ui_Touch = function(x,y,id,dx,dy,pressure,device) {
	this.x = x;
	this.y = y;
	this.id = id;
	this.dx = dx;
	this.dy = dy;
	this.pressure = pressure;
	this.device = device;
};
$hxClasses["lime.ui.Touch"] = lime_ui_Touch;
lime_ui_Touch.__name__ = ["lime","ui","Touch"];
lime_ui_Touch.prototype = {
	device: null
	,dx: null
	,dy: null
	,id: null
	,pressure: null
	,x: null
	,y: null
	,__class__: lime_ui_Touch
};
var lime_ui_Window = function(config) {
	this.onTextInput = new lime_app_Event_$String_$Void();
	this.onTextEdit = new lime_app_Event_$String_$Int_$Int_$Void();
	this.onRestore = new lime_app_Event_$Void_$Void();
	this.onResize = new lime_app_Event_$Int_$Int_$Void();
	this.onMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseWheel = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseUp = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMouseMoveRelative = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseMove = new lime_app_Event_$Float_$Float_$Void();
	this.onMouseDown = new lime_app_Event_$Float_$Float_$Int_$Void();
	this.onMinimize = new lime_app_Event_$Void_$Void();
	this.onLeave = new lime_app_Event_$Void_$Void();
	this.onKeyUp = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onKeyDown = new lime_app_Event_$lime_$ui_$KeyCode_$lime_$ui_$KeyModifier_$Void();
	this.onFullscreen = new lime_app_Event_$Void_$Void();
	this.onFocusOut = new lime_app_Event_$Void_$Void();
	this.onFocusIn = new lime_app_Event_$Void_$Void();
	this.onEnter = new lime_app_Event_$Void_$Void();
	this.onDropFile = new lime_app_Event_$String_$Void();
	this.onDeactivate = new lime_app_Event_$Void_$Void();
	this.onCreate = new lime_app_Event_$Void_$Void();
	this.onClose = new lime_app_Event_$Void_$Void();
	this.onActivate = new lime_app_Event_$Void_$Void();
	this.config = config;
	this.__width = 0;
	this.__height = 0;
	this.__fullscreen = false;
	this.__scale = 1;
	this.__x = 0;
	this.__y = 0;
	this.__title = "";
	this.id = -1;
	if(config != null) {
		if(Object.prototype.hasOwnProperty.call(config,"width")) {
			this.__width = config.width;
		}
		if(Object.prototype.hasOwnProperty.call(config,"height")) {
			this.__height = config.height;
		}
		if(Object.prototype.hasOwnProperty.call(config,"x")) {
			this.__x = config.x;
		}
		if(Object.prototype.hasOwnProperty.call(config,"y")) {
			this.__y = config.y;
		}
		if(Object.prototype.hasOwnProperty.call(config,"fullscreen")) {
			this.__fullscreen = config.fullscreen;
		}
		if(Object.prototype.hasOwnProperty.call(config,"borderless")) {
			this.__borderless = config.borderless;
		}
		if(Object.prototype.hasOwnProperty.call(config,"resizable")) {
			this.__resizable = config.resizable;
		}
		if(Object.prototype.hasOwnProperty.call(config,"title")) {
			this.__title = config.title;
		}
	}
	this.backend = new lime__$backend_html5_HTML5Window(this);
};
$hxClasses["lime.ui.Window"] = lime_ui_Window;
lime_ui_Window.__name__ = ["lime","ui","Window"];
lime_ui_Window.prototype = {
	application: null
	,config: null
	,display: null
	,id: null
	,onActivate: null
	,onClose: null
	,onCreate: null
	,onDeactivate: null
	,onDropFile: null
	,onEnter: null
	,onFocusIn: null
	,onFocusOut: null
	,onFullscreen: null
	,onKeyDown: null
	,onKeyUp: null
	,onLeave: null
	,onMinimize: null
	,onMouseDown: null
	,onMouseMove: null
	,onMouseMoveRelative: null
	,onMouseUp: null
	,onMouseWheel: null
	,onMove: null
	,onResize: null
	,onRestore: null
	,onTextEdit: null
	,onTextInput: null
	,renderer: null
	,scale: null
	,stage: null
	,backend: null
	,__borderless: null
	,__fullscreen: null
	,__height: null
	,__maximized: null
	,__minimized: null
	,__resizable: null
	,__scale: null
	,__title: null
	,__width: null
	,__x: null
	,__y: null
	,alert: function(message,title) {
		this.backend.alert(message,title);
	}
	,close: function() {
		this.backend.close();
	}
	,create: function(application) {
		this.application = application;
		this.backend.create(application);
		if(this.renderer != null) {
			this.renderer.create();
		}
	}
	,focus: function() {
		this.backend.focus();
	}
	,move: function(x,y) {
		this.backend.move(x,y);
		this.__x = x;
		this.__y = y;
	}
	,resize: function(width,height) {
		this.backend.resize(width,height);
		this.__width = width;
		this.__height = height;
	}
	,setIcon: function(image) {
		if(image == null) {
			return;
		}
		this.backend.setIcon(image);
	}
	,toString: function() {
		return "[object Window]";
	}
	,get_display: function() {
		return this.backend.getDisplay();
	}
	,get_borderless: function() {
		return this.__borderless;
	}
	,set_borderless: function(value) {
		return this.__borderless = this.backend.setBorderless(value);
	}
	,get_enableTextEvents: function() {
		return this.backend.getEnableTextEvents();
	}
	,set_enableTextEvents: function(value) {
		return this.backend.setEnableTextEvents(value);
	}
	,get_fullscreen: function() {
		return this.__fullscreen;
	}
	,set_fullscreen: function(value) {
		return this.__fullscreen = this.backend.setFullscreen(value);
	}
	,get_height: function() {
		return this.__height;
	}
	,set_height: function(value) {
		this.resize(this.__width,value);
		return this.__height;
	}
	,get_maximized: function() {
		return this.__maximized;
	}
	,set_maximized: function(value) {
		this.__minimized = false;
		return this.__maximized = this.backend.setMaximized(value);
	}
	,get_minimized: function() {
		return this.__minimized;
	}
	,set_minimized: function(value) {
		this.__maximized = false;
		return this.__minimized = this.backend.setMinimized(value);
	}
	,get_resizable: function() {
		return this.__resizable;
	}
	,set_resizable: function(value) {
		this.__resizable = this.backend.setResizable(value);
		return this.__resizable;
	}
	,get_scale: function() {
		return this.__scale;
	}
	,get_title: function() {
		return this.__title;
	}
	,set_title: function(value) {
		return this.__title = this.backend.setTitle(this.__title);
	}
	,get_width: function() {
		return this.__width;
	}
	,set_width: function(value) {
		this.resize(value,this.__height);
		return this.__width;
	}
	,get_x: function() {
		return this.__x;
	}
	,set_x: function(value) {
		this.move(value,this.__y);
		return this.__x;
	}
	,get_y: function() {
		return this.__y;
	}
	,set_y: function(value) {
		this.move(this.__x,value);
		return this.__y;
	}
	,__class__: lime_ui_Window
	,__properties__: {set_y:"set_y",get_y:"get_y",set_x:"set_x",get_x:"get_x",set_width:"set_width",get_width:"get_width",set_title:"set_title",get_title:"get_title",get_scale:"get_scale",set_resizable:"set_resizable",get_resizable:"get_resizable",set_minimized:"set_minimized",get_minimized:"get_minimized",set_maximized:"set_maximized",get_maximized:"get_maximized",set_height:"set_height",get_height:"get_height",set_fullscreen:"set_fullscreen",get_fullscreen:"get_fullscreen",set_enableTextEvents:"set_enableTextEvents",get_enableTextEvents:"get_enableTextEvents",get_display:"get_display",set_borderless:"set_borderless",get_borderless:"get_borderless"}
};
var lime_utils_TAError = $hxClasses["lime.utils.TAError"] = { __ename__ : ["lime","utils","TAError"], __constructs__ : ["RangeError"] };
lime_utils_TAError.RangeError = ["RangeError",0];
lime_utils_TAError.RangeError.toString = $estr;
lime_utils_TAError.RangeError.__enum__ = lime_utils_TAError;
var lime_utils_Bytes = function(length,bytesData) {
	haxe_io_Bytes.call(this,bytesData);
};
$hxClasses["lime.utils.Bytes"] = lime_utils_Bytes;
lime_utils_Bytes.__name__ = ["lime","utils","Bytes"];
lime_utils_Bytes.alloc = function(length) {
	var bytes = new haxe_io_Bytes(new ArrayBuffer(length));
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.fastGet = function(b,pos) {
	return b.bytes[pos];
};
lime_utils_Bytes.ofData = function(b) {
	var bytes = haxe_io_Bytes.ofData(b);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.ofString = function(s) {
	var bytes = haxe_io_Bytes.ofString(s);
	return new lime_utils_Bytes(bytes.length,bytes.b.bufferValue);
};
lime_utils_Bytes.readFile = function(path) {
	return null;
};
lime_utils_Bytes.lime_bytes_from_data_pointer = function(data,length) {
	return lime_utils_Bytes.cffi_lime_bytes_from_data_pointer(data,length);
};
lime_utils_Bytes.lime_bytes_get_data_pointer = function(data) {
	return lime_utils_Bytes.cffi_lime_bytes_get_data_pointer(data);
};
lime_utils_Bytes.lime_bytes_read_file = function(path) {
	return lime_utils_Bytes.cffi_lime_bytes_read_file(path);
};
lime_utils_Bytes.__super__ = haxe_io_Bytes;
lime_utils_Bytes.prototype = $extend(haxe_io_Bytes.prototype,{
	__class__: lime_utils_Bytes
});
var lime_utils__$Float32Array_Float32Array_$Impl_$ = {};
$hxClasses["lime.utils._Float32Array.Float32Array_Impl_"] = lime_utils__$Float32Array_Float32Array_$Impl_$;
lime_utils__$Float32Array_Float32Array_$Impl_$.__name__ = ["lime","utils","_Float32Array","Float32Array_Impl_"];
lime_utils__$Float32Array_Float32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Float32Array_Float32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Float32Array_Float32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Float32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Float32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Float32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Float32Array_Float32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Float32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_GLUtils = function() { };
$hxClasses["lime.utils.GLUtils"] = lime_utils_GLUtils;
lime_utils_GLUtils.__name__ = ["lime","utils","GLUtils"];
lime_utils_GLUtils.compileShader = function(source,type) {
	var shader = lime_graphics_opengl_GL.context.createShader(type);
	lime_graphics_opengl_GL.context.shaderSource(shader,source);
	lime_graphics_opengl_GL.context.compileShader(shader);
	if(lime_graphics_opengl_GL.context.getShaderParameter(shader,35713) == 0) {
		switch(type) {
		case 35632:
			throw new js__$Boot_HaxeError("Error compiling fragment shader");
			break;
		case 35633:
			throw new js__$Boot_HaxeError("Error compiling vertex shader");
			break;
		default:
			throw new js__$Boot_HaxeError("Error compiling unknown shader type");
		}
	}
	return shader;
};
lime_utils_GLUtils.createProgram = function(vertexSource,fragmentSource) {
	var vertexShader = lime_utils_GLUtils.compileShader(vertexSource,35633);
	var fragmentShader = lime_utils_GLUtils.compileShader(fragmentSource,35632);
	var program = lime_graphics_opengl_GL.context.createProgram();
	lime_graphics_opengl_GL.context.attachShader(program,vertexShader);
	lime_graphics_opengl_GL.context.attachShader(program,fragmentShader);
	lime_graphics_opengl_GL.context.linkProgram(program);
	if(lime_graphics_opengl_GL.context.getProgramParameter(program,35714) == 0) {
		throw new js__$Boot_HaxeError("Unable to initialize the shader program.");
	}
	return program;
};
var lime_utils__$Int16Array_Int16Array_$Impl_$ = {};
$hxClasses["lime.utils._Int16Array.Int16Array_Impl_"] = lime_utils__$Int16Array_Int16Array_$Impl_$;
lime_utils__$Int16Array_Int16Array_$Impl_$.__name__ = ["lime","utils","_Int16Array","Int16Array_Impl_"];
lime_utils__$Int16Array_Int16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int16Array_Int16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int16Array_Int16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int16Array_Int16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$Int32Array_Int32Array_$Impl_$ = {};
$hxClasses["lime.utils._Int32Array.Int32Array_Impl_"] = lime_utils__$Int32Array_Int32Array_$Impl_$;
lime_utils__$Int32Array_Int32Array_$Impl_$.__name__ = ["lime","utils","_Int32Array","Int32Array_Impl_"];
lime_utils__$Int32Array_Int32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$Int32Array_Int32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$Int32Array_Int32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Int32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Int32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Int32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$Int32Array_Int32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "Int32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils_LZMA = function() { };
$hxClasses["lime.utils.LZMA"] = lime_utils_LZMA;
lime_utils_LZMA.__name__ = ["lime","utils","LZMA"];
lime_utils_LZMA.decode = function(bytes) {
	return null;
};
lime_utils_LZMA.encode = function(bytes) {
	return null;
};
var lime_utils__$UInt16Array_UInt16Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt16Array.UInt16Array_Impl_"] = lime_utils__$UInt16Array_UInt16Array_$Impl_$;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__name__ = ["lime","utils","_UInt16Array","UInt16Array_Impl_"];
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint16Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint16Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint16Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt16Array_UInt16Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt16Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt32Array_UInt32Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt32Array.UInt32Array_Impl_"] = lime_utils__$UInt32Array_UInt32Array_$Impl_$;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__name__ = ["lime","utils","_UInt32Array","UInt32Array_Impl_"];
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		byteOffset = 0;
	}
	if(byteOffset == null) {
		return new Uint32Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint32Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint32Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt32Array_UInt32Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt32Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var lime_utils__$UInt8Array_UInt8Array_$Impl_$ = {};
$hxClasses["lime.utils._UInt8Array.UInt8Array_Impl_"] = lime_utils__$UInt8Array_UInt8Array_$Impl_$;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__name__ = ["lime","utils","_UInt8Array","UInt8Array_Impl_"];
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__set = function(this1,idx,val) {
	return this1[idx] = val;
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.__get = function(this1,idx) {
	return this1[idx];
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.fromBytes = function(bytes,byteOffset,len) {
	if(byteOffset == null) {
		return new Uint8Array(bytes.b.bufferValue);
	}
	if(len == null) {
		return new Uint8Array(bytes.b.bufferValue,byteOffset);
	}
	return new Uint8Array(bytes.b.bufferValue,byteOffset,len);
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toBytes = function(this1) {
	return new haxe_io_Bytes(new Uint8Array(this1.buffer));
};
lime_utils__$UInt8Array_UInt8Array_$Impl_$.toString = function(this1) {
	if(this1 != null) {
		return "UInt8Array [byteLength:" + this1.byteLength + ", length:" + this1.length + "]";
	} else {
		return null;
	}
};
var motion_actuators_IGenericActuator = function() { };
$hxClasses["motion.actuators.IGenericActuator"] = motion_actuators_IGenericActuator;
motion_actuators_IGenericActuator.__name__ = ["motion","actuators","IGenericActuator"];
motion_actuators_IGenericActuator.prototype = {
	autoVisible: null
	,delay: null
	,ease: null
	,onComplete: null
	,onRepeat: null
	,onUpdate: null
	,reflect: null
	,repeat: null
	,reverse: null
	,smartRotation: null
	,snapping: null
	,onPause: null
	,onResume: null
	,apply: null
	,move: null
	,pause: null
	,resume: null
	,stop: null
	,__class__: motion_actuators_IGenericActuator
};
var motion_actuators_GenericActuator = function(target,duration,properties) {
	this._autoVisible = true;
	this._delay = 0;
	this._reflect = false;
	this._repeat = 0;
	this._reverse = false;
	this._smartRotation = false;
	this._snapping = false;
	this.special = false;
	this.target = target;
	this.properties = properties;
	this.duration = duration;
	this._ease = motion_Actuate.defaultEase;
};
$hxClasses["motion.actuators.GenericActuator"] = motion_actuators_GenericActuator;
motion_actuators_GenericActuator.__name__ = ["motion","actuators","GenericActuator"];
motion_actuators_GenericActuator.__interfaces__ = [motion_actuators_IGenericActuator];
motion_actuators_GenericActuator.prototype = {
	duration: null
	,id: null
	,properties: null
	,target: null
	,_autoVisible: null
	,_delay: null
	,_ease: null
	,_onComplete: null
	,_onCompleteParams: null
	,_onRepeat: null
	,_onRepeatParams: null
	,_onUpdate: null
	,_onUpdateParams: null
	,_onResume: null
	,_onResumeParams: null
	,_onPause: null
	,_onPauseParams: null
	,_reflect: null
	,_repeat: null
	,_reverse: null
	,_smartRotation: null
	,_snapping: null
	,special: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,i)) {
				this.target[i] = Reflect.field(this.properties,i);
			} else {
				var o = this.target;
				var value = Reflect.field(this.properties,i);
				var tmp;
				var tmp1;
				if(o.__properties__) {
					tmp = o.__properties__["set_" + i];
					tmp1 = tmp;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					o[tmp](value);
				} else {
					o[i] = value;
				}
			}
		}
	}
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		return this;
	}
	,callMethod: function(method,params) {
		if(params == null) {
			params = [];
		}
		return method.apply(method,params);
	}
	,change: function() {
		if(this._onUpdate != null) {
			var method = this._onUpdate;
			var params = this._onUpdateParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		if(sendEvent) {
			this.change();
			if(this._onComplete != null) {
				var method = this._onComplete;
				var params = this._onCompleteParams;
				if(params == null) {
					params = [];
				}
				method.apply(method,params);
			}
		}
		motion_Actuate.unload(this);
	}
	,delay: function(duration) {
		this._delay = duration;
		return this;
	}
	,ease: function(easing) {
		this._ease = easing;
		return this;
	}
	,move: function() {
	}
	,onComplete: function(handler,parameters) {
		this._onComplete = handler;
		if(parameters == null) {
			this._onCompleteParams = [];
		} else {
			this._onCompleteParams = parameters;
		}
		if(this.duration == 0) {
			this.complete();
		}
		return this;
	}
	,onRepeat: function(handler,parameters) {
		this._onRepeat = handler;
		if(parameters == null) {
			this._onRepeatParams = [];
		} else {
			this._onRepeatParams = parameters;
		}
		return this;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		return this;
	}
	,onPause: function(handler,parameters) {
		this._onPause = handler;
		if(parameters == null) {
			this._onPauseParams = [];
		} else {
			this._onPauseParams = parameters;
		}
		return this;
	}
	,onResume: function(handler,parameters) {
		this._onResume = handler;
		if(parameters == null) {
			this._onResumeParams = [];
		} else {
			this._onResumeParams = parameters;
		}
		return this;
	}
	,pause: function() {
		if(this._onPause != null) {
			var method = this._onPause;
			var params = this._onPauseParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reflect: function(value) {
		if(value == null) {
			value = true;
		}
		this._reflect = value;
		this.special = true;
		return this;
	}
	,repeat: function(times) {
		if(times == null) {
			times = -1;
		}
		this._repeat = times;
		return this;
	}
	,resume: function() {
		if(this._onResume != null) {
			var method = this._onResume;
			var params = this._onResumeParams;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,reverse: function(value) {
		if(value == null) {
			value = true;
		}
		this._reverse = value;
		this.special = true;
		return this;
	}
	,smartRotation: function(value) {
		if(value == null) {
			value = true;
		}
		this._smartRotation = value;
		this.special = true;
		return this;
	}
	,snapping: function(value) {
		if(value == null) {
			value = true;
		}
		this._snapping = value;
		this.special = true;
		return this;
	}
	,stop: function(properties,complete,sendEvent) {
	}
	,__class__: motion_actuators_GenericActuator
};
var motion_actuators_SimpleActuator = function(target,duration,properties) {
	this.active = true;
	this.propertyDetails = [];
	this.sendChange = false;
	this.paused = false;
	this.cacheVisible = false;
	this.initialized = false;
	this.setVisible = false;
	this.toggleVisible = false;
	this.startTime = openfl_Lib.getTimer() / 1000;
	motion_actuators_GenericActuator.call(this,target,duration,properties);
	if(!motion_actuators_SimpleActuator.addedEvent) {
		motion_actuators_SimpleActuator.addedEvent = true;
		openfl_Lib.current.stage.addEventListener("enterFrame",motion_actuators_SimpleActuator.stage_onEnterFrame);
	}
};
$hxClasses["motion.actuators.SimpleActuator"] = motion_actuators_SimpleActuator;
motion_actuators_SimpleActuator.__name__ = ["motion","actuators","SimpleActuator"];
motion_actuators_SimpleActuator.stage_onEnterFrame = function(event) {
	var currentTime = openfl_Lib.getTimer() / 1000;
	var actuator;
	var j = 0;
	var _g1 = 0;
	var _g = motion_actuators_SimpleActuator.actuatorsLength;
	while(_g1 < _g) {
		++_g1;
		actuator = motion_actuators_SimpleActuator.actuators[j];
		if(actuator != null && actuator.active) {
			if(currentTime >= actuator.timeOffset) {
				actuator.update(currentTime);
			}
			++j;
		} else {
			motion_actuators_SimpleActuator.actuators.splice(j,1);
			--motion_actuators_SimpleActuator.actuatorsLength;
		}
	}
};
motion_actuators_SimpleActuator.__super__ = motion_actuators_GenericActuator;
motion_actuators_SimpleActuator.prototype = $extend(motion_actuators_GenericActuator.prototype,{
	setField_openfl_geom_Transform: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_TransformActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_MotionPathActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_openfl_display_DisplayObject: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,setField_motion_actuators_SimpleActuator_T: function(target,propertyName,value) {
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			target[propertyName] = value;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + propertyName];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](value);
			} else {
				target[propertyName] = value;
			}
		}
	}
	,timeOffset: null
	,active: null
	,cacheVisible: null
	,detailsLength: null
	,initialized: null
	,paused: null
	,pauseTime: null
	,propertyDetails: null
	,sendChange: null
	,setVisible: null
	,startTime: null
	,toggleVisible: null
	,autoVisible: function(value) {
		if(value == null) {
			value = true;
		}
		this._autoVisible = value;
		if(!value) {
			this.toggleVisible = false;
			if(this.setVisible) {
				var target = this.target;
				var value1 = this.cacheVisible;
				if(Object.prototype.hasOwnProperty.call(target,"visible")) {
					target.visible = value1;
				} else {
					var tmp;
					var tmp1;
					if(target.__properties__) {
						tmp = target.__properties__["set_" + "visible"];
						tmp1 = tmp;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						target[tmp](value1);
					} else {
						target.visible = value1;
					}
				}
			}
		}
		return this;
	}
	,delay: function(duration) {
		this._delay = duration;
		this.timeOffset = this.startTime + duration;
		return this;
	}
	,getField: function(target,propertyName) {
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
			value = Reflect.field(target,propertyName);
		} else {
			var tmp;
			var tmp1;
			if(target == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + propertyName];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = target[tmp]();
				} else {
					tmp1 = target[propertyName];
				}
			}
			value = tmp1;
		}
		return value;
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var i = _g1[_g];
			++_g;
			var isField = true;
			if(Object.prototype.hasOwnProperty.call(this.target,i) && !(this.target.__properties__ && this.target.__properties__["set_" + i])) {
				start = Reflect.field(this.target,i);
			} else {
				isField = false;
				var o = this.target;
				var tmp;
				if(o == null) {
					start = null;
				} else {
					var tmp1;
					if(o.__properties__) {
						tmp = o.__properties__["get_" + i];
						tmp1 = tmp;
					} else {
						tmp1 = false;
					}
					if(tmp1) {
						start = o[tmp]();
					} else {
						start = o[i];
					}
				}
			}
			if(typeof(start) == "number") {
				var target = this.properties;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,i)) {
					value = Reflect.field(target,i);
				} else {
					var tmp2;
					var tmp3;
					if(target == null) {
						tmp3 = null;
					} else {
						var tmp4;
						if(target.__properties__) {
							tmp2 = target.__properties__["get_" + i];
							tmp4 = tmp2;
						} else {
							tmp4 = false;
						}
						if(tmp4) {
							tmp3 = target[tmp2]();
						} else {
							tmp3 = target[i];
						}
					}
					value = tmp3;
				}
				var value1 = value;
				if(start == null) {
					start = 0;
				}
				if(value1 == null) {
					value1 = 0;
				}
				details = new motion_actuators_PropertyDetails(this.target,i,start,value1 - start,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,move: function() {
		this.toggleVisible = Object.prototype.hasOwnProperty.call(this.properties,"alpha") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject);
		var tmp;
		if(this.toggleVisible && this.properties.alpha != 0) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"visible")) {
				value = Reflect.field(target,"visible");
			} else {
				var tmp1;
				var tmp2;
				if(target == null) {
					tmp2 = null;
				} else {
					var tmp3;
					if(target.__properties__) {
						tmp1 = target.__properties__["get_" + "visible"];
						tmp3 = tmp1;
					} else {
						tmp3 = false;
					}
					if(tmp3) {
						tmp2 = target[tmp1]();
					} else {
						tmp2 = target.visible;
					}
				}
				value = tmp2;
			}
			tmp = !value;
		} else {
			tmp = false;
		}
		if(tmp) {
			this.setVisible = true;
			var target1 = this.target;
			var value1 = null;
			if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
				value1 = Reflect.field(target1,"visible");
			} else {
				var tmp4;
				var tmp5;
				if(target1 == null) {
					tmp5 = null;
				} else {
					var tmp6;
					if(target1.__properties__) {
						tmp4 = target1.__properties__["get_" + "visible"];
						tmp6 = tmp4;
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						tmp5 = target1[tmp4]();
					} else {
						tmp5 = target1.visible;
					}
				}
				value1 = tmp5;
			}
			this.cacheVisible = value1;
			var target2 = this.target;
			if(Object.prototype.hasOwnProperty.call(target2,"visible")) {
				target2.visible = true;
			} else {
				var tmp7;
				var tmp8;
				if(target2.__properties__) {
					tmp7 = target2.__properties__["set_" + "visible"];
					tmp8 = tmp7;
				} else {
					tmp8 = false;
				}
				if(tmp8) {
					target2[tmp7](true);
				} else {
					target2.visible = true;
				}
			}
		}
		this.timeOffset = this.startTime;
		motion_actuators_SimpleActuator.actuators.push(this);
		++motion_actuators_SimpleActuator.actuatorsLength;
	}
	,onUpdate: function(handler,parameters) {
		this._onUpdate = handler;
		if(parameters == null) {
			this._onUpdateParams = [];
		} else {
			this._onUpdateParams = parameters;
		}
		this.sendChange = true;
		return this;
	}
	,pause: function() {
		if(!this.paused) {
			this.paused = true;
			motion_actuators_GenericActuator.prototype.pause.call(this);
			this.pauseTime = openfl_Lib.getTimer();
		}
	}
	,resume: function() {
		if(this.paused) {
			this.paused = false;
			this.timeOffset += (openfl_Lib.getTimer() - this.pauseTime) / 1000;
			motion_actuators_GenericActuator.prototype.resume.call(this);
		}
	}
	,setProperty: function(details,value) {
		if(details.isField) {
			details.target[details.propertyName] = value;
		} else {
			var o = details.target;
			var field = details.propertyName;
			var tmp;
			var tmp1;
			if(o.__properties__) {
				tmp = o.__properties__["set_" + field];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				o[tmp](value);
			} else {
				o[field] = value;
			}
		}
	}
	,stop: function(properties,complete,sendEvent) {
		if(this.active) {
			if(properties == null) {
				this.active = false;
				if(complete) {
					this.apply();
				}
				this.complete(sendEvent);
				return;
			}
			var _g = 0;
			var _g1 = Reflect.fields(properties);
			while(_g < _g1.length) {
				var i = _g1[_g];
				++_g;
				if(Object.prototype.hasOwnProperty.call(this.properties,i)) {
					this.active = false;
					if(complete) {
						this.apply();
					}
					this.complete(sendEvent);
					return;
				}
			}
		}
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var i;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g1 = 0;
				var _g = this.detailsLength;
				while(_g1 < _g) {
					details = this.propertyDetails[_g1++];
					var value = details.start + details.change * easing;
					if(details.isField) {
						details.target[details.propertyName] = value;
					} else {
						var o = details.target;
						var field = details.propertyName;
						var tmp;
						var tmp1;
						if(o.__properties__) {
							tmp = o.__properties__["set_" + field];
							tmp1 = tmp;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							o[tmp](value);
						} else {
							o[field] = value;
						}
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g11 = 0;
				var _g2 = this.detailsLength;
				while(_g11 < _g2) {
					details = this.propertyDetails[_g11++];
					if(this._smartRotation && (details.propertyName == "rotation" || details.propertyName == "rotationX" || details.propertyName == "rotationY" || details.propertyName == "rotationZ")) {
						var rotation = details.change % 360;
						if(rotation > 180) {
							rotation -= 360;
						} else if(rotation < -180) {
							rotation += 360;
						}
						endValue = details.start + rotation * easing;
					} else {
						endValue = details.start + details.change * easing;
					}
					if(!this._snapping) {
						if(details.isField) {
							details.target[details.propertyName] = endValue;
						} else {
							var o1 = details.target;
							var field1 = details.propertyName;
							var tmp2;
							var tmp3;
							if(o1.__properties__) {
								tmp2 = o1.__properties__["set_" + field1];
								tmp3 = tmp2;
							} else {
								tmp3 = false;
							}
							if(tmp3) {
								o1[tmp2](endValue);
							} else {
								o1[field1] = endValue;
							}
						}
					} else {
						var value1 = Math.round(endValue);
						if(details.isField) {
							details.target[details.propertyName] = value1;
						} else {
							var o2 = details.target;
							var field2 = details.propertyName;
							var tmp4;
							var tmp5;
							if(o2.__properties__) {
								tmp4 = o2.__properties__["set_" + field2];
								tmp5 = tmp4;
							} else {
								tmp5 = false;
							}
							if(tmp5) {
								o2[tmp4](value1);
							} else {
								o2[field2] = value1;
							}
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp6;
					if(this.toggleVisible) {
						var target = this.target;
						var value2 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value2 = Reflect.field(target,"alpha");
						} else {
							var tmp7;
							var tmp8;
							if(target == null) {
								tmp8 = null;
							} else {
								var tmp9;
								if(target.__properties__) {
									tmp7 = target.__properties__["get_" + "alpha"];
									tmp9 = tmp7;
								} else {
									tmp9 = false;
								}
								if(tmp9) {
									tmp8 = target[tmp7]();
								} else {
									tmp8 = target.alpha;
								}
							}
							value2 = tmp8;
						}
						tmp6 = value2 == 0;
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1.visible = false;
						} else {
							var tmp10;
							var tmp11;
							if(target1.__properties__) {
								tmp10 = target1.__properties__["set_" + "visible"];
								tmp11 = tmp10;
							} else {
								tmp11 = false;
							}
							if(tmp11) {
								target1[tmp10](false);
							} else {
								target1.visible = false;
							}
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_SimpleActuator
});
var motion_easing_Expo = function() { };
$hxClasses["motion.easing.Expo"] = motion_easing_Expo;
motion_easing_Expo.__name__ = ["motion","easing","Expo"];
motion_easing_Expo.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Expo.get_easeIn = function() {
	return new motion_easing_ExpoEaseIn();
};
motion_easing_Expo.get_easeInOut = function() {
	return new motion_easing_ExpoEaseInOut();
};
motion_easing_Expo.get_easeOut = function() {
	return new motion_easing_ExpoEaseOut();
};
var motion_easing_IEasing = function() { };
$hxClasses["motion.easing.IEasing"] = motion_easing_IEasing;
motion_easing_IEasing.__name__ = ["motion","easing","IEasing"];
motion_easing_IEasing.prototype = {
	calculate: null
	,ease: null
	,__class__: motion_easing_IEasing
};
var motion_easing_ExpoEaseOut = function() {
};
$hxClasses["motion.easing.ExpoEaseOut"] = motion_easing_ExpoEaseOut;
motion_easing_ExpoEaseOut.__name__ = ["motion","easing","ExpoEaseOut"];
motion_easing_ExpoEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseOut.prototype = {
	calculate: function(k) {
		if(k == 1) {
			return 1;
		} else {
			return 1 - Math.pow(2,-10 * k);
		}
	}
	,ease: function(t,b,c,d) {
		if(t == d) {
			return b + c;
		} else {
			return c * (1 - Math.pow(2,-10 * t / d)) + b;
		}
	}
	,__class__: motion_easing_ExpoEaseOut
};
var motion_Actuate = function() { };
$hxClasses["motion.Actuate"] = motion_Actuate;
motion_Actuate.__name__ = ["motion","Actuate"];
motion_Actuate.apply = function(target,properties,customActuator) {
	motion_Actuate.stop(target,properties);
	if(customActuator == null) {
		customActuator = motion_Actuate.defaultActuator;
	}
	var actuator = Type.createInstance(customActuator,[target,0,properties]);
	actuator.apply();
	return actuator;
};
motion_Actuate.effects = function(target,duration,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return new motion__$Actuate_EffectsOptions(target,duration,overwrite);
};
motion_Actuate.getLibrary = function(target,allowCreation) {
	if(allowCreation == null) {
		allowCreation = true;
	}
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] == null && allowCreation) {
		motion_Actuate.targetLibraries.set(target,[]);
	}
	return motion_Actuate.targetLibraries.h[target.__id__];
};
motion_Actuate.isActive = function() {
	var result = false;
	var tmp = motion_Actuate.targetLibraries.iterator();
	while(tmp.hasNext()) {
		tmp.next();
		result = true;
		break;
	}
	return result;
};
motion_Actuate.motionPath = function(target,duration,properties,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MotionPathActuator);
};
motion_Actuate.pause = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		target.pause();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator = library[_g];
				++_g;
				actuator.pause();
			}
		}
	}
};
motion_Actuate.pauseAll = function() {
	var tmp = motion_Actuate.targetLibraries.iterator();
	while(tmp.hasNext()) {
		var library = tmp.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.pause();
		}
	}
};
motion_Actuate.reset = function() {
	var tmp = motion_Actuate.targetLibraries.iterator();
	while(tmp.hasNext()) {
		var library = tmp.next();
		var i = library.length - 1;
		while(i >= 0) {
			library[i].stop(null,false,false);
			--i;
		}
	}
	motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
};
motion_Actuate.resume = function(target) {
	if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
		target.resume();
	} else {
		var library = motion_Actuate.getLibrary(target,false);
		if(library != null) {
			var _g = 0;
			while(_g < library.length) {
				var actuator = library[_g];
				++_g;
				actuator.resume();
			}
		}
	}
};
motion_Actuate.resumeAll = function() {
	var tmp = motion_Actuate.targetLibraries.iterator();
	while(tmp.hasNext()) {
		var library = tmp.next();
		var _g = 0;
		while(_g < library.length) {
			var actuator = library[_g];
			++_g;
			actuator.resume();
		}
	}
};
motion_Actuate.stop = function(target,properties,complete,sendEvent) {
	if(sendEvent == null) {
		sendEvent = true;
	}
	if(complete == null) {
		complete = false;
	}
	if(target != null) {
		if(js_Boot.__instanceof(target,motion_actuators_IGenericActuator)) {
			target.stop(null,complete,sendEvent);
		} else {
			var library = motion_Actuate.getLibrary(target,false);
			if(library != null) {
				if(typeof(properties) == "string") {
					var temp = { };
					temp[properties] = null;
					properties = temp;
				} else if((properties instanceof Array) && properties.__enum__ == null) {
					var temp1 = { };
					var _g = 0;
					var _g1 = js_Boot.__cast(properties , Array);
					while(_g < _g1.length) {
						var property = _g1[_g];
						++_g;
						temp1[property] = null;
					}
					properties = temp1;
				}
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(properties,complete,sendEvent);
					--i;
				}
			}
		}
	}
};
motion_Actuate.timer = function(duration,customActuator) {
	return motion_Actuate.tween(new motion__$Actuate_TweenTimer(0),duration,new motion__$Actuate_TweenTimer(1),false,customActuator);
};
motion_Actuate.transform = function(target,duration,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(duration == null) {
		duration = 0;
	}
	return new motion__$Actuate_TransformOptions(target,duration,overwrite);
};
motion_Actuate.tween = function(target,duration,properties,overwrite,customActuator) {
	if(overwrite == null) {
		overwrite = true;
	}
	if(target != null) {
		if(duration > 0) {
			if(customActuator == null) {
				customActuator = motion_Actuate.defaultActuator;
			}
			var actuator = Type.createInstance(customActuator,[target,duration,properties]);
			var library = motion_Actuate.getLibrary(actuator.target);
			if(overwrite) {
				var i = library.length - 1;
				while(i >= 0) {
					library[i].stop(actuator.properties,false,false);
					--i;
				}
				library = motion_Actuate.getLibrary(actuator.target);
			}
			library.push(actuator);
			actuator.move();
			return actuator;
		} else {
			return motion_Actuate.apply(target,properties,customActuator);
		}
	}
	return null;
};
motion_Actuate.unload = function(actuator) {
	var target = actuator.target;
	if(motion_Actuate.targetLibraries.h.__keys__[target.__id__] != null) {
		HxOverrides.remove(motion_Actuate.targetLibraries.h[target.__id__],actuator);
		if(motion_Actuate.targetLibraries.h[target.__id__].length == 0) {
			motion_Actuate.targetLibraries.remove(target);
		}
	}
};
motion_Actuate.update = function(target,duration,start,end,overwrite) {
	if(overwrite == null) {
		overwrite = true;
	}
	var properties = { start : start, end : end};
	return motion_Actuate.tween(target,duration,properties,overwrite,motion_actuators_MethodActuator);
};
var motion__$Actuate_EffectsOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.EffectsOptions"] = motion__$Actuate_EffectsOptions;
motion__$Actuate_EffectsOptions.__name__ = ["motion","_Actuate","EffectsOptions"];
motion__$Actuate_EffectsOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,filter: function(reference,properties) {
		properties.filter = reference;
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_FilterActuator);
	}
	,__class__: motion__$Actuate_EffectsOptions
};
var motion__$Actuate_TransformOptions = function(target,duration,overwrite) {
	this.target = target;
	this.duration = duration;
	this.overwrite = overwrite;
};
$hxClasses["motion._Actuate.TransformOptions"] = motion__$Actuate_TransformOptions;
motion__$Actuate_TransformOptions.__name__ = ["motion","_Actuate","TransformOptions"];
motion__$Actuate_TransformOptions.prototype = {
	duration: null
	,overwrite: null
	,target: null
	,color: function(value,strength,alpha) {
		if(strength == null) {
			strength = 1;
		}
		if(value == null) {
			value = 0;
		}
		var properties = { colorValue : value, colorStrength : strength};
		if(alpha != null) {
			properties.colorAlpha = alpha;
		}
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,sound: function(volume,pan) {
		var properties = { };
		if(volume != null) {
			properties.soundVolume = volume;
		}
		if(pan != null) {
			properties.soundPan = pan;
		}
		return motion_Actuate.tween(this.target,this.duration,properties,this.overwrite,motion_actuators_TransformActuator);
	}
	,__class__: motion__$Actuate_TransformOptions
};
var motion__$Actuate_TweenTimer = function(progress) {
	this.progress = progress;
};
$hxClasses["motion._Actuate.TweenTimer"] = motion__$Actuate_TweenTimer;
motion__$Actuate_TweenTimer.__name__ = ["motion","_Actuate","TweenTimer"];
motion__$Actuate_TweenTimer.prototype = {
	progress: null
	,__class__: motion__$Actuate_TweenTimer
};
var motion_MotionPath = function() {
	this._x = new motion_ComponentPath();
	this._y = new motion_ComponentPath();
	this._rotation = null;
};
$hxClasses["motion.MotionPath"] = motion_MotionPath;
motion_MotionPath.__name__ = ["motion","MotionPath"];
motion_MotionPath.prototype = {
	rotation: null
	,x: null
	,y: null
	,_rotation: null
	,_x: null
	,_y: null
	,bezier: function(x,y,controlX,controlY,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion_BezierPath(x,controlX,strength));
		this._y.addPath(new motion_BezierPath(y,controlY,strength));
		return this;
	}
	,line: function(x,y,strength) {
		if(strength == null) {
			strength = 1;
		}
		this._x.addPath(new motion_LinearPath(x,strength));
		this._y.addPath(new motion_LinearPath(y,strength));
		return this;
	}
	,get_rotation: function() {
		if(this._rotation == null) {
			this._rotation = new motion_RotationPath(this._x,this._y);
		}
		return this._rotation;
	}
	,get_x: function() {
		return this._x;
	}
	,get_y: function() {
		return this._y;
	}
	,__class__: motion_MotionPath
	,__properties__: {get_y:"get_y",get_x:"get_x",get_rotation:"get_rotation"}
};
var motion_IComponentPath = function() { };
$hxClasses["motion.IComponentPath"] = motion_IComponentPath;
motion_IComponentPath.__name__ = ["motion","IComponentPath"];
motion_IComponentPath.prototype = {
	get_end: null
	,end: null
	,start: null
	,calculate: null
	,__class__: motion_IComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_ComponentPath = function() {
	this.paths = [];
	this.start = 0;
	this.totalStrength = 0;
};
$hxClasses["motion.ComponentPath"] = motion_ComponentPath;
motion_ComponentPath.__name__ = ["motion","ComponentPath"];
motion_ComponentPath.__interfaces__ = [motion_IComponentPath];
motion_ComponentPath.prototype = {
	start: null
	,end: null
	,paths: null
	,totalStrength: null
	,addPath: function(path) {
		this.paths.push(path);
		this.totalStrength += path.strength;
	}
	,calculate: function(k) {
		if(this.paths.length == 1) {
			return this.paths[0].calculate(this.start,k);
		} else {
			var ratio = k * this.totalStrength;
			var lastEnd = this.start;
			var _g = 0;
			var _g1 = this.paths;
			while(_g < _g1.length) {
				var path = _g1[_g];
				++_g;
				if(ratio > path.strength) {
					ratio -= path.strength;
					lastEnd = path.end;
				} else {
					return path.calculate(lastEnd,ratio / path.strength);
				}
			}
		}
		return 0;
	}
	,get_end: function() {
		if(this.paths.length > 0) {
			return this.paths[this.paths.length - 1].end;
		} else {
			return this.start;
		}
	}
	,__class__: motion_ComponentPath
	,__properties__: {get_end:"get_end"}
};
var motion_BezierPath = function(end,control,strength) {
	this.end = end;
	this.control = control;
	this.strength = strength;
};
$hxClasses["motion.BezierPath"] = motion_BezierPath;
motion_BezierPath.__name__ = ["motion","BezierPath"];
motion_BezierPath.prototype = {
	control: null
	,end: null
	,strength: null
	,calculate: function(start,k) {
		return (1 - k) * (1 - k) * start + 2 * (1 - k) * k * this.control + k * k * this.end;
	}
	,__class__: motion_BezierPath
};
var motion_LinearPath = function(end,strength) {
	motion_BezierPath.call(this,end,0,strength);
};
$hxClasses["motion.LinearPath"] = motion_LinearPath;
motion_LinearPath.__name__ = ["motion","LinearPath"];
motion_LinearPath.__super__ = motion_BezierPath;
motion_LinearPath.prototype = $extend(motion_BezierPath.prototype,{
	calculate: function(start,k) {
		return start + k * (this.end - start);
	}
	,__class__: motion_LinearPath
});
var motion_RotationPath = function(x,y) {
	this.step = 0.01;
	this._x = x;
	this._y = y;
	this.offset = 0;
	this.start = this.calculate(0.0);
};
$hxClasses["motion.RotationPath"] = motion_RotationPath;
motion_RotationPath.__name__ = ["motion","RotationPath"];
motion_RotationPath.__interfaces__ = [motion_IComponentPath];
motion_RotationPath.prototype = {
	end: null
	,offset: null
	,start: null
	,step: null
	,_x: null
	,_y: null
	,calculate: function(k) {
		var dX = this._x.calculate(k) - this._x.calculate(k + this.step);
		var angle = Math.atan2(this._y.calculate(k) - this._y.calculate(k + this.step),dX) * (180 / Math.PI);
		angle = (angle + this.offset) % 360;
		return angle;
	}
	,get_end: function() {
		return this.calculate(1.0);
	}
	,__class__: motion_RotationPath
	,__properties__: {get_end:"get_end"}
};
var motion_actuators_FilterActuator = function(target,duration,properties) {
	this.filterIndex = -1;
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(js_Boot.__instanceof(properties.filter,Class)) {
		this.filterClass = properties.filter;
		if(target.get_filters().length == 0) {
			target.set_filters([Type.createInstance(this.filterClass,[])]);
		}
		var _g = 0;
		var _g1 = target.get_filters();
		while(_g < _g1.length) {
			var filter = _g1[_g];
			++_g;
			if(js_Boot.__instanceof(filter,this.filterClass)) {
				this.filter = filter;
			}
		}
	} else {
		this.filterIndex = properties.filter;
		this.filter = target.get_filters()[this.filterIndex];
	}
};
$hxClasses["motion.actuators.FilterActuator"] = motion_actuators_FilterActuator;
motion_actuators_FilterActuator.__name__ = ["motion","actuators","FilterActuator"];
motion_actuators_FilterActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_FilterActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	filter: null
	,filterClass: null
	,filterIndex: null
	,apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				this.filter[propertyName] = Reflect.field(this.properties,propertyName);
			}
		}
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"filters")) {
			value = Reflect.field(target,"filters");
		} else {
			var tmp;
			var tmp1;
			if(target == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + "filters"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = target[tmp]();
				} else {
					tmp1 = target.filters;
				}
			}
			value = tmp1;
		}
		var filters = value;
		filters[this.properties.filter] = this.filter;
		var target1 = this.target;
		if(Object.prototype.hasOwnProperty.call(target1,"filters")) {
			target1.filters = filters;
		} else {
			var tmp3;
			var tmp4;
			if(target1.__properties__) {
				tmp3 = target1.__properties__["set_" + "filters"];
				tmp4 = tmp3;
			} else {
				tmp4 = false;
			}
			if(tmp4) {
				target1[tmp3](filters);
			} else {
				target1.filters = filters;
			}
		}
	}
	,initialize: function() {
		var details;
		var start;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(propertyName != "filter") {
				var target = this.filter;
				var value = null;
				if(Object.prototype.hasOwnProperty.call(target,propertyName)) {
					value = Reflect.field(target,propertyName);
				} else {
					var tmp;
					var tmp1;
					if(target == null) {
						tmp1 = null;
					} else {
						var tmp2;
						if(target.__properties__) {
							tmp = target.__properties__["get_" + propertyName];
							tmp2 = tmp;
						} else {
							tmp2 = false;
						}
						if(tmp2) {
							tmp1 = target[tmp]();
						} else {
							tmp1 = target[propertyName];
						}
					}
					value = tmp1;
				}
				start = value;
				details = new motion_actuators_PropertyDetails(this.filter,propertyName,start,Reflect.field(this.properties,propertyName) - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		var filters = this.target.get_filters();
		if(this.filterIndex > -1) {
			filters[this.properties.filter] = this.filter;
		} else {
			var _g1 = 0;
			var _g = filters.length;
			while(_g1 < _g) {
				var i = _g1++;
				if(js_Boot.__instanceof(filters[i],this.filterClass)) {
					filters[i] = this.filter;
				}
			}
		}
		var target = this.target;
		if(Object.prototype.hasOwnProperty.call(target,"filters")) {
			target.filters = filters;
		} else {
			var tmp;
			var tmp1;
			if(target.__properties__) {
				tmp = target.__properties__["set_" + "filters"];
				tmp1 = tmp;
			} else {
				tmp1 = false;
			}
			if(tmp1) {
				target[tmp](filters);
			} else {
				target.filters = filters;
			}
		}
	}
	,__class__: motion_actuators_FilterActuator
});
var motion_actuators_MethodActuator = function(target,duration,properties) {
	this.currentParameters = [];
	this.tweenProperties = { };
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
	if(!Object.prototype.hasOwnProperty.call(properties,"start")) {
		this.properties.start = [];
	}
	if(!Object.prototype.hasOwnProperty.call(properties,"end")) {
		this.properties.end = this.properties.start;
	}
	var _g1 = 0;
	var _g = this.properties.start.length;
	while(_g1 < _g) this.currentParameters.push(this.properties.start[_g1++]);
};
$hxClasses["motion.actuators.MethodActuator"] = motion_actuators_MethodActuator;
motion_actuators_MethodActuator.__name__ = ["motion","actuators","MethodActuator"];
motion_actuators_MethodActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MethodActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	currentParameters: null
	,tweenProperties: null
	,apply: function() {
		var method = this.target;
		var params = this.properties.end;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
	}
	,complete: function(sendEvent) {
		if(sendEvent == null) {
			sendEvent = true;
		}
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
		}
		var method = this.target;
		var params = this.currentParameters;
		if(params == null) {
			params = [];
		}
		method.apply(method,params);
		motion_actuators_SimpleActuator.prototype.complete.call(this,sendEvent);
	}
	,initialize: function() {
		var details;
		var propertyName;
		var start;
		var _g1 = 0;
		var _g = this.properties.start.length;
		while(_g1 < _g) {
			var i = _g1++;
			propertyName = "param" + i;
			start = this.properties.start[i];
			this.tweenProperties[propertyName] = start;
			if(typeof(start) == "number" || typeof(start) == "number" && ((start | 0) === start)) {
				details = new motion_actuators_PropertyDetails(this.tweenProperties,propertyName,start,this.properties.end[i] - start);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.active && !this.paused) {
			var _g1 = 0;
			var _g = this.properties.start.length;
			while(_g1 < _g) {
				var i = _g1++;
				this.currentParameters[i] = Reflect.field(this.tweenProperties,"param" + i);
			}
			var method = this.target;
			var params = this.currentParameters;
			if(params == null) {
				params = [];
			}
			method.apply(method,params);
		}
	}
	,__class__: motion_actuators_MethodActuator
});
var motion_actuators_MotionPathActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.MotionPathActuator"] = motion_actuators_MotionPathActuator;
motion_actuators_MotionPathActuator.__name__ = ["motion","actuators","MotionPathActuator"];
motion_actuators_MotionPathActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_MotionPathActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	apply: function() {
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
				this.target[propertyName] = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
			} else {
				var o = this.target;
				var value = (js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath)).get_end();
				var tmp;
				var tmp1;
				if(o.__properties__) {
					tmp = o.__properties__["set_" + propertyName];
					tmp1 = tmp;
				} else {
					tmp1 = false;
				}
				if(tmp1) {
					o[tmp](value);
				} else {
					o[propertyName] = value;
				}
			}
		}
	}
	,initialize: function() {
		var details;
		var path;
		var _g = 0;
		var _g1 = Reflect.fields(this.properties);
		while(_g < _g1.length) {
			var propertyName = _g1[_g];
			++_g;
			path = js_Boot.__cast(Reflect.field(this.properties,propertyName) , motion_IComponentPath);
			if(path != null) {
				var isField = true;
				if(Object.prototype.hasOwnProperty.call(this.target,propertyName)) {
					path.start = Reflect.field(this.target,propertyName);
				} else {
					isField = false;
					var o = this.target;
					var tmp;
					var tmp1;
					if(o == null) {
						tmp1 = null;
					} else {
						var tmp2;
						if(o.__properties__) {
							tmp = o.__properties__["get_" + propertyName];
							tmp2 = tmp;
						} else {
							tmp2 = false;
						}
						if(tmp2) {
							tmp1 = o[tmp]();
						} else {
							tmp1 = o[propertyName];
						}
					}
					path.start = tmp1;
				}
				details = new motion_actuators_PropertyPathDetails(this.target,propertyName,path,isField);
				this.propertyDetails.push(details);
			}
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,update: function(currentTime) {
		if(!this.paused) {
			var details;
			var easing;
			var tweenPosition = (currentTime - this.timeOffset) / this.duration;
			if(tweenPosition > 1) {
				tweenPosition = 1;
			}
			if(!this.initialized) {
				this.initialize();
			}
			if(!this.special) {
				easing = this._ease.calculate(tweenPosition);
				var _g = 0;
				var _g1 = this.propertyDetails;
				while(_g < _g1.length) {
					var details1 = _g1[_g];
					++_g;
					if(details1.isField) {
						details1.target[details1.propertyName] = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
					} else {
						var o = details1.target;
						var field = details1.propertyName;
						var value = (js_Boot.__cast(details1 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						var tmp;
						var tmp1;
						if(o.__properties__) {
							tmp = o.__properties__["set_" + field];
							tmp1 = tmp;
						} else {
							tmp1 = false;
						}
						if(tmp1) {
							o[tmp](value);
						} else {
							o[field] = value;
						}
					}
				}
			} else {
				if(!this._reverse) {
					easing = this._ease.calculate(tweenPosition);
				} else {
					easing = this._ease.calculate(1 - tweenPosition);
				}
				var endValue;
				var _g2 = 0;
				var _g11 = this.propertyDetails;
				while(_g2 < _g11.length) {
					var details2 = _g11[_g2];
					++_g2;
					if(!this._snapping) {
						if(details2.isField) {
							details2.target[details2.propertyName] = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
						} else {
							var o1 = details2.target;
							var field1 = details2.propertyName;
							var value1 = (js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing);
							var tmp2;
							var tmp3;
							if(o1.__properties__) {
								tmp2 = o1.__properties__["set_" + field1];
								tmp3 = tmp2;
							} else {
								tmp3 = false;
							}
							if(tmp3) {
								o1[tmp2](value1);
							} else {
								o1[field1] = value1;
							}
						}
					} else if(details2.isField) {
						details2.target[details2.propertyName] = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
					} else {
						var o2 = details2.target;
						var field2 = details2.propertyName;
						var value2 = Math.round((js_Boot.__cast(details2 , motion_actuators_PropertyPathDetails)).path.calculate(easing));
						var tmp4;
						var tmp5;
						if(o2.__properties__) {
							tmp4 = o2.__properties__["set_" + field2];
							tmp5 = tmp4;
						} else {
							tmp5 = false;
						}
						if(tmp5) {
							o2[tmp4](value2);
						} else {
							o2[field2] = value2;
						}
					}
				}
			}
			if(tweenPosition == 1) {
				if(this._repeat == 0) {
					this.active = false;
					var tmp6;
					if(this.toggleVisible) {
						var target = this.target;
						var value3 = null;
						if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
							value3 = Reflect.field(target,"alpha");
						} else {
							var tmp7;
							var tmp8;
							if(target == null) {
								tmp8 = null;
							} else {
								var tmp9;
								if(target.__properties__) {
									tmp7 = target.__properties__["get_" + "alpha"];
									tmp9 = tmp7;
								} else {
									tmp9 = false;
								}
								if(tmp9) {
									tmp8 = target[tmp7]();
								} else {
									tmp8 = target.alpha;
								}
							}
							value3 = tmp8;
						}
						tmp6 = value3 == 0;
					} else {
						tmp6 = false;
					}
					if(tmp6) {
						var target1 = this.target;
						if(Object.prototype.hasOwnProperty.call(target1,"visible")) {
							target1.visible = false;
						} else {
							var tmp10;
							var tmp11;
							if(target1.__properties__) {
								tmp10 = target1.__properties__["set_" + "visible"];
								tmp11 = tmp10;
							} else {
								tmp11 = false;
							}
							if(tmp11) {
								target1[tmp10](false);
							} else {
								target1.visible = false;
							}
						}
					}
					this.complete(true);
					return;
				} else {
					if(this._onRepeat != null) {
						var method = this._onRepeat;
						var params = this._onRepeatParams;
						if(params == null) {
							params = [];
						}
						method.apply(method,params);
					}
					if(this._reflect) {
						this._reverse = !this._reverse;
					}
					this.startTime = currentTime;
					this.timeOffset = this.startTime + this._delay;
					if(this._repeat > 0) {
						this._repeat--;
					}
				}
			}
			if(this.sendChange) {
				this.change();
			}
		}
	}
	,__class__: motion_actuators_MotionPathActuator
});
var motion_actuators_PropertyDetails = function(target,propertyName,start,change,isField) {
	if(isField == null) {
		isField = true;
	}
	this.target = target;
	this.propertyName = propertyName;
	this.start = start;
	this.change = change;
	this.isField = isField;
};
$hxClasses["motion.actuators.PropertyDetails"] = motion_actuators_PropertyDetails;
motion_actuators_PropertyDetails.__name__ = ["motion","actuators","PropertyDetails"];
motion_actuators_PropertyDetails.prototype = {
	change: null
	,isField: null
	,propertyName: null
	,start: null
	,target: null
	,__class__: motion_actuators_PropertyDetails
};
var motion_actuators_PropertyPathDetails = function(target,propertyName,path,isField) {
	if(isField == null) {
		isField = true;
	}
	motion_actuators_PropertyDetails.call(this,target,propertyName,0,0,isField);
	this.path = path;
};
$hxClasses["motion.actuators.PropertyPathDetails"] = motion_actuators_PropertyPathDetails;
motion_actuators_PropertyPathDetails.__name__ = ["motion","actuators","PropertyPathDetails"];
motion_actuators_PropertyPathDetails.__super__ = motion_actuators_PropertyDetails;
motion_actuators_PropertyPathDetails.prototype = $extend(motion_actuators_PropertyDetails.prototype,{
	path: null
	,__class__: motion_actuators_PropertyPathDetails
});
var motion_actuators_TransformActuator = function(target,duration,properties) {
	motion_actuators_SimpleActuator.call(this,target,duration,properties);
};
$hxClasses["motion.actuators.TransformActuator"] = motion_actuators_TransformActuator;
motion_actuators_TransformActuator.__name__ = ["motion","actuators","TransformActuator"];
motion_actuators_TransformActuator.__super__ = motion_actuators_SimpleActuator;
motion_actuators_TransformActuator.prototype = $extend(motion_actuators_SimpleActuator.prototype,{
	endColorTransform: null
	,endSoundTransform: null
	,tweenColorTransform: null
	,tweenSoundTransform: null
	,apply: function() {
		this.initialize();
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				var tmp;
				var tmp1;
				if(target == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "transform"];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = target[tmp]();
					} else {
						tmp1 = target.transform;
					}
				}
				value = tmp1;
			}
			var transform = value;
			var value1 = this.endColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
				transform.colorTransform = value1;
			} else {
				var tmp3;
				var tmp4;
				if(transform.__properties__) {
					tmp3 = transform.__properties__["set_" + "colorTransform"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					transform[tmp3](value1);
				} else {
					transform.colorTransform = value1;
				}
			}
		}
		if(this.endSoundTransform != null) {
			var target1 = this.target;
			var value2 = this.endSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1.soundTransform = value2;
			} else {
				var tmp5;
				var tmp6;
				if(target1.__properties__) {
					tmp5 = target1.__properties__["set_" + "soundTransform"];
					tmp6 = tmp5;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					target1[tmp5](value2);
				} else {
					target1.soundTransform = value2;
				}
			}
		}
	}
	,initialize: function() {
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorValue") && js_Boot.__instanceof(this.target,openfl_display_DisplayObject)) {
			this.initializeColor();
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume") || Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.initializeSound();
		}
		this.detailsLength = this.propertyDetails.length;
		this.initialized = true;
	}
	,initializeColor: function() {
		this.endColorTransform = new openfl_geom_ColorTransform();
		var color = this.properties.colorValue;
		var strength = this.properties.colorStrength;
		if(strength < 1) {
			var multiplier;
			var offset;
			if(strength < 0.5) {
				multiplier = 1;
				offset = strength * 2;
			} else {
				multiplier = 1 - (strength - 0.5) * 2;
				offset = 1;
			}
			this.endColorTransform.redMultiplier = multiplier;
			this.endColorTransform.greenMultiplier = multiplier;
			this.endColorTransform.blueMultiplier = multiplier;
			this.endColorTransform.redOffset = offset * (color >> 16 & 255);
			this.endColorTransform.greenOffset = offset * (color >> 8 & 255);
			this.endColorTransform.blueOffset = offset * (color & 255);
		} else {
			this.endColorTransform.redMultiplier = 0;
			this.endColorTransform.greenMultiplier = 0;
			this.endColorTransform.blueMultiplier = 0;
			this.endColorTransform.redOffset = color >> 16 & 255;
			this.endColorTransform.greenOffset = color >> 8 & 255;
			this.endColorTransform.blueOffset = color & 255;
		}
		var propertyNames = ["redMultiplier","greenMultiplier","blueMultiplier","redOffset","greenOffset","blueOffset"];
		if(Object.prototype.hasOwnProperty.call(this.properties,"colorAlpha")) {
			this.endColorTransform.alphaMultiplier = this.properties.colorAlpha;
			propertyNames.push("alphaMultiplier");
		} else {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"alpha")) {
				value = Reflect.field(target,"alpha");
			} else {
				var tmp;
				var tmp1;
				if(target == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "alpha"];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = target[tmp]();
					} else {
						tmp1 = target.alpha;
					}
				}
				value = tmp1;
			}
			this.endColorTransform.alphaMultiplier = value;
		}
		var target1 = this.target;
		var value1 = null;
		if(Object.prototype.hasOwnProperty.call(target1,"transform")) {
			value1 = Reflect.field(target1,"transform");
		} else {
			var tmp3;
			var tmp4;
			if(target1 == null) {
				tmp4 = null;
			} else {
				var tmp5;
				if(target1.__properties__) {
					tmp3 = target1.__properties__["get_" + "transform"];
					tmp5 = tmp3;
				} else {
					tmp5 = false;
				}
				if(tmp5) {
					tmp4 = target1[tmp3]();
				} else {
					tmp4 = target1.transform;
				}
			}
			value1 = tmp4;
		}
		var transform = value1;
		var value2 = null;
		if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
			value2 = Reflect.field(transform,"colorTransform");
		} else {
			var tmp6;
			var tmp7;
			if(transform == null) {
				tmp7 = null;
			} else {
				var tmp8;
				if(transform.__properties__) {
					tmp6 = transform.__properties__["get_" + "colorTransform"];
					tmp8 = tmp6;
				} else {
					tmp8 = false;
				}
				if(tmp8) {
					tmp7 = transform[tmp6]();
				} else {
					tmp7 = transform.colorTransform;
				}
			}
			value2 = tmp7;
		}
		var begin = value2;
		this.tweenColorTransform = new openfl_geom_ColorTransform();
		var details;
		var start;
		var _g = 0;
		while(_g < propertyNames.length) {
			var propertyName = propertyNames[_g];
			++_g;
			var value3 = null;
			if(Object.prototype.hasOwnProperty.call(begin,propertyName)) {
				value3 = Reflect.field(begin,propertyName);
			} else {
				var tmp9;
				var tmp10;
				if(begin == null) {
					tmp10 = null;
				} else {
					var tmp11;
					if(begin.__properties__) {
						tmp9 = begin.__properties__["get_" + propertyName];
						tmp11 = tmp9;
					} else {
						tmp11 = false;
					}
					if(tmp11) {
						tmp10 = begin[tmp9]();
					} else {
						tmp10 = begin[propertyName];
					}
				}
				value3 = tmp10;
			}
			start = value3;
			var target2 = this.endColorTransform;
			var value4 = null;
			if(Object.prototype.hasOwnProperty.call(target2,propertyName)) {
				value4 = Reflect.field(target2,propertyName);
			} else {
				var tmp12;
				var tmp13;
				if(target2 == null) {
					tmp13 = null;
				} else {
					var tmp14;
					if(target2.__properties__) {
						tmp12 = target2.__properties__["get_" + propertyName];
						tmp14 = tmp12;
					} else {
						tmp14 = false;
					}
					if(tmp14) {
						tmp13 = target2[tmp12]();
					} else {
						tmp13 = target2[propertyName];
					}
				}
				value4 = tmp13;
			}
			details = new motion_actuators_PropertyDetails(this.tweenColorTransform,propertyName,start,value4 - start);
			this.propertyDetails.push(details);
		}
	}
	,initializeSound: function() {
		var target = this.target;
		var value = null;
		if(Object.prototype.hasOwnProperty.call(target,"soundTransform")) {
			value = Reflect.field(target,"soundTransform");
		} else {
			var tmp;
			var tmp1;
			if(target == null) {
				tmp1 = null;
			} else {
				var tmp2;
				if(target.__properties__) {
					tmp = target.__properties__["get_" + "soundTransform"];
					tmp2 = tmp;
				} else {
					tmp2 = false;
				}
				if(tmp2) {
					tmp1 = target[tmp]();
				} else {
					tmp1 = target.soundTransform;
				}
			}
			value = tmp1;
		}
		if(value == null) {
			var target1 = this.target;
			var value1 = new openfl_media_SoundTransform();
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1.soundTransform = value1;
			} else {
				var tmp3;
				var tmp4;
				if(target1.__properties__) {
					tmp3 = target1.__properties__["set_" + "soundTransform"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					target1[tmp3](value1);
				} else {
					target1.soundTransform = value1;
				}
			}
		}
		var target2 = this.target;
		var value2 = null;
		if(Object.prototype.hasOwnProperty.call(target2,"soundTransform")) {
			value2 = Reflect.field(target2,"soundTransform");
		} else {
			var tmp5;
			var tmp6;
			if(target2 == null) {
				tmp6 = null;
			} else {
				var tmp7;
				if(target2.__properties__) {
					tmp5 = target2.__properties__["get_" + "soundTransform"];
					tmp7 = tmp5;
				} else {
					tmp7 = false;
				}
				if(tmp7) {
					tmp6 = target2[tmp5]();
				} else {
					tmp6 = target2.soundTransform;
				}
			}
			value2 = tmp6;
		}
		var start = value2;
		var target3 = this.target;
		var value3 = null;
		if(Object.prototype.hasOwnProperty.call(target3,"soundTransform")) {
			value3 = Reflect.field(target3,"soundTransform");
		} else {
			var tmp8;
			var tmp9;
			if(target3 == null) {
				tmp9 = null;
			} else {
				var tmp10;
				if(target3.__properties__) {
					tmp8 = target3.__properties__["get_" + "soundTransform"];
					tmp10 = tmp8;
				} else {
					tmp10 = false;
				}
				if(tmp10) {
					tmp9 = target3[tmp8]();
				} else {
					tmp9 = target3.soundTransform;
				}
			}
			value3 = tmp9;
		}
		this.endSoundTransform = value3;
		this.tweenSoundTransform = new openfl_media_SoundTransform();
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundVolume")) {
			this.endSoundTransform.volume = this.properties.soundVolume;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"volume",start.volume,this.endSoundTransform.volume - start.volume));
		}
		if(Object.prototype.hasOwnProperty.call(this.properties,"soundPan")) {
			this.endSoundTransform.pan = this.properties.soundPan;
			this.propertyDetails.push(new motion_actuators_PropertyDetails(this.tweenSoundTransform,"pan",start.pan,this.endSoundTransform.pan - start.pan));
		}
	}
	,update: function(currentTime) {
		motion_actuators_SimpleActuator.prototype.update.call(this,currentTime);
		if(this.endColorTransform != null) {
			var target = this.target;
			var value = null;
			if(Object.prototype.hasOwnProperty.call(target,"transform")) {
				value = Reflect.field(target,"transform");
			} else {
				var tmp;
				var tmp1;
				if(target == null) {
					tmp1 = null;
				} else {
					var tmp2;
					if(target.__properties__) {
						tmp = target.__properties__["get_" + "transform"];
						tmp2 = tmp;
					} else {
						tmp2 = false;
					}
					if(tmp2) {
						tmp1 = target[tmp]();
					} else {
						tmp1 = target.transform;
					}
				}
				value = tmp1;
			}
			var transform = value;
			var value1 = this.tweenColorTransform;
			if(Object.prototype.hasOwnProperty.call(transform,"colorTransform")) {
				transform.colorTransform = value1;
			} else {
				var tmp3;
				var tmp4;
				if(transform.__properties__) {
					tmp3 = transform.__properties__["set_" + "colorTransform"];
					tmp4 = tmp3;
				} else {
					tmp4 = false;
				}
				if(tmp4) {
					transform[tmp3](value1);
				} else {
					transform.colorTransform = value1;
				}
			}
		}
		if(this.endSoundTransform != null) {
			var target1 = this.target;
			var value2 = this.tweenSoundTransform;
			if(Object.prototype.hasOwnProperty.call(target1,"soundTransform")) {
				target1.soundTransform = value2;
			} else {
				var tmp5;
				var tmp6;
				if(target1.__properties__) {
					tmp5 = target1.__properties__["set_" + "soundTransform"];
					tmp6 = tmp5;
				} else {
					tmp6 = false;
				}
				if(tmp6) {
					target1[tmp5](value2);
				} else {
					target1.soundTransform = value2;
				}
			}
		}
	}
	,__class__: motion_actuators_TransformActuator
});
var motion_easing_ExpoEaseIn = function() {
};
$hxClasses["motion.easing.ExpoEaseIn"] = motion_easing_ExpoEaseIn;
motion_easing_ExpoEaseIn.__name__ = ["motion","easing","ExpoEaseIn"];
motion_easing_ExpoEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseIn.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		} else {
			return Math.pow(2,10 * (k - 1));
		}
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		} else {
			return c * Math.pow(2,10 * (t / d - 1)) + b;
		}
	}
	,__class__: motion_easing_ExpoEaseIn
};
var motion_easing_ExpoEaseInOut = function() {
};
$hxClasses["motion.easing.ExpoEaseInOut"] = motion_easing_ExpoEaseInOut;
motion_easing_ExpoEaseInOut.__name__ = ["motion","easing","ExpoEaseInOut"];
motion_easing_ExpoEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_ExpoEaseInOut.prototype = {
	calculate: function(k) {
		if(k == 0) {
			return 0;
		}
		if(k == 1) {
			return 1;
		}
		k /= 0.5;
		if(k < 1.0) {
			return 0.5 * Math.pow(2,10 * (k - 1));
		}
		return 0.5 * (2 - Math.pow(2,-10 * --k));
	}
	,ease: function(t,b,c,d) {
		if(t == 0) {
			return b;
		}
		if(t == d) {
			return b + c;
		}
		t /= d / 2.0;
		if(t < 1.0) {
			return c / 2 * Math.pow(2,10 * (t - 1)) + b;
		}
		return c / 2 * (2 - Math.pow(2,-10 * --t)) + b;
	}
	,__class__: motion_easing_ExpoEaseInOut
};
var motion_easing_Linear = function() { };
$hxClasses["motion.easing.Linear"] = motion_easing_Linear;
motion_easing_Linear.__name__ = ["motion","easing","Linear"];
motion_easing_Linear.__properties__ = {get_easeNone:"get_easeNone"}
motion_easing_Linear.get_easeNone = function() {
	return new motion_easing_LinearEaseNone();
};
var motion_easing_LinearEaseNone = function() {
};
$hxClasses["motion.easing.LinearEaseNone"] = motion_easing_LinearEaseNone;
motion_easing_LinearEaseNone.__name__ = ["motion","easing","LinearEaseNone"];
motion_easing_LinearEaseNone.__interfaces__ = [motion_easing_IEasing];
motion_easing_LinearEaseNone.prototype = {
	calculate: function(k) {
		return k;
	}
	,ease: function(t,b,c,d) {
		return c * t / d + b;
	}
	,__class__: motion_easing_LinearEaseNone
};
var motion_easing_Quad = function() { };
$hxClasses["motion.easing.Quad"] = motion_easing_Quad;
motion_easing_Quad.__name__ = ["motion","easing","Quad"];
motion_easing_Quad.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Quad.get_easeIn = function() {
	return new motion_easing_QuadEaseIn();
};
motion_easing_Quad.get_easeInOut = function() {
	return new motion_easing_QuadEaseInOut();
};
motion_easing_Quad.get_easeOut = function() {
	return new motion_easing_QuadEaseOut();
};
var motion_easing_QuadEaseIn = function() {
};
$hxClasses["motion.easing.QuadEaseIn"] = motion_easing_QuadEaseIn;
motion_easing_QuadEaseIn.__name__ = ["motion","easing","QuadEaseIn"];
motion_easing_QuadEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseIn.prototype = {
	calculate: function(k) {
		return k * k;
	}
	,ease: function(t,b,c,d) {
		t /= d;
		return c * t * t + b;
	}
	,__class__: motion_easing_QuadEaseIn
};
var motion_easing_QuadEaseInOut = function() {
};
$hxClasses["motion.easing.QuadEaseInOut"] = motion_easing_QuadEaseInOut;
motion_easing_QuadEaseInOut.__name__ = ["motion","easing","QuadEaseInOut"];
motion_easing_QuadEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseInOut.prototype = {
	calculate: function(k) {
		k *= 2;
		if(k < 1) {
			return 0.5 * k * k;
		}
		return -0.5 * ((k - 1) * (k - 3) - 1);
	}
	,ease: function(t,b,c,d) {
		t /= d / 2;
		if(t < 1) {
			return c / 2 * t * t + b;
		}
		return -c / 2 * ((t - 1) * (t - 3) - 1) + b;
	}
	,__class__: motion_easing_QuadEaseInOut
};
var motion_easing_QuadEaseOut = function() {
};
$hxClasses["motion.easing.QuadEaseOut"] = motion_easing_QuadEaseOut;
motion_easing_QuadEaseOut.__name__ = ["motion","easing","QuadEaseOut"];
motion_easing_QuadEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_QuadEaseOut.prototype = {
	calculate: function(k) {
		return -k * (k - 2);
	}
	,ease: function(t,b,c,d) {
		t /= d;
		return -c * t * (t - 2) + b;
	}
	,__class__: motion_easing_QuadEaseOut
};
var motion_easing_Sine = function() { };
$hxClasses["motion.easing.Sine"] = motion_easing_Sine;
motion_easing_Sine.__name__ = ["motion","easing","Sine"];
motion_easing_Sine.__properties__ = {get_easeOut:"get_easeOut",get_easeInOut:"get_easeInOut",get_easeIn:"get_easeIn"}
motion_easing_Sine.get_easeIn = function() {
	return new motion_easing_SineEaseIn();
};
motion_easing_Sine.get_easeInOut = function() {
	return new motion_easing_SineEaseInOut();
};
motion_easing_Sine.get_easeOut = function() {
	return new motion_easing_SineEaseOut();
};
var motion_easing_SineEaseIn = function() {
};
$hxClasses["motion.easing.SineEaseIn"] = motion_easing_SineEaseIn;
motion_easing_SineEaseIn.__name__ = ["motion","easing","SineEaseIn"];
motion_easing_SineEaseIn.__interfaces__ = [motion_easing_IEasing];
motion_easing_SineEaseIn.prototype = {
	calculate: function(k) {
		return 1 - Math.cos(k * (Math.PI / 2));
	}
	,ease: function(t,b,c,d) {
		return -c * Math.cos(t / d * (Math.PI / 2)) + c + b;
	}
	,__class__: motion_easing_SineEaseIn
};
var motion_easing_SineEaseInOut = function() {
};
$hxClasses["motion.easing.SineEaseInOut"] = motion_easing_SineEaseInOut;
motion_easing_SineEaseInOut.__name__ = ["motion","easing","SineEaseInOut"];
motion_easing_SineEaseInOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_SineEaseInOut.prototype = {
	calculate: function(k) {
		return -(Math.cos(Math.PI * k) - 1) / 2;
	}
	,ease: function(t,b,c,d) {
		return -c / 2 * (Math.cos(Math.PI * t / d) - 1) + b;
	}
	,__class__: motion_easing_SineEaseInOut
};
var motion_easing_SineEaseOut = function() {
};
$hxClasses["motion.easing.SineEaseOut"] = motion_easing_SineEaseOut;
motion_easing_SineEaseOut.__name__ = ["motion","easing","SineEaseOut"];
motion_easing_SineEaseOut.__interfaces__ = [motion_easing_IEasing];
motion_easing_SineEaseOut.prototype = {
	calculate: function(k) {
		return Math.sin(k * (Math.PI / 2));
	}
	,ease: function(t,b,c,d) {
		return c * Math.sin(t / d * (Math.PI / 2)) + b;
	}
	,__class__: motion_easing_SineEaseOut
};
var openfl_IAssetCache = function() { };
$hxClasses["openfl.IAssetCache"] = openfl_IAssetCache;
openfl_IAssetCache.__name__ = ["openfl","IAssetCache"];
openfl_IAssetCache.prototype = {
	get_enabled: null
	,set_enabled: null
	,clear: null
	,getBitmapData: null
	,getFont: null
	,getSound: null
	,hasBitmapData: null
	,hasFont: null
	,hasSound: null
	,removeBitmapData: null
	,removeFont: null
	,removeSound: null
	,setBitmapData: null
	,setFont: null
	,setSound: null
	,__class__: openfl_IAssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_AssetCache = function() {
	this.__enabled = true;
	this.bitmapData = new haxe_ds_StringMap();
	this.font = new haxe_ds_StringMap();
	this.sound = new haxe_ds_StringMap();
};
$hxClasses["openfl.AssetCache"] = openfl_AssetCache;
openfl_AssetCache.__name__ = ["openfl","AssetCache"];
openfl_AssetCache.__interfaces__ = [openfl_IAssetCache];
openfl_AssetCache.prototype = {
	bitmapData: null
	,font: null
	,sound: null
	,__enabled: null
	,clear: function(prefix) {
		if(prefix == null) {
			this.bitmapData = new haxe_ds_StringMap();
			this.font = new haxe_ds_StringMap();
			this.sound = new haxe_ds_StringMap();
		} else {
			var keys = this.bitmapData.keys();
			while(keys.hasNext()) {
				var key = keys.next();
				if(StringTools.startsWith(key,prefix)) {
					this.bitmapData.remove(key);
				}
			}
			var keys1 = this.font.keys();
			while(keys1.hasNext()) {
				var key1 = keys1.next();
				if(StringTools.startsWith(key1,prefix)) {
					this.font.remove(key1);
				}
			}
			var keys2 = this.sound.keys();
			while(keys2.hasNext()) {
				var key2 = keys2.next();
				if(StringTools.startsWith(key2,prefix)) {
					this.sound.remove(key2);
				}
			}
		}
	}
	,getBitmapData: function(id) {
		var _this = this.bitmapData;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getFont: function(id) {
		var _this = this.font;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,getSound: function(id) {
		var _this = this.sound;
		return __map_reserved[id] != null?_this.getReserved(id):_this.h[id];
	}
	,hasBitmapData: function(id) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasFont: function(id) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,hasSound: function(id) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			return _this.existsReserved(id);
		} else {
			return _this.h.hasOwnProperty(id);
		}
	}
	,removeBitmapData: function(id) {
		return this.bitmapData.remove(id);
	}
	,removeFont: function(id) {
		return this.font.remove(id);
	}
	,removeSound: function(id) {
		return this.sound.remove(id);
	}
	,setBitmapData: function(id,bitmapData) {
		var _this = this.bitmapData;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,bitmapData);
		} else {
			_this.h[id] = bitmapData;
		}
	}
	,setFont: function(id,font) {
		var _this = this.font;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,font);
		} else {
			_this.h[id] = font;
		}
	}
	,setSound: function(id,sound) {
		var _this = this.sound;
		if(__map_reserved[id] != null) {
			_this.setReserved(id,sound);
		} else {
			_this.h[id] = sound;
		}
	}
	,get_enabled: function() {
		return this.__enabled;
	}
	,set_enabled: function(value) {
		return this.__enabled = value;
	}
	,__class__: openfl_AssetCache
	,__properties__: {set_enabled:"set_enabled",get_enabled:"get_enabled"}
};
var openfl_Assets = function() { };
$hxClasses["openfl.Assets"] = openfl_Assets;
openfl_Assets.__name__ = ["openfl","Assets"];
openfl_Assets.addEventListener = function(type,listener,useCapture,priority,useWeakReference) {
	if(useWeakReference == null) {
		useWeakReference = false;
	}
	if(priority == null) {
		priority = 0;
	}
	if(useCapture == null) {
		useCapture = false;
	}
	if(!lime_Assets.onChange.has(openfl_Assets.LimeAssets_onChange)) {
		lime_Assets.onChange.add(openfl_Assets.LimeAssets_onChange);
	}
	openfl_Assets.dispatcher.addEventListener(type,listener,useCapture,priority,useWeakReference);
};
openfl_Assets.dispatchEvent = function(event) {
	return openfl_Assets.dispatcher.dispatchEvent(event);
};
openfl_Assets.exists = function(id,type) {
	return lime_Assets.exists(id,type);
};
openfl_Assets.getBitmapData = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			return bitmapData;
		}
	}
	var image = lime_Assets.getImage(id,false);
	if(image != null) {
		var bitmapData1 = openfl_display_BitmapData.fromImage(image);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setBitmapData(id,bitmapData1);
		}
		return bitmapData1;
	}
	return null;
};
openfl_Assets.getBytes = function(id) {
	return openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(lime_Assets.getBytes(id));
};
openfl_Assets.getFont = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		return openfl_Assets.cache.getFont(id);
	}
	var limeFont = lime_Assets.getFont(id,false);
	if(limeFont != null) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		return font;
	}
	return new openfl_text_Font();
};
openfl_Assets.getLibrary = function(name) {
	return lime_Assets.getLibrary(name);
};
openfl_Assets.getMovieClip = function(id) {
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			if(library.isLocal(symbolName,"MOVIE_CLIP")) {
				return library.getMovieClip(symbolName);
			} else {
				haxe_Log.trace("[openfl.Assets] MovieClip asset \"" + id + "\" exists, but only asynchronously",{ fileName : "Assets.hx", lineNumber : 223, className : "openfl.Assets", methodName : "getMovieClip"});
			}
		} else {
			haxe_Log.trace("[openfl.Assets] There is no MovieClip asset with an ID of \"" + id + "\"",{ fileName : "Assets.hx", lineNumber : 229, className : "openfl.Assets", methodName : "getMovieClip"});
		}
	} else {
		haxe_Log.trace("[openfl.Assets] There is no asset library named \"" + libraryName + "\"",{ fileName : "Assets.hx", lineNumber : 235, className : "openfl.Assets", methodName : "getMovieClip"});
	}
	return null;
};
openfl_Assets.getMusic = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	var path = lime_Assets.getPath(id);
	if(path != null) {
		return new openfl_media_Sound(new openfl_net_URLRequest(path));
	}
	return null;
};
openfl_Assets.getPath = function(id) {
	return lime_Assets.getPath(id);
};
openfl_Assets.getSound = function(id,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasSound(id)) {
		var sound = openfl_Assets.cache.getSound(id);
		if(openfl_Assets.isValidSound(sound)) {
			return sound;
		}
	}
	var path = lime_Assets.getPath(id);
	if(path != null) {
		return new openfl_media_Sound(new openfl_net_URLRequest(path));
	}
	return null;
};
openfl_Assets.getText = function(id) {
	return lime_Assets.getText(id);
};
openfl_Assets.hasEventListener = function(type) {
	return openfl_Assets.dispatcher.hasEventListener(type);
};
openfl_Assets.isLocal = function(id,type,useCache) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache && openfl_Assets.cache.get_enabled()) {
		if(type == "IMAGE" || type == null) {
			if(openfl_Assets.cache.hasBitmapData(id)) {
				return true;
			}
		}
		if(type == "FONT" || type == null) {
			if(openfl_Assets.cache.hasFont(id)) {
				return true;
			}
		}
		if(type == "SOUND" || type == "MUSIC" || type == null) {
			if(openfl_Assets.cache.hasSound(id)) {
				return true;
			}
		}
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		return library.isLocal(symbolName,type);
	}
	return false;
};
openfl_Assets.isValidBitmapData = function(bitmapData) {
	if(bitmapData != null) {
		return bitmapData.image != null;
	} else {
		return false;
	}
};
openfl_Assets.isValidSound = function(sound) {
	return true;
};
openfl_Assets.list = function(type) {
	return lime_Assets.list(type);
};
openfl_Assets.loadBitmapData = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasBitmapData(id)) {
		var bitmapData = openfl_Assets.cache.getBitmapData(id);
		if(openfl_Assets.isValidBitmapData(bitmapData)) {
			promise.complete(bitmapData);
			return promise.future;
		}
	}
	lime_Assets.loadImage(id,false).onComplete(function(image) {
		if(image != null) {
			var bitmapData1 = openfl_display_BitmapData.fromImage(image);
			if(useCache && openfl_Assets.cache.get_enabled()) {
				openfl_Assets.cache.setBitmapData(id,bitmapData1);
			}
			promise.complete(bitmapData1);
		} else {
			promise.error("[Assets] Could not load Image \"" + id + "\"");
		}
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadBytes = function(id,handler) {
	var promise = new lime_app_Promise();
	var future = lime_Assets.loadBytes(id);
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
		future.onComplete(function(bytes) {
			promise.complete(openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes(bytes));
		});
		future.onProgress(function(progress) {
			promise.progress(progress);
		});
		future.onError(function(msg) {
			promise.error(msg);
		});
	}
	return promise.future;
};
openfl_Assets.loadFont = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	if(useCache && openfl_Assets.cache.get_enabled() && openfl_Assets.cache.hasFont(id)) {
		promise.complete(openfl_Assets.cache.getFont(id));
		return promise.future;
	}
	lime_Assets.loadFont(id).onComplete(function(limeFont) {
		var font = openfl_text_Font.__fromLimeFont(limeFont);
		if(useCache && openfl_Assets.cache.get_enabled()) {
			openfl_Assets.cache.setFont(id,font);
		}
		promise.complete(font);
	}).onError($bind(promise,promise.error)).onProgress($bind(promise,promise.progress));
	return promise.future;
};
openfl_Assets.loadLibrary = function(name,handler) {
	var future = lime_Assets.loadLibrary(name);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.loadMusic = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	return new lime_app_Future(function() {
		return openfl_Assets.getMusic(id,useCache);
	});
};
openfl_Assets.loadMovieClip = function(id,handler) {
	var promise = new lime_app_Promise();
	if(handler != null) {
		promise.future.onComplete(handler);
		promise.future.onError(function(_) {
			handler(null);
		});
	}
	var libraryName = id.substring(0,id.indexOf(":"));
	var symbolName = HxOverrides.substr(id,id.indexOf(":") + 1,null);
	var library = openfl_Assets.getLibrary(libraryName);
	if(library != null) {
		if(library.exists(symbolName,"MOVIE_CLIP")) {
			promise.completeWith(library.loadMovieClip(symbolName));
		} else {
			promise.error("[Assets] There is no MovieClip asset with an ID of \"" + id + "\"");
		}
	} else {
		promise.error("[Assets] There is no asset library named \"" + libraryName + "\"");
	}
	return promise.future;
};
openfl_Assets.loadSound = function(id,useCache,handler) {
	if(useCache == null) {
		useCache = true;
	}
	if(useCache == null) {
		useCache = true;
	}
	return new lime_app_Future(function() {
		return openfl_Assets.getSound(id,useCache);
	});
};
openfl_Assets.loadText = function(id,handler) {
	var future = lime_Assets.loadText(id);
	if(handler != null) {
		future.onComplete(handler);
		future.onError(function(_) {
			handler(null);
		});
	}
	return future;
};
openfl_Assets.registerLibrary = function(name,library) {
	lime_Assets.registerLibrary(name,library);
};
openfl_Assets.removeEventListener = function(type,listener,capture) {
	if(capture == null) {
		capture = false;
	}
	openfl_Assets.dispatcher.removeEventListener(type,listener,capture);
};
openfl_Assets.resolveClass = function(name) {
	return Type.resolveClass(name);
};
openfl_Assets.resolveEnum = function(name) {
	return Type.resolveEnum(name);
};
openfl_Assets.unloadLibrary = function(name) {
	lime_Assets.unloadLibrary(name);
};
openfl_Assets.LimeAssets_onChange = function() {
	openfl_Assets.dispatchEvent(new openfl_events_Event("change"));
};
var openfl_AssetLibrary = function() {
	lime_AssetLibrary.call(this);
};
$hxClasses["openfl.AssetLibrary"] = openfl_AssetLibrary;
openfl_AssetLibrary.__name__ = ["openfl","AssetLibrary"];
openfl_AssetLibrary.__super__ = lime_AssetLibrary;
openfl_AssetLibrary.prototype = $extend(lime_AssetLibrary.prototype,{
	getMovieClip: function(id) {
		return null;
	}
	,loadMovieClip: function(id) {
		var _gthis = this;
		return new lime_app_Future(function() {
			return _gthis.getMovieClip(id);
		});
	}
	,__class__: openfl_AssetLibrary
});
var openfl_display_MovieClip = function() {
	openfl_display_Sprite.call(this);
	this.__currentFrame = 0;
	this.__currentLabels = [];
	this.__totalFrames = 0;
	this.enabled = true;
};
$hxClasses["openfl.display.MovieClip"] = openfl_display_MovieClip;
openfl_display_MovieClip.__name__ = ["openfl","display","MovieClip"];
openfl_display_MovieClip.__super__ = openfl_display_Sprite;
openfl_display_MovieClip.prototype = $extend(openfl_display_Sprite.prototype,{
	currentFrame: null
	,currentFrameLabel: null
	,currentLabel: null
	,currentLabels: null
	,enabled: null
	,framesLoaded: null
	,totalFrames: null
	,__currentFrame: null
	,__currentFrameLabel: null
	,__currentLabel: null
	,__currentLabels: null
	,__frameScripts: null
	,__totalFrames: null
	,addFrameScript: function(index,method) {
		if(method != null) {
			if(this.__frameScripts == null) {
				this.__frameScripts = new haxe_ds_IntMap();
			}
			this.__frameScripts.h[index] = method;
		} else if(this.__frameScripts != null) {
			this.__frameScripts.remove(index);
		}
	}
	,gotoAndPlay: function(frame,scene) {
	}
	,gotoAndStop: function(frame,scene) {
	}
	,nextFrame: function() {
	}
	,play: function() {
	}
	,prevFrame: function() {
	}
	,stop: function() {
	}
	,get_currentFrame: function() {
		return this.__currentFrame;
	}
	,get_currentFrameLabel: function() {
		return this.__currentFrameLabel;
	}
	,get_currentLabel: function() {
		return this.__currentLabel;
	}
	,get_currentLabels: function() {
		return this.__currentLabels;
	}
	,get_framesLoaded: function() {
		return this.__totalFrames;
	}
	,get_totalFrames: function() {
		return this.__totalFrames;
	}
	,__class__: openfl_display_MovieClip
	,__properties__: $extend(openfl_display_Sprite.prototype.__properties__,{get_totalFrames:"get_totalFrames",get_framesLoaded:"get_framesLoaded",get_currentLabels:"get_currentLabels",get_currentLabel:"get_currentLabel",get_currentFrameLabel:"get_currentFrameLabel",get_currentFrame:"get_currentFrame"})
});
var openfl_display_LoaderInfo = function() {
	openfl_events_EventDispatcher.call(this);
	this.applicationDomain = openfl_system_ApplicationDomain.currentDomain;
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.childAllowsParent = true;
	this.parameters = { };
};
$hxClasses["openfl.display.LoaderInfo"] = openfl_display_LoaderInfo;
openfl_display_LoaderInfo.__name__ = ["openfl","display","LoaderInfo"];
openfl_display_LoaderInfo.create = function(loader) {
	var loaderInfo = new openfl_display_LoaderInfo();
	loaderInfo.uncaughtErrorEvents = new openfl_events_UncaughtErrorEvents();
	if(loader != null) {
		loaderInfo.loader = loader;
	} else {
		loaderInfo.url = openfl_display_LoaderInfo.__rootURL;
	}
	return loaderInfo;
};
openfl_display_LoaderInfo.__super__ = openfl_events_EventDispatcher;
openfl_display_LoaderInfo.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	applicationDomain: null
	,bytes: null
	,bytesLoaded: null
	,bytesTotal: null
	,childAllowsParent: null
	,content: null
	,contentType: null
	,frameRate: null
	,height: null
	,loader: null
	,loaderURL: null
	,parameters: null
	,parentAllowsChild: null
	,sameDomain: null
	,sharedEvents: null
	,uncaughtErrorEvents: null
	,url: null
	,width: null
	,__class__: openfl_display_LoaderInfo
});
var openfl_system_ApplicationDomain = function(parentDomain) {
	if(parentDomain != null) {
		this.parentDomain = parentDomain;
	} else {
		this.parentDomain = openfl_system_ApplicationDomain.currentDomain;
	}
};
$hxClasses["openfl.system.ApplicationDomain"] = openfl_system_ApplicationDomain;
openfl_system_ApplicationDomain.__name__ = ["openfl","system","ApplicationDomain"];
openfl_system_ApplicationDomain.prototype = {
	parentDomain: null
	,getDefinition: function(name) {
		return Type.resolveClass(name);
	}
	,hasDefinition: function(name) {
		return Type.resolveClass(name) != null;
	}
	,__class__: openfl_system_ApplicationDomain
};
var openfl_events_UncaughtErrorEvents = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.events.UncaughtErrorEvents"] = openfl_events_UncaughtErrorEvents;
openfl_events_UncaughtErrorEvents.__name__ = ["openfl","events","UncaughtErrorEvents"];
openfl_events_UncaughtErrorEvents.__super__ = openfl_events_EventDispatcher;
openfl_events_UncaughtErrorEvents.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_events_UncaughtErrorEvents
});
var openfl_geom_Matrix = function(a,b,c,d,tx,ty) {
	if(ty == null) {
		ty = 0;
	}
	if(tx == null) {
		tx = 0;
	}
	if(d == null) {
		d = 1;
	}
	if(c == null) {
		c = 0;
	}
	if(b == null) {
		b = 0;
	}
	if(a == null) {
		a = 1;
	}
	this.a = a;
	this.b = b;
	this.c = c;
	this.d = d;
	this.tx = tx;
	this.ty = ty;
};
$hxClasses["openfl.geom.Matrix"] = openfl_geom_Matrix;
openfl_geom_Matrix.__name__ = ["openfl","geom","Matrix"];
openfl_geom_Matrix.prototype = {
	a: null
	,b: null
	,c: null
	,d: null
	,tx: null
	,ty: null
	,__array: null
	,clone: function() {
		return new openfl_geom_Matrix(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,concat: function(m) {
		var a1 = this.a * m.a + this.b * m.c;
		this.b = this.a * m.b + this.b * m.d;
		this.a = a1;
		var c1 = this.c * m.a + this.d * m.c;
		this.d = this.c * m.b + this.d * m.d;
		this.c = c1;
		var tx1 = this.tx * m.a + this.ty * m.c + m.tx;
		this.ty = this.tx * m.b + this.ty * m.d + m.ty;
		this.tx = tx1;
	}
	,copyColumnFrom: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(column == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyColumnTo: function(column,vector3D) {
		if(column > 2) {
			throw new js__$Boot_HaxeError("Column " + column + " out of bounds (2)");
		} else if(column == 0) {
			vector3D.x = this.a;
			vector3D.y = this.c;
			vector3D.z = 0;
		} else if(column == 1) {
			vector3D.x = this.b;
			vector3D.y = this.d;
			vector3D.z = 0;
		} else {
			vector3D.x = this.tx;
			vector3D.y = this.ty;
			vector3D.z = 1;
		}
	}
	,copyFrom: function(sourceMatrix) {
		this.a = sourceMatrix.a;
		this.b = sourceMatrix.b;
		this.c = sourceMatrix.c;
		this.d = sourceMatrix.d;
		this.tx = sourceMatrix.tx;
		this.ty = sourceMatrix.ty;
	}
	,copyRowFrom: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			this.a = vector3D.x;
			this.c = vector3D.y;
		} else if(row == 1) {
			this.b = vector3D.x;
			this.d = vector3D.y;
		} else {
			this.tx = vector3D.x;
			this.ty = vector3D.y;
		}
	}
	,copyRowTo: function(row,vector3D) {
		if(row > 2) {
			throw new js__$Boot_HaxeError("Row " + row + " out of bounds (2)");
		} else if(row == 0) {
			vector3D.x = this.a;
			vector3D.y = this.b;
			vector3D.z = this.tx;
		} else if(row == 1) {
			vector3D.x = this.c;
			vector3D.y = this.d;
			vector3D.z = this.ty;
		} else {
			vector3D.setTo(0,0,1);
		}
	}
	,createBox: function(scaleX,scaleY,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.a = cos * scaleX;
			this.b = sin * scaleY;
			this.c = -sin * scaleX;
			this.d = cos * scaleY;
		} else {
			this.a = scaleX;
			this.b = 0;
			this.c = 0;
			this.d = scaleY;
		}
		this.tx = tx;
		this.ty = ty;
	}
	,createGradientBox: function(width,height,rotation,tx,ty) {
		if(ty == null) {
			ty = 0;
		}
		if(tx == null) {
			tx = 0;
		}
		if(rotation == null) {
			rotation = 0;
		}
		this.a = width / 1638.4;
		this.d = height / 1638.4;
		if(rotation != 0) {
			var cos = Math.cos(rotation);
			var sin = Math.sin(rotation);
			this.b = sin * this.d;
			this.c = -sin * this.a;
			this.a *= cos;
			this.d *= cos;
		} else {
			this.b = 0;
			this.c = 0;
		}
		this.tx = tx + width / 2;
		this.ty = ty + height / 2;
	}
	,deltaTransformPoint: function(point) {
		return new openfl_geom_Point(point.x * this.a + point.y * this.c,point.x * this.b + point.y * this.d);
	}
	,equals: function(matrix) {
		if(matrix != null && this.tx == matrix.tx && this.ty == matrix.ty && this.a == matrix.a && this.b == matrix.b && this.c == matrix.c) {
			return this.d == matrix.d;
		} else {
			return false;
		}
	}
	,identity: function() {
		this.a = 1;
		this.b = 0;
		this.c = 0;
		this.d = 1;
		this.tx = 0;
		this.ty = 0;
	}
	,invert: function() {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			this.a = this.b = this.c = this.d = 0;
			this.tx = -this.tx;
			this.ty = -this.ty;
		} else {
			norm = 1.0 / norm;
			var a1 = this.d * norm;
			this.d = this.a * norm;
			this.a = a1;
			this.b *= -norm;
			this.c *= -norm;
			var tx1 = -this.a * this.tx - this.c * this.ty;
			this.ty = -this.b * this.tx - this.d * this.ty;
			this.tx = tx1;
		}
		return this;
	}
	,rotate: function(theta) {
		var cos = Math.cos(theta);
		var sin = Math.sin(theta);
		var a1 = this.a * cos - this.b * sin;
		this.b = this.a * sin + this.b * cos;
		this.a = a1;
		var c1 = this.c * cos - this.d * sin;
		this.d = this.c * sin + this.d * cos;
		this.c = c1;
		var tx1 = this.tx * cos - this.ty * sin;
		this.ty = this.tx * sin + this.ty * cos;
		this.tx = tx1;
	}
	,scale: function(sx,sy) {
		this.a *= sx;
		this.b *= sy;
		this.c *= sx;
		this.d *= sy;
		this.tx *= sx;
		this.ty *= sy;
	}
	,setRotation: function(theta,scale) {
		if(scale == null) {
			scale = 1;
		}
		this.a = Math.cos(theta) * scale;
		this.c = Math.sin(theta) * scale;
		this.b = -this.c;
		this.d = this.a;
	}
	,setTo: function(a,b,c,d,tx,ty) {
		this.a = a;
		this.b = b;
		this.c = c;
		this.d = d;
		this.tx = tx;
		this.ty = ty;
	}
	,to3DString: function(roundPixels) {
		if(roundPixels == null) {
			roundPixels = false;
		}
		if(roundPixels) {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + (this.tx | 0) + ", " + (this.ty | 0) + ", 0, 1)";
		} else {
			return "matrix3d(" + this.a + ", " + this.b + ", 0, 0, " + this.c + ", " + this.d + ", 0, 0, 0, 0, 1, 0, " + this.tx + ", " + this.ty + ", 0, 1)";
		}
	}
	,toMozString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + "px, " + this.ty + "px)";
	}
	,toString: function() {
		return "matrix(" + this.a + ", " + this.b + ", " + this.c + ", " + this.d + ", " + this.tx + ", " + this.ty + ")";
	}
	,transformPoint: function(pos) {
		return new openfl_geom_Point(pos.x * this.a + pos.y * this.c + this.tx,pos.x * this.b + pos.y * this.d + this.ty);
	}
	,translate: function(dx,dy) {
		this.tx += dx;
		this.ty += dy;
	}
	,toArray: function(transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(this.__array == null) {
			this.__array = new Float32Array(9);
		}
		if(transpose) {
			this.__array[0] = this.a;
			this.__array[1] = this.b;
			this.__array[2] = 0;
			this.__array[3] = this.c;
			this.__array[4] = this.d;
			this.__array[5] = 0;
			this.__array[6] = this.tx;
			this.__array[7] = this.ty;
			this.__array[8] = 1;
		} else {
			this.__array[0] = this.a;
			this.__array[1] = this.c;
			this.__array[2] = this.tx;
			this.__array[3] = this.b;
			this.__array[4] = this.d;
			this.__array[5] = this.ty;
			this.__array[6] = 0;
			this.__array[7] = 0;
			this.__array[8] = 1;
		}
		return this.__array;
	}
	,__cleanValues: function() {
		this.a = Math.round(this.a * 1000) / 1000;
		this.b = Math.round(this.b * 1000) / 1000;
		this.c = Math.round(this.c * 1000) / 1000;
		this.d = Math.round(this.d * 1000) / 1000;
		this.tx = Math.round(this.tx * 10) / 10;
		this.ty = Math.round(this.ty * 10) / 10;
	}
	,__toMatrix3: function() {
		return new lime_math_Matrix3(this.a,this.b,this.c,this.d,this.tx,this.ty);
	}
	,__transformInversePoint: function(point) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			point.x = -this.tx;
			point.y = -this.ty;
		} else {
			var px = 1.0 / norm * (this.c * (this.ty - point.y) + this.d * (point.x - this.tx));
			point.y = 1.0 / norm * (this.a * (point.y - this.ty) + this.b * (this.tx - point.x));
			point.x = px;
		}
	}
	,__transformInverseX: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.tx;
		} else {
			return 1.0 / norm * (this.c * (this.ty - py) + this.d * (px - this.tx));
		}
	}
	,__transformInverseY: function(px,py) {
		var norm = this.a * this.d - this.b * this.c;
		if(norm == 0) {
			return -this.ty;
		} else {
			return 1.0 / norm * (this.a * (py - this.ty) + this.b * (this.tx - px));
		}
	}
	,__transformPoint: function(point) {
		var px = point.x;
		var py = point.y;
		point.x = px * this.a + py * this.c + this.tx;
		point.y = px * this.b + py * this.d + this.ty;
	}
	,__transformX: function(px,py) {
		return px * this.a + py * this.c + this.tx;
	}
	,__transformY: function(px,py) {
		return px * this.b + py * this.d + this.ty;
	}
	,__translateTransformed: function(px,py) {
		this.tx = px * this.a + py * this.c + this.tx;
		this.ty = px * this.b + py * this.d + this.ty;
	}
	,__class__: openfl_geom_Matrix
};
var openfl_geom_Point = function(x,y) {
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
};
$hxClasses["openfl.geom.Point"] = openfl_geom_Point;
openfl_geom_Point.__name__ = ["openfl","geom","Point"];
openfl_geom_Point.distance = function(pt1,pt2) {
	var dx = pt1.x - pt2.x;
	var dy = pt1.y - pt2.y;
	return Math.sqrt(dx * dx + dy * dy);
};
openfl_geom_Point.interpolate = function(pt1,pt2,f) {
	return new openfl_geom_Point(pt2.x + f * (pt1.x - pt2.x),pt2.y + f * (pt1.y - pt2.y));
};
openfl_geom_Point.polar = function(len,angle) {
	return new openfl_geom_Point(len * Math.cos(angle),len * Math.sin(angle));
};
openfl_geom_Point.prototype = {
	length: null
	,x: null
	,y: null
	,add: function(v) {
		return new openfl_geom_Point(v.x + this.x,v.y + this.y);
	}
	,clone: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,copyFrom: function(sourcePoint) {
		this.x = sourcePoint.x;
		this.y = sourcePoint.y;
	}
	,equals: function(toCompare) {
		if(toCompare != null && toCompare.x == this.x) {
			return toCompare.y == this.y;
		} else {
			return false;
		}
	}
	,normalize: function(thickness) {
		if(this.x == 0 && this.y == 0) {
			return;
		} else {
			var norm = thickness / Math.sqrt(this.x * this.x + this.y * this.y);
			this.x *= norm;
			this.y *= norm;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,setTo: function(xa,ya) {
		this.x = xa;
		this.y = ya;
	}
	,subtract: function(v) {
		return new openfl_geom_Point(this.x - v.x,this.y - v.y);
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ")";
	}
	,__toLimeVector2: function() {
		return new lime_math_Vector2(this.x,this.y);
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y);
	}
	,__class__: openfl_geom_Point
	,__properties__: {get_length:"get_length"}
};
var openfl_geom_ColorTransform = function(redMultiplier,greenMultiplier,blueMultiplier,alphaMultiplier,redOffset,greenOffset,blueOffset,alphaOffset) {
	if(alphaOffset == null) {
		alphaOffset = 0;
	}
	if(blueOffset == null) {
		blueOffset = 0;
	}
	if(greenOffset == null) {
		greenOffset = 0;
	}
	if(redOffset == null) {
		redOffset = 0;
	}
	if(alphaMultiplier == null) {
		alphaMultiplier = 1;
	}
	if(blueMultiplier == null) {
		blueMultiplier = 1;
	}
	if(greenMultiplier == null) {
		greenMultiplier = 1;
	}
	if(redMultiplier == null) {
		redMultiplier = 1;
	}
	this.redMultiplier = redMultiplier;
	this.greenMultiplier = greenMultiplier;
	this.blueMultiplier = blueMultiplier;
	this.alphaMultiplier = alphaMultiplier;
	this.redOffset = redOffset;
	this.greenOffset = greenOffset;
	this.blueOffset = blueOffset;
	this.alphaOffset = alphaOffset;
};
$hxClasses["openfl.geom.ColorTransform"] = openfl_geom_ColorTransform;
openfl_geom_ColorTransform.__name__ = ["openfl","geom","ColorTransform"];
openfl_geom_ColorTransform.prototype = {
	alphaMultiplier: null
	,alphaOffset: null
	,blueMultiplier: null
	,blueOffset: null
	,greenMultiplier: null
	,greenOffset: null
	,redMultiplier: null
	,redOffset: null
	,concat: function(second) {
		this.redMultiplier *= second.redMultiplier;
		this.greenMultiplier *= second.greenMultiplier;
		this.blueMultiplier *= second.blueMultiplier;
		this.alphaMultiplier *= second.alphaMultiplier;
		this.redOffset = second.redMultiplier * this.redOffset + second.redOffset;
		this.greenOffset = second.greenMultiplier * this.greenOffset + second.greenOffset;
		this.blueOffset = second.blueMultiplier * this.blueOffset + second.blueOffset;
		this.alphaOffset = second.alphaMultiplier * this.alphaOffset + second.alphaOffset;
	}
	,toString: function() {
		return "(redMultiplier=" + this.redMultiplier + ", greenMultiplier=" + this.greenMultiplier + ", blueMultiplier=" + this.blueMultiplier + ", alphaMultiplier=" + this.alphaMultiplier + ", redOffset=" + this.redOffset + ", greenOffset=" + this.greenOffset + ", blueOffset=" + this.blueOffset + ", alphaOffset=" + this.alphaOffset + ")";
	}
	,__clone: function() {
		return new openfl_geom_ColorTransform(this.redMultiplier,this.greenMultiplier,this.blueMultiplier,this.alphaMultiplier,this.redOffset,this.greenOffset,this.blueOffset,this.alphaOffset);
	}
	,__combine: function(ct) {
		this.redMultiplier *= ct.redMultiplier;
		this.greenMultiplier *= ct.greenMultiplier;
		this.blueMultiplier *= ct.blueMultiplier;
		this.alphaMultiplier *= ct.alphaMultiplier;
		this.redOffset += ct.redOffset;
		this.greenOffset += ct.greenOffset;
		this.blueOffset += ct.blueOffset;
		this.alphaOffset += ct.alphaOffset;
	}
	,__equals: function(ct,skipAlphaMultiplier) {
		if(skipAlphaMultiplier == null) {
			skipAlphaMultiplier = false;
		}
		if(ct != null && this.redMultiplier == ct.redMultiplier && this.greenMultiplier == ct.greenMultiplier && this.blueMultiplier == ct.blueMultiplier && (skipAlphaMultiplier || this.alphaMultiplier == ct.alphaMultiplier) && this.redOffset == ct.redOffset && this.greenOffset == ct.greenOffset && this.blueOffset == ct.blueOffset) {
			return this.alphaOffset == ct.alphaOffset;
		} else {
			return false;
		}
	}
	,__isDefault: function() {
		if(this.redMultiplier == 1 && this.greenMultiplier == 1 && this.blueMultiplier == 1 && this.alphaMultiplier == 1 && this.redOffset == 0 && this.greenOffset == 0 && this.blueOffset == 0) {
			return this.alphaOffset == 0;
		} else {
			return false;
		}
	}
	,get_color: function() {
		return (this.redOffset | 0) << 16 | (this.greenOffset | 0) << 8 | (this.blueOffset | 0);
	}
	,set_color: function(value) {
		this.redOffset = value >> 16 & 255;
		this.greenOffset = value >> 8 & 255;
		this.blueOffset = value & 255;
		this.redMultiplier = 0;
		this.greenMultiplier = 0;
		this.blueMultiplier = 0;
		return this.get_color();
	}
	,__toLimeColorMatrix: function() {
		var array = [this.redMultiplier,0,0,0,this.redOffset / 255,0,this.greenMultiplier,0,0,this.greenOffset / 255,0,0,this.blueMultiplier,0,this.blueOffset / 255,0,0,0,this.alphaMultiplier,this.alphaOffset / 255];
		return array != null?new Float32Array(array):null;
	}
	,__class__: openfl_geom_ColorTransform
	,__properties__: {set_color:"set_color",get_color:"get_color"}
};
var openfl_Lib = function() { };
$hxClasses["openfl.Lib"] = openfl_Lib;
openfl_Lib.__name__ = ["openfl","Lib"];
openfl_Lib.application = null;
openfl_Lib["as"] = function(v,c) {
	if(js_Boot.__instanceof(v,c)) {
		return v;
	} else {
		return null;
	}
};
openfl_Lib.attach = function(name) {
	return new openfl_display_MovieClip();
};
openfl_Lib.embed = $hx_exports["openfl"]["embed"] = function(elementName,width,height,background,assetsPrefix) {
	lime_system_System.embed(elementName,width,height,background,assetsPrefix);
};
openfl_Lib.getTimer = function() {
	return lime_system_System.getTimer();
};
openfl_Lib.getURL = function(request,target) {
	if(target == null) {
		target = "_blank";
	}
	window.open(request.url,target);
};
openfl_Lib.notImplemented = function(api) {
	var _this = openfl_Lib.__sentWarnings;
	if(!(__map_reserved[api] != null?_this.existsReserved(api):_this.h.hasOwnProperty(api))) {
		var _this1 = openfl_Lib.__sentWarnings;
		if(__map_reserved[api] != null) {
			_this1.setReserved(api,true);
		} else {
			_this1.h[api] = true;
		}
		haxe_Log.trace("Warning: " + api + " is not implemented",{ fileName : "Lib.hx", lineNumber : 113, className : "openfl.Lib", methodName : "notImplemented"});
	}
};
openfl_Lib.preventDefaultTouchMove = function() {
	window.document.addEventListener("touchmove",function(evt) {
		evt.preventDefault();
	},false);
};
openfl_Lib.trace = function(arg) {
	haxe_Log.trace(arg,{ fileName : "Lib.hx", lineNumber : 144, className : "openfl.Lib", methodName : "trace"});
};
var openfl__$Vector_Vector_$Impl_$ = {};
$hxClasses["openfl._Vector.Vector_Impl_"] = openfl__$Vector_Vector_$Impl_$;
openfl__$Vector_Vector_$Impl_$.__name__ = ["openfl","_Vector","Vector_Impl_"];
openfl__$Vector_Vector_$Impl_$.__properties__ = {set_fixed:"set_fixed",get_fixed:"get_fixed",set_length:"set_length",get_length:"get_length"}
openfl__$Vector_Vector_$Impl_$._new = function(length,fixed) {
	if(fixed == null) {
		fixed = false;
	}
	if(length == null) {
		length = 0;
	}
	var this1 = new openfl_VectorData();
	this1.data = new Array(length);
	this1.length = length;
	this1.fixed = fixed;
	return this1;
};
openfl__$Vector_Vector_$Impl_$.concat = function(this1,a) {
	var vectorData = new openfl_VectorData();
	vectorData.length = a != null?this1.length + a.length:this1.length;
	vectorData.fixed = false;
	var length = vectorData.length;
	vectorData.data = new Array(length);
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	if(a != null) {
		haxe_ds__$Vector_Vector_$Impl_$.blit(a.data,0,vectorData.data,this1.length,a.length);
	}
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.copy = function(this1) {
	var vectorData = new openfl_VectorData();
	vectorData.length = this1.length;
	vectorData.fixed = this1.fixed;
	var length = this1.length;
	vectorData.data = new Array(length);
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.iterator = function(this1) {
	return new openfl_VectorDataIterator(this1);
};
openfl__$Vector_Vector_$Impl_$.join = function(this1,sep) {
	var output = "";
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(i > 0) {
			output += sep;
		}
		output += Std.string(this1.data[i]);
	}
	return output;
};
openfl__$Vector_Vector_$Impl_$.pop = function(this1) {
	var value = null;
	if(!this1.fixed) {
		if(this1.length > 0) {
			this1.length--;
			value = this1.data[this1.length];
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.push = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var length = this1.data.length + 10;
			var data = new Array(length);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
		this1.data[this1.length - 1] = x;
	}
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.reverse = function(this1) {
	var length = this1.length;
	var data = new Array(length);
	var _g1 = 0;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		data[this1.length - 1 - i] = this1.data[i];
	}
	this1.data = data;
};
openfl__$Vector_Vector_$Impl_$.shift = function(this1) {
	if(!this1.fixed && this1.length > 0) {
		this1.length--;
		var value = this1.data[0];
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,1,this1.data,0,this1.length);
		return value;
	}
	return null;
};
openfl__$Vector_Vector_$Impl_$.unshift = function(this1,x) {
	if(!this1.fixed) {
		this1.length++;
		if(this1.data.length < this1.length) {
			var length = this1.length + 10;
			var data = new Array(length);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,1,this1.data.length);
			this1.data = data;
		} else {
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,this1.data,1,this1.length - 1);
		}
		this1.data[0] = x;
	}
};
openfl__$Vector_Vector_$Impl_$.slice = function(this1,pos,end) {
	if(end == null) {
		end = 0;
	}
	if(pos == null) {
		pos = 0;
	}
	if(pos < 0) {
		pos += this1.length;
	}
	if(end <= 0) {
		end += this1.length;
	}
	if(end > this1.length) {
		end = this1.length;
	}
	var length = end - pos;
	if(length <= 0 || length > this1.length) {
		length = this1.length;
	}
	var vectorData = new openfl_VectorData();
	vectorData.length = end - pos;
	vectorData.fixed = true;
	vectorData.data = new Array(length);
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,length);
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.sort = function(this1,f) {
	var array = haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data);
	array.sort(f);
	var length = array.length;
	var vec = new Array(length);
	var _g1 = 0;
	var _g = array.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = array[i];
	}
	this1.data = vec;
};
openfl__$Vector_Vector_$Impl_$.splice = function(this1,pos,len) {
	if(pos < 0) {
		pos += this1.length;
	}
	if(pos + len > this1.length) {
		len = this1.length - pos;
	}
	if(len < 0) {
		len = 0;
	}
	var vectorData = new openfl_VectorData();
	vectorData.length = len;
	vectorData.fixed = false;
	vectorData.data = new Array(len);
	haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos,vectorData.data,0,len);
	if(len > 0) {
		this1.length -= len;
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,pos + len,this1.data,pos,this1.length - pos);
	}
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toString = function(this1) {
	return haxe_ds__$Vector_Vector_$Impl_$.toArray(this1.data).toString();
};
openfl__$Vector_Vector_$Impl_$.indexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	var value = -1;
	var _g1 = from;
	var _g = this1.length;
	while(_g1 < _g) {
		var i = _g1++;
		if(this1.data[i] == x) {
			value = i;
			break;
		}
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.lastIndexOf = function(this1,x,from) {
	if(from == null) {
		from = 0;
	}
	var value = -1;
	var i = this1.length - 1;
	while(i >= from) {
		if(this1.data[i] == x) {
			value = i;
			break;
		}
		--i;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.ofArray = function(a) {
	var vectorData = new openfl_VectorData();
	vectorData.length = a.length;
	vectorData.fixed = true;
	var length = a.length;
	var vec = new Array(length);
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = a[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.convert = function(v) {
	return v;
};
openfl__$Vector_Vector_$Impl_$.get = function(this1,index) {
	return this1.data[index];
};
openfl__$Vector_Vector_$Impl_$.set = function(this1,key,value) {
	if(!this1.fixed) {
		if(key >= this1.length) {
			this1.length = key + 1;
		}
		if(this1.data.length < this1.length) {
			var length = this1.data.length + 10;
			var data = new Array(length);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	return this1.data[key] = value;
};
openfl__$Vector_Vector_$Impl_$.fromArray = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var length = value.length;
	var vec = new Array(length);
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toArray = function(this1) {
	var value = [];
	var _g1 = 0;
	var _g = this1.data.length;
	while(_g1 < _g) value.push(this1.data[_g1++]);
	return value;
};
openfl__$Vector_Vector_$Impl_$.fromHaxeVector = function(value) {
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	vectorData.data = value;
	return vectorData;
};
openfl__$Vector_Vector_$Impl_$.toHaxeVector = function(this1) {
	return this1.data;
};
openfl__$Vector_Vector_$Impl_$.fromVectorData = function(value) {
	return value;
};
openfl__$Vector_Vector_$Impl_$.toVectorData = function(this1) {
	return this1;
};
openfl__$Vector_Vector_$Impl_$.get_length = function(this1) {
	return this1.length;
};
openfl__$Vector_Vector_$Impl_$.set_length = function(this1,value) {
	if(!this1.fixed) {
		if(value > this1.length) {
			var data = new Array(value);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,Math.min(this1.data.length,value) | 0);
			this1.data = data;
		}
		this1.length = value;
	}
	return value;
};
openfl__$Vector_Vector_$Impl_$.get_fixed = function(this1) {
	return this1.fixed;
};
openfl__$Vector_Vector_$Impl_$.set_fixed = function(this1,value) {
	return this1.fixed = value;
};
var openfl_VectorData = function() {
	this.length = 0;
};
$hxClasses["openfl.VectorData"] = openfl_VectorData;
openfl_VectorData.__name__ = ["openfl","VectorData"];
openfl_VectorData.prototype = {
	data: null
	,fixed: null
	,length: null
	,__class__: openfl_VectorData
};
var openfl_VectorDataIterator = function(data) {
	this.index = 0;
	this.vectorData = data;
};
$hxClasses["openfl.VectorDataIterator"] = openfl_VectorDataIterator;
openfl_VectorDataIterator.__name__ = ["openfl","VectorDataIterator"];
openfl_VectorDataIterator.prototype = {
	index: null
	,vectorData: null
	,hasNext: function() {
		return this.index < this.vectorData.length;
	}
	,next: function() {
		return this.vectorData.data[this.index++];
	}
	,__class__: openfl_VectorDataIterator
};
var openfl__$internal_renderer_AbstractMaskManager = function(renderSession) {
	this.renderSession = renderSession;
};
$hxClasses["openfl._internal.renderer.AbstractMaskManager"] = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_AbstractMaskManager.__name__ = ["openfl","_internal","renderer","AbstractMaskManager"];
openfl__$internal_renderer_AbstractMaskManager.prototype = {
	renderSession: null
	,pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,popRect: function() {
	}
	,saveState: function() {
	}
	,restoreState: function() {
	}
	,__class__: openfl__$internal_renderer_AbstractMaskManager
};
var openfl__$internal_renderer_AbstractRenderer = function(width,height) {
	this.width = width;
	this.height = height;
};
$hxClasses["openfl._internal.renderer.AbstractRenderer"] = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_AbstractRenderer.__name__ = ["openfl","_internal","renderer","AbstractRenderer"];
openfl__$internal_renderer_AbstractRenderer.prototype = {
	height: null
	,width: null
	,transparent: null
	,viewport: null
	,renderSession: null
	,render: function(stage) {
	}
	,renderShape: function(shape) {
	}
	,setViewport: function(x,y,width,height) {
	}
	,resize: function(width,height) {
	}
	,__class__: openfl__$internal_renderer_AbstractRenderer
};
var openfl__$internal_renderer_DrawCommandBuffer = function() {
	this.types = [];
	this.b = [];
	this.i = [];
	this.f = [];
	this.o = [];
	this.ff = [];
	this.ii = [];
	this.ts = [];
};
$hxClasses["openfl._internal.renderer.DrawCommandBuffer"] = openfl__$internal_renderer_DrawCommandBuffer;
openfl__$internal_renderer_DrawCommandBuffer.__name__ = ["openfl","_internal","renderer","DrawCommandBuffer"];
openfl__$internal_renderer_DrawCommandBuffer.prototype = {
	types: null
	,b: null
	,f: null
	,ff: null
	,i: null
	,ii: null
	,o: null
	,ts: null
	,append: function(other) {
		var data = new openfl__$internal_renderer_DrawCommandReader(other);
		var _g = 0;
		var _g1 = other.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				this.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				break;
			case 1:
				var c1 = data.readBeginFill();
				this.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				this.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				this.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				this.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				this.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				this.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 7:
				var c7 = data.readDrawPath();
				this.drawPath(openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands(c7),openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c7),openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding(c7));
				break;
			case 8:
				var c8 = data.readDrawRect();
				this.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c8));
				break;
			case 9:
				var c9 = data.readDrawRoundRect();
				this.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c9),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c9));
				break;
			case 10:
				var c10 = data.readDrawTiles();
				this.drawTiles(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader(c10),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c10));
				break;
			case 11:
				var c11 = data.readDrawTriangles();
				this.drawTriangles(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c11),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c11),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c11),openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c11));
				break;
			case 12:
				data.readEndFill();
				this.endFill();
				break;
			case 13:
				var c12 = data.readLineBitmapStyle();
				this.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c12),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c12),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c12),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c12));
				break;
			case 14:
				var c13 = data.readLineGradientStyle();
				this.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c13),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c13));
				break;
			case 15:
				var c14 = data.readLineStyle();
				this.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c14),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c14));
				break;
			case 16:
				var c15 = data.readLineTo();
				this.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c15),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c15));
				break;
			case 17:
				var c16 = data.readMoveTo();
				this.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c16),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c16));
				break;
			case 18:
				this.overrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(data.readOverrideMatrix()));
				break;
			default:
			}
		}
		data.destroy();
		return other;
	}
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,beginFill: function(color,alpha) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_FILL);
		this.i.push(color);
		this.f.push(alpha);
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,clear: function() {
		this.types.splice(0,this.types.length);
		this.b.splice(0,this.b.length);
		this.i.splice(0,this.i.length);
		this.f.splice(0,this.f.length);
		this.o.splice(0,this.o.length);
		this.ff.splice(0,this.ff.length);
		this.ii.splice(0,this.ii.length);
		this.ts.splice(0,this.ts.length);
	}
	,copy: function() {
		var copy = new openfl__$internal_renderer_DrawCommandBuffer();
		copy.append(this);
		return copy;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO);
		this.f.push(controlX1);
		this.f.push(controlY1);
		this.f.push(controlX2);
		this.f.push(controlY2);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.CURVE_TO);
		this.f.push(controlX);
		this.f.push(controlY);
		this.f.push(anchorX);
		this.f.push(anchorY);
	}
	,destroy: function() {
		this.clear();
		this.types = null;
		this.b = null;
		this.i = null;
		this.f = null;
		this.o = null;
		this.ff = null;
		this.ii = null;
		this.ts = null;
	}
	,drawCircle: function(x,y,radius) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(radius);
	}
	,drawEllipse: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawPath: function(commands,data,winding) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_PATH);
		this.o.push(commands);
		this.o.push(data);
		this.o.push(winding);
	}
	,drawRect: function(x,y,width,height) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT);
		this.f.push(x);
		this.f.push(y);
		this.f.push(width);
		this.f.push(height);
		this.f.push(ellipseWidth);
		this.o.push(ellipseHeight);
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TILES);
		this.ts.push(sheet);
		this.ff.push(tileData);
		this.b.push(smooth);
		this.i.push(flags);
		this.o.push(shader);
		this.i.push(count);
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES);
		this.o.push(vertices);
		this.o.push(indices);
		this.o.push(uvtData);
		this.o.push(culling);
	}
	,endFill: function() {
		this.types.push(openfl__$internal_renderer_DrawCommandType.END_FILL);
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE);
		this.o.push(bitmap);
		this.o.push(matrix);
		this.b.push(repeat);
		this.b.push(smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE);
		this.o.push(type);
		this.ii.push(colors);
		this.ff.push(alphas);
		this.ii.push(ratios);
		this.o.push(matrix);
		this.o.push(spreadMethod);
		this.o.push(interpolationMethod);
		this.f.push(focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_STYLE);
		this.o.push(thickness);
		this.i.push(color);
		this.f.push(alpha);
		this.b.push(pixelHinting);
		this.o.push(scaleMode);
		this.o.push(caps);
		this.o.push(joints);
		this.f.push(miterLimit);
	}
	,lineTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.LINE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,moveTo: function(x,y) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.MOVE_TO);
		this.f.push(x);
		this.f.push(y);
	}
	,overrideMatrix: function(matrix) {
		this.types.push(openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX);
		this.o.push(matrix);
	}
	,get_length: function() {
		return this.types.length;
	}
	,__class__: openfl__$internal_renderer_DrawCommandBuffer
	,__properties__: {get_length:"get_length"}
};
var openfl__$internal_renderer_DrawCommandReader = function(buffer) {
	this.buffer = buffer;
	this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	this.prev = openfl__$internal_renderer_DrawCommandType.UNKNOWN;
};
$hxClasses["openfl._internal.renderer.DrawCommandReader"] = openfl__$internal_renderer_DrawCommandReader;
openfl__$internal_renderer_DrawCommandReader.__name__ = ["openfl","_internal","renderer","DrawCommandReader"];
openfl__$internal_renderer_DrawCommandReader.prototype = {
	buffer: null
	,bPos: null
	,iiPos: null
	,iPos: null
	,ffPos: null
	,fPos: null
	,oPos: null
	,prev: null
	,tsPos: null
	,advance: function() {
		switch(this.prev[1]) {
		case 0:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 1:
			this.iPos += 1;
			this.fPos += 1;
			break;
		case 2:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 3:
			this.fPos += 6;
			break;
		case 4:
			this.fPos += 4;
			break;
		case 5:
			this.fPos += 3;
			break;
		case 6:
			this.fPos += 4;
			break;
		case 7:
			this.oPos += 3;
			break;
		case 8:
			this.fPos += 4;
			break;
		case 9:
			this.fPos += 5;
			this.oPos += 1;
			break;
		case 10:
			this.tsPos += 1;
			this.ffPos += 1;
			this.bPos += 1;
			this.iPos += 2;
			this.oPos += 1;
			break;
		case 11:
			this.oPos += 4;
			break;
		case 12:
			break;
		case 13:
			this.oPos += 2;
			this.bPos += 2;
			break;
		case 14:
			this.oPos += 4;
			this.iiPos += 2;
			this.ffPos += 1;
			this.fPos += 1;
			break;
		case 15:
			this.oPos += 4;
			this.iPos += 1;
			this.fPos += 2;
			this.bPos += 1;
			break;
		case 16:
			this.fPos += 2;
			break;
		case 17:
			this.fPos += 2;
			break;
		case 18:
			this.oPos += 1;
			break;
		default:
		}
	}
	,bool: function(index) {
		return this.buffer.b[this.bPos + index];
	}
	,destroy: function() {
		this.buffer = null;
		this.reset();
	}
	,fArr: function(index) {
		return this.buffer.ff[this.ffPos + index];
	}
	,'float': function(index) {
		return this.buffer.f[this.fPos + index];
	}
	,iArr: function(index) {
		return this.buffer.ii[this.iiPos + index];
	}
	,'int': function(index) {
		return this.buffer.i[this.iPos + index];
	}
	,obj: function(index) {
		return this.buffer.o[this.oPos + index];
	}
	,readBeginBitmapFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new(this);
	}
	,readBeginFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new(this);
	}
	,readBeginGradientFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new(this);
	}
	,readCubicCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new(this);
	}
	,readCurveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.CURVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new(this);
	}
	,readDrawCircle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new(this);
	}
	,readDrawEllipse: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE;
		return openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new(this);
	}
	,readDrawPath: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_PATH;
		return openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new(this);
	}
	,readDrawRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new(this);
	}
	,readDrawRoundRect: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT;
		return openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new(this);
	}
	,readDrawTiles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TILES;
		return openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new(this);
	}
	,readDrawTriangles: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES;
		return openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new(this);
	}
	,readEndFill: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.END_FILL;
		return openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new(this);
	}
	,readLineBitmapStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new(this);
	}
	,readLineGradientStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new(this);
	}
	,readLineStyle: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_STYLE;
		return openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new(this);
	}
	,readLineTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.LINE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new(this);
	}
	,readMoveTo: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.MOVE_TO;
		return openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new(this);
	}
	,readOverrideMatrix: function() {
		this.advance();
		this.prev = openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX;
		return openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new(this);
	}
	,reset: function() {
		this.bPos = this.iPos = this.fPos = this.oPos = this.ffPos = this.iiPos = this.tsPos = 0;
	}
	,skip: function(type) {
		this.advance();
		this.prev = type;
	}
	,tileSheet: function(index) {
		return this.buffer.ts[this.tsPos + index];
	}
	,__class__: openfl__$internal_renderer_DrawCommandReader
};
var openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginBitmapFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginBitmapFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.__properties__ = {get_alpha:"get_alpha",get_color:"get_color"}
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.BeginGradientFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","BeginGradientFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CubicCurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CubicCurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY2:"get_controlY2",get_controlX2:"get_controlX2",get_controlY1:"get_controlY1",get_controlX1:"get_controlX1"}
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1 = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1 = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2 = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2 = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](5);
};
var openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.CurveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","CurveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.__properties__ = {get_anchorY:"get_anchorY",get_anchorX:"get_anchorX",get_controlY:"get_controlY",get_controlX:"get_controlX"}
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawCircleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawCircleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.__properties__ = {get_radius:"get_radius",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius = function(this1) {
	return this1["float"](2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawEllipseView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawEllipseView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawPathView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawPathView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.__properties__ = {get_winding:"get_winding",get_data:"get_data",get_commands:"get_commands"}
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding = function(this1) {
	return this1.obj(2);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.__properties__ = {get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawRoundRectView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawRoundRectView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.__properties__ = {get_ellipseHeight:"get_ellipseHeight",get_ellipseWidth:"get_ellipseWidth",get_height:"get_height",get_width:"get_width",get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width = function(this1) {
	return this1["float"](2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height = function(this1) {
	return this1["float"](3);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth = function(this1) {
	return this1["float"](4);
};
openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTilesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTilesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.__properties__ = {get_count:"get_count",get_shader:"get_shader",get_flags:"get_flags",get_smooth:"get_smooth",get_tileData:"get_tileData",get_sheet:"get_sheet"}
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet = function(this1) {
	return this1.tileSheet(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count = function(this1) {
	return this1["int"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.DrawTrianglesView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","DrawTrianglesView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.__properties__ = {get_culling:"get_culling",get_uvtData:"get_uvtData",get_indices:"get_indices",get_vertices:"get_vertices"}
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling = function(this1) {
	return this1.obj(3);
};
var openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.EndFillView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","EndFillView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_EndFillView_$Impl_$._new = function(d) {
	return d;
};
var openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineBitmapStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineBitmapStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.__properties__ = {get_smooth:"get_smooth",get_repeat:"get_repeat",get_matrix:"get_matrix",get_bitmap:"get_bitmap"}
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth = function(this1) {
	return this1.bool(1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineGradientStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineGradientStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.__properties__ = {get_focalPointRatio:"get_focalPointRatio",get_interpolationMethod:"get_interpolationMethod",get_spreadMethod:"get_spreadMethod",get_matrix:"get_matrix",get_ratios:"get_ratios",get_alphas:"get_alphas",get_colors:"get_colors",get_type:"get_type"}
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors = function(this1) {
	return this1.iArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas = function(this1) {
	return this1.fArr(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios = function(this1) {
	return this1.iArr(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio = function(this1) {
	return this1["float"](0);
};
var openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineStyleView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineStyleView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.__properties__ = {get_miterLimit:"get_miterLimit",get_joints:"get_joints",get_caps:"get_caps",get_scaleMode:"get_scaleMode",get_pixelHinting:"get_pixelHinting",get_alpha:"get_alpha",get_color:"get_color",get_thickness:"get_thickness"}
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness = function(this1) {
	return this1.obj(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color = function(this1) {
	return this1["int"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting = function(this1) {
	return this1.bool(0);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode = function(this1) {
	return this1.obj(1);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps = function(this1) {
	return this1.obj(2);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints = function(this1) {
	return this1.obj(3);
};
openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.LineToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","LineToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.MoveToView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","MoveToView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.__properties__ = {get_y:"get_y",get_x:"get_x"}
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x = function(this1) {
	return this1["float"](0);
};
openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y = function(this1) {
	return this1["float"](1);
};
var openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$ = {};
$hxClasses["openfl._internal.renderer._DrawCommandReader.OverrideMatrixView_Impl_"] = openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$;
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__name__ = ["openfl","_internal","renderer","_DrawCommandReader","OverrideMatrixView_Impl_"];
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.__properties__ = {get_matrix:"get_matrix"}
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$._new = function(d) {
	return d;
};
openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix = function(this1) {
	return this1.obj(0);
};
var openfl__$internal_renderer_DrawCommandType = $hxClasses["openfl._internal.renderer.DrawCommandType"] = { __ename__ : ["openfl","_internal","renderer","DrawCommandType"], __constructs__ : ["BEGIN_BITMAP_FILL","BEGIN_FILL","BEGIN_GRADIENT_FILL","CUBIC_CURVE_TO","CURVE_TO","DRAW_CIRCLE","DRAW_ELLIPSE","DRAW_PATH","DRAW_RECT","DRAW_ROUND_RECT","DRAW_TILES","DRAW_TRIANGLES","END_FILL","LINE_BITMAP_STYLE","LINE_GRADIENT_STYLE","LINE_STYLE","LINE_TO","MOVE_TO","OVERRIDE_MATRIX","UNKNOWN"] };
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL = ["BEGIN_BITMAP_FILL",0];
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL = ["BEGIN_FILL",1];
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL = ["BEGIN_GRADIENT_FILL",2];
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO = ["CUBIC_CURVE_TO",3];
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CUBIC_CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.CURVE_TO = ["CURVE_TO",4];
openfl__$internal_renderer_DrawCommandType.CURVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.CURVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE = ["DRAW_CIRCLE",5];
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_CIRCLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE = ["DRAW_ELLIPSE",6];
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ELLIPSE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH = ["DRAW_PATH",7];
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_PATH.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT = ["DRAW_RECT",8];
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT = ["DRAW_ROUND_RECT",9];
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_ROUND_RECT.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES = ["DRAW_TILES",10];
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TILES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES = ["DRAW_TRIANGLES",11];
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.toString = $estr;
openfl__$internal_renderer_DrawCommandType.DRAW_TRIANGLES.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.END_FILL = ["END_FILL",12];
openfl__$internal_renderer_DrawCommandType.END_FILL.toString = $estr;
openfl__$internal_renderer_DrawCommandType.END_FILL.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE = ["LINE_BITMAP_STYLE",13];
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_BITMAP_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE = ["LINE_GRADIENT_STYLE",14];
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_GRADIENT_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE = ["LINE_STYLE",15];
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_STYLE.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.LINE_TO = ["LINE_TO",16];
openfl__$internal_renderer_DrawCommandType.LINE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.LINE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.MOVE_TO = ["MOVE_TO",17];
openfl__$internal_renderer_DrawCommandType.MOVE_TO.toString = $estr;
openfl__$internal_renderer_DrawCommandType.MOVE_TO.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX = ["OVERRIDE_MATRIX",18];
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.toString = $estr;
openfl__$internal_renderer_DrawCommandType.OVERRIDE_MATRIX.__enum__ = openfl__$internal_renderer_DrawCommandType;
openfl__$internal_renderer_DrawCommandType.UNKNOWN = ["UNKNOWN",19];
openfl__$internal_renderer_DrawCommandType.UNKNOWN.toString = $estr;
openfl__$internal_renderer_DrawCommandType.UNKNOWN.__enum__ = openfl__$internal_renderer_DrawCommandType;
var openfl__$internal_renderer_GraphicsPaths = function() { };
$hxClasses["openfl._internal.renderer.GraphicsPaths"] = openfl__$internal_renderer_GraphicsPaths;
openfl__$internal_renderer_GraphicsPaths.__name__ = ["openfl","_internal","renderer","GraphicsPaths"];
openfl__$internal_renderer_GraphicsPaths.ellipse = function(points,x,y,rx,ry,segmentCount) {
	var seg = Math.PI * 2 / segmentCount;
	var _g1 = 0;
	var _g = segmentCount + 1;
	while(_g1 < _g) {
		var i = _g1++;
		points.push(x + Math.sin(seg * i) * rx);
		points.push(y + Math.cos(seg * i) * ry);
	}
};
openfl__$internal_renderer_GraphicsPaths.cubicCurveTo = function(points,cx,cy,cx2,cy2,x,y) {
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	while(_g1 < 21) {
		tmp = _g1++ / 20;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.curveTo = function(points,cx,cy,x,y) {
	var xa = 0;
	var ya = 0;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	while(_g1 < 21) {
		tmp = _g1++ / 20;
		xa = fromX + (cx - fromX) * tmp;
		ya = fromY + (cy - fromY) * tmp;
		px = xa + (cx + (x - cx) * tmp - xa) * tmp;
		py = ya + (cy + (y - cy) * tmp - ya) * tmp;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_GraphicsPaths.roundRectangle = function(points,x,y,width,height,rx,ry) {
	var xe = x + width;
	var ye = y + height;
	var cx1 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cx2 = -rx + rx * openfl__$internal_renderer_GraphicsPaths.TAN22;
	var cy1 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.SIN45;
	var cy2 = -ry + ry * openfl__$internal_renderer_GraphicsPaths.TAN22;
	points.push(xe);
	points.push(ye - ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,ye,xe - rx,ye);
	points.push(x + rx);
	points.push(ye);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,ye + cy2,x,ye - ry);
	points.push(x);
	points.push(y + ry);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,x - cx2,y,x + rx,y);
	points.push(xe - rx);
	points.push(y);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_GraphicsPaths.curveTo(points,xe,y - cy2,xe,y + ry);
	points.push(xe);
	points.push(ye - ry);
};
var openfl__$internal_renderer_PolyK = function() { };
$hxClasses["openfl._internal.renderer.PolyK"] = openfl__$internal_renderer_PolyK;
openfl__$internal_renderer_PolyK.__name__ = ["openfl","_internal","renderer","PolyK"];
openfl__$internal_renderer_PolyK.triangulate = function(tgs,p) {
	var sign = true;
	var n = p.length >> 1;
	if(n < 3) {
		return [];
	}
	var _g = [];
	var _g2 = 0;
	while(_g2 < n) _g.push(_g2++);
	var avl = _g;
	var i = 0;
	var al = n;
	var earFound = false;
	while(al > 3) {
		var i0 = avl[i % al];
		var i1 = avl[(i + 1) % al];
		var i2 = avl[(i + 2) % al];
		var ax = p[2 * i0];
		var ay = p[2 * i0 + 1];
		var bx = p[2 * i1];
		var by = p[2 * i1 + 1];
		var cx = p[2 * i2];
		var cy = p[2 * i2 + 1];
		earFound = false;
		if(openfl__$internal_renderer_PolyK._convex(ax,ay,bx,by,cx,cy,sign)) {
			earFound = true;
			var _g21 = 0;
			var _g1 = al;
			while(_g21 < _g1) {
				var vi = avl[_g21++];
				if(vi == i0 || vi == i1 || vi == i2) {
					continue;
				}
				if(openfl__$internal_renderer_PolyK._PointInTriangle(p[2 * vi],p[2 * vi + 1],ax,ay,bx,by,cx,cy)) {
					earFound = false;
					break;
				}
			}
		}
		if(earFound) {
			tgs.push(i0);
			tgs.push(i1);
			tgs.push(i2);
			avl.splice((i + 1) % al,1);
			--al;
			i = 0;
		} else if(i++ > 3 * al) {
			if(sign) {
				tgs = [];
				var _g11 = [];
				var _g3 = 0;
				while(_g3 < n) _g11.push(_g3++);
				avl = _g11;
				i = 0;
				al = n;
				sign = false;
			} else {
				haxe_Log.trace("Warning: shape too complex to fill",{ fileName : "PolyK.hx", lineNumber : 104, className : "openfl._internal.renderer.PolyK", methodName : "triangulate"});
				return [];
			}
		}
	}
	tgs.push(avl[0]);
	tgs.push(avl[1]);
	tgs.push(avl[2]);
	return tgs;
};
openfl__$internal_renderer_PolyK._PointInTriangle = function(px,py,ax,ay,bx,by,cx,cy) {
	var v0x = cx - ax | 0;
	var v0y = cy - ay | 0;
	var v1x = bx - ax | 0;
	var v1y = by - ay | 0;
	var v2x = px - ax | 0;
	var v2y = py - ay | 0;
	var dot00 = v0x * v0x + v0y * v0y;
	var dot01 = v0x * v1x + v0y * v1y;
	var dot02 = v0x * v2x + v0y * v2y;
	var dot11 = v1x * v1x + v1y * v1y;
	var dot12 = v1x * v2x + v1y * v2y;
	var invDenom = 1 / (dot00 * dot11 - dot01 * dot01);
	var u = (dot11 * dot02 - dot01 * dot12) * invDenom;
	var v = (dot00 * dot12 - dot01 * dot02) * invDenom;
	if(u >= 0 && v >= 0) {
		return u + v < 1;
	} else {
		return false;
	}
};
openfl__$internal_renderer_PolyK._convex = function(ax,ay,bx,by,cx,cy,sign) {
	return (ay - by) * (cx - bx) + (bx - ax) * (cy - by) >= 0 == sign;
};
var openfl__$internal_renderer_RenderSession = function() {
	this.activeTextures = 0;
};
$hxClasses["openfl._internal.renderer.RenderSession"] = openfl__$internal_renderer_RenderSession;
openfl__$internal_renderer_RenderSession.__name__ = ["openfl","_internal","renderer","RenderSession"];
openfl__$internal_renderer_RenderSession.prototype = {
	cairo: null
	,context: null
	,element: null
	,gl: null
	,renderer: null
	,roundPixels: null
	,transformProperty: null
	,transformOriginProperty: null
	,vendorPrefix: null
	,z: null
	,projectionMatrix: null
	,drawCount: null
	,currentBlendMode: null
	,activeTextures: null
	,shaderManager: null
	,maskManager: null
	,filterManager: null
	,blendModeManager: null
	,spriteBatch: null
	,stencilManager: null
	,defaultFramebuffer: null
	,__class__: openfl__$internal_renderer_RenderSession
};
var openfl__$internal_renderer_cairo_CairoBitmap = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoBitmap"] = openfl__$internal_renderer_cairo_CairoBitmap;
openfl__$internal_renderer_cairo_CairoBitmap.__name__ = ["openfl","_internal","renderer","cairo","CairoBitmap"];
openfl__$internal_renderer_cairo_CairoBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var cairo = renderSession.cairo;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) {
			renderSession.maskManager.pushMask(bitmap.__mask);
		}
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			var matrix = transform.__toMatrix3();
			matrix.tx = Math.round(matrix.tx);
			matrix.ty = Math.round(matrix.ty);
			cairo.set_matrix(matrix);
		} else {
			cairo.set_matrix(transform.__toMatrix3());
		}
		var surface = bitmap.bitmapData.getSurface();
		if(surface != null) {
			var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(surface);
			lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_filter(pattern,bitmap.smoothing?1:3);
			if(scrollRect != null) {
				cairo.pushGroup();
				cairo.set_source(pattern);
				cairo.newPath();
				cairo.rectangle(scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
				cairo.fill();
				cairo.popGroupToSource();
			} else {
				cairo.set_source(pattern);
			}
			if(bitmap.__worldAlpha == 1) {
				cairo.paint();
			} else {
				cairo.paintWithAlpha(bitmap.__worldAlpha);
			}
		}
		if(bitmap.__mask != null) {
			renderSession.maskManager.popMask();
		}
	}
};
var openfl__$internal_renderer_cairo_CairoGraphics = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoGraphics"] = openfl__$internal_renderer_cairo_CairoGraphics;
openfl__$internal_renderer_cairo_CairoGraphics.__name__ = ["openfl","_internal","renderer","cairo","CairoGraphics"];
openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = null;
openfl__$internal_renderer_cairo_CairoGraphics.bounds = null;
openfl__$internal_renderer_cairo_CairoGraphics.cairo = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.graphics = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasFill = null;
openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = null;
openfl__$internal_renderer_cairo_CairoGraphics.hitTesting = null;
openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix = null;
openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = null;
openfl__$internal_renderer_cairo_CairoGraphics.closePath = function() {
	if(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern == null) {
		return;
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
	if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
};
openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var pattern = null;
	switch(type) {
	case 0:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point1 = matrix.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix.transformPoint(new openfl_geom_Point(819.2,0));
		point1.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point2.x += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		point1.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		point2.y += openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createLinear(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		var x = matrix.tx + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.x;
		var y = matrix.ty + openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds.y;
		pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRadial(x,y,0,x,y,(point.x - matrix.tx) / 2);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = ((rgb & 16711680) >>> 16) / 255;
		var g = ((rgb & 65280) >>> 8) / 255;
		var b = (rgb & 255) / 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.addColorStopRGBA(pattern,ratio,r,g,b,alpha);
	}
	var mat = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.get_matrix(pattern);
	mat.tx = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	mat.ty = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(pattern,mat);
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern = function(bitmapFill,matrix,bitmapRepeat) {
	var pattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createForSurface(bitmapFill.getSurface());
	if(bitmapRepeat) {
		lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_extend(pattern,1);
	}
	openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = matrix;
	return pattern;
};
openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_cairo_CairoGraphics.TAN22;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_cairo_CairoGraphics.endFill = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.fillCommands,false);
	openfl__$internal_renderer_cairo_CairoGraphics.fillCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.endStroke = function() {
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
	openfl__$internal_renderer_cairo_CairoGraphics.playCommands(openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands,true);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
	openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_cairo_CairoGraphics.hitTest = function(graphics,x,y) {
	return false;
};
openfl__$internal_renderer_cairo_CairoGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data[t - 1];
		if(max < tmp) {
			max = tmp;
		}
	}
	var this1 = new openfl_VectorData();
	this1.data = new Array(0);
	this1.length = 0;
	this1.fixed = false;
	var result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var length = result.data.length + 10;
				var data = new Array(length);
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_cairo_CairoGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	if(commands.get_length() == 0) {
		return;
	}
	openfl__$internal_renderer_cairo_CairoGraphics.bounds = openfl__$internal_renderer_cairo_CairoGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_fillRule(1);
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(3);
	var hasPath = false;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	try {
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c));
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c);
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapRepeat = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c);
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				break;
			case 1:
				var c1 = data.readBeginFill();
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = false;
				} else {
					if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16) / 255,((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8) / 255,(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255) / 255,openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1));
					openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 2:
				var c2 = data.readBeginGradientFill();
				if(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern != null) {
					openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix = null;
				}
				openfl__$internal_renderer_cairo_CairoGraphics.fillPattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
				openfl__$internal_renderer_cairo_CairoGraphics.hasFill = true;
				openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill = null;
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3) - offsetY);
				break;
			case 4:
				var c4 = data.readCurveTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
				break;
			case 5:
				var c5 = data.readDrawCircle();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),0,Math.PI * 2);
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				hasPath = true;
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
				x -= offsetX;
				y -= offsetY;
				var kappa = .5522848;
				var ox = width / 2 * kappa;
				var oy = height / 2 * kappa;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c7 = data.readDrawRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 9:
				var c8 = data.readDrawRoundRect();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 10:
				var c9 = data.readDrawTiles();
				var useScale = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 1) > 0;
				var useRotation = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 2) > 0;
				var offsetX1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.x;
				var offsetY1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.y;
				var useTransform = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 16) > 0;
				var useRGB = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 4) > 0;
				var useAlpha = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 8) > 0;
				var useRect = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 32) > 0;
				var useOrigin = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 64) > 0;
				var useBlendAdd = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 65536) > 0;
				var useBlendOverlay = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 4194304) > 0;
				if(useTransform) {
					useScale = false;
					useRotation = false;
				}
				var scaleIndex = 0;
				var rotationIndex = 0;
				var rgbIndex = 0;
				var alphaIndex = 0;
				var transformIndex = 0;
				var numValues = 3;
				if(useRect) {
					if(useOrigin) {
						numValues = 8;
					} else {
						numValues = 6;
					}
				}
				if(useScale) {
					scaleIndex = numValues;
					++numValues;
				}
				if(useRotation) {
					rotationIndex = numValues;
					++numValues;
				}
				if(useTransform) {
					transformIndex = numValues;
					numValues += 4;
				}
				if(useRGB) {
					rgbIndex = numValues;
					numValues += 3;
				}
				if(useAlpha) {
					alphaIndex = numValues;
					++numValues;
				}
				var totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9).length;
				if(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9) >= 0 && totalCount > openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9)) {
					totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9);
				}
				var itemCount = totalCount / numValues | 0;
				var index = 0;
				var rect = null;
				var center = null;
				var previousTileID = -1;
				var surface;
				openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__bitmap.__sync();
				surface = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__bitmap.getSurface();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.save();
				if(useBlendAdd) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(12);
				}
				if(useBlendOverlay) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(16);
				}
				while(index < totalCount) {
					var i = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 2] | 0;
					var tileID = !useRect?i:-1;
					if(!useRect && tileID != previousTileID) {
						rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__tileRects[tileID];
						center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__centerPoints[tileID];
						previousTileID = tileID;
					} else if(useRect) {
						rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__rectTile;
						rect.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 2],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 3],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 4],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 5]);
						center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__point;
						if(useOrigin) {
							center.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 6],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 7]);
						} else {
							center.setTo(0,0);
						}
					}
					if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
						if(useTransform) {
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(new lime_math_Matrix3(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 1],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 2],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 3],0,0));
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index] - offsetX1,openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 1] - offsetY1);
						if(useRotation) {
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.rotate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + rotationIndex]);
						}
						if(useScale) {
							var scale = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + scaleIndex];
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.scale(scale,scale);
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.setSourceSurface(surface,0,0);
						if(useAlpha) {
							if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
								openfl__$internal_renderer_cairo_CairoGraphics.cairo.paintWithAlpha(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + alphaIndex]);
							}
						} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.paint();
						}
					}
					index += numValues;
				}
				if(useBlendAdd || useBlendOverlay) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_operator(2);
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.restore();
				break;
			case 11:
				var c10 = data.readDrawTriangles();
				var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c10);
				var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c10);
				var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c10);
				var colorFill = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill == null;
				if(colorFill && uvt != null) {
					throw "__break__";
				}
				var width1 = 0;
				var height1 = 0;
				if(!colorFill) {
					if(uvt == null) {
						var this1 = new openfl_VectorData();
						this1.data = new Array(0);
						this1.length = 0;
						this1.fixed = false;
						uvt = this1;
						var _g3 = 0;
						var _g2 = v.length / 2 | 0;
						while(_g3 < _g2) {
							var i1 = _g3++;
							var x1 = v.data[i1 * 2] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var length = uvt.data.length + 10;
									var data1 = new Array(length);
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
									uvt.data = data1;
								}
								uvt.data[uvt.length - 1] = x1;
							}
							var x2 = v.data[i1 * 2 + 1] / openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
							if(!uvt.fixed) {
								uvt.length++;
								if(uvt.data.length < uvt.length) {
									var length1 = uvt.data.length + 10;
									var data2 = new Array(length1);
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
									uvt.data = data2;
								}
								uvt.data[uvt.length - 1] = x2;
							}
						}
					}
					var normalizedUVT = openfl__$internal_renderer_cairo_CairoGraphics.normalizeUVT(uvt,openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c10).length != v.length);
					var maxUVT = normalizedUVT.max;
					uvt = normalizedUVT.uvt;
					if(maxUVT > 1) {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.width | 0;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bounds.height | 0;
					} else {
						width1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.width;
						height1 = openfl__$internal_renderer_cairo_CairoGraphics.bitmapFill.height;
					}
				}
				var i2 = 0;
				var l = ind.length;
				var a_;
				var b_;
				var c_;
				var iax;
				var iay;
				var ibx;
				var iby;
				var icx;
				var icy;
				var x11;
				var y1;
				var x21;
				var y2;
				var x3;
				var y3;
				var uvx1;
				var uvy1;
				var uvx2;
				var uvy2;
				var uvx3;
				var uvy3;
				var denom;
				var t1;
				var t2;
				var t3;
				var t4;
				var dx;
				var dy;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_antialias(1);
				while(i2 < l) {
					a_ = i2;
					b_ = i2 + 1;
					c_ = i2 + 2;
					iax = ind.data[a_] * 2;
					iay = ind.data[a_] * 2 + 1;
					ibx = ind.data[b_] * 2;
					iby = ind.data[b_] * 2 + 1;
					icx = ind.data[c_] * 2;
					icy = ind.data[c_] * 2 + 1;
					x11 = v.data[iax];
					y1 = v.data[iay];
					x21 = v.data[ibx];
					y2 = v.data[iby];
					x3 = v.data[icx];
					y3 = v.data[icy];
					switch(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c10)) {
					case 0:
						if((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0) {
							i2 += 3;
							continue;
						}
						break;
					case 2:
						if(!((x21 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0)) {
							i2 += 3;
							continue;
						}
						break;
					default:
					}
					if(colorFill) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y1);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y2);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
						if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
							openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
						}
						i2 += 3;
						continue;
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.identityMatrix();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.newPath();
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(x11,y1);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x21,y2);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(x3,y3);
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
					uvx1 = uvt.data[iax] * width1;
					uvx2 = uvt.data[ibx] * width1;
					uvx3 = uvt.data[icx] * width1;
					uvy1 = uvt.data[iay] * height1;
					uvy2 = uvt.data[iby] * height1;
					uvy3 = uvt.data[icy] * height1;
					denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
					if(denom == 0) {
						i2 += 3;
						continue;
					}
					t1 = -(uvy1 * (x3 - x21) - uvy2 * x3 + uvy3 * x21 + (uvy2 - uvy3) * x11) / denom;
					t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
					t3 = (uvx1 * (x3 - x21) - uvx2 * x3 + uvx3 * x21 + (uvx2 - uvx3) * x11) / denom;
					t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
					dx = (uvx1 * (uvy3 * x21 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x21) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
					dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_matrix(new lime_math_Matrix3(t1,t2,t3,t4,dx,dy));
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
					if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.fill();
					}
					i2 += 3;
				}
				break;
			case 13:
				var c11 = data.readLineBitmapStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createImagePattern(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c11));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 14:
				var c12 = data.readLineGradientStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = openfl__$internal_renderer_cairo_CairoGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c12));
				openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
				break;
			case 15:
				var c13 = data.readLineStyle();
				if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
					openfl__$internal_renderer_cairo_CairoGraphics.closePath();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(positionX - offsetX,positionY - offsetY);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c13) == null) {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = false;
				} else {
					openfl__$internal_renderer_cairo_CairoGraphics.hasStroke = true;
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineWidth(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c13) > 0?openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c13):1);
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c13) == null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(1);
					} else {
						var _g21 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c13);
						var tmp;
						switch(_g21) {
						case 0:
							tmp = 2;
							break;
						case 1:
							tmp = 0;
							break;
						default:
							tmp = 1;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineJoin(tmp);
					}
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c13) == null) {
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(1);
					} else {
						var _g22 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c13);
						var tmp1;
						switch(_g22) {
						case 0:
							tmp1 = 0;
							break;
						case 2:
							tmp1 = 2;
							break;
						default:
							tmp1 = 1;
						}
						openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_lineCap(tmp1);
					}
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_miterLimit(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c13));
					var r = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c13) & 16711680) >>> 16) / 255;
					var g = ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c13) & 65280) >>> 8) / 255;
					var b = (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c13) & 255) / 255;
					if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c13) == 1) {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGB(r,g,b);
					} else {
						openfl__$internal_renderer_cairo_CairoGraphics.strokePattern = lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.createRGBA(r,g,b,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c13));
					}
				}
				break;
			case 16:
				var c14 = data.readLineTo();
				hasPath = true;
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c14) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c14) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c14);
				positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c14);
				break;
			case 17:
				var c15 = data.readMoveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c15) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c15) - offsetY);
				positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c15);
				positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c15);
				closeGap = true;
				startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c15);
				startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c15);
				break;
			default:
				data.skip(type);
			}
		}
	} catch( e ) { if( e != "__break__" ) throw e; }
	data.destroy();
	if(hasPath) {
		if(stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasStroke) {
			if(openfl__$internal_renderer_cairo_CairoGraphics.hasFill && closeGap) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.lineTo(startX - offsetX,startY - offsetY);
			} else if(closeGap && positionX == startX && positionY == startY) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.strokePattern);
			if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.strokePreserve();
			}
		}
		if(!stroke && openfl__$internal_renderer_cairo_CairoGraphics.hasFill) {
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(-openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,-openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			if(openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix != null) {
				var matrix = openfl__$internal_renderer_cairo_CairoGraphics.fillPatternMatrix.clone();
				matrix.invert();
				if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
					matrix.concat(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix);
				}
				lime_graphics_cairo__$CairoPattern_CairoPattern_$Impl_$.set_matrix(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern,matrix.__toMatrix3());
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.set_source(openfl__$internal_renderer_cairo_CairoGraphics.fillPattern);
			if(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.pendingMatrix.__toMatrix3());
				if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
					openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
				}
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.transform(openfl__$internal_renderer_cairo_CairoGraphics.inversePendingMatrix.__toMatrix3());
			} else if(!openfl__$internal_renderer_cairo_CairoGraphics.hitTesting) {
				openfl__$internal_renderer_cairo_CairoGraphics.cairo.fillPreserve();
			}
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.translate(openfl__$internal_renderer_cairo_CairoGraphics.bounds.x,openfl__$internal_renderer_cairo_CairoGraphics.bounds.y);
			openfl__$internal_renderer_cairo_CairoGraphics.cairo.closePath();
		}
	}
};
openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo = function(cx,cy,x,y) {
	var current = null;
	if(!openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_hasCurrentPoint()) {
		openfl__$internal_renderer_cairo_CairoGraphics.cairo.moveTo(cx,cy);
		current = new lime_math_Vector2(cx,cy);
	} else {
		current = openfl__$internal_renderer_cairo_CairoGraphics.cairo.get_currentPoint();
	}
	openfl__$internal_renderer_cairo_CairoGraphics.cairo.curveTo(current.x + 0.66666666666666663 * (cx - current.x),current.y + 0.66666666666666663 * (cy - current.y),x + 0.66666666666666663 * (cx - x),y + 0.66666666666666663 * (cy - y),x,y);
};
openfl__$internal_renderer_cairo_CairoGraphics.render = function(graphics,renderSession) {
};
openfl__$internal_renderer_cairo_CairoGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		var cairo = renderSession.cairo;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				cairo.curveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_cairo_CairoGraphics.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				cairo.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				cairo.moveTo(x,ym);
				cairo.curveTo(x,ym - oy,xm - ox,y,xm,y);
				cairo.curveTo(xm + ox,y,xe,ym - oy,xe,ym);
				cairo.curveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				cairo.curveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4 = data.readDrawRect();
				cairo.rectangle(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 9:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_cairo_CairoGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 16:
				var c6 = data.readLineTo();
				cairo.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6));
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 17:
				var c7 = data.readMoveTo();
				cairo.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7));
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_cairo_CairoMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoMaskManager"] = openfl__$internal_renderer_cairo_CairoMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.__name__ = ["openfl","_internal","renderer","cairo","CairoMaskManager"];
openfl__$internal_renderer_cairo_CairoMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_cairo_CairoMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(mask.__getWorldTransform().__toMatrix3());
		cairo.newPath();
		mask.__renderCairoMask(this.renderSession);
		cairo.clip();
	}
	,pushRect: function(rect,transform) {
		var cairo = this.renderSession.cairo;
		cairo.save();
		cairo.set_matrix(new lime_math_Matrix3(transform.a,transform.c,transform.b,transform.d,transform.tx,transform.ty));
		cairo.newPath();
		cairo.rectangle(rect.x,rect.y,rect.width,rect.height);
		cairo.clip();
	}
	,popMask: function() {
		this.renderSession.cairo.restore();
	}
	,popRect: function() {
		this.renderSession.cairo.restore();
	}
	,__class__: openfl__$internal_renderer_cairo_CairoMaskManager
});
var openfl__$internal_renderer_cairo_CairoRenderer = function(width,height,cairo) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.cairo = cairo;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.cairo = cairo;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_cairo_CairoMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.cairo.CairoRenderer"] = openfl__$internal_renderer_cairo_CairoRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.__name__ = ["openfl","_internal","renderer","cairo","CairoRenderer"];
openfl__$internal_renderer_cairo_CairoRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_cairo_CairoRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	cairo: null
	,render: function(stage) {
		this.cairo.identityMatrix();
		if(stage.__clearBeforeRender) {
			this.cairo.setSourceRGB(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2]);
			this.cairo.paint();
		}
		stage.__renderCairo(this.renderSession);
	}
	,renderDisplayObject: function(object) {
		this.cairo.identityMatrix();
		object.__renderCairo(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_cairo_CairoRenderer
});
var openfl__$internal_renderer_cairo_CairoShape = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoShape"] = openfl__$internal_renderer_cairo_CairoShape;
openfl__$internal_renderer_cairo_CairoShape.__name__ = ["openfl","_internal","renderer","cairo","CairoShape"];
openfl__$internal_renderer_cairo_CairoShape.render = function(shape,renderSession) {
};
var openfl__$internal_renderer_cairo_CairoTextField = function() { };
$hxClasses["openfl._internal.renderer.cairo.CairoTextField"] = openfl__$internal_renderer_cairo_CairoTextField;
openfl__$internal_renderer_cairo_CairoTextField.__name__ = ["openfl","_internal","renderer","cairo","CairoTextField"];
openfl__$internal_renderer_cairo_CairoTextField.render = function(textField,renderSession) {
};
var openfl__$internal_renderer_canvas_CanvasBitmap = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasBitmap"] = openfl__$internal_renderer_canvas_CanvasBitmap;
openfl__$internal_renderer_canvas_CanvasBitmap.__name__ = ["openfl","_internal","renderer","canvas","CanvasBitmap"];
openfl__$internal_renderer_canvas_CanvasBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0) {
		return;
	}
	var context = renderSession.context;
	if(bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.__mask != null) {
			renderSession.maskManager.pushMask(bitmap.__mask);
		}
		bitmap.bitmapData.__sync();
		context.globalAlpha = bitmap.__worldAlpha;
		var transform = bitmap.__renderTransform;
		var scrollRect = bitmap.get_scrollRect();
		if(renderSession.roundPixels) {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
		} else {
			context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		}
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = false;
			context.msImageSmoothingEnabled = false;
			context.imageSmoothingEnabled = false;
		}
		if(scrollRect == null) {
			context.drawImage(bitmap.bitmapData.image.get_src(),0,0);
		} else {
			context.drawImage(bitmap.bitmapData.image.get_src(),scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height,scrollRect.x,scrollRect.y,scrollRect.width,scrollRect.height);
		}
		if(!bitmap.smoothing) {
			context.mozImageSmoothingEnabled = true;
			context.msImageSmoothingEnabled = true;
			context.imageSmoothingEnabled = true;
		}
		if(bitmap.__mask != null) {
			renderSession.maskManager.popMask();
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasGraphics = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasGraphics"] = openfl__$internal_renderer_canvas_CanvasGraphics;
openfl__$internal_renderer_canvas_CanvasGraphics.__name__ = ["openfl","_internal","renderer","canvas","CanvasGraphics"];
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = null;
openfl__$internal_renderer_canvas_CanvasGraphics.bounds = null;
openfl__$internal_renderer_canvas_CanvasGraphics.graphics = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = null;
openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = null;
openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
openfl__$internal_renderer_canvas_CanvasGraphics.context = null;
openfl__$internal_renderer_canvas_CanvasGraphics.closePath = function() {
	if(openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle == null) {
		return;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
};
openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill = function(bitmap,bitmapRepeat) {
	bitmap.__sync();
	return openfl__$internal_renderer_canvas_CanvasGraphics.context.createPattern(bitmap.image.get_src(),bitmapRepeat?"repeat":"no-repeat");
};
openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	var gradientFill = null;
	switch(type) {
	case 0:
		var matrix1 = matrix != null?matrix:new openfl_geom_Matrix();
		var point1 = matrix1.transformPoint(new openfl_geom_Point(-819.2,0));
		var point2 = matrix1.transformPoint(new openfl_geom_Point(819.2,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createLinearGradient(point1.x,point1.y,point2.x,point2.y);
		break;
	case 1:
		if(matrix == null) {
			matrix = new openfl_geom_Matrix();
		}
		var point = matrix.transformPoint(new openfl_geom_Point(1638.4,0));
		gradientFill = openfl__$internal_renderer_canvas_CanvasGraphics.context.createRadialGradient(matrix.tx,matrix.ty,0,matrix.tx,matrix.ty,(point.x - matrix.tx) / 2);
		break;
	}
	var _g1 = 0;
	var _g = colors.length;
	while(_g1 < _g) {
		var i = _g1++;
		var rgb = colors[i];
		var alpha = alphas[i];
		var r = (rgb & 16711680) >>> 16;
		var g = (rgb & 65280) >>> 8;
		var b = rgb & 255;
		var ratio = ratios[i] / 255;
		if(ratio < 0) {
			ratio = 0;
		}
		if(ratio > 1) {
			ratio = 1;
		}
		gradientFill.addColorStop(ratio,"rgba(" + r + ", " + g + ", " + b + ", " + alpha + ")");
	}
	return gradientFill;
};
openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas = function(bitmap,repeat,width,height) {
	var canvas = window.document.createElement("canvas");
	var context = canvas.getContext("2d");
	canvas.width = width;
	canvas.height = height;
	context.fillStyle = context.createPattern(bitmap.image.get_src(),repeat?"repeat":"no-repeat");
	context.beginPath();
	context.moveTo(0,0);
	context.lineTo(0,height);
	context.lineTo(width,height);
	context.lineTo(width,0);
	context.lineTo(0,0);
	context.closePath();
	if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
		context.fill();
	}
	return canvas;
};
openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect = function(x,y,width,height,ellipseWidth,ellipseHeight) {
	if(ellipseHeight == null) {
		ellipseHeight = ellipseWidth;
	}
	ellipseWidth *= 0.5;
	ellipseHeight *= 0.5;
	if(ellipseWidth > width / 2) {
		ellipseWidth = width / 2;
	}
	if(ellipseHeight > height / 2) {
		ellipseHeight = height / 2;
	}
	var xe = x + width;
	var ye = y + height;
	var cx1 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cx2 = -ellipseWidth + ellipseWidth * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	var cy1 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.SIN45;
	var cy2 = -ellipseHeight + ellipseHeight * openfl__$internal_renderer_canvas_CanvasGraphics.TAN22;
	openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(xe,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,ye + cy2,xe + cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,ye,xe - ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x + ellipseWidth,ye);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,ye,x - cx1,ye + cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,ye + cy2,x,ye - ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x,y - cy2,x - cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(x - cx2,y,x + ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe - ellipseWidth,y);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe + cx2,y,xe + cx1,y - cy1);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(xe,y - cy2,xe,y + ellipseHeight);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(xe,ye - ellipseHeight);
};
openfl__$internal_renderer_canvas_CanvasGraphics.endFill = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands,false);
	openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.endStroke = function() {
	openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
	openfl__$internal_renderer_canvas_CanvasGraphics.playCommands(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands,true);
	openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
	openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
};
openfl__$internal_renderer_canvas_CanvasGraphics.hitTest = function(graphics,x,y) {
	if(graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
		return false;
	} else {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = true;
		x -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
		y -= openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
		if(graphics.__canvas == null) {
			graphics.__canvas = window.document.createElement("canvas");
			graphics.__context = graphics.__canvas.getContext("2d");
		}
		openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
		openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
		openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
		openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:case 1:case 2:
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
					var c = data.readBeginBitmapFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
				} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
					var c1 = data.readBeginGradientFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
				} else {
					var c2 = data.readBeginFill();
					openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
					openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),1);
				}
				break;
			case 3:
				var c3 = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
				break;
			case 4:
				var c4 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
				break;
			case 5:
				var c5 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
				break;
			case 6:
				var c6 = data.readDrawEllipse();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
				break;
			case 8:
				var c7 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
				break;
			case 9:
				var c8 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
				break;
			case 12:
				data.readEndFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
					data.destroy();
					return true;
				}
				if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
					data.destroy();
					return true;
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				break;
			case 13:
				var c9 = data.readLineBitmapStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c9));
				break;
			case 14:
				var c10 = data.readLineGradientStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10));
				break;
			case 15:
				var c11 = data.readLineStyle();
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11),1,openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11));
				break;
			case 16:
				var c12 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12));
				break;
			case 17:
				var c13 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13));
				break;
			default:
				data.skip(type);
			}
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
			openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
		}
		data.destroy();
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInPath(x,y)) {
			return true;
		}
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke && openfl__$internal_renderer_canvas_CanvasGraphics.context.isPointInStroke(x,y)) {
			return true;
		}
	}
	return false;
};
openfl__$internal_renderer_canvas_CanvasGraphics.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT = function(uvt,skipT) {
	if(skipT == null) {
		skipT = false;
	}
	var max = -Infinity;
	var tmp = -Infinity;
	var len = uvt.length;
	var _g1 = 1;
	var _g = len + 1;
	while(_g1 < _g) {
		var t = _g1++;
		if(skipT && t % 3 == 0) {
			continue;
		}
		tmp = uvt.data[t - 1];
		if(max < tmp) {
			max = tmp;
		}
	}
	var this1 = new openfl_VectorData();
	this1.data = new Array(0);
	this1.length = 0;
	this1.fixed = false;
	var result = this1;
	var _g11 = 1;
	var _g2 = len + 1;
	while(_g11 < _g2) {
		var t1 = _g11++;
		if(skipT && t1 % 3 == 0) {
			continue;
		}
		if(!result.fixed) {
			result.length++;
			if(result.data.length < result.length) {
				var length = result.data.length + 10;
				var data = new Array(length);
				haxe_ds__$Vector_Vector_$Impl_$.blit(result.data,0,data,0,result.data.length);
				result.data = data;
			}
			result.data[result.length - 1] = uvt.data[t1 - 1] / max;
		}
	}
	return { max : max, uvt : result};
};
openfl__$internal_renderer_canvas_CanvasGraphics.playCommands = function(commands,stroke) {
	if(stroke == null) {
		stroke = false;
	}
	openfl__$internal_renderer_canvas_CanvasGraphics.bounds = openfl__$internal_renderer_canvas_CanvasGraphics.graphics.__bounds;
	var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
	var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
	var positionX = 0.0;
	var positionY = 0.0;
	var closeGap = false;
	var startX = 0.0;
	var startY = 0.0;
	var data = new openfl__$internal_renderer_DrawCommandReader(commands);
	var _g = 0;
	var _g1 = commands.types;
	while(_g < _g1.length) {
		var type = _g1[_g];
		++_g;
		switch(type[1]) {
		case 0:
			var c = data.readBeginBitmapFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),true);
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			if(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c) != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c);
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c).clone();
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.invert();
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix = null;
			}
			break;
		case 1:
			var c1 = data.readBeginFill();
			if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) < 0.005) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			} else {
				if(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) == 1) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1),6);
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = "rgba(" + ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16711680) >>> 16) + ", " + ((openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 65280) >>> 8) + ", " + (openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 255) + ", " + openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
				openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			}
			break;
		case 2:
			var c2 = data.readBeginGradientFill();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.fillStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c2),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c2));
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = true;
			break;
		case 3:
			var c3 = data.readCubicCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3) - offsetY);
			break;
		case 4:
			var c4 = data.readCurveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4) - offsetY,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4) - offsetX,openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4) - offsetY);
			break;
		case 5:
			var c5 = data.readDrawCircle();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX + openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5),0,Math.PI * 2,true);
			break;
		case 6:
			var c6 = data.readDrawEllipse();
			var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6);
			var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6);
			var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6);
			var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6);
			x -= offsetX;
			y -= offsetY;
			var ox = width / 2 * .5522848;
			var oy = height / 2 * .5522848;
			var xe = x + width;
			var ye = y + height;
			var xm = x + width / 2;
			var ym = y + height / 2;
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
			break;
		case 8:
			var c7 = data.readDrawRect();
			var optimizationUsed = false;
			if(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
				var st = 0;
				var sr = 0;
				var sb = 0;
				var sl = 0;
				var canOptimizeMatrix = true;
				if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
					if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b != 0 || openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c != 0) {
						canOptimizeMatrix = false;
					} else {
						var stl = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7)));
						var sbr = openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.transformPoint(new openfl_geom_Point(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7)));
						st = stl.y;
						sl = stl.x;
						sb = sbr.y;
						sr = sbr.x;
					}
				} else {
					st = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7);
					sl = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7);
					sb = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7);
					sr = openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) + openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7);
				}
				if(canOptimizeMatrix && st >= 0 && sl >= 0 && sr <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width && sb <= openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height) {
					optimizationUsed = true;
					if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
						openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.image.get_src(),sl,st,sr - sl,sb - st,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
					}
				}
			}
			if(!optimizationUsed) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
			}
			break;
		case 9:
			var c8 = data.readDrawRoundRect();
			openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8) - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8) - offsetY,openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
			break;
		case 13:
			var c9 = data.readLineBitmapStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createBitmapFill(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c9),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c9));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 14:
			var c10 = data.readLineGradientStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.closePath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = openfl__$internal_renderer_canvas_CanvasGraphics.createGradientPattern(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c10),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c10));
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			break;
		case 15:
			var c11 = data.readLineStyle();
			if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(positionX - offsetX,positionY - offsetY);
			if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) == null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			} else {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineWidth = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11) > 0?openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c11):1;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineJoin = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11) == null?"round":openfl_display__$JointStyle_JointStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineCap = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == null?"round":openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11) == 0?"butt":openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c11)).toLowerCase();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c11);
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11) == 1) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "#" + StringTools.hex(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16777215,6);
				} else {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.strokeStyle = "rgba(" + ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 16711680) >>> 16) + ", " + ((openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 65280) >>> 8) + ", " + (openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c11) & 255) + ", " + openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c11) + ")";
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = true;
			}
			break;
		case 16:
			var c12 = data.readLineTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12) - offsetX,openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c12);
			positionY = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c12);
			break;
		case 17:
			var c13 = data.readMoveTo();
			openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13) - offsetX,openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13) - offsetY);
			positionX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			positionY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			closeGap = true;
			startX = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c13);
			startY = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c13);
			break;
		default:
			data.skip(type);
		}
	}
	data.destroy();
	if(stroke && openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill && closeGap) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(startX - offsetX,startY - offsetY);
		} else if(closeGap && positionX == startX && positionY == startY) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
		if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.stroke();
		}
	}
	if(!stroke) {
		if(openfl__$internal_renderer_canvas_CanvasGraphics.hasFill || openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,-openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			if(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix != null) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.pendingMatrix.ty);
				if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
					openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.a,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.b,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.c,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.d,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.tx,openfl__$internal_renderer_canvas_CanvasGraphics.inversePendingMatrix.ty);
			} else if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y);
			openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
		}
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.render = function(graphics,renderSession) {
	var directRender = false;
	if(graphics.__dirty || directRender) {
		openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting = false;
		openfl__$internal_renderer_canvas_CanvasGraphics.graphics = graphics;
		openfl__$internal_renderer_canvas_CanvasGraphics.bounds = graphics.__bounds;
		if(!graphics.__visible || graphics.__commands.get_length() == 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds == null || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width <= 0 || openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height <= 0) {
			graphics.__canvas = null;
			graphics.__context = null;
			graphics.__bitmap = null;
		} else {
			if(directRender) {
				openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
				openfl__$internal_renderer_canvas_CanvasGraphics.bounds.setTo(0,0,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width,openfl__$internal_renderer_canvas_CanvasGraphics.context.canvas.width);
			} else {
				if(graphics.__canvas == null) {
					graphics.__canvas = window.document.createElement("canvas");
					graphics.__context = graphics.__canvas.getContext("2d");
				}
				openfl__$internal_renderer_canvas_CanvasGraphics.context = graphics.__context;
				graphics.__canvas.width = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width);
				graphics.__canvas.height = Math.ceil(openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height);
			}
			openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.clear();
			openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.hasStroke = false;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
			openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat = false;
			var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
			var _g = 0;
			var _g1 = graphics.__commands.types;
			try {
				while(_g < _g1.length) {
					var type = _g1[_g];
					++_g;
					switch(type[1]) {
					case 0:case 1:case 2:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_BITMAP_FILL) {
							var c = data.readBeginBitmapFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginBitmapFill(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c));
						} else if(type == openfl__$internal_renderer_DrawCommandType.BEGIN_GRADIENT_FILL) {
							var c1 = data.readBeginGradientFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginGradientFill(openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_type(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_colors(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_alphas(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_ratios(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_matrix(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_spreadMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_interpolationMethod(c1),openfl__$internal_renderer__$DrawCommandReader_BeginGradientFillView_$Impl_$.get_focalPointRatio(c1));
						} else {
							var c2 = data.readBeginFill();
							openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
							openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.beginFill(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c2),openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c2));
						}
						break;
					case 3:
						var c3 = data.readCubicCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.cubicCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c3),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c3));
						break;
					case 4:
						var c4 = data.readCurveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.curveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c4),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c4));
						break;
					case 5:
						var c5 = data.readDrawCircle();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawCircle(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c5));
						break;
					case 6:
						var c6 = data.readDrawEllipse();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawEllipse(openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c6),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c6));
						break;
					case 8:
						var c7 = data.readDrawRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7));
						break;
					case 9:
						var c8 = data.readDrawRoundRect();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8));
						break;
					case 10:
						var c9 = data.readDrawTiles();
						var useScale = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 1) > 0;
						var offsetX = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.x;
						var offsetY = openfl__$internal_renderer_canvas_CanvasGraphics.bounds.y;
						var useRotation = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 2) > 0;
						var useTransform = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 16) > 0;
						var useRGB = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 4) > 0;
						var useAlpha = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 8) > 0;
						var useRect = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 32) > 0;
						var useOrigin = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 64) > 0;
						var useBlendAdd = (openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9) & 65536) > 0;
						if(useTransform) {
							useScale = false;
							useRotation = false;
						}
						var scaleIndex = 0;
						var rotationIndex = 0;
						var rgbIndex = 0;
						var alphaIndex = 0;
						var transformIndex = 0;
						var numValues = 3;
						if(useRect) {
							if(useOrigin) {
								numValues = 8;
							} else {
								numValues = 6;
							}
						}
						if(useScale) {
							scaleIndex = numValues;
							++numValues;
						}
						if(useRotation) {
							rotationIndex = numValues;
							++numValues;
						}
						if(useTransform) {
							transformIndex = numValues;
							numValues += 4;
						}
						if(useRGB) {
							rgbIndex = numValues;
							numValues += 3;
						}
						if(useAlpha) {
							alphaIndex = numValues;
							++numValues;
						}
						var totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9).length;
						if(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9) >= 0 && totalCount > openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9)) {
							totalCount = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9);
						}
						var itemCount = totalCount / numValues | 0;
						var index = 0;
						var rect = null;
						var center = null;
						var previousTileID = -1;
						var surface;
						openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__bitmap.__sync();
						surface = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__bitmap.image.get_src();
						if(useBlendAdd) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "lighter";
						}
						while(index < totalCount) {
							var tileID = !useRect?openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 2] | 0:-1;
							if(!useRect && tileID != previousTileID) {
								rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__tileRects[tileID];
								center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__centerPoints[tileID];
								previousTileID = tileID;
							} else if(useRect) {
								rect = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__rectTile;
								rect.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 2],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 3],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 4],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 5]);
								center = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9).__point;
								if(useOrigin) {
									center.setTo(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 6],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 7]);
								} else {
									center.setTo(0,0);
								}
							}
							if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.translate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index] - offsetX,openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + 1] - offsetY);
								if(useRotation) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.rotate(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + rotationIndex]);
								}
								var scale = 1.0;
								if(useScale) {
									scale = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + scaleIndex];
								}
								if(useTransform) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 1],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 2],openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + transformIndex + 3],0,0);
								}
								if(useAlpha) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.globalAlpha = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9)[index + alphaIndex];
								}
								openfl__$internal_renderer_canvas_CanvasGraphics.context.imageSmoothingEnabled = openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth(c9);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(surface,rect.x,rect.y,rect.width,rect.height,-center.x * scale,-center.y * scale,rect.width * scale,rect.height * scale);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							}
							index += numValues;
						}
						if(useBlendAdd) {
							openfl__$internal_renderer_canvas_CanvasGraphics.context.globalCompositeOperation = "source-over";
						}
						break;
					case 11:
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						var c10 = data.readDrawTriangles();
						var v = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c10);
						var ind = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c10);
						var uvt = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c10);
						var pattern = null;
						var colorFill = openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill == null;
						if(colorFill && uvt != null) {
							throw "__break__";
						}
						if(!colorFill) {
							if(uvt == null) {
								var this1 = new openfl_VectorData();
								this1.data = new Array(0);
								this1.length = 0;
								this1.fixed = false;
								uvt = this1;
								var _g3 = 0;
								var _g2 = v.length / 2 | 0;
								while(_g3 < _g2) {
									var i = _g3++;
									var x = v.data[i * 2] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var length = uvt.data.length + 10;
											var data1 = new Array(length);
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data1,0,uvt.data.length);
											uvt.data = data1;
										}
										uvt.data[uvt.length - 1] = x;
									}
									var x1 = v.data[i * 2 + 1] / openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height;
									if(!uvt.fixed) {
										uvt.length++;
										if(uvt.data.length < uvt.length) {
											var length1 = uvt.data.length + 10;
											var data2 = new Array(length1);
											haxe_ds__$Vector_Vector_$Impl_$.blit(uvt.data,0,data2,0,uvt.data.length);
											uvt.data = data2;
										}
										uvt.data[uvt.length - 1] = x1;
									}
								}
							}
							var normalizedUVT = openfl__$internal_renderer_canvas_CanvasGraphics.normalizeUVT(uvt,uvt.length != v.length);
							var maxUVT = normalizedUVT.max;
							uvt = normalizedUVT.uvt;
							if(maxUVT > 1) {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.width | 0,openfl__$internal_renderer_canvas_CanvasGraphics.bounds.height | 0);
							} else {
								pattern = openfl__$internal_renderer_canvas_CanvasGraphics.createTempPatternCanvas(openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapRepeat,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.width,openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill.height);
							}
						}
						var i1 = 0;
						var l = ind.length;
						var a_;
						var b_;
						var c_;
						var iax;
						var iay;
						var ibx;
						var iby;
						var icx;
						var icy;
						var x11;
						var y1;
						var x2;
						var y2;
						var x3;
						var y3;
						var uvx1;
						var uvy1;
						var uvx2;
						var uvy2;
						var uvx3;
						var uvy3;
						var denom;
						var t1;
						var t2;
						var t3;
						var t4;
						var dx;
						var dy;
						while(i1 < l) {
							a_ = i1;
							b_ = i1 + 1;
							c_ = i1 + 2;
							iax = ind.data[a_] * 2;
							iay = ind.data[a_] * 2 + 1;
							ibx = ind.data[b_] * 2;
							iby = ind.data[b_] * 2 + 1;
							icx = ind.data[c_] * 2;
							icy = ind.data[c_] * 2 + 1;
							x11 = v.data[iax];
							y1 = v.data[iay];
							x2 = v.data[ibx];
							y2 = v.data[iby];
							x3 = v.data[icx];
							y3 = v.data[icy];
							switch(openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c10)) {
							case 0:
								if((x2 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0) {
									i1 += 3;
									continue;
								}
								break;
							case 2:
								if(!((x2 - x11) * (y3 - y1) - (y2 - y1) * (x3 - x11) < 0)) {
									i1 += 3;
									continue;
								}
								break;
							default:
							}
							if(colorFill) {
								openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
								openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
								openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
								if(!openfl__$internal_renderer_canvas_CanvasGraphics.hitTesting) {
									openfl__$internal_renderer_canvas_CanvasGraphics.context.fill();
								}
								i1 += 3;
								continue;
							}
							openfl__$internal_renderer_canvas_CanvasGraphics.context.save();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.beginPath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x11,y1);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x2,y2);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(x3,y3);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.closePath();
							openfl__$internal_renderer_canvas_CanvasGraphics.context.clip();
							uvx1 = uvt.data[iax] * pattern.width;
							uvx2 = uvt.data[ibx] * pattern.width;
							uvx3 = uvt.data[icx] * pattern.width;
							uvy1 = uvt.data[iay] * pattern.height;
							uvy2 = uvt.data[iby] * pattern.height;
							uvy3 = uvt.data[icy] * pattern.height;
							denom = uvx1 * (uvy3 - uvy2) - uvx2 * uvy3 + uvx3 * uvy2 + (uvx2 - uvx3) * uvy1;
							if(denom == 0) {
								i1 += 3;
								continue;
							}
							t1 = -(uvy1 * (x3 - x2) - uvy2 * x3 + uvy3 * x2 + (uvy2 - uvy3) * x11) / denom;
							t2 = (uvy2 * y3 + uvy1 * (y2 - y3) - uvy3 * y2 + (uvy3 - uvy2) * y1) / denom;
							t3 = (uvx1 * (x3 - x2) - uvx2 * x3 + uvx3 * x2 + (uvx2 - uvx3) * x11) / denom;
							t4 = -(uvx2 * y3 + uvx1 * (y2 - y3) - uvx3 * y2 + (uvx3 - uvx2) * y1) / denom;
							dx = (uvx1 * (uvy3 * x2 - uvy2 * x3) + uvy1 * (uvx2 * x3 - uvx3 * x2) + (uvx3 * uvy2 - uvx2 * uvy3) * x11) / denom;
							dy = (uvx1 * (uvy3 * y2 - uvy2 * y3) + uvy1 * (uvx2 * y3 - uvx3 * y2) + (uvx3 * uvy2 - uvx2 * uvy3) * y1) / denom;
							openfl__$internal_renderer_canvas_CanvasGraphics.context.transform(t1,t2,t3,t4,dx,dy);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.drawImage(pattern,0,0);
							openfl__$internal_renderer_canvas_CanvasGraphics.context.restore();
							i1 += 3;
						}
						break;
					case 12:
						data.readEndFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
						openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
						openfl__$internal_renderer_canvas_CanvasGraphics.hasFill = false;
						openfl__$internal_renderer_canvas_CanvasGraphics.bitmapFill = null;
						break;
					case 13:
						var c11 = data.readLineBitmapStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineBitmapStyle(openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_bitmap(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_matrix(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_repeat(c11),openfl__$internal_renderer__$DrawCommandReader_LineBitmapStyleView_$Impl_$.get_smooth(c11));
						break;
					case 14:
						var c12 = data.readLineGradientStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineGradientStyle(openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_type(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_colors(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_alphas(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_ratios(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_matrix(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_spreadMethod(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_interpolationMethod(c12),openfl__$internal_renderer__$DrawCommandReader_LineGradientStyleView_$Impl_$.get_focalPointRatio(c12));
						break;
					case 15:
						var c13 = data.readLineStyle();
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineStyle(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_pixelHinting(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c13),openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c13));
						break;
					case 16:
						var c14 = data.readLineTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c14));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c14),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c14));
						break;
					case 17:
						var c15 = data.readMoveTo();
						openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c15),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c15));
						openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c15),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c15));
						break;
					default:
						data.skip(type);
					}
				}
			} catch( e ) { if( e != "__break__" ) throw e; }
			if(openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endFill();
			}
			if(openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands.get_length() > 0) {
				openfl__$internal_renderer_canvas_CanvasGraphics.endStroke();
			}
			data.destroy();
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(graphics.__canvas);
		}
		graphics.set___dirty(false);
	}
};
openfl__$internal_renderer_canvas_CanvasGraphics.renderMask = function(graphics,renderSession) {
	if(graphics.__commands.get_length() != 0) {
		openfl__$internal_renderer_canvas_CanvasGraphics.context = renderSession.context;
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 3:
				var c = data.readCubicCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c),openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c));
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c);
				openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c);
				break;
			case 4:
				var c1 = data.readCurveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.quadraticCurveTo(openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1),openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1));
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c1);
				openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c1);
				break;
			case 5:
				var c2 = data.readDrawCircle();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.arc(openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c2),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c2),0,Math.PI * 2,true);
				break;
			case 6:
				var c3 = data.readDrawEllipse();
				var x = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c3);
				var y = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c3);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c3);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c3);
				x -= 0;
				y -= 0;
				var ox = width / 2 * .5522848;
				var oy = height / 2 * .5522848;
				var xe = x + width;
				var ye = y + height;
				var xm = x + width / 2;
				var ym = y + height / 2;
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(x,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(x,ym - oy,xm - ox,y,xm,y);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm + ox,y,xe,ym - oy,xe,ym);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xe,ym + oy,xm + ox,ye,xm,ye);
				openfl__$internal_renderer_canvas_CanvasGraphics.context.bezierCurveTo(xm - ox,ye,x,ym + oy,x,ym);
				break;
			case 8:
				var c4 = data.readDrawRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.rect(openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c4),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c4));
				break;
			case 9:
				var c5 = data.readDrawRoundRect();
				openfl__$internal_renderer_canvas_CanvasGraphics.drawRoundRect(openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c5),openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c5));
				break;
			case 16:
				var c6 = data.readLineTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.lineTo(openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6),openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6));
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c6);
				openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c6);
				break;
			case 17:
				var c7 = data.readMoveTo();
				openfl__$internal_renderer_canvas_CanvasGraphics.context.moveTo(openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7));
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c7);
				openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c7);
				break;
			default:
				data.skip(type);
			}
		}
		data.destroy();
	}
};
var openfl__$internal_renderer_canvas_CanvasMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasMaskManager"] = openfl__$internal_renderer_canvas_CanvasMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.__name__ = ["openfl","_internal","renderer","canvas","CanvasMaskManager"];
openfl__$internal_renderer_canvas_CanvasMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_canvas_CanvasMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
		var context = this.renderSession.context;
		context.save();
		var transform = mask.__getWorldTransform();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		mask.__renderCanvasMask(this.renderSession);
		context.clip();
	}
	,pushRect: function(rect,transform) {
		var context = this.renderSession.context;
		context.save();
		context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
		context.beginPath();
		context.rect(rect.x,rect.y,rect.width,rect.height);
		context.clip();
	}
	,popMask: function() {
		this.renderSession.context.restore();
	}
	,popRect: function() {
		this.renderSession.context.restore();
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasMaskManager
});
var openfl__$internal_renderer_canvas_CanvasRenderer = function(width,height,context) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.context = context;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.context = context;
	this.renderSession.roundPixels = true;
	this.renderSession.renderer = this;
	this.renderSession.maskManager = new openfl__$internal_renderer_canvas_CanvasMaskManager(this.renderSession);
};
$hxClasses["openfl._internal.renderer.canvas.CanvasRenderer"] = openfl__$internal_renderer_canvas_CanvasRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.__name__ = ["openfl","_internal","renderer","canvas","CanvasRenderer"];
openfl__$internal_renderer_canvas_CanvasRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_canvas_CanvasRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	context: null
	,render: function(stage) {
		this.context.setTransform(1,0,0,1,0,0);
		this.context.globalAlpha = 1;
		if(!stage.__transparent && stage.__clearBeforeRender) {
			this.context.fillStyle = stage.__colorString;
			this.context.fillRect(0,0,stage.stageWidth,stage.stageHeight);
		} else if(stage.__transparent && stage.__clearBeforeRender) {
			this.context.clearRect(0,0,stage.stageWidth,stage.stageHeight);
		}
		stage.__renderCanvas(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_canvas_CanvasRenderer
});
var openfl__$internal_renderer_canvas_CanvasShape = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasShape"] = openfl__$internal_renderer_canvas_CanvasShape;
openfl__$internal_renderer_canvas_CanvasShape.__name__ = ["openfl","_internal","renderer","canvas","CanvasShape"];
openfl__$internal_renderer_canvas_CanvasShape.render = function(shape,renderSession) {
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	var graphics = shape.__graphics;
	if(graphics != null) {
		openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
		if(graphics.__canvas != null) {
			var context = renderSession.context;
			var scrollRect = shape.get_scrollRect();
			if(graphics.__bounds.width > 0 && graphics.__bounds.height > 0 && (scrollRect == null || scrollRect.width > 0 && scrollRect.height > 0)) {
				if(shape.__mask != null) {
					renderSession.maskManager.pushMask(shape.__mask);
				}
				context.globalAlpha = shape.__worldAlpha;
				var transform = shape.__renderTransform;
				if(renderSession.roundPixels) {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx | 0,transform.ty | 0);
				} else {
					context.setTransform(transform.a,transform.b,transform.c,transform.d,transform.tx,transform.ty);
				}
				if(scrollRect == null) {
					context.drawImage(graphics.__canvas,graphics.__bounds.x,graphics.__bounds.y);
				} else {
					context.drawImage(graphics.__canvas,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height,Math.ceil(graphics.__bounds.x + scrollRect.x),Math.ceil(graphics.__bounds.y + scrollRect.y),scrollRect.width,scrollRect.height);
				}
				if(shape.__mask != null) {
					renderSession.maskManager.popMask();
				}
			}
		}
	}
};
var openfl__$internal_renderer_canvas_CanvasTextField = function() { };
$hxClasses["openfl._internal.renderer.canvas.CanvasTextField"] = openfl__$internal_renderer_canvas_CanvasTextField;
openfl__$internal_renderer_canvas_CanvasTextField.__name__ = ["openfl","_internal","renderer","canvas","CanvasTextField"];
openfl__$internal_renderer_canvas_CanvasTextField.context = null;
openfl__$internal_renderer_canvas_CanvasTextField.disableInputMode = function(textEngine) {
};
openfl__$internal_renderer_canvas_CanvasTextField.enableInputMode = function(textEngine) {
	textEngine.__cursorPosition = -1;
	if(textEngine.__hiddenInput == null) {
		textEngine.__hiddenInput = window.document.createElement("input");
		var hiddenInput = textEngine.__hiddenInput;
		hiddenInput.type = "text";
		hiddenInput.style.position = "absolute";
		hiddenInput.style.opacity = "0";
		hiddenInput.style.color = "transparent";
		hiddenInput.style.left = "0px";
		hiddenInput.style.top = "50%";
		if(new EReg("(iPad|iPhone|iPod).*OS 8_","gi").match(window.navigator.userAgent)) {
			hiddenInput.style.fontSize = "0px";
			hiddenInput.style.width = "0px";
			hiddenInput.style.height = "0px";
		} else {
			hiddenInput.style.width = "1px";
			hiddenInput.style.height = "1px";
		}
		hiddenInput.style.pointerEvents = "none";
		hiddenInput.style.zIndex = "-10000000";
		if(textEngine.maxChars > 0) {
			hiddenInput.maxLength = textEngine.maxChars;
		}
		window.document.body.appendChild(hiddenInput);
		hiddenInput.value = textEngine.text;
	}
};
openfl__$internal_renderer_canvas_CanvasTextField.render = function(textField,renderSession) {
	if(textField.__dirty) {
		var textEngine = textField.__textEngine;
		textField.__updateLayout();
		if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
			textField.__graphics.__canvas = null;
			textField.__graphics.__context = null;
			textField.__graphics.set___dirty(false);
			textField.__dirty = false;
		} else {
			var bounds = textEngine.bounds;
			if(textField.__graphics == null || textField.__graphics.__canvas == null) {
				if(textField.__graphics == null) {
					textField.__graphics = new openfl_display_Graphics();
				}
				textField.__graphics.__canvas = window.document.createElement("canvas");
				textField.__graphics.__context = textField.__graphics.__canvas.getContext("2d");
				textField.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
			}
			var graphics = textField.__graphics;
			openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
			if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
				var text = textEngine.text;
				if(textEngine.displayAsPassword) {
					var length = text.length;
					var mask = "";
					var _g1 = 0;
					var _g = length;
					while(_g1 < _g) {
						var i = _g1++;
						mask += "*";
					}
					text = mask;
				}
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.antiAliasType != 0 || textEngine.gridFitType != 1) {
					graphics.__context.mozImageSmoothingEnabled = true;
					graphics.__context.msImageSmoothingEnabled = true;
					graphics.__context.imageSmoothingEnabled = true;
				} else {
					graphics.__context.mozImageSmoothingEnabled = false;
					graphics.__context.msImageSmoothingEnabled = false;
					graphics.__context.imageSmoothingEnabled = false;
				}
				if(textEngine.border || textEngine.background) {
					openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
				openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
				openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
				var scrollX = -textField.get_scrollH();
				var scrollY = 0.0;
				var _g11 = 0;
				var _g2 = textField.get_scrollV() - 1;
				while(_g11 < _g2) {
					var i1 = _g11++;
					scrollY -= textEngine.lineHeights[i1];
				}
				var advance;
				var offsetY = 0.0;
				var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
				var _g3 = 0;
				var _g12 = textEngine.layoutGroups;
				while(_g3 < _g12.length) {
					var group = _g12[_g3];
					++_g3;
					if(group.lineIndex < textField.get_scrollV() - 1) {
						continue;
					}
					if(group.lineIndex > textField.get_scrollV() + textEngine.bottomScrollV - 2) {
						break;
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
					if(applyHack) {
						offsetY = group.format.size * 0.185;
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
					if(textField.__caretIndex > -1 && textEngine.selectable) {
						if(textField.__selectionIndex == textField.__caretIndex) {
							if(textField.__showCursor && group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex) {
								advance = 0.0;
								var _g31 = 0;
								var _g21 = textField.__caretIndex - group.startIndex;
								while(_g31 < _g21) {
									var i2 = _g31++;
									if(group.advances.length <= i2) {
										break;
									}
									advance += group.advances[i2];
								}
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
							}
						} else if(group.startIndex <= textField.__caretIndex && group.endIndex >= textField.__caretIndex || group.startIndex <= textField.__selectionIndex && group.endIndex >= textField.__selectionIndex) {
							var selectionStart = Math.min(textField.__selectionIndex,textField.__caretIndex) | 0;
							var selectionEnd = Math.max(textField.__selectionIndex,textField.__caretIndex) | 0;
							if(group.startIndex > selectionStart) {
								selectionStart = group.startIndex;
							}
							if(group.endIndex < selectionEnd) {
								selectionEnd = group.endIndex;
							}
							var start;
							var end;
							start = textField.getCharBoundaries(selectionStart);
							if(selectionEnd >= textEngine.text.length) {
								end = textField.getCharBoundaries(textEngine.text.length - 1);
								end.x += end.width + 2;
							} else {
								end = textField.getCharBoundaries(selectionEnd);
							}
							if(start != null && end != null) {
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
								openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
							}
						}
					}
				}
			} else {
				graphics.__canvas.width = Math.ceil(bounds.width);
				graphics.__canvas.height = Math.ceil(bounds.height);
				if(textEngine.border || textEngine.background) {
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
					} else {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
					}
					if(textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
					}
					if(textEngine.border) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
						openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
						openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
						openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
					}
				}
			}
			graphics.__bitmap = openfl_display_BitmapData.fromCanvas(textField.__graphics.__canvas);
			textField.__dirty = false;
			graphics.set___dirty(false);
		}
	}
};
var openfl__$internal_renderer_console_ConsoleRenderer = function(width,height,ctx) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	throw new js__$Boot_HaxeError("ConsoleRenderer not supported");
};
$hxClasses["openfl._internal.renderer.console.ConsoleRenderer"] = openfl__$internal_renderer_console_ConsoleRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.__name__ = ["openfl","_internal","renderer","console","ConsoleRenderer"];
openfl__$internal_renderer_console_ConsoleRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_console_ConsoleRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	render: function(stage) {
	}
	,__class__: openfl__$internal_renderer_console_ConsoleRenderer
});
var openfl__$internal_renderer_dom_DOMBitmap = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMBitmap"] = openfl__$internal_renderer_dom_DOMBitmap;
openfl__$internal_renderer_dom_DOMBitmap.__name__ = ["openfl","_internal","renderer","dom","DOMBitmap"];
openfl__$internal_renderer_dom_DOMBitmap.render = function(bitmap,renderSession) {
	if(bitmap.stage != null && bitmap.__worldVisible && bitmap.__renderable && bitmap.bitmapData != null && bitmap.bitmapData.__isValid) {
		if(bitmap.bitmapData.image.buffer.__srcImage != null) {
			openfl__$internal_renderer_dom_DOMBitmap.renderImage(bitmap,renderSession);
		} else {
			openfl__$internal_renderer_dom_DOMBitmap.renderCanvas(bitmap,renderSession);
		}
	} else {
		if(bitmap.__image != null) {
			renderSession.element.removeChild(bitmap.__image);
			bitmap.__image = null;
			bitmap.__style = null;
		}
		if(bitmap.__canvas != null) {
			renderSession.element.removeChild(bitmap.__canvas);
			bitmap.__canvas = null;
			bitmap.__style = null;
		}
	}
};
openfl__$internal_renderer_dom_DOMBitmap.renderCanvas = function(bitmap,renderSession) {
	if(bitmap.__image != null) {
		renderSession.element.removeChild(bitmap.__image);
		bitmap.__image = null;
	}
	if(bitmap.__canvas == null) {
		bitmap.__canvas = window.document.createElement("canvas");
		bitmap.__context = bitmap.__canvas.getContext("2d");
		if(!bitmap.smoothing) {
			bitmap.__context.mozImageSmoothingEnabled = false;
			bitmap.__context.msImageSmoothingEnabled = false;
			bitmap.__context.imageSmoothingEnabled = false;
		}
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__canvas,renderSession);
	}
	bitmap.bitmapData.__sync();
	bitmap.__canvas.width = bitmap.bitmapData.width;
	bitmap.__canvas.height = bitmap.bitmapData.height;
	bitmap.__context.globalAlpha = bitmap.__worldAlpha;
	bitmap.__context.drawImage(bitmap.bitmapData.image.buffer.__srcCanvas,0,0);
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,false,true);
};
openfl__$internal_renderer_dom_DOMBitmap.renderImage = function(bitmap,renderSession) {
	if(bitmap.__canvas != null) {
		renderSession.element.removeChild(bitmap.__canvas);
		bitmap.__canvas = null;
	}
	if(bitmap.__image == null) {
		bitmap.__image = window.document.createElement("img");
		bitmap.__image.src = bitmap.bitmapData.image.buffer.__srcImage.src;
		openfl__$internal_renderer_dom_DOMRenderer.initializeElement(bitmap,bitmap.__image,renderSession);
	}
	openfl__$internal_renderer_dom_DOMRenderer.applyStyle(bitmap,renderSession,true,true,true);
};
var openfl__$internal_renderer_dom_DOMMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
};
$hxClasses["openfl._internal.renderer.dom.DOMMaskManager"] = openfl__$internal_renderer_dom_DOMMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.__name__ = ["openfl","_internal","renderer","dom","DOMMaskManager"];
openfl__$internal_renderer_dom_DOMMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_dom_DOMMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	pushMask: function(mask) {
	}
	,pushRect: function(rect,transform) {
	}
	,popMask: function() {
	}
	,__class__: openfl__$internal_renderer_dom_DOMMaskManager
});
var openfl__$internal_renderer_dom_DOMRenderer = function(width,height,element) {
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.element = element;
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.element = element;
	this.renderSession.roundPixels = true;
	var prefix = (function () {
		  var styles = window.getComputedStyle(document.documentElement, ''),
			pre = (Array.prototype.slice
			  .call(styles)
			  .join('')
			  .match(/-(moz|webkit|ms)-/) || (styles.OLink === '' && ['', 'o'])
			)[1],
			dom = ('WebKit|Moz|MS|O').match(new RegExp('(' + pre + ')', 'i'))[1];
		  return {
			dom: dom,
			lowercase: pre,
			css: '-' + pre + '-',
			js: pre[0].toUpperCase() + pre.substr(1)
		  };
		})();
	this.renderSession.vendorPrefix = prefix.lowercase;
	this.renderSession.transformProperty = prefix.lowercase == "webkit"?"-webkit-transform":"transform";
	this.renderSession.transformOriginProperty = prefix.lowercase == "webkit"?"-webkit-transform-origin":"transform-origin";
	this.renderSession.maskManager = new openfl__$internal_renderer_dom_DOMMaskManager(this.renderSession);
	this.renderSession.renderer = this;
};
$hxClasses["openfl._internal.renderer.dom.DOMRenderer"] = openfl__$internal_renderer_dom_DOMRenderer;
openfl__$internal_renderer_dom_DOMRenderer.__name__ = ["openfl","_internal","renderer","dom","DOMRenderer"];
openfl__$internal_renderer_dom_DOMRenderer.applyStyle = function(displayObject,renderSession,setTransform,setAlpha,setClip) {
	var style = displayObject.__style;
	if(setTransform && displayObject.__worldTransformChanged) {
		var _this = displayObject.__worldTransform;
		style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + (_this.tx | 0) + ", " + (_this.ty | 0) + ", 0, 1)":"matrix3d(" + _this.a + ", " + _this.b + ", 0, 0, " + _this.c + ", " + _this.d + ", 0, 0, 0, 0, 1, 0, " + _this.tx + ", " + _this.ty + ", 0, 1)",null);
	}
	if(displayObject.__worldZ != ++renderSession.z) {
		displayObject.__worldZ = renderSession.z;
		style.setProperty("z-index",displayObject.__worldZ == null?"null":"" + displayObject.__worldZ,null);
	}
	if(setAlpha && displayObject.__worldAlphaChanged) {
		if(displayObject.__worldAlpha < 1) {
			style.setProperty("opacity",displayObject.__worldAlpha == null?"null":"" + displayObject.__worldAlpha,null);
		} else {
			style.removeProperty("opacity");
		}
	}
	if(setClip && displayObject.__worldClipChanged) {
		if(displayObject.__worldClip == null) {
			style.removeProperty("clip");
		} else {
			var clip = openfl_geom_Rectangle.__temp;
			var matrix = openfl_geom_Matrix.__temp;
			matrix.copyFrom(displayObject.__worldTransform);
			matrix.invert();
			displayObject.__worldClip.__transform(clip,matrix);
			style.setProperty("clip","rect(" + clip.y + "px, " + clip.get_right() + "px, " + clip.get_bottom() + "px, " + clip.x + "px)",null);
		}
	}
};
openfl__$internal_renderer_dom_DOMRenderer.initializeElement = function(displayObject,element,renderSession) {
	var style = displayObject.__style = element.style;
	style.setProperty("position","absolute",null);
	style.setProperty("top","0",null);
	style.setProperty("left","0",null);
	style.setProperty(renderSession.transformOriginProperty,"0 0 0",null);
	renderSession.element.appendChild(element);
	displayObject.__worldAlphaChanged = true;
	displayObject.__worldClipChanged = true;
	displayObject.__worldTransformChanged = true;
	displayObject.__worldVisibleChanged = true;
	displayObject.__worldZ = -1;
};
openfl__$internal_renderer_dom_DOMRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_dom_DOMRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	element: null
	,render: function(stage) {
		this.element.style.background = stage.__colorString;
		this.renderSession.z = 1;
		stage.__renderDOM(this.renderSession);
	}
	,__class__: openfl__$internal_renderer_dom_DOMRenderer
});
var openfl__$internal_renderer_dom_DOMShape = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMShape"] = openfl__$internal_renderer_dom_DOMShape;
openfl__$internal_renderer_dom_DOMShape.__name__ = ["openfl","_internal","renderer","dom","DOMShape"];
openfl__$internal_renderer_dom_DOMShape.render = function(shape,renderSession) {
	var graphics = shape.__graphics;
	if(shape.stage != null && shape.__worldVisible && shape.__renderable && graphics != null) {
		if(graphics.__dirty || shape.__worldAlphaChanged || shape.__canvas == null && graphics.__canvas != null) {
			openfl__$internal_renderer_canvas_CanvasGraphics.render(graphics,renderSession);
			if(graphics.__canvas != null) {
				if(shape.__canvas == null) {
					shape.__canvas = window.document.createElement("canvas");
					shape.__context = shape.__canvas.getContext("2d");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(shape,shape.__canvas,renderSession);
				}
				shape.__canvas.width = graphics.__canvas.width;
				shape.__canvas.height = graphics.__canvas.height;
				shape.__context.globalAlpha = shape.__worldAlpha;
				shape.__context.drawImage(graphics.__canvas,0,0);
			} else if(shape.__canvas != null) {
				renderSession.element.removeChild(shape.__canvas);
				shape.__canvas = null;
				shape.__style = null;
			}
		}
		if(shape.__canvas != null) {
			if(shape.__worldTransformChanged || graphics.__transformDirty) {
				graphics.__transformDirty = false;
				var transform = openfl_geom_Matrix.__temp;
				transform.identity();
				transform.translate(graphics.__bounds.x,graphics.__bounds.y);
				transform.concat(shape.__worldTransform);
				shape.__style.setProperty(renderSession.transformProperty,renderSession.roundPixels?"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + (transform.tx | 0) + ", " + (transform.ty | 0) + ", 0, 1)":"matrix3d(" + transform.a + ", " + transform.b + ", 0, 0, " + transform.c + ", " + transform.d + ", 0, 0, 0, 0, 1, 0, " + transform.tx + ", " + transform.ty + ", 0, 1)",null);
			}
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(shape,renderSession,false,false,true);
		}
	} else if(shape.__canvas != null) {
		renderSession.element.removeChild(shape.__canvas);
		shape.__canvas = null;
		shape.__style = null;
	}
};
var openfl__$internal_renderer_dom_DOMTextField = function() { };
$hxClasses["openfl._internal.renderer.dom.DOMTextField"] = openfl__$internal_renderer_dom_DOMTextField;
openfl__$internal_renderer_dom_DOMTextField.__name__ = ["openfl","_internal","renderer","dom","DOMTextField"];
openfl__$internal_renderer_dom_DOMTextField.measureText = function(textField) {
	var textEngine = textField.__textEngine;
	var div = textField.__div;
	if(div == null) {
		div = window.document.createElement("div");
		div.innerHTML = textEngine.text.replace(new RegExp("\n","g".split("u").join("")),"<br>");
		div.style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
		div.style.setProperty("pointer-events","none",null);
		div.style.position = "absolute";
		div.style.top = "110%";
		window.document.body.appendChild(div);
	}
	textEngine.__measuredWidth = div.clientWidth;
	if(textField.__div == null) {
		div.style.width = Std.string(textEngine.width - 4) + "px";
	}
	textEngine.__measuredHeight = div.clientHeight;
	if(textField.__div == null) {
		window.document.body.removeChild(div);
	}
};
openfl__$internal_renderer_dom_DOMTextField.render = function(textField,renderSession) {
	var textEngine = textField.__textEngine;
	if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
		if(textField.__dirty || textField.__div == null) {
			if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
				if(textField.__div == null) {
					textField.__div = window.document.createElement("div");
					openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
					textField.__style.setProperty("outline","none",null);
					textField.__div.addEventListener("input",function(event) {
						event.preventDefault();
						if(textField.get_htmlText() != textField.__div.innerHTML) {
							textField.set_htmlText(textField.__div.innerHTML);
							textField.__dirty = false;
						}
					},true);
				}
				if(textEngine.selectable) {
					textField.__style.setProperty("cursor","text",null);
				} else {
					textField.__style.setProperty("cursor","inherit",null);
				}
				textField.__div.contentEditable = textEngine.type == 1;
				var style = textField.__style;
				textField.__div.innerHTML = textEngine.text;
				if(textEngine.background) {
					style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null);
				} else {
					style.removeProperty("background-color");
				}
				if(textEngine.border) {
					style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null);
				} else {
					style.removeProperty("border");
				}
				style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
				style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
				if(textEngine.autoSize != 2) {
					style.setProperty("width","auto",null);
				} else {
					style.setProperty("width",textEngine.width + "px",null);
				}
				style.setProperty("height",textEngine.height + "px",null);
				var _g = textField.__textFormat.align;
				switch(_g) {
				case 0:
					style.setProperty("text-align","center",null);
					break;
				case 4:
					style.setProperty("text-align","right",null);
					break;
				default:
					style.setProperty("text-align","left",null);
				}
				textField.__dirty = false;
			} else if(textField.__div != null) {
				renderSession.element.removeChild(textField.__div);
				textField.__div = null;
			}
		}
		if(textField.__div != null) {
			openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
		}
	} else if(textField.__div != null) {
		renderSession.element.removeChild(textField.__div);
		textField.__div = null;
		textField.__style = null;
	}
};
var openfl__$internal_renderer_opengl_GLBitmap = function() { };
$hxClasses["openfl._internal.renderer.opengl.GLBitmap"] = openfl__$internal_renderer_opengl_GLBitmap;
openfl__$internal_renderer_opengl_GLBitmap.__name__ = ["openfl","_internal","renderer","opengl","GLBitmap"];
openfl__$internal_renderer_opengl_GLBitmap.render = function(bitmap,renderSession) {
	if(!bitmap.__renderable || bitmap.__worldAlpha <= 0 || bitmap.bitmapData == null || !bitmap.bitmapData.__isValid) {
		return;
	}
	renderSession.spriteBatch.renderBitmapData(bitmap.bitmapData,bitmap.smoothing,bitmap.__renderTransform,bitmap.__worldColorTransform,bitmap.__worldAlpha,bitmap.__blendMode,bitmap.__shader,bitmap.pixelSnapping);
};
openfl__$internal_renderer_opengl_GLBitmap.pushFramebuffer = function(renderSession,texture,viewPort,smoothing,transparent,clearBuffer,powerOfTwo) {
	if(powerOfTwo == null) {
		powerOfTwo = true;
	}
	if(clearBuffer == null) {
		clearBuffer = false;
	}
	if(transparent == null) {
		transparent = true;
	}
	var gl = renderSession.gl;
	if(gl == null) {
		return null;
	}
	var renderer = renderSession.renderer;
	var spritebatch = renderSession.spriteBatch;
	var x = viewPort.x | 0;
	var y = viewPort.y | 0;
	var width = viewPort.width | 0;
	var height = viewPort.height | 0;
	spritebatch.finish();
	if(openfl__$internal_renderer_opengl_GLBitmap.fbData.length <= 0) {
		openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : null, viewPort : null, transparent : renderer.transparent});
	}
	if(texture == null) {
		texture = new openfl__$internal_renderer_opengl_utils_PingPongTexture(gl,width,height,smoothing,powerOfTwo);
	}
	texture.resize(width,height);
	renderer.transparent = transparent;
	renderSession.maskManager.saveState();
	gl.bindFramebuffer(gl.FRAMEBUFFER,(texture.__swapped?texture.__texture1:texture.__texture0).frameBuffer);
	renderer.setViewport(x,y,width,height);
	gl.colorMask(true,true,true,true);
	renderSession.blendModeManager.setBlendMode(10);
	if(clearBuffer) {
		(texture.__swapped?texture.__texture1:texture.__texture0).clear(0,0,0,0,null);
	}
	openfl__$internal_renderer_opengl_GLBitmap.fbData.push({ texture : texture, viewPort : viewPort, transparent : transparent});
	return texture;
};
openfl__$internal_renderer_opengl_GLBitmap.drawBitmapDrawable = function(renderSession,target,source,matrix,colorTransform,blendMode,clipRect) {
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) {
		throw new js__$Boot_HaxeError("No data to draw to");
	}
	var gl = renderSession.gl;
	if(gl == null) {
		return;
	}
	var viewPort = data.viewPort;
	var spritebatch = renderSession.spriteBatch;
	var drawTarget = target != null;
	var tmpRect = clipRect == null?new openfl_geom_Rectangle(viewPort.x,viewPort.y,viewPort.width,viewPort.height):clipRect.clone();
	spritebatch.begin(renderSession,drawTarget?null:tmpRect);
	if(drawTarget) {
		target.__worldTransform.identity();
		var m = target.__worldTransform;
		var height = viewPort.height;
		var tx = m.tx;
		var ty = m.ty;
		m.tx = 0;
		m.ty = 0;
		m.scale(1,-1);
		m.translate(0,height);
		m.tx += tx;
		m.ty -= ty;
		target.__renderGL(renderSession);
		spritebatch.stop();
		if(target.__texture != null) {
			gl.deleteTexture(target.__texture);
		}
		target.__texture = null;
		spritebatch.start(tmpRect);
	}
	var ctCache = source.__worldColorTransform;
	var blendModeCache = source.__blendMode;
	var cached = source.__cacheAsBitmap;
	var m1 = matrix != null?matrix.clone():new openfl_geom_Matrix();
	var height1 = viewPort.height;
	var tx1 = m1.tx;
	var ty1 = m1.ty;
	m1.tx = 0;
	m1.ty = 0;
	m1.scale(1,-1);
	m1.translate(0,height1);
	m1.tx += tx1;
	m1.ty -= ty1;
	source.__worldColorTransform = colorTransform != null?colorTransform:new openfl_geom_ColorTransform();
	source.__blendMode = blendMode;
	openfl_display_DisplayObject.__cacheAsBitmapMode = true;
	source.__updateTransforms(m1);
	source.__updateChildren(false);
	source.__cacheAsBitmap = false;
	source.__renderGL(renderSession);
	source.__cacheAsBitmap = cached;
	source.__worldColorTransform = ctCache;
	source.__blendMode = blendModeCache;
	openfl_display_DisplayObject.__cacheAsBitmapMode = false;
	source.__updateTransforms();
	source.__updateChildren(false);
};
openfl__$internal_renderer_opengl_GLBitmap.popFramebuffer = function(renderSession,image) {
	var gl = renderSession.gl;
	if(gl == null) {
		return;
	}
	renderSession.spriteBatch.finish();
	openfl__$internal_renderer_opengl_GLBitmap.fbData.pop();
	var data = openfl__$internal_renderer_opengl_GLBitmap.fbData[openfl__$internal_renderer_opengl_GLBitmap.fbData.length - 1];
	if(data == null) {
		throw new js__$Boot_HaxeError("oh");
	}
	var x;
	var y;
	var width;
	var height;
	if(data.viewPort == null) {
		y = 0;
		x = 0;
		width = renderSession.renderer.width;
		height = renderSession.renderer.height;
	} else {
		x = Math.floor(data.viewPort.x);
		y = Math.floor(data.viewPort.y);
		width = Math.ceil(data.viewPort.width);
		height = Math.ceil(data.viewPort.height);
	}
	if(image != null) {
		if(image.width != width || image.height != height) {
			image.resize(width,height);
		}
		gl.readPixels(x,y,width,height,gl.RGBA,gl.UNSIGNED_BYTE,image.buffer.data);
		image.dirty = false;
		image.set_premultiplied(true);
	}
	var tmp;
	if(data.texture == null) {
		tmp = renderSession.defaultFramebuffer;
	} else {
		var _this = data.texture;
		tmp = (_this.__swapped?_this.__texture1:_this.__texture0).frameBuffer;
	}
	gl.bindFramebuffer(gl.FRAMEBUFFER,tmp);
	renderSession.renderer.setViewport(x,y,width,height);
	renderSession.renderer.transparent = data.transparent;
	renderSession.maskManager.restoreState();
};
openfl__$internal_renderer_opengl_GLBitmap.flipMatrix = function(m,height) {
	var tx = m.tx;
	var ty = m.ty;
	m.tx = 0;
	m.ty = 0;
	m.scale(1,-1);
	m.translate(0,height);
	m.tx += tx;
	m.ty -= ty;
};
var openfl__$internal_renderer_opengl_GLRenderer = function(width,height,gl,transparent,antialias,preserveDrawingBuffer) {
	if(preserveDrawingBuffer == null) {
		preserveDrawingBuffer = false;
	}
	if(antialias == null) {
		antialias = false;
	}
	if(transparent == null) {
		transparent = false;
	}
	if(height == null) {
		height = 600;
	}
	if(width == null) {
		width = 800;
	}
	this.vpHeight = 0;
	this.vpWidth = 0;
	this.vpY = 0;
	this.vpX = 0;
	openfl__$internal_renderer_AbstractRenderer.call(this,width,height);
	this.transparent = transparent;
	this.preserveDrawingBuffer = preserveDrawingBuffer;
	this.width = width;
	this.height = height;
	this.viewport = new openfl_geom_Rectangle();
	this.options = { alpha : transparent, antialias : antialias, premultipliedAlpha : transparent, stencil : true, preserveDrawingBuffer : preserveDrawingBuffer};
	this._glContextId = openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
	this.gl = gl;
	this.defaultFramebuffer = null;
	openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = gl;
	this.projectionMatrix = new openfl_geom_Matrix();
	this.projection = new openfl_geom_Point();
	this.projection.x = this.width / 2;
	this.projection.y = -this.height / 2;
	this.offset = new openfl_geom_Point(0,0);
	this.resize(this.width,this.height);
	this.contextLost = false;
	this.shaderManager = new openfl__$internal_renderer_opengl_utils_ShaderManager(gl);
	this.spriteBatch = new openfl__$internal_renderer_opengl_utils_SpriteBatch(gl);
	this.filterManager = new openfl__$internal_renderer_opengl_utils_FilterManager(gl,this.transparent);
	this.stencilManager = new openfl__$internal_renderer_opengl_utils_StencilManager(gl);
	this.blendModeManager = new openfl__$internal_renderer_opengl_utils_BlendModeManager(gl);
	this.renderSession = new openfl__$internal_renderer_RenderSession();
	this.renderSession.gl = this.gl;
	this.renderSession.drawCount = 0;
	this.renderSession.shaderManager = this.shaderManager;
	this.renderSession.filterManager = this.filterManager;
	this.renderSession.blendModeManager = this.blendModeManager;
	this.renderSession.spriteBatch = this.spriteBatch;
	this.renderSession.stencilManager = this.stencilManager;
	this.renderSession.renderer = this;
	this.renderSession.defaultFramebuffer = this.defaultFramebuffer;
	this.renderSession.projectionMatrix = this.projectionMatrix;
	this.maskManager = new openfl__$internal_renderer_opengl_utils_GLMaskManager(this.renderSession);
	this.renderSession.maskManager = this.maskManager;
	this.shaderManager.setShader(this.shaderManager.defaultShader);
	gl.disable(gl.DEPTH_TEST);
	gl.disable(gl.CULL_FACE);
	gl.enable(gl.BLEND);
	gl.colorMask(true,true,true,this.transparent);
};
$hxClasses["openfl._internal.renderer.opengl.GLRenderer"] = openfl__$internal_renderer_opengl_GLRenderer;
openfl__$internal_renderer_opengl_GLRenderer.__name__ = ["openfl","_internal","renderer","opengl","GLRenderer"];
openfl__$internal_renderer_opengl_GLRenderer.renderBitmap = function(shape,renderSession,smooth) {
	if(smooth == null) {
		smooth = true;
	}
	if(!shape.__renderable || shape.__worldAlpha <= 0) {
		return;
	}
	if(shape.__graphics == null || shape.__graphics.__bitmap == null) {
		return;
	}
	var rect = openfl_geom_Rectangle.__temp;
	var matrix = openfl_geom_Matrix.__temp;
	rect.setEmpty();
	matrix.identity();
	shape.__getBounds(rect,matrix);
	var bitmap = shape.__graphics.__bitmap;
	matrix.translate(shape.__graphics.__bounds.x,shape.__graphics.__bounds.y);
	matrix.concat(shape.__renderTransform);
	renderSession.spriteBatch.renderBitmapData(bitmap,smooth,matrix,shape.__worldColorTransform,shape.__worldAlpha,shape.__blendMode,null,0);
};
openfl__$internal_renderer_opengl_GLRenderer.__super__ = openfl__$internal_renderer_AbstractRenderer;
openfl__$internal_renderer_opengl_GLRenderer.prototype = $extend(openfl__$internal_renderer_AbstractRenderer.prototype,{
	blendModeManager: null
	,contextLost: null
	,defaultFramebuffer: null
	,filterManager: null
	,gl: null
	,_glContextId: null
	,maskManager: null
	,offset: null
	,options: null
	,preserveDrawingBuffer: null
	,projection: null
	,shaderManager: null
	,spriteBatch: null
	,stencilManager: null
	,view: null
	,projectionMatrix: null
	,__stage: null
	,vpX: null
	,vpY: null
	,vpWidth: null
	,vpHeight: null
	,destroy: function() {
		openfl__$internal_renderer_opengl_GLRenderer.glContexts[this._glContextId] = null;
		this.projection = null;
		this.offset = null;
		this.shaderManager.destroy();
		this.spriteBatch.destroy();
		this.maskManager.destroy();
		this.filterManager.destroy();
		this.shaderManager = null;
		this.spriteBatch = null;
		this.maskManager = null;
		this.filterManager = null;
		this.gl = null;
		this.renderSession = null;
	}
	,setViewport: function(x,y,width,height) {
		if(!(this.vpX == x && this.vpY == y && this.vpWidth == width && this.vpHeight == height)) {
			this.vpX = x;
			this.vpY = y;
			this.vpWidth = width;
			this.vpHeight = height;
			this.gl.viewport(x,y,width,height);
			this.setOrtho(x,y,width,height);
			this.viewport.setTo(x,y,width,height);
		}
	}
	,setOrtho: function(x,y,width,height) {
		var o = this.projectionMatrix;
		o.identity();
		o.a = 1 / width * 2;
		o.d = -1 / height * 2;
		o.tx = -1 - x * o.a;
		o.ty = 1 - y * o.d;
	}
	,handleContextLost: function(event) {
		event.preventDefault();
		this.contextLost = true;
	}
	,handleContextRestored: function() {
		var gl = this.gl;
		openfl__$internal_renderer_opengl_GLRenderer.glContextId++;
		this.shaderManager.setContext(gl);
		this.spriteBatch.setContext(gl);
		this.maskManager.setContext(gl);
		this.filterManager.setContext(gl);
		this.renderSession.gl = gl;
		this.defaultFramebuffer = null;
		gl.disable(gl.DEPTH_TEST);
		gl.disable(gl.CULL_FACE);
		gl.enable(gl.BLEND);
		gl.colorMask(true,true,true,this.transparent);
		this.setViewport(0,0,this.width,this.height);
		this.contextLost = false;
	}
	,render: function(stage) {
		if(this.contextLost) {
			return;
		}
		var gl = this.gl;
		this.setViewport(0,0,this.width,this.height);
		gl.bindFramebuffer(gl.FRAMEBUFFER,this.defaultFramebuffer);
		if(this.transparent) {
			gl.clearColor(0,0,0,0);
		} else {
			gl.clearColor(stage.__colorSplit[0],stage.__colorSplit[1],stage.__colorSplit[2],1);
		}
		gl.clear(gl.COLOR_BUFFER_BIT);
		this.renderDisplayObject(stage,this.projection);
	}
	,renderDisplayObject: function(displayObject,projection,buffer) {
		this.renderSession.blendModeManager.setBlendMode(10);
		this.renderSession.drawCount = 0;
		this.renderSession.currentBlendMode = null;
		this.spriteBatch.begin(this.renderSession);
		this.filterManager.begin(this.renderSession,buffer);
		displayObject.__renderGL(this.renderSession);
		this.spriteBatch.finish();
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		openfl__$internal_renderer_AbstractRenderer.prototype.resize.call(this,width,height);
		this.setViewport(0,0,width,height);
		this.projection.x = width / 2;
		this.projection.y = -height / 2;
	}
	,__class__: openfl__$internal_renderer_opengl_GLRenderer
});
var openfl__$internal_renderer_opengl_shaders2_Shader = function(gl) {
	this.wrapT = 33071;
	this.wrapS = 33071;
	this.compiled = false;
	this.uniforms = new haxe_ds_StringMap();
	this.attributes = new haxe_ds_StringMap();
	this.ID = openfl__$internal_renderer_opengl_shaders2_Shader.UID++;
	this.gl = gl;
	this.program = null;
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.Shader"] = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_Shader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","Shader"];
openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram = function(gl,vertexSrc,fragmentSrc) {
	var cache = openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache;
	var key = haxe_crypto_Md5.encode(vertexSrc + fragmentSrc);
	if(__map_reserved[key] != null?cache.existsReserved(key):cache.h.hasOwnProperty(key)) {
		return __map_reserved[key] != null?cache.getReserved(key):cache.h[key];
	}
	var vertexShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,vertexSrc,gl.VERTEX_SHADER);
	var fragmentShader = openfl__$internal_renderer_opengl_shaders2_Shader.compileShader(gl,fragmentSrc,gl.FRAGMENT_SHADER);
	var program = gl.createProgram();
	if(vertexShader != null && fragmentShader != null) {
		gl.attachShader(program,vertexShader);
		gl.attachShader(program,fragmentShader);
		gl.linkProgram(program);
		gl.deleteShader(vertexShader);
		gl.deleteShader(fragmentShader);
		if(gl.getProgramParameter(program,gl.LINK_STATUS) == 0) {
			haxe_Log.trace("Could not compile the program:\n\t" + gl.getProgramInfoLog(program),{ fileName : "Shader.hx", lineNumber : 226, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
			haxe_Log.trace("VERTEX:\n" + vertexSrc + "\nFRAGMENT:\n" + fragmentSrc,{ fileName : "Shader.hx", lineNumber : 227, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileProgram"});
			return null;
		}
	}
	if(__map_reserved[key] != null) {
		cache.setReserved(key,program);
	} else {
		cache.h[key] = program;
	}
	return program;
};
openfl__$internal_renderer_opengl_shaders2_Shader.compileShader = function(gl,shaderSrc,type) {
	var shader = gl.createShader(type);
	gl.shaderSource(shader,shaderSrc);
	gl.compileShader(shader);
	if(gl.getShaderParameter(shader,gl.COMPILE_STATUS) == 0) {
		haxe_Log.trace("Could not compile the shader:\n\t" + gl.getShaderInfoLog(shader),{ fileName : "Shader.hx", lineNumber : 244, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		haxe_Log.trace(shaderSrc,{ fileName : "Shader.hx", lineNumber : 245, className : "openfl._internal.renderer.opengl.shaders2.Shader", methodName : "compileShader"});
		return null;
	}
	return shader;
};
openfl__$internal_renderer_opengl_shaders2_Shader.prototype = {
	gl: null
	,vertexSrc: null
	,fragmentSrc: null
	,attributes: null
	,uniforms: null
	,compiled: null
	,ID: null
	,program: null
	,wrapS: null
	,wrapT: null
	,smooth: null
	,blendMode: null
	,vertexString: null
	,fragmentString: null
	,init: function(force) {
		if(force == null) {
			force = false;
		}
		if(this.compiled && !force) {
			return;
		}
		if(this.vertexSrc != null) {
			this.vertexString = this.vertexSrc.join("\n");
		}
		if(this.fragmentSrc != null) {
			this.fragmentString = this.fragmentSrc.join("\n");
		}
		if(this.vertexString == null || this.fragmentString == null) {
			throw new js__$Boot_HaxeError("No vertex or fragment source provided");
		}
		this.program = openfl__$internal_renderer_opengl_shaders2_Shader.compileProgram(this.gl,this.vertexString,this.fragmentString);
		if(this.program != null) {
			this.compiled = true;
		}
	}
	,destroy: function() {
		if(this.program != null) {
			this.gl.deleteProgram(this.program);
		}
		this.compiled = false;
		this.attributes = null;
	}
	,applyData: function(shaderData,renderSession) {
		if(shaderData == null) {
			return;
		}
		var param;
		var u;
		var v;
		var bd;
		var tmp = shaderData.keys();
		while(tmp.hasNext()) {
			var key = tmp.next();
			u = this.getUniformLocation(key);
			param = __map_reserved[key] != null?shaderData.getReserved(key):shaderData.h[key];
			if(param == null) {
				continue;
			}
			v = param.value;
			bd = param.bitmap;
			if(v == null && bd == null) {
				continue;
			}
			switch(param.internalType) {
			case 1:
				switch(param.size) {
				case 1:
					this.gl.uniform1i(u,v[0] | 0);
					break;
				case 2:
					this.gl.uniform2i(u,v[0] | 0,v[1] | 0);
					break;
				case 3:
					this.gl.uniform3i(u,v[0] | 0,v[1] | 0,v[2] | 0);
					break;
				case 4:
					this.gl.uniform4i(u,v[0] | 0,v[1] | 0,v[2] | 0,v[3] | 0);
					break;
				}
				break;
			case 2:
				switch(param.size) {
				case 1:
					this.gl.uniform1f(u,v[0]);
					break;
				case 2:
					this.gl.uniform2f(u,v[0],v[1]);
					break;
				case 3:
					this.gl.uniform3f(u,v[0],v[1],v[2]);
					break;
				case 4:
					this.gl.uniform4f(u,v[0],v[1],v[2],v[3]);
					break;
				}
				break;
			case 3:
				switch(param.size) {
				case 2:
					var tmp1 = param.transpose;
					var array = param.value;
					this.gl.uniformMatrix2fv(u,tmp1,array != null?new Float32Array(array):null);
					break;
				case 3:
					var tmp2 = param.transpose;
					var array1 = param.value;
					this.gl.uniformMatrix3fv(u,tmp2,array1 != null?new Float32Array(array1):null);
					break;
				case 4:
					var tmp3 = param.transpose;
					var array2 = param.value;
					this.gl.uniformMatrix4fv(u,tmp3,array2 != null?new Float32Array(array2):null);
					break;
				}
				break;
			case 4:
				if(bd == null || !bd.__isValid) {
					continue;
				}
				this.gl.activeTexture(this.gl.TEXTURE0 + renderSession.activeTextures);
				this.gl.bindTexture(this.gl.TEXTURE_2D,bd.getTexture(this.gl));
				this.gl.uniform1i(u,renderSession.activeTextures);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,param.smooth?this.gl.LINEAR:this.gl.NEAREST);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,param.repeatX);
				this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,param.repeatY);
				renderSession.activeTextures++;
				break;
			default:
			}
		}
	}
	,getAttribLocation: function(attribute) {
		if(this.program == null) {
			throw new js__$Boot_HaxeError("Shader isn't initialized");
		}
		var _this = this.attributes;
		if(__map_reserved[attribute] != null?_this.existsReserved(attribute):_this.h.hasOwnProperty(attribute)) {
			var _this1 = this.attributes;
			return __map_reserved[attribute] != null?_this1.getReserved(attribute):_this1.h[attribute];
		} else {
			var location = this.gl.getAttribLocation(this.program,attribute);
			var _this2 = this.attributes;
			if(__map_reserved[attribute] != null) {
				_this2.setReserved(attribute,location);
			} else {
				_this2.h[attribute] = location;
			}
			return location;
		}
	}
	,getUniformLocation: function(uniform) {
		if(this.program == null) {
			throw new js__$Boot_HaxeError("Shader isn't initialized");
		}
		var _this = this.uniforms;
		if(__map_reserved[uniform] != null?_this.existsReserved(uniform):_this.h.hasOwnProperty(uniform)) {
			var _this1 = this.uniforms;
			return __map_reserved[uniform] != null?_this1.getReserved(uniform):_this1.h[uniform];
		} else {
			var location = this.gl.getUniformLocation(this.program,uniform);
			var _this2 = this.uniforms;
			if(__map_reserved[uniform] != null) {
				_this2.setReserved(uniform,location);
			} else {
				_this2.h[uniform] = location;
			}
			return location;
		}
	}
	,enableVertexAttribute: function(attribute,stride,offset) {
		var location = this.getAttribLocation(attribute.name);
		this.gl.enableVertexAttribArray(location);
		this.gl.vertexAttribPointer(location,attribute.components,attribute.type,attribute.normalized,stride,offset * 4);
	}
	,disableVertexAttribute: function(attribute,setDefault) {
		if(setDefault == null) {
			setDefault = true;
		}
		var location = this.getAttribLocation(attribute.name);
		this.gl.disableVertexAttribArray(location);
		if(setDefault) {
			switch(attribute.components) {
			case 1:
				this.gl.vertexAttrib1fv(location,attribute.defaultValue.subarray(0,1));
				break;
			case 2:
				this.gl.vertexAttrib2fv(location,attribute.defaultValue.subarray(0,2));
				break;
			case 3:
				this.gl.vertexAttrib3fv(location,attribute.defaultValue.subarray(0,3));
				break;
			default:
				this.gl.vertexAttrib4fv(location,attribute.defaultValue.subarray(0,4));
			}
		}
	}
	,bindVertexArray: function(va) {
		var offset = 0;
		var stride = va.get_stride();
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			if(attribute.enabled) {
				this.enableVertexAttribute(attribute,stride,offset);
				var _g2 = attribute.type;
				var tmp;
				switch(_g2) {
				case 5120:case 5121:
					tmp = 1;
					break;
				case 5122:case 5123:
					tmp = 2;
					break;
				default:
					tmp = 4;
				}
				offset += Math.floor(attribute.components * tmp / 4);
			} else {
				this.disableVertexAttribute(attribute,true);
			}
		}
	}
	,unbindVertexArray: function(va) {
		var _g = 0;
		var _g1 = va.attributes;
		while(_g < _g1.length) {
			var attribute = _g1[_g];
			++_g;
			this.disableVertexAttribute(attribute,false);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_Shader
};
var openfl__$internal_renderer_opengl_shaders2_DefaultShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC;
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","\tif(!" + "openfl_uUseColorTransform" + ") {","\t\treturn color * tint;","\t}","\tvec4 unmultiply;","\tif (color.a == 0.0) {","\t\tunmultiply = vec4(0.0, 0.0, 0.0, 0.0);","\t} else {","   \tunmultiply = vec4(color.rgb / color.a, color.a);","\t}","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec4 tc = texture2D(" + "openfl_uSampler0" + ", " + "openfl_vTexCoord" + ");","   gl_FragColor = colorTransform(tc, " + "openfl_vColor" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DefaultShader"] = openfl__$internal_renderer_opengl_shaders2_DefaultShader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DefaultShader"];
openfl__$internal_renderer_opengl_shaders2_DefaultShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) {
			force = false;
		}
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
		this.getUniformLocation("openfl_uUseColorTransform");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DefaultShader
});
var openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vTexCoord = " + "openfl_aTexCoord0" + ";","   vColor = " + "openfl_aColor" + ".bgra;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec3 " + "openfl_uColor" + ";","uniform bool " + "openfl_uUseTexture" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vTexCoord;","varying vec4 vColor;","vec4 tmp;","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   if(" + "openfl_uUseTexture" + ") {","       tmp = texture2D(" + "openfl_uSampler0" + ", vTexCoord);","   } else {","       tmp = vec4(" + "openfl_uColor" + ", 1.);","   }","   gl_FragColor = colorTransform(tmp, vColor, " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.DrawTrianglesShader"] = openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","DrawTrianglesShader"];
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) {
			force = false;
		}
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aTexCoord0");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uUseTexture");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader
});
var openfl__$internal_renderer_opengl_shaders2_FillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColor" + ";","uniform float " + "openfl_uAlpha" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_uColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.FillShader"] = openfl__$internal_renderer_opengl_shaders2_FillShader;
openfl__$internal_renderer_opengl_shaders2_FillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","FillShader"];
openfl__$internal_renderer_opengl_shaders2_FillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_FillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) {
			force = false;
		}
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uColor");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_FillShader
});
var openfl__$internal_renderer_opengl_shaders2_PatternFillShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform mat3 " + "openfl_uPatternMatrix" + ";","varying vec2 vPosition;","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vPosition = (" + "openfl_uPatternMatrix" + " * vec3(" + "openfl_aPosition" + ", 1)).xy;","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","uniform float " + "openfl_uAlpha" + ";","uniform vec2 " + "openfl_uPatternTL" + ";","uniform vec2 " + "openfl_uPatternBR" + ";","uniform sampler2D " + "openfl_uSampler0" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","varying vec2 vPosition;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   vec2 pos = mix(" + "openfl_uPatternTL" + ", " + "openfl_uPatternBR" + ", vPosition);","   vec4 tcol = texture2D(" + "openfl_uSampler0" + ", pos);","   gl_FragColor = colorTransform(tcol, " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PatternFillShader"] = openfl__$internal_renderer_opengl_shaders2_PatternFillShader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PatternFillShader"];
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PatternFillShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) {
			force = false;
		}
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uPatternMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uSampler0");
		this.getUniformLocation("openfl_uPatternTL");
		this.getUniformLocation("openfl_uPatternBR");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PatternFillShader
});
var openfl__$internal_renderer_opengl_shaders2_PrimitiveShader = function(gl) {
	openfl__$internal_renderer_opengl_shaders2_Shader.call(this,gl);
	this.vertexSrc = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uTranslationMatrix" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform vec4 " + "openfl_uColorMultiplier" + ";","uniform vec4 " + "openfl_uColorOffset" + ";","uniform float " + "openfl_uAlpha" + ";","varying vec4 vColor;","vec4 colorTransform(const vec4 color, const float alpha, const vec4 multiplier, const vec4 offset) {","   vec4 result = color * multiplier;","   result.a *= alpha;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * " + "openfl_uTranslationMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   vColor = colorTransform(" + "openfl_aColor" + ", " + "openfl_uAlpha" + ", " + "openfl_uColorMultiplier" + ", " + "openfl_uColorOffset" + ");","}"];
	this.fragmentSrc = ["#ifdef GL_ES","precision lowp float;","#endif","varying vec4 vColor;","void main(void) {","   gl_FragColor = vColor;","}"];
	this.init();
};
$hxClasses["openfl._internal.renderer.opengl.shaders2.PrimitiveShader"] = openfl__$internal_renderer_opengl_shaders2_PrimitiveShader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__name__ = ["openfl","_internal","renderer","opengl","shaders2","PrimitiveShader"];
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.__super__ = openfl__$internal_renderer_opengl_shaders2_Shader;
openfl__$internal_renderer_opengl_shaders2_PrimitiveShader.prototype = $extend(openfl__$internal_renderer_opengl_shaders2_Shader.prototype,{
	init: function(force) {
		if(force == null) {
			force = false;
		}
		openfl__$internal_renderer_opengl_shaders2_Shader.prototype.init.call(this,force);
		this.getAttribLocation("openfl_aPosition");
		this.getAttribLocation("openfl_aColor");
		this.getUniformLocation("openfl_uTranslationMatrix");
		this.getUniformLocation("openfl_uProjectionMatrix");
		this.getUniformLocation("openfl_uAlpha");
		this.getUniformLocation("openfl_uColorMultiplier");
		this.getUniformLocation("openfl_uColorOffset");
	}
	,__class__: openfl__$internal_renderer_opengl_shaders2_PrimitiveShader
});
var openfl__$internal_renderer_opengl_utils_BlendModeManager = function(gl) {
	this.gl = gl;
	this.currentBlendMode = null;
};
$hxClasses["openfl._internal.renderer.opengl.utils.BlendModeManager"] = openfl__$internal_renderer_opengl_utils_BlendModeManager;
openfl__$internal_renderer_opengl_utils_BlendModeManager.__name__ = ["openfl","_internal","renderer","opengl","utils","BlendModeManager"];
openfl__$internal_renderer_opengl_utils_BlendModeManager.prototype = {
	currentBlendMode: null
	,gl: null
	,destroy: function() {
		this.gl = null;
	}
	,setBlendMode: function(blendMode,force) {
		if(force == null) {
			force = false;
		}
		if(blendMode == null) {
			blendMode = 10;
			force = true;
		}
		if(!force && this.currentBlendMode == blendMode) {
			return false;
		}
		this.currentBlendMode = blendMode;
		switch(blendMode) {
		case 0:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,1);
			break;
		case 9:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(774,771);
			break;
		case 12:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,769);
			break;
		case 14:
			this.gl.blendEquation(32779);
			this.gl.blendFunc(1,1);
			break;
		default:
			this.gl.blendEquation(32774);
			this.gl.blendFunc(1,771);
		}
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_BlendModeManager
};
var openfl__$internal_renderer_opengl_utils_DrawPath = function(makeArray) {
	if(makeArray == null) {
		makeArray = true;
	}
	this.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	this.points = null;
	this.winding = 0;
	this.isRemovable = true;
	this.fillIndex = 0;
	this.line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	this.fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	if(makeArray) {
		this.points = [];
	}
};
$hxClasses["openfl._internal.renderer.opengl.utils.DrawPath"] = openfl__$internal_renderer_opengl_utils_DrawPath;
openfl__$internal_renderer_opengl_utils_DrawPath.__name__ = ["openfl","_internal","renderer","opengl","utils","DrawPath"];
openfl__$internal_renderer_opengl_utils_DrawPath.getStack = function(graphics,gl) {
	return openfl__$internal_renderer_opengl_utils_PathBuiler.build(graphics,gl);
};
openfl__$internal_renderer_opengl_utils_DrawPath.prototype = {
	line: null
	,fill: null
	,fillIndex: null
	,isRemovable: null
	,winding: null
	,points: null
	,type: null
	,update: function(line,fill,fillIndex,winding) {
		this.updateLine(line);
		this.fill = fill;
		this.fillIndex = fillIndex;
		this.winding = winding;
	}
	,updateLine: function(line) {
		this.line.width = line.width;
		this.line.color = line.color;
		this.line.alpha = line.alpha == null?1:line.alpha;
		this.line.scaleMode = line.scaleMode == null?2:line.scaleMode;
		this.line.caps = line.caps == null?1:line.caps;
		this.line.joints = line.joints == null?2:line.joints;
		this.line.miterLimit = line.miterLimit;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_DrawPath
};
var openfl__$internal_renderer_opengl_utils_PathBuiler = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.PathBuiler"] = openfl__$internal_renderer_opengl_utils_PathBuiler;
openfl__$internal_renderer_opengl_utils_PathBuiler.__name__ = ["openfl","_internal","renderer","opengl","utils","PathBuiler"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__line = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = null;
openfl__$internal_renderer_opengl_utils_PathBuiler.closePath = function() {
	var l = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null?0:openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length;
	if(l <= 0) {
		return;
	}
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type == openfl__$internal_renderer_opengl_utils_GraphicType.Polygon && openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.fill != openfl__$internal_renderer_opengl_utils_FillType.None) {
		var sx = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[0];
		var sy = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[1];
		var ex = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 2];
		var ey = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points[l - 1];
		if(!(sx == ex && sy == ey)) {
			var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
			var push_point = true;
			if(points.length > 1) {
				var lastX = points[points.length - 2];
				var lastY = points[points.length - 1];
				if(lastX == sx && lastY == sy) {
					push_point = false;
				}
			}
			if(push_point == true) {
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(sx);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(sy);
			}
		}
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.endFill = function() {
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
};
openfl__$internal_renderer_opengl_utils_PathBuiler.moveTo = function(x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
	} else {
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	}
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.lineTo = function(x,y) {
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var push_point = true;
	if(points.length > 1) {
		var lastX = points[points.length - 2];
		var lastY = points[points.length - 1];
		if(lastX == x && lastY == y) {
			push_point = false;
		}
	}
	if(push_point == true) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.curveTo = function(cx,cy,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
			openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
		} else {
			openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx,cy,x,y);
};
openfl__$internal_renderer_opengl_utils_PathBuiler.cubicCurveTo = function(cx,cy,cx2,cy2,x,y) {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
		if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
			openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
		} else {
			openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
	}
	var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
	var dt = 0;
	var dt2 = 0;
	var dt3 = 0;
	var t2 = 0;
	var t3 = 0;
	var fromX = points[points.length - 2];
	var fromY = points[points.length - 1];
	var px = 0;
	var py = 0;
	var tmp = 0;
	var _g1 = 1;
	while(_g1 < 21) {
		tmp = _g1++ / 20;
		dt = 1 - tmp;
		dt2 = dt * dt;
		dt3 = dt2 * dt;
		t2 = tmp * tmp;
		t3 = t2 * tmp;
		px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
		py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
		points.push(px);
		points.push(py);
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.graphicDataPop = function() {
	if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
		openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
	} else {
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
	}
};
openfl__$internal_renderer_opengl_utils_PathBuiler.build = function(graphics,gl) {
	var glStack = null;
	var bounds = graphics.__bounds;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths = [];
	openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer_opengl_utils_FillType.None;
	openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
	glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) {
		glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId] = new openfl__$internal_renderer_opengl_utils_GLStack(gl);
	}
	if(!(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0)) {
		var data = new openfl__$internal_renderer_DrawCommandReader(graphics.__commands);
		var _g = 0;
		var _g1 = graphics.__commands.types;
		while(_g < _g1.length) {
			var type = _g1[_g];
			++_g;
			switch(type[1]) {
			case 0:
				var c = data.readBeginBitmapFill();
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c) != null?openfl__$internal_renderer_opengl_utils_FillType.Texture(openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_bitmap(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_matrix(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_repeat(c),openfl__$internal_renderer__$DrawCommandReader_BeginBitmapFillView_$Impl_$.get_smooth(c)):openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
					} else {
						openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					}
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 1:
				var c1 = data.readBeginFill();
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fill = openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1) > 0?openfl__$internal_renderer_opengl_utils_FillType.Color(openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_color(c1) & 16777215,openfl__$internal_renderer__$DrawCommandReader_BeginFillView_$Impl_$.get_alpha(c1)):openfl__$internal_renderer_opengl_utils_FillType.None;
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
					} else {
						openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					}
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				break;
			case 3:
				var c2 = data.readCubicCurveTo();
				var cx = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX1(c2);
				var cy = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY1(c2);
				var cx2 = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlX2(c2);
				var cy2 = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_controlY2(c2);
				var x = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorX(c2);
				var y = openfl__$internal_renderer__$DrawCommandReader_CubicCurveToView_$Impl_$.get_anchorY(c2);
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
					} else {
						openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					}
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				var points = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
				var n = 20;
				var dt = 0;
				var dt2 = 0;
				var dt3 = 0;
				var t2 = 0;
				var t3 = 0;
				var fromX = points[points.length - 2];
				var fromY = points[points.length - 1];
				var px = 0;
				var py = 0;
				var tmp = 0;
				var _g11 = 1;
				var _g2 = n + 1;
				while(_g11 < _g2) {
					tmp = _g11++ / n;
					dt = 1 - tmp;
					dt2 = dt * dt;
					dt3 = dt2 * dt;
					t2 = tmp * tmp;
					t3 = t2 * tmp;
					px = dt3 * fromX + 3 * dt2 * tmp * cx + 3 * dt * t2 * cx2 + t3 * x;
					py = dt3 * fromY + 3 * dt2 * tmp * cy + 3 * dt * t2 * cy2 + t3 * y;
					points.push(px);
					points.push(py);
				}
				break;
			case 4:
				var c3 = data.readCurveTo();
				var cx1 = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlX(c3);
				var cy1 = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_controlY(c3);
				var x1 = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorX(c3);
				var y1 = openfl__$internal_renderer__$DrawCommandReader_CurveToView_$Impl_$.get_anchorY(c3);
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
					if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
					} else {
						openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
					}
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				}
				openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx1,cy1,x1,y1);
				break;
			case 5:
				var c4 = data.readDrawCircle();
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Circle;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_x(c4),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_y(c4),openfl__$internal_renderer__$DrawCommandReader_DrawCircleView_$Impl_$.get_radius(c4)];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 6:
				var c5 = data.readDrawEllipse();
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_x(c5),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_y(c5),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_width(c5),openfl__$internal_renderer__$DrawCommandReader_DrawEllipseView_$Impl_$.get_height(c5)];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 7:
				var c6 = data.readDrawPath();
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				switch(openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_winding(c6)) {
				case "evenOdd":
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
					break;
				case "nonZero":
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 1;
					break;
				default:
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				}
				var command;
				var cx3;
				var cy3;
				var cx21;
				var cy21;
				var ax;
				var ay;
				var idx = 0;
				var _g4 = 0;
				var _g3 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands(c6).length;
				while(_g4 < _g3) {
					var i = _g4++;
					command = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_commands(c6).data[i];
					switch(command) {
					case 1:
						ax = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx];
						ay = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 1];
						idx += 2;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
						} else {
							openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						}
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 2:
						ax = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx];
						ay = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 1];
						idx += 2;
						var points1 = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
						var push_point = true;
						if(points1.length > 1) {
							var lastX = points1[points1.length - 2];
							var lastY = points1[points1.length - 1];
							if(lastX == ax && lastY == ay) {
								push_point = false;
							}
						}
						if(push_point == true) {
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						}
						break;
					case 3:
						cx3 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx];
						cy3 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 1];
						ax = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 2];
						ay = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
								openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
							} else {
								openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							}
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						openfl__$internal_renderer_GraphicsPaths.curveTo(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points,cx3,cy3,ax,ay);
						break;
					case 4:
						ax = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 2];
						ay = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 3];
						idx += 4;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
						} else {
							openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
						}
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						break;
					case 5:
						ax = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 2];
						ay = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 3];
						idx += 4;
						var points2 = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
						var push_point1 = true;
						if(points2.length > 1) {
							var lastX1 = points2[points2.length - 2];
							var lastY1 = points2[points2.length - 1];
							if(lastX1 == ax && lastY1 == ay) {
								push_point1 = false;
							}
						}
						if(push_point1 == true) {
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ax);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(ay);
						}
						break;
					case 6:
						cx3 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx];
						cy3 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 1];
						cx21 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 2];
						cy21 = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 3];
						ax = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 4];
						ay = openfl__$internal_renderer__$DrawCommandReader_DrawPathView_$Impl_$.get_data(c6).data[idx + 5];
						idx += 6;
						if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0) {
							if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
								openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
							} else {
								openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
							}
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(0);
							openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
						}
						var points3 = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
						var n1 = 20;
						var dt1 = 0;
						var dt21 = 0;
						var dt31 = 0;
						var t21 = 0;
						var t31 = 0;
						var fromX1 = points3[points3.length - 2];
						var fromY1 = points3[points3.length - 1];
						var px1 = 0;
						var py1 = 0;
						var tmp1 = 0;
						var _g12 = 1;
						var _g5 = n1 + 1;
						while(_g12 < _g5) {
							tmp1 = _g12++ / n1;
							dt1 = 1 - tmp1;
							dt21 = dt1 * dt1;
							dt31 = dt21 * dt1;
							t21 = tmp1 * tmp1;
							t31 = t21 * tmp1;
							px1 = dt31 * fromX1 + 3 * dt21 * tmp1 * cx3 + 3 * dt1 * t21 * cx21 + t31 * ax;
							py1 = dt31 * fromY1 + 3 * dt21 * tmp1 * cy3 + 3 * dt1 * t21 * cy21 + t31 * ay;
							points3.push(px1);
							points3.push(py1);
						}
						break;
					default:
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
				break;
			case 8:
				var c7 = data.readDrawRect();
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_x(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_y(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_width(c7),openfl__$internal_renderer__$DrawCommandReader_DrawRectView_$Impl_$.get_height(c7)];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 9:
				var c8 = data.readDrawRoundRect();
				var x2 = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_x(c8);
				var y2 = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_y(c8);
				var width = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_width(c8);
				var height = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_height(c8);
				var rx = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseWidth(c8);
				var ry = openfl__$internal_renderer__$DrawCommandReader_DrawRoundRectView_$Impl_$.get_ellipseHeight(c8);
				if(ry == null) {
					ry = rx;
				}
				rx *= 0.5;
				ry *= 0.5;
				if(rx > width / 2) {
					rx = width / 2;
				}
				if(ry > height / 2) {
					ry = height / 2;
				}
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle(true);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [x2,y2,width,height,rx,ry];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 10:
				var c9 = data.readDrawTiles();
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex++;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath(false);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles(openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_sheet(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_tileData(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_smooth(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_flags(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_shader(c9),openfl__$internal_renderer__$DrawCommandReader_DrawTilesView_$Impl_$.get_count(c9));
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 11:
				var c10 = data.readDrawTriangles();
				var uvtData = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_uvtData(c10);
				var vertices = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_vertices(c10);
				var indices = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_indices(c10);
				var culling = openfl__$internal_renderer__$DrawCommandReader_DrawTrianglesView_$Impl_$.get_culling(c10);
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__fill[1] == 1 && uvtData != null) {
					continue;
				}
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				if(uvtData == null) {
					var this1 = new openfl_VectorData();
					this1.data = new Array(0);
					this1.length = 0;
					this1.fixed = false;
					uvtData = this1;
					var _g31 = openfl__$internal_renderer_opengl_utils_PathBuiler.__fill;
					if(_g31[1] == 2) {
						var b = _g31[2];
						var _g41 = 0;
						var _g32 = vertices.length / 2 | 0;
						while(_g41 < _g32) {
							var i1 = _g41++;
							var x3 = vertices.data[i1 * 2] / b.width;
							if(!uvtData.fixed) {
								uvtData.length++;
								if(uvtData.data.length < uvtData.length) {
									var length = uvtData.data.length + 10;
									var data1 = new Array(length);
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data1,0,uvtData.data.length);
									uvtData.data = data1;
								}
								uvtData.data[uvtData.length - 1] = x3;
							}
							var x4 = vertices.data[i1 * 2 + 1] / b.height;
							if(!uvtData.fixed) {
								uvtData.length++;
								if(uvtData.data.length < uvtData.length) {
									var length1 = uvtData.data.length + 10;
									var data2 = new Array(length1);
									haxe_ds__$Vector_Vector_$Impl_$.blit(uvtData.data,0,data2,0,uvtData.data.length);
									uvtData.data = data2;
								}
								uvtData.data[uvtData.length - 1] = x4;
							}
						}
					}
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles(vertices,indices,uvtData,culling,null,0);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 12:
				var c11 = data.readEndFill();
				openfl__$internal_renderer_opengl_utils_PathBuiler.endFill();
				break;
			case 15:
				var c12 = data.readLineStyle();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line = new openfl__$internal_renderer_opengl_utils_LineStyle();
				var tmp2;
				var tmp3;
				if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) != null) {
					var f = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12);
					tmp3 = isNaN(f);
				} else {
					tmp3 = true;
				}
				if(!tmp3) {
					tmp2 = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) < 0;
				} else {
					tmp2 = true;
				}
				if(tmp2) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 0;
				} else if(openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12) == 0) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = 1;
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__line.width = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_thickness(c12);
				}
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.color = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_color(c12);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.alpha = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_alpha(c12);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.scaleMode = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_scaleMode(c12);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.caps = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_caps(c12);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.joints = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_joints(c12);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__line.miterLimit = openfl__$internal_renderer__$DrawCommandReader_LineStyleView_$Impl_$.get_miterLimit(c12);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points = [];
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 16:
				var c13 = data.readLineTo();
				var x5 = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_x(c13);
				var y3 = openfl__$internal_renderer__$DrawCommandReader_LineToView_$Impl_$.get_y(c13);
				var points4 = openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points;
				var push_point2 = true;
				if(points4.length > 1) {
					var lastX2 = points4[points4.length - 2];
					var lastY2 = points4[points4.length - 1];
					if(lastX2 == x5 && lastY2 == y3) {
						push_point2 = false;
					}
				}
				if(push_point2 == true) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x5);
					openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y3);
				}
				break;
			case 17:
				var c14 = data.readMoveTo();
				var x6 = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_x(c14);
				var y4 = openfl__$internal_renderer__$DrawCommandReader_MoveToView_$Impl_$.get_y(c14);
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(x6);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.push(y4);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			case 18:
				var c15 = data.readOverrideMatrix();
				if(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable && (openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points == null || openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.points.length == 0)) {
					openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.pop();
				} else {
					openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
				}
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath = new openfl__$internal_renderer_opengl_utils_DrawPath();
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.update(openfl__$internal_renderer_opengl_utils_PathBuiler.__line,openfl__$internal_renderer_opengl_utils_PathBuiler.__fill,openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex,openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding);
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.type = openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix(openfl__$internal_renderer__$DrawCommandReader_OverrideMatrixView_$Impl_$.get_matrix(c15));
				openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath.isRemovable = false;
				openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths.push(openfl__$internal_renderer_opengl_utils_PathBuiler.__currentPath);
				break;
			default:
				data.skip(type);
			}
		}
		openfl__$internal_renderer_opengl_utils_PathBuiler.closePath();
		data.destroy();
	}
	graphics.__drawPaths = openfl__$internal_renderer_opengl_utils_PathBuiler.__drawPaths;
	return glStack;
};
var openfl__$internal_renderer_opengl_utils_LineStyle = function() {
	this.width = 0;
	this.color = 0;
	this.alpha = 1;
	this.scaleMode = 2;
	this.caps = 1;
	this.joints = 2;
	this.miterLimit = 3;
};
$hxClasses["openfl._internal.renderer.opengl.utils.LineStyle"] = openfl__$internal_renderer_opengl_utils_LineStyle;
openfl__$internal_renderer_opengl_utils_LineStyle.__name__ = ["openfl","_internal","renderer","opengl","utils","LineStyle"];
openfl__$internal_renderer_opengl_utils_LineStyle.prototype = {
	width: null
	,color: null
	,alpha: null
	,scaleMode: null
	,caps: null
	,joints: null
	,miterLimit: null
	,__class__: openfl__$internal_renderer_opengl_utils_LineStyle
};
var openfl__$internal_renderer_opengl_utils_FillType = $hxClasses["openfl._internal.renderer.opengl.utils.FillType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","FillType"], __constructs__ : ["None","Color","Texture","Gradient"] };
openfl__$internal_renderer_opengl_utils_FillType.None = ["None",0];
openfl__$internal_renderer_opengl_utils_FillType.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.None.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
openfl__$internal_renderer_opengl_utils_FillType.Color = function(color,alpha) { var $x = ["Color",1,color,alpha]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Texture = function(bitmap,matrix,repeat,smooth) { var $x = ["Texture",2,bitmap,matrix,repeat,smooth]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_FillType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_FillType.Gradient = ["Gradient",3];
openfl__$internal_renderer_opengl_utils_FillType.Gradient.toString = $estr;
openfl__$internal_renderer_opengl_utils_FillType.Gradient.__enum__ = openfl__$internal_renderer_opengl_utils_FillType;
var openfl__$internal_renderer_opengl_utils_FilterManager = function(gl,transparent) {
	this.transparent = transparent;
	this.filterStack = [];
	this.offsetX = 0;
	this.offsetY = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.FilterManager"] = openfl__$internal_renderer_opengl_utils_FilterManager;
openfl__$internal_renderer_opengl_utils_FilterManager.__name__ = ["openfl","_internal","renderer","opengl","utils","FilterManager"];
openfl__$internal_renderer_opengl_utils_FilterManager.prototype = {
	buffer: null
	,colorArray: null
	,colorBuffer: null
	,defaultShader: null
	,filterStack: null
	,gl: null
	,height: null
	,indexBuffer: null
	,offsetX: null
	,offsetY: null
	,renderSession: null
	,texturePool: null
	,transparent: null
	,uvArray: null
	,uvBuffer: null
	,vertexArray: null
	,vertexBuffer: null
	,width: null
	,applyFilterPass: function(filter,filterArea,width,height) {
	}
	,begin: function(renderSession,buffer) {
		this.renderSession = renderSession;
		this.defaultShader = renderSession.shaderManager.defaultShader;
		this.width = 0;
		this.height = 0;
		this.buffer = buffer;
	}
	,destroy: function() {
		var gl = this.gl;
		this.filterStack = null;
		this.offsetX = 0;
		this.offsetY = 0;
		var _g = 0;
		var _g1 = this.texturePool;
		while(_g < _g1.length) {
			var texture = _g1[_g];
			++_g;
			texture.destroy();
		}
		this.texturePool = null;
		gl.deleteBuffer(this.vertexBuffer);
		gl.deleteBuffer(this.uvBuffer);
		gl.deleteBuffer(this.colorBuffer);
		gl.deleteBuffer(this.indexBuffer);
	}
	,initShaderBuffers: function() {
		var gl = this.gl;
		this.vertexBuffer = gl.createBuffer();
		this.uvBuffer = gl.createBuffer();
		this.colorBuffer = gl.createBuffer();
		this.indexBuffer = gl.createBuffer();
		var array = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		this.vertexArray = array != null?new Float32Array(array):null;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.vertexBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.vertexArray,gl.STATIC_DRAW);
		var array1 = [0.0,0.0,1.0,0.0,0.0,1.0,1.0,1.0];
		this.uvArray = array1 != null?new Float32Array(array1):null;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.uvBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.uvArray,gl.STATIC_DRAW);
		var array2 = [1.0,16777215,1.0,16777215,1.0,16777215,1.0,16777215];
		this.colorArray = array2 != null?new Float32Array(array2):null;
		gl.bindBuffer(gl.ARRAY_BUFFER,this.colorBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,this.colorArray,gl.STATIC_DRAW);
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		var tmp = gl.ELEMENT_ARRAY_BUFFER;
		var array3 = [0,1,2,1,3,2];
		gl.bufferData(tmp,array3 != null?new Uint16Array(array3):null,gl.STATIC_DRAW);
	}
	,popFilter: function() {
	}
	,pushFilter: function(filterBlock) {
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.texturePool = [];
		this.initShaderBuffers();
	}
	,__class__: openfl__$internal_renderer_opengl_utils_FilterManager
};
var openfl__$internal_renderer_opengl_utils_GLMaskManager = function(renderSession) {
	openfl__$internal_renderer_AbstractMaskManager.call(this,renderSession);
	this.setContext(renderSession.gl);
	this.clips = [];
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLMaskManager"] = openfl__$internal_renderer_opengl_utils_GLMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.__name__ = ["openfl","_internal","renderer","opengl","utils","GLMaskManager"];
openfl__$internal_renderer_opengl_utils_GLMaskManager.__super__ = openfl__$internal_renderer_AbstractMaskManager;
openfl__$internal_renderer_opengl_utils_GLMaskManager.prototype = $extend(openfl__$internal_renderer_AbstractMaskManager.prototype,{
	gl: null
	,clips: null
	,currentClip: null
	,savedClip: null
	,destroy: function() {
		this.gl = null;
	}
	,pushRect: function(rect,transform) {
		if(rect == null) {
			return;
		}
		var m = transform.clone();
		var height = this.renderSession.renderer.viewport.height;
		var tx = m.tx;
		var ty = m.ty;
		m.tx = 0;
		m.ty = 0;
		m.scale(1,-1);
		m.translate(0,height);
		m.tx += tx;
		m.ty -= ty;
		var clip = rect.clone();
		clip.__transform(clip,m);
		if(this.currentClip != null) {
			clip = this.currentClip.intersection(clip);
		}
		var restartBatch = this.currentClip == null || clip.isEmpty() || this.currentClip.containsRect(clip);
		this.clips.push(clip);
		this.currentClip = clip;
		if(restartBatch) {
			this.renderSession.spriteBatch.stop();
			this.renderSession.spriteBatch.start(this.currentClip);
		}
	}
	,pushMask: function(mask) {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.pushMask(mask,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popMask: function() {
		this.renderSession.spriteBatch.stop();
		this.renderSession.stencilManager.popMask(null,this.renderSession);
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,popRect: function() {
		this.renderSession.spriteBatch.stop();
		this.clips.pop();
		this.currentClip = this.clips[this.clips.length - 1];
		this.renderSession.spriteBatch.start(this.currentClip);
	}
	,saveState: function() {
		this.savedClip = this.currentClip;
		this.currentClip = null;
	}
	,restoreState: function() {
		this.currentClip = this.savedClip;
		this.savedClip = null;
	}
	,setContext: function(gl) {
		if(this.renderSession != null) {
			this.renderSession.gl = gl;
		}
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLMaskManager
});
var openfl__$internal_renderer_opengl_utils_VertexAttribute = function(components,type,normalized,name,defaultValue) {
	if(normalized == null) {
		normalized = false;
	}
	this.enabled = true;
	this.normalized = false;
	this.components = components;
	this.type = type;
	this.normalized = normalized;
	this.name = name;
	if(defaultValue == null) {
		this.defaultValue = components != null?new Float32Array(components):null;
	} else {
		this.defaultValue = defaultValue;
	}
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexAttribute"] = openfl__$internal_renderer_opengl_utils_VertexAttribute;
openfl__$internal_renderer_opengl_utils_VertexAttribute.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexAttribute"];
openfl__$internal_renderer_opengl_utils_VertexAttribute.prototype = {
	components: null
	,normalized: null
	,type: null
	,name: null
	,enabled: null
	,defaultValue: null
	,copy: function() {
		return new openfl__$internal_renderer_opengl_utils_VertexAttribute(this.components,this.type,this.normalized,this.name,this.defaultValue);
	}
	,getElementsBytes: function() {
		switch(this.type) {
		case 5120:case 5121:
			return 1;
		case 5122:case 5123:
			return 2;
		default:
			return 4;
		}
	}
	,get_elements: function() {
		var _g = this.type;
		var tmp;
		switch(_g) {
		case 5120:case 5121:
			tmp = 1;
			break;
		case 5122:case 5123:
			tmp = 2;
			break;
		default:
			tmp = 4;
		}
		return Math.floor(this.components * tmp / 4);
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexAttribute
	,__properties__: {get_elements:"get_elements"}
};
var openfl_geom_Rectangle = function(x,y,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.x = x;
	this.y = y;
	this.width = width;
	this.height = height;
};
$hxClasses["openfl.geom.Rectangle"] = openfl_geom_Rectangle;
openfl_geom_Rectangle.__name__ = ["openfl","geom","Rectangle"];
openfl_geom_Rectangle.prototype = {
	height: null
	,width: null
	,x: null
	,y: null
	,clone: function() {
		return new openfl_geom_Rectangle(this.x,this.y,this.width,this.height);
	}
	,contains: function(x,y) {
		if(x >= this.x && y >= this.y && x < this.get_right()) {
			return y < this.get_bottom();
		} else {
			return false;
		}
	}
	,containsPoint: function(point) {
		return this.contains(point.x,point.y);
	}
	,containsRect: function(rect) {
		if(rect.width <= 0 || rect.height <= 0) {
			if(rect.x > this.x && rect.y > this.y && rect.get_right() < this.get_right()) {
				return rect.get_bottom() < this.get_bottom();
			} else {
				return false;
			}
		} else if(rect.x >= this.x && rect.y >= this.y && rect.get_right() <= this.get_right()) {
			return rect.get_bottom() <= this.get_bottom();
		} else {
			return false;
		}
	}
	,copyFrom: function(sourceRect) {
		this.x = sourceRect.x;
		this.y = sourceRect.y;
		this.width = sourceRect.width;
		this.height = sourceRect.height;
	}
	,equals: function(toCompare) {
		if(toCompare != null && this.x == toCompare.x && this.y == toCompare.y && this.width == toCompare.width) {
			return this.height == toCompare.height;
		} else {
			return false;
		}
	}
	,inflate: function(dx,dy) {
		this.x -= dx;
		this.width += dx * 2;
		this.y -= dy;
		this.height += dy * 2;
	}
	,inflatePoint: function(point) {
		this.inflate(point.x,point.y);
	}
	,intersection: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		var x1 = this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right();
		if(x1 <= x0) {
			return new openfl_geom_Rectangle();
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		var y1 = this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom();
		if(y1 <= y0) {
			return new openfl_geom_Rectangle();
		}
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,y1 - y0);
	}
	,intersects: function(toIntersect) {
		var x0 = this.x < toIntersect.x?toIntersect.x:this.x;
		if((this.get_right() > toIntersect.get_right()?toIntersect.get_right():this.get_right()) <= x0) {
			return false;
		}
		var y0 = this.y < toIntersect.y?toIntersect.y:this.y;
		return (this.get_bottom() > toIntersect.get_bottom()?toIntersect.get_bottom():this.get_bottom()) > y0;
	}
	,isEmpty: function() {
		if(!(this.width <= 0)) {
			return this.height <= 0;
		} else {
			return true;
		}
	}
	,offset: function(dx,dy) {
		this.x += dx;
		this.y += dy;
	}
	,offsetPoint: function(point) {
		this.x += point.x;
		this.y += point.y;
	}
	,setEmpty: function() {
		this.x = this.y = this.width = this.height = 0;
	}
	,setTo: function(xa,ya,widtha,heighta) {
		this.x = xa;
		this.y = ya;
		this.width = widtha;
		this.height = heighta;
	}
	,toString: function() {
		return "(x=" + this.x + ", y=" + this.y + ", width=" + this.width + ", height=" + this.height + ")";
	}
	,union: function(toUnion) {
		if(this.width == 0 || this.height == 0) {
			return toUnion.clone();
		} else if(toUnion.width == 0 || toUnion.height == 0) {
			return this.clone();
		}
		var x0 = this.x > toUnion.x?toUnion.x:this.x;
		var x1 = this.get_right() < toUnion.get_right()?toUnion.get_right():this.get_right();
		var y0 = this.y > toUnion.y?toUnion.y:this.y;
		return new openfl_geom_Rectangle(x0,y0,x1 - x0,(this.get_bottom() < toUnion.get_bottom()?toUnion.get_bottom():this.get_bottom()) - y0);
	}
	,__contract: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			return;
		}
		if(this.x < x) {
			this.x = x;
		}
		if(this.y < y) {
			this.y = y;
		}
		if(this.get_right() > x + width) {
			this.width = x + width - this.x;
		}
		if(this.get_bottom() > y + height) {
			this.height = y + height - this.y;
		}
	}
	,__expand: function(x,y,width,height) {
		if(this.width == 0 && this.height == 0) {
			this.x = x;
			this.y = y;
			this.width = width;
			this.height = height;
			return;
		}
		var cacheRight = this.get_right();
		var cacheBottom = this.get_bottom();
		if(this.x > x) {
			this.x = x;
			this.width = cacheRight - x;
		}
		if(this.y > y) {
			this.y = y;
			this.height = cacheBottom - y;
		}
		if(cacheRight < x + width) {
			this.width = x + width - this.x;
		}
		if(cacheBottom < y + height) {
			this.height = y + height - this.y;
		}
	}
	,__toLimeRectangle: function() {
		return new lime_math_Rectangle(this.x,this.y,this.width,this.height);
	}
	,__transform: function(rect,m) {
		var tx0 = m.a * this.x + m.c * this.y;
		var tx1 = tx0;
		var ty0 = m.b * this.x + m.d * this.y;
		var ty1 = ty0;
		var tx = m.a * (this.x + this.width) + m.c * this.y;
		var ty = m.b * (this.x + this.width) + m.d * this.y;
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * (this.x + this.width) + m.c * (this.y + this.height);
		ty = m.b * (this.x + this.width) + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		tx = m.a * this.x + m.c * (this.y + this.height);
		ty = m.b * this.x + m.d * (this.y + this.height);
		if(tx < tx0) {
			tx0 = tx;
		}
		if(ty < ty0) {
			ty0 = ty;
		}
		if(tx > tx1) {
			tx1 = tx;
		}
		if(ty > ty1) {
			ty1 = ty;
		}
		rect.setTo(tx0 + m.tx,ty0 + m.ty,tx1 - tx0,ty1 - ty0);
	}
	,get_bottom: function() {
		return this.y + this.height;
	}
	,set_bottom: function(b) {
		this.height = b - this.y;
		return b;
	}
	,get_bottomRight: function() {
		return new openfl_geom_Point(this.x + this.width,this.y + this.height);
	}
	,set_bottomRight: function(p) {
		this.width = p.x - this.x;
		this.height = p.y - this.y;
		return p.clone();
	}
	,get_left: function() {
		return this.x;
	}
	,set_left: function(l) {
		this.width -= l - this.x;
		this.x = l;
		return l;
	}
	,get_right: function() {
		return this.x + this.width;
	}
	,set_right: function(r) {
		this.width = r - this.x;
		return r;
	}
	,get_size: function() {
		return new openfl_geom_Point(this.width,this.height);
	}
	,set_size: function(p) {
		this.width = p.x;
		this.height = p.y;
		return p.clone();
	}
	,get_top: function() {
		return this.y;
	}
	,set_top: function(t) {
		this.height -= t - this.y;
		this.y = t;
		return t;
	}
	,get_topLeft: function() {
		return new openfl_geom_Point(this.x,this.y);
	}
	,set_topLeft: function(p) {
		this.x = p.x;
		this.y = p.y;
		return p.clone();
	}
	,__class__: openfl_geom_Rectangle
	,__properties__: {set_topLeft:"set_topLeft",get_topLeft:"get_topLeft",set_top:"set_top",get_top:"get_top",set_size:"set_size",get_size:"get_size",set_right:"set_right",get_right:"get_right",set_left:"set_left",get_left:"get_left",set_bottomRight:"set_bottomRight",get_bottomRight:"get_bottomRight",set_bottom:"set_bottom",get_bottom:"get_bottom"}
};
var openfl__$internal_renderer_opengl_utils_GraphicsRenderer = function() { };
$hxClasses["openfl._internal.renderer.opengl.utils.GraphicsRenderer"] = openfl__$internal_renderer_opengl_utils_GraphicsRenderer;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.__name__ = ["openfl","_internal","renderer","opengl","utils","GraphicsRenderer"];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastVertsBuffer = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastBucketMode = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTexture = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureRepeat = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.lastTextureSmooth = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = null;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle = function(path,glStack,localCoords) {
	if(localCoords == null) {
		localCoords = false;
	}
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var rx = rectData[2];
	var ry = rectData.length == 3?rx:rectData[3];
	if(path.type == openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse) {
		rx /= 2;
		ry /= 2;
		x += rx;
		y += ry;
	}
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var seg = Math.PI * 2 / 40;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		indices.push(vertPos);
		var _g1 = 0;
		while(_g1 < 41) {
			var i = _g1++;
			verts.push(x);
			verts.push(y);
			verts.push(x + Math.sin(seg * i) * rx);
			verts.push(y + Math.cos(seg * i) * ry);
			indices.push(vertPos++);
			indices.push(vertPos++);
		}
		indices.push(vertPos - 1);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [];
		var points = path.points;
		var seg1 = Math.PI * 2 / 40;
		var _g11 = 0;
		while(_g11 < 41) {
			var i1 = _g11++;
			points.push(x + Math.sin(seg1 * i1) * rx);
			points.push(y + Math.cos(seg1 * i1) * ry);
		}
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly = function(path,glStack,localCoords) {
	if(localCoords == null) {
		localCoords = false;
	}
	var bucket = null;
	if(path.points.length >= 6) {
		var points = path.points.slice();
		if(localCoords) {
			var _g1 = 0;
			var _g = points.length / 2 | 0;
			while(_g1 < _g) {
				var i = _g1++;
				points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
				points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			}
		}
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
		fill.drawMode = glStack.gl.TRIANGLE_FAN;
		fill.verts = points;
		var indices = fill.indices;
		var length = points.length / 2 | 0;
		var _g11 = 0;
		while(_g11 < length) indices.push(_g11++);
	}
	if(path.line.width > 0) {
		if(bucket == null) {
			bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
		}
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket,localCoords);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine = function(path,bucket,localCoords) {
	if(localCoords == null) {
		localCoords = false;
	}
	var points = path.points;
	if(points.length == 0) {
		return;
	}
	var line = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Line);
	if(localCoords) {
		var _g1 = 0;
		var _g = points.length / 2 | 0;
		while(_g1 < _g) {
			var i = _g1++;
			points[i * 2] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			points[i * 2 + 1] -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
	}
	var firstPoint = new openfl_geom_Point(points[0],points[1]);
	var lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
	if(firstPoint.x == lastPoint.x && firstPoint.y == lastPoint.y) {
		points = points.slice();
		points.pop();
		points.pop();
		lastPoint = new openfl_geom_Point(points[points.length - 2 | 0],points[points.length - 1 | 0]);
		var midPointX = lastPoint.x + (firstPoint.x - lastPoint.x) * 0.5;
		var midPointY = lastPoint.y + (firstPoint.y - lastPoint.y) * 0.5;
		points.unshift(midPointY);
		points.unshift(midPointX);
		points.push(midPointX);
		points.push(midPointY);
	}
	var verts = line.verts;
	var indices = line.indices;
	var length = points.length / 2 | 0;
	var indexCount = points.length;
	var indexStart = verts.length / 6 | 0;
	var width = path.line.width / 2;
	var hex = path.line.color;
	var color = hex == null?[1,1,1]:[(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
	var alpha = path.line.alpha;
	var r = color[0];
	var g = color[1];
	var b = color[2];
	var px;
	var py;
	var p1x;
	var p1y;
	var p2x;
	var p2y;
	var p3x;
	var p3y;
	var perpx;
	var perpy;
	var perp2x;
	var perp2y;
	var perp3x;
	var perp3y;
	var a1;
	var b1;
	var c1;
	var a2;
	var b2;
	var c2;
	var denom;
	var pdist;
	var dist;
	p1x = points[0];
	p1y = points[1];
	p2x = points[2];
	p2y = points[3];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	perpx /= dist;
	perpy /= dist;
	perpx *= width;
	perpy *= width;
	verts.push(p1x - perpx);
	verts.push(p1y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p1x + perpx);
	verts.push(p1y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	var _g11 = 1;
	var _g2 = length - 1;
	while(_g11 < _g2) {
		var i1 = _g11++;
		p1x = points[(i1 - 1) * 2];
		p1y = points[(i1 - 1) * 2 + 1];
		p2x = points[i1 * 2];
		p2y = points[i1 * 2 + 1];
		p3x = points[(i1 + 1) * 2];
		p3y = points[(i1 + 1) * 2 + 1];
		perpx = -(p1y - p2y);
		perpy = p1x - p2x;
		dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
		perpx /= dist;
		perpy /= dist;
		perpx *= width;
		perpy *= width;
		perp2x = -(p2y - p3y);
		perp2y = p2x - p3x;
		dist = Math.sqrt(Math.abs(perp2x * perp2x + perp2y * perp2y));
		perp2x /= dist;
		perp2y /= dist;
		perp2x *= width;
		perp2y *= width;
		a1 = -perpy + p1y - (-perpy + p2y);
		b1 = -perpx + p2x - (-perpx + p1x);
		c1 = (-perpx + p1x) * (-perpy + p2y) - (-perpx + p2x) * (-perpy + p1y);
		a2 = -perp2y + p3y - (-perp2y + p2y);
		b2 = -perp2x + p2x - (-perp2x + p3x);
		c2 = (-perp2x + p3x) * (-perp2y + p2y) - (-perp2x + p2x) * (-perp2y + p3y);
		denom = a1 * b2 - a2 * b1;
		if(Math.abs(denom) < 0.1) {
			denom += 10.1;
			verts.push(p2x - perpx);
			verts.push(p2y - perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perpx);
			verts.push(p2y + perpy);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			continue;
		}
		px = (b1 * c2 - b2 * c1) / denom;
		py = (a2 * c1 - a1 * c2) / denom;
		pdist = (px - p2x) * (px - p2x) + (py - p2y) + (py - p2y);
		if(pdist > 19600) {
			perp3x = perpx - perp2x;
			perp3y = perpy - perp2y;
			dist = Math.sqrt(Math.abs(perp3x * perp3x + perp3y * perp3y));
			perp3x /= dist;
			perp3y /= dist;
			perp3x *= width;
			perp3y *= width;
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x + perp3x);
			verts.push(p2y + perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - perp3x);
			verts.push(p2y - perp3y);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			++indexCount;
		} else {
			verts.push(px);
			verts.push(py);
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
			verts.push(p2x - (px - p2x));
			verts.push(p2y - (py - p2y));
			verts.push(r);
			verts.push(g);
			verts.push(b);
			verts.push(alpha);
		}
	}
	p1x = points[(length - 2) * 2];
	p1y = points[(length - 2) * 2 + 1];
	p2x = points[(length - 1) * 2];
	p2y = points[(length - 1) * 2 + 1];
	perpx = -(p1y - p2y);
	perpy = p1x - p2x;
	dist = Math.sqrt(Math.abs(perpx * perpx + perpy * perpy));
	if(!isFinite(dist)) {
		haxe_Log.trace(perpx * perpx + perpy * perpy,{ fileName : "GraphicsRenderer.hx", lineNumber : 407, className : "openfl._internal.renderer.opengl.utils.GraphicsRenderer", methodName : "buildLine"});
	}
	perpx /= dist;
	perpy /= dist;
	perpx *= width;
	perpy *= width;
	verts.push(p2x - perpx);
	verts.push(p2y - perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	verts.push(p2x + perpx);
	verts.push(p2y + perpy);
	verts.push(r);
	verts.push(g);
	verts.push(b);
	verts.push(alpha);
	indices.push(indexStart);
	var _g12 = 0;
	var _g3 = indexCount;
	while(_g12 < _g3) {
		++_g12;
		indices.push(indexStart++);
	}
	indices.push(indexStart - 1);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildPoly = function(path,glStack) {
	if(path.points.length < 6) {
		return;
	}
	var points = path.points;
	var l = points.length;
	var sx = points[0];
	var sy = points[1];
	var ex = points[l - 2];
	var ey = points[l - 1];
	if(sx != ex || sy != ey) {
		points.push(sx);
		points.push(sy);
	}
	var length = points.length / 2 | 0;
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var verts = fill.verts;
	var indices = fill.indices;
	if(fill != null) {
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,points);
		var vertPos = verts.length / 2;
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i] + vertPos | 0);
			indices.push(triangles[i + 1] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			indices.push(triangles[i + 2] + vertPos | 0);
			i += 3;
		}
		var _g1 = 0;
		while(_g1 < length) {
			var i1 = _g1++;
			verts.push(points[i1 * 2]);
			verts.push(points[i1 * 2 + 1]);
		}
	}
	if(path.line.width > 0) {
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) {
		localCoords = false;
	}
	var rectData = path.points;
	var x = rectData[0];
	var y = rectData[1];
	var width = rectData[2];
	var height = rectData[3];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vertPos = verts.length / 2 | 0;
		verts.push(x);
		verts.push(y);
		verts.push(x + width);
		verts.push(y);
		verts.push(x);
		verts.push(y + height);
		verts.push(x + width);
		verts.push(y + height);
		indices.push(vertPos);
		indices.push(vertPos);
		indices.push(vertPos + 1);
		indices.push(vertPos + 2);
		indices.push(vertPos + 3);
		indices.push(vertPos + 3);
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = [x,y,x + width,y,x + width,y + height,x,y + height,x,y];
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle = function(path,glStack,localCoords) {
	if(localCoords == null) {
		localCoords = false;
	}
	var points = path.points.slice();
	var x = points[0];
	var y = points[1];
	var width = points[2];
	var height = points[3];
	var rx = points[4];
	var ry = points[5];
	if(localCoords) {
		x -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
		y -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
	}
	var recPoints = [];
	openfl__$internal_renderer_GraphicsPaths.roundRectangle(recPoints,x,y,width,height,rx,ry);
	var bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
	var fill = bucket.getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	if(fill != null) {
		var verts = fill.verts;
		var indices = fill.indices;
		var vecPos = verts.length / 2;
		var triangles = [];
		openfl__$internal_renderer_PolyK.triangulate(triangles,recPoints);
		var i = 0;
		while(i < triangles.length) {
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i] + vecPos | 0);
			indices.push(triangles[i + 1] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			indices.push(triangles[i + 2] + vecPos | 0);
			i += 3;
		}
		i = 0;
		while(i < recPoints.length) {
			verts.push(recPoints[i]);
			verts.push(recPoints[++i]);
			++i;
		}
	}
	if(path.line.width > 0) {
		var tempPoints = path.points;
		path.points = recPoints;
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildLine(path,bucket);
		path.points = tempPoints;
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles = function(path,object,glStack,localCoords) {
	if(localCoords == null) {
		localCoords = false;
	}
	var args = path.type.slice(2);
	var vertices = args[0];
	var indices = args[1];
	var uvtData = args[2];
	var culling = args[3];
	var colors = args[4];
	var a;
	var b;
	var c;
	var d;
	var tx;
	var ty;
	if(localCoords) {
		a = 1.0;
		b = 0.0;
		c = 0.0;
		d = 1.0;
		tx = 0.0;
		ty = 0.0;
	} else {
		a = object.__worldTransform.a;
		b = object.__worldTransform.b;
		c = object.__worldTransform.c;
		d = object.__worldTransform.d;
		tx = object.__worldTransform.tx;
		ty = object.__worldTransform.ty;
	}
	var hasColors = colors != null && colors.length > 0;
	var fill = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack).getData(openfl__$internal_renderer_opengl_utils_BucketDataType.Fill);
	var colorAttrib = fill.vertexArray.attributes[2];
	colorAttrib.enabled = hasColors;
	var array = [1,1,1,1];
	colorAttrib.defaultValue = array != null?new Float32Array(array):null;
	fill.rawVerts = true;
	fill.glLength = indices.length;
	fill.stride = fill.vertexArray.get_stride() / 4 | 0;
	var vertsLength = fill.glLength * fill.stride;
	var verts;
	if(fill.glVerts == null || fill.glVerts.length < vertsLength) {
		verts = vertsLength != null?new Float32Array(vertsLength):null;
		fill.glVerts = verts;
	} else {
		verts = fill.glVerts;
	}
	var buffer = verts.buffer;
	var glColors = buffer != null?new Uint32Array(buffer,0):null;
	var v0 = 0;
	var v1 = 0;
	var v2 = 0;
	var i0 = 0;
	var i1 = 0;
	var i2 = 0;
	var x0 = 0.0;
	var y0 = 0.0;
	var x1 = 0.0;
	var y1 = 0.0;
	var x2 = 0.0;
	var y2 = 0.0;
	var idx = 0;
	var _g1 = 0;
	var _g = indices.length / 3 | 0;
	while(_g1 < _g) {
		var i = _g1++;
		i0 = indices.data[i * 3];
		i1 = indices.data[i * 3 + 1];
		i2 = indices.data[i * 3 + 2];
		v0 = i0 * 2;
		v1 = i1 * 2;
		v2 = i2 * 2;
		x0 = vertices.data[v0];
		y0 = vertices.data[v0 + 1];
		x1 = vertices.data[v1];
		y1 = vertices.data[v1 + 1];
		x2 = vertices.data[v2];
		y2 = vertices.data[v2 + 1];
		if(localCoords) {
			x0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y0 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y1 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
			x2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.x;
			y2 -= openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.y;
		}
		switch(culling) {
		case 0:
			if((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0) {
				continue;
			}
			break;
		case 2:
			if(!((x1 - x0) * (y2 - y0) - (y1 - y0) * (x2 - x0) < 0)) {
				continue;
			}
			break;
		default:
		}
		verts[idx++] = a * x0 + c * y0 + tx;
		verts[idx++] = b * x0 + d * y0 + ty;
		verts[idx++] = uvtData.data[v0];
		verts[idx++] = uvtData.data[v0 + 1];
		if(hasColors) {
			glColors[idx++] = colors.data[i0];
		}
		verts[idx++] = a * x1 + c * y1 + tx;
		verts[idx++] = b * x1 + d * y1 + ty;
		verts[idx++] = uvtData.data[v1];
		verts[idx++] = uvtData.data[v1 + 1];
		if(hasColors) {
			glColors[idx++] = colors.data[i1];
		}
		verts[idx++] = a * x2 + c * y2 + tx;
		verts[idx++] = b * x2 + d * y2 + ty;
		verts[idx++] = uvtData.data[v2];
		verts[idx++] = uvtData.data[v2 + 1];
		if(hasColors) {
			glColors[idx++] = colors.data[i2];
		}
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTiles = function(path,glStack) {
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.quadraticBezierCurve = function(fromX,fromY,cpX,cpY,toX,toY) {
	var xa;
	var ya;
	var xb;
	var yb;
	var x;
	var y;
	var points = [];
	var getPt = function(n1,n2,perc) {
		return n1 + (n2 - n1) * perc;
	};
	var j = 0.0;
	var _g1 = 0;
	while(_g1 < 21) {
		j = _g1++ / 20;
		xa = getPt(fromX,cpX,j);
		ya = getPt(fromY,cpY,j);
		xb = getPt(cpX,toX,j);
		yb = getPt(cpY,toY,j);
		x = getPt(xa,xb,j);
		y = getPt(ya,yb,j);
		points.push(x);
		points.push(y);
	}
	return points;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.render = function(object,renderSession) {
	var graphics = object.__graphics;
	var bounds = graphics.__bounds;
	var dirty = graphics.__dirty;
	if(!graphics.__visible || graphics.__commands.get_length() == 0 || bounds == null || bounds.width == 0 || bounds.height == 0) {
		graphics.__glStack.splice(0,graphics.__glStack.length);
		return;
	}
	if(dirty) {
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,object.__graphics,renderSession.gl,object.get_cacheAsBitmap());
	}
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics(object,renderSession,false);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderGraphics = function(object,renderSession,localCoords) {
	if(localCoords == null) {
		localCoords = false;
	}
	var graphics = object.__graphics;
	var gl = renderSession.gl;
	var glStack = graphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
	if(glStack == null) {
		return;
	}
	var bucket;
	var translationMatrix = localCoords?openfl_geom_Matrix.__identity:object.__worldTransform;
	var clipRect = renderSession.spriteBatch.clipRect;
	var batchDrawing = renderSession.spriteBatch.drawing;
	batchDrawing = renderSession.spriteBatch.drawing;
	var _g1 = 0;
	var _g = glStack.buckets.length;
	while(_g1 < _g) {
		var i = _g1++;
		batchDrawing = renderSession.spriteBatch.drawing;
		if(batchDrawing && !localCoords) {
			renderSession.spriteBatch.finish();
		}
		renderSession.blendModeManager.setBlendMode(object.__blendMode);
		if(clipRect != null) {
			gl.enable(gl.SCISSOR_TEST);
			gl.scissor(Math.floor(clipRect.x),Math.floor(clipRect.y),Math.floor(clipRect.width),Math.floor(clipRect.height));
		}
		bucket = glStack.buckets[i];
		switch(bucket.mode[1]) {
		case 1:case 2:
			renderSession.stencilManager.pushBucket(bucket,renderSession,translationMatrix.toArray(true));
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill(bucket,openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,translationMatrix.toArray(true)),renderSession);
			renderSession.stencilManager.popBucket(object,bucket,renderSession);
			break;
		case 5:
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles(bucket,openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader(bucket,renderSession,object,null),renderSession);
			break;
		case 6:
			if(!batchDrawing) {
				renderSession.spriteBatch.begin(renderSession,clipRect);
			}
			var args = bucket.graphicType.slice(2);
			renderSession.spriteBatch.renderTiles(object,args[0],args[1],args[2],args[3],args[4],args[5]);
			renderSession.spriteBatch.finish();
			break;
		default:
		}
		var ct = object.__worldColorTransform;
		var _g3 = 0;
		var _g4 = bucket.lines;
		while(_g3 < _g4.length) {
			var line = _g4[_g3];
			++_g3;
			if(line != null && line.verts.length > 0) {
				var shader = renderSession.shaderManager.primitiveShader;
				renderSession.shaderManager.setShader(shader);
				gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix.toArray(true));
				gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
				gl.uniform1f(shader.getUniformLocation("openfl_uAlpha"),1);
				gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
				gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
				var _this = line.vertexArray;
				_this.gl.bindBuffer(_this.gl.ARRAY_BUFFER,_this.glBuffer);
				shader.bindVertexArray(line.vertexArray);
				gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,line.indexBuffer);
				gl.drawElements(gl.TRIANGLE_STRIP,line.indices.length,gl.UNSIGNED_SHORT,0);
			}
		}
		if(clipRect != null) {
			gl.disable(gl.SCISSOR_TEST);
		}
		batchDrawing = renderSession.spriteBatch.drawing;
		if(!batchDrawing && !localCoords) {
			renderSession.spriteBatch.begin(renderSession,clipRect);
		}
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics = function(object,graphics,gl,localCoords) {
	if(localCoords == null) {
		localCoords = false;
	}
	openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition.setTo(object.get_x(),object.get_y());
	if(graphics.__bounds == null) {
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
	} else {
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.copyFrom(graphics.__bounds);
	}
	var glStack = null;
	if(graphics.__dirty) {
		glStack = openfl__$internal_renderer_opengl_utils_DrawPath.getStack(graphics,gl);
	}
	graphics.set___dirty(false);
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var data = _g1[_g];
		++_g;
		data.reset();
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.push(data);
	}
	glStack.reset();
	var _g11 = glStack.lastIndex;
	var _g2 = graphics.__drawPaths.length;
	while(_g11 < _g2) {
		var path = graphics.__drawPaths[_g11++];
		var _g21 = path.type;
		switch(_g21[1]) {
		case 0:
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildComplexPoly(path,glStack,localCoords);
			break;
		case 1:
			if(_g21[2]) {
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRoundedRectangle(path,glStack,localCoords);
			} else {
				openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildRectangle(path,glStack,localCoords);
			}
			break;
		case 2:case 3:
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildCircle(path,glStack,localCoords);
			break;
		case 4:
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.buildDrawTriangles(path,object,glStack,localCoords);
			break;
		case 5:
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket(path,glStack);
			break;
		case 6:
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix = _g21[2];
			break;
		}
		glStack.lastIndex++;
	}
	var _g3 = 0;
	var _g12 = glStack.buckets;
	while(_g3 < _g12.length) {
		var bucket = _g12[_g3];
		++_g3;
		if(bucket.uploadTileBuffer) {
			bucket.uploadTile(Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_left()),Math.ceil(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_top()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_right()),Math.floor(openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds.get_bottom()));
		}
		bucket.optimize();
	}
	glStack.upload();
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareBucket = function(path,glStack) {
	var bucket = null;
	var _g = path.fill;
	switch(_g[1]) {
	case 1:
		var a = _g[3];
		var c = _g[2];
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Fill);
		bucket.color = c == null?[1,1,1]:[(c >> 16 & 255) / 255,(c >> 8 & 255) / 255,(c & 255) / 255];
		bucket.color[3] = a;
		bucket.uploadTileBuffer = true;
		break;
	case 2:
		var s = _g[5];
		var r = _g[4];
		var m = _g[3];
		var b = _g[2];
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill);
		bucket.bitmap = b;
		bucket.textureRepeat = r;
		bucket.textureSmooth = s;
		bucket.texture = b.getTexture(glStack.gl);
		bucket.uploadTileBuffer = true;
		var pMatrix = m == null?new openfl_geom_Matrix():m.clone();
		pMatrix.invert();
		pMatrix.scale(1 / b.width,1 / b.height);
		var tx = pMatrix.tx;
		var ty = pMatrix.ty;
		pMatrix.tx = 0;
		pMatrix.ty = 0;
		bucket.textureTL.x = tx;
		bucket.textureTL.y = ty;
		bucket.textureBR.x = tx + 1;
		bucket.textureBR.y = ty + 1;
		bucket.textureMatrix = pMatrix;
		break;
	default:
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket(path.fillIndex,glStack,openfl__$internal_renderer_opengl_utils_BucketMode.Line);
		bucket.uploadTileBuffer = false;
	}
	switch(path.type[1]) {
	case 4:
		bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles;
		bucket.uploadTileBuffer = false;
		break;
	case 5:
		bucket.mode = openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles;
		bucket.uploadTileBuffer = false;
		break;
	default:
	}
	bucket.graphicType = path.type;
	bucket.overrideMatrix = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.overrideMatrix;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket = function(glStack,mode) {
	var b = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool.pop();
	if(b == null) {
		b = new openfl__$internal_renderer_opengl_utils_GLBucket(glStack.gl);
	}
	b.mode = mode;
	glStack.buckets.push(b);
	return b;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.switchBucket = function(fillIndex,glStack,mode) {
	var bucket = null;
	var _g = 0;
	var _g1 = glStack.buckets;
	while(_g < _g1.length) {
		var b = _g1[_g];
		++_g;
		if(b.fillIndex == fillIndex) {
			bucket = b;
			break;
		}
	}
	if(bucket == null) {
		bucket = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.getBucket(glStack,mode);
	}
	bucket.dirty = true;
	bucket.fillIndex = fillIndex;
	return bucket;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.prepareShader = function(bucket,renderSession,object,translationMatrix) {
	var gl = renderSession.gl;
	var shader = null;
	switch(bucket.mode[1]) {
	case 1:
		shader = renderSession.shaderManager.fillShader;
		break;
	case 2:
		shader = renderSession.shaderManager.patternFillShader;
		break;
	case 5:
		shader = renderSession.shaderManager.drawTrianglesShader;
		break;
	default:
		shader = null;
	}
	if(shader == null) {
		return null;
	}
	renderSession.shaderManager.setShader(shader);
	gl.uniform1f(shader.getUniformLocation("openfl_uAlpha"),object.__worldAlpha);
	gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
	var ct = object.__worldColorTransform;
	gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,ct.alphaMultiplier);
	gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255,ct.greenOffset / 255,ct.blueOffset / 255,ct.alphaOffset / 255);
	switch(bucket.mode[1]) {
	case 1:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		var tmp = shader.getUniformLocation("openfl_uColor");
		var array = bucket.color;
		gl.uniform4fv(tmp,array != null?new Float32Array(array):null);
		break;
	case 2:
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternTL"),bucket.textureTL.x,bucket.textureTL.y);
		gl.uniform2f(shader.getUniformLocation("openfl_uPatternBR"),bucket.textureBR.x,bucket.textureBR.y);
		gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uPatternMatrix"),false,bucket.textureMatrix.toArray(true));
		break;
	case 5:
		if(bucket.texture != null) {
			gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),1);
		} else {
			gl.uniform1i(shader.getUniformLocation("openfl_uUseTexture"),0);
			var tmp1 = shader.getUniformLocation("openfl_uColor");
			var array1 = bucket.color;
			gl.uniform4fv(tmp1,array1 != null?new Float32Array(array1):null);
		}
		break;
	default:
	}
	return shader;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderFill = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	if(bucket.mode == openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill && bucket.texture != null) {
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
	}
	gl.bindBuffer(gl.ARRAY_BUFFER,bucket.tileBuffer);
	gl.vertexAttribPointer(shader.getAttribLocation("openfl_aPosition"),4,gl.SHORT,false,0,0);
	gl.drawArrays(gl.TRIANGLE_STRIP,0,4);
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.renderDrawTriangles = function(bucket,shader,renderSession) {
	var gl = renderSession.gl;
	var _g = 0;
	var _g1 = bucket.fills;
	while(_g < _g1.length) {
		var fill = _g1[_g];
		++_g;
		if(fill.available) {
			continue;
		}
		openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture(gl,bucket);
		var _this = fill.vertexArray;
		_this.gl.bindBuffer(_this.gl.ARRAY_BUFFER,_this.glBuffer);
		shader.bindVertexArray(fill.vertexArray);
		gl.drawArrays(gl.TRIANGLES,fill.glStart,fill.glLength);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bindTexture = function(gl,bucket) {
	gl.bindTexture(gl.TEXTURE_2D,bucket.texture);
	if(bucket.textureRepeat && bucket.bitmap.image.get_powerOfTwo()) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.REPEAT);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.REPEAT);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	}
	if(bucket.textureSmooth) {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.LINEAR);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.LINEAR);
	} else {
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,gl.NEAREST);
		gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,gl.NEAREST);
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.isCCW = function(x1,y1,x2,y2,x3,y3) {
	return (x2 - x1) * (y3 - y1) - (y2 - y1) * (x3 - x1) < 0;
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgb = function(hex) {
	if(hex == null) {
		return [1,1,1];
	} else {
		return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255];
	}
};
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.hex2rgba = function(hex) {
	if(hex == null) {
		return [1,1,1,1];
	} else {
		return [(hex >> 16 & 255) / 255,(hex >> 8 & 255) / 255,(hex & 255) / 255,(hex >> 24 & 255) / 255];
	}
};
var openfl__$internal_renderer_opengl_utils_GLStack = function(gl) {
	this.lastIndex = 0;
	this.gl = gl;
	this.buckets = [];
	this.lastIndex = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLStack"] = openfl__$internal_renderer_opengl_utils_GLStack;
openfl__$internal_renderer_opengl_utils_GLStack.__name__ = ["openfl","_internal","renderer","opengl","utils","GLStack"];
openfl__$internal_renderer_opengl_utils_GLStack.prototype = {
	lastIndex: null
	,buckets: null
	,gl: null
	,reset: function() {
		this.buckets = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var _g = 0;
		var _g1 = this.buckets;
		while(_g < _g1.length) {
			var bucket = _g1[_g];
			++_g;
			if(bucket.dirty) {
				bucket.upload();
			}
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLStack
};
var openfl__$internal_renderer_opengl_utils_GLBucket = function(gl) {
	this.uploadTileBuffer = true;
	this.textureSmooth = true;
	this.textureRepeat = false;
	this.lines = [];
	this.fills = [];
	this.fillIndex = -1;
	this.gl = gl;
	this.color = [0,0,0];
	this.lastIndex = 0;
	this.alpha = 1;
	this.dirty = true;
	this.mode = openfl__$internal_renderer_opengl_utils_BucketMode.Fill;
	this.textureMatrix = new openfl_geom_Matrix();
	this.textureTL = new openfl_geom_Point();
	this.textureBR = new openfl_geom_Point(1,1);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucket"] = openfl__$internal_renderer_opengl_utils_GLBucket;
openfl__$internal_renderer_opengl_utils_GLBucket.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucket"];
openfl__$internal_renderer_opengl_utils_GLBucket.prototype = {
	gl: null
	,color: null
	,alpha: null
	,dirty: null
	,graphicType: null
	,lastIndex: null
	,fillIndex: null
	,mode: null
	,fills: null
	,lines: null
	,bitmap: null
	,texture: null
	,textureMatrix: null
	,textureRepeat: null
	,textureSmooth: null
	,textureTL: null
	,textureBR: null
	,overrideMatrix: null
	,tileBuffer: null
	,glTile: null
	,tile: null
	,uploadTileBuffer: null
	,getData: function(type) {
		var data = type[1] == 1?this.fills:this.lines;
		var result = null;
		var remove = false;
		var _g = 0;
		while(_g < data.length) {
			var d = data[_g];
			++_g;
			if(d.available) {
				result = d;
				remove = true;
				break;
			}
		}
		if(result == null) {
			result = new openfl__$internal_renderer_opengl_utils_GLBucketData(this.gl);
		}
		result.available = false;
		result.parent = this;
		result.type = type;
		if(remove) {
			HxOverrides.remove(data,result);
		}
		data.push(result);
		switch(type[1]) {
		case 0:
			result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes;
			break;
		case 1:
			switch(this.mode[1]) {
			case 1:case 2:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes;
				break;
			case 5:
				result.vertexArray.attributes = openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes.slice();
				result.vertexArray.attributes[2] = result.vertexArray.attributes[2].copy();
				break;
			default:
			}
			break;
		}
		return result;
	}
	,optimize: function() {
		var _gthis = this;
		var data = this.lines;
		if(data.length > 1) {
			var result = [];
			var tmp = null;
			var last = null;
			var idx = 0;
			var vi = 0;
			var ii = 0;
			var _g = 0;
			while(_g < data.length) {
				var d = data[_g];
				++_g;
				if(d.available || d.rawVerts || d.rawIndices) {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
				if(last == null || last.drawMode == d.drawMode) {
					if(tmp == null) {
						tmp = d;
					} else {
						vi = tmp.verts.length;
						ii = tmp.indices.length;
						var _g2 = 0;
						var _g1 = d.verts.length;
						while(_g2 < _g1) {
							var j = _g2++;
							tmp.verts[j + vi] = d.verts[j];
						}
						var _g21 = 0;
						var _g11 = d.indices.length;
						while(_g21 < _g11) {
							var j1 = _g21++;
							tmp.indices[j1 + ii] = d.indices[j1] + idx;
						}
					}
					idx = tmp.indices[tmp.indices.length - 1] + 1;
					last = d;
				} else {
					if(tmp != null) {
						result.push(tmp);
						tmp = null;
					}
					result.push(d);
					last = d;
					continue;
				}
			}
			if(result.length == 0 && tmp != null) {
				result.push(tmp);
			}
			if(result.length > 0) {
				_gthis.lines = result;
			}
		}
	}
	,reset: function() {
		var _g = 0;
		var _g1 = this.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			fill.reset();
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			line.reset();
		}
		this.fillIndex = -1;
		this.uploadTileBuffer = true;
		this.graphicType = openfl__$internal_renderer_opengl_utils_GraphicType.Polygon;
	}
	,uploadTile: function(x,y,w,h) {
		if(this.tileBuffer == null) {
			this.tileBuffer = this.gl.createBuffer();
		}
		this.tile = [x,y,0,0,w,y,1,0,x,h,0,1,w,h,1,1];
		var array = this.tile;
		this.glTile = array != null?new Int16Array(array):null;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.tileBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glTile,this.gl.STATIC_DRAW);
	}
	,upload: function() {
		if(this.mode != openfl__$internal_renderer_opengl_utils_BucketMode.Line) {
			var _g = 0;
			var _g1 = this.fills;
			while(_g < _g1.length) {
				var fill = _g1[_g];
				++_g;
				if(!fill.available) {
					fill.upload();
				}
			}
		}
		var _g2 = 0;
		var _g11 = this.lines;
		while(_g2 < _g11.length) {
			var line = _g11[_g2];
			++_g2;
			if(!line.available) {
				line.upload();
			}
		}
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucket
};
var openfl__$internal_renderer_opengl_utils_GLBucketData = function(gl) {
	this.available = false;
	this.rawIndices = false;
	this.stride = 0;
	this.rawVerts = false;
	this.lastVertsSize = 0;
	this.glStart = 0;
	this.glLength = 0;
	this.gl = gl;
	this.drawMode = gl.TRIANGLE_STRIP;
	this.verts = [];
	this.indices = [];
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray([]);
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLBucketData"] = openfl__$internal_renderer_opengl_utils_GLBucketData;
openfl__$internal_renderer_opengl_utils_GLBucketData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLBucketData"];
openfl__$internal_renderer_opengl_utils_GLBucketData.prototype = {
	type: null
	,gl: null
	,drawMode: null
	,glLength: null
	,glStart: null
	,vertexArray: null
	,glVerts: null
	,lastVertsSize: null
	,verts: null
	,rawVerts: null
	,stride: null
	,indexBuffer: null
	,glIndices: null
	,indices: null
	,rawIndices: null
	,available: null
	,parent: null
	,reset: function() {
		this.available = true;
		this.verts = [];
		this.indices = [];
		this.glLength = 0;
		this.glStart = 0;
		this.stride = 0;
		this.rawVerts = false;
		this.rawIndices = false;
		this.drawMode = this.gl.TRIANGLE_STRIP;
	}
	,upload: function() {
		if(this.rawVerts && this.glVerts != null && this.glVerts.length > 0 || this.verts.length > 0) {
			if(!this.rawVerts) {
				var array = this.verts;
				this.glVerts = array != null?new Float32Array(array):null;
			}
			this.vertexArray.buffer = this.glVerts.buffer;
			if(this.glVerts.length <= this.lastVertsSize) {
				var _this = this.vertexArray;
				_this.gl.bindBuffer(_this.gl.ARRAY_BUFFER,_this.glBuffer);
				var end = this.glLength * this.stride;
				if(this.glLength > 0 && this.lastVertsSize > end) {
					this.vertexArray.upload(this.glVerts.subarray(0,end));
				} else {
					this.vertexArray.upload(this.glVerts);
				}
			} else {
				this.vertexArray.setContext(this.gl,this.glVerts);
				this.lastVertsSize = this.glVerts.length;
			}
		}
		if(this.glLength == 0 && (this.rawIndices && this.glIndices != null && this.glIndices.length > 0 || this.indices.length > 0)) {
			if(this.indexBuffer == null) {
				this.indexBuffer = this.gl.createBuffer();
			}
			if(!this.rawIndices) {
				var array1 = this.indices;
				this.glIndices = array1 != null?new Uint16Array(array1):null;
			}
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
			this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STREAM_DRAW);
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLBucketData
};
var openfl__$internal_renderer_opengl_utils_BucketMode = $hxClasses["openfl._internal.renderer.opengl.utils.BucketMode"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketMode"], __constructs__ : ["None","Fill","PatternFill","Line","PatternLine","DrawTriangles","DrawTiles"] };
openfl__$internal_renderer_opengl_utils_BucketMode.None = ["None",0];
openfl__$internal_renderer_opengl_utils_BucketMode.None.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.None.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill = ["PatternFill",2];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternFill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.Line = ["Line",3];
openfl__$internal_renderer_opengl_utils_BucketMode.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine = ["PatternLine",4];
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.PatternLine.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles = ["DrawTriangles",5];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTriangles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles = ["DrawTiles",6];
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketMode.DrawTiles.__enum__ = openfl__$internal_renderer_opengl_utils_BucketMode;
var openfl__$internal_renderer_opengl_utils_BucketDataType = $hxClasses["openfl._internal.renderer.opengl.utils.BucketDataType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","BucketDataType"], __constructs__ : ["Line","Fill"] };
openfl__$internal_renderer_opengl_utils_BucketDataType.Line = ["Line",0];
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Line.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill = ["Fill",1];
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.toString = $estr;
openfl__$internal_renderer_opengl_utils_BucketDataType.Fill.__enum__ = openfl__$internal_renderer_opengl_utils_BucketDataType;
var openfl__$internal_renderer_opengl_utils_GLGraphicsData = function(gl) {
	this.indices = [];
	this.data = [];
	this.lastIndex = 0;
	this.mode = 0;
	this.dirty = true;
	this.alpha = 1.0;
	this.tint = [1.0,1.0,1.0];
	this.gl = gl;
	this.dataBuffer = gl.createBuffer();
	this.indexBuffer = gl.createBuffer();
};
$hxClasses["openfl._internal.renderer.opengl.utils.GLGraphicsData"] = openfl__$internal_renderer_opengl_utils_GLGraphicsData;
openfl__$internal_renderer_opengl_utils_GLGraphicsData.__name__ = ["openfl","_internal","renderer","opengl","utils","GLGraphicsData"];
openfl__$internal_renderer_opengl_utils_GLGraphicsData.prototype = {
	gl: null
	,tint: null
	,alpha: null
	,dirty: null
	,mode: null
	,lastIndex: null
	,data: null
	,glData: null
	,dataBuffer: null
	,indices: null
	,glIndices: null
	,indexBuffer: null
	,reset: function() {
		this.data = [];
		this.indices = [];
		this.lastIndex = 0;
	}
	,upload: function() {
		var elements = this.data;
		this.glData = elements != null?new Float32Array(elements):null;
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.dataBuffer);
		this.gl.bufferData(this.gl.ARRAY_BUFFER,this.glData,this.gl.STATIC_DRAW);
		var elements1 = this.indices;
		this.glIndices = elements1 != null?new Uint16Array(elements1):null;
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		this.gl.bufferData(this.gl.ELEMENT_ARRAY_BUFFER,this.glIndices,this.gl.STATIC_DRAW);
		this.dirty = false;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_GLGraphicsData
};
var openfl__$internal_renderer_opengl_utils_GraphicType = $hxClasses["openfl._internal.renderer.opengl.utils.GraphicType"] = { __ename__ : ["openfl","_internal","renderer","opengl","utils","GraphicType"], __constructs__ : ["Polygon","Rectangle","Circle","Ellipse","DrawTriangles","DrawTiles","OverrideMatrix"] };
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon = ["Polygon",0];
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Polygon.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Rectangle = function(rounded) { var $x = ["Rectangle",1,rounded]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.Circle = ["Circle",2];
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Circle.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse = ["Ellipse",3];
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.toString = $estr;
openfl__$internal_renderer_opengl_utils_GraphicType.Ellipse.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType;
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTriangles = function(vertices,indices,uvtData,culling,colors,blendMode) { var $x = ["DrawTriangles",4,vertices,indices,uvtData,culling,colors,blendMode]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.DrawTiles = function(sheet,tileData,smooth,flags,shader,count) { var $x = ["DrawTiles",5,sheet,tileData,smooth,flags,shader,count]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
openfl__$internal_renderer_opengl_utils_GraphicType.OverrideMatrix = function(matrix) { var $x = ["OverrideMatrix",6,matrix]; $x.__enum__ = openfl__$internal_renderer_opengl_utils_GraphicType; $x.toString = $estr; return $x; };
var openfl__$internal_renderer_opengl_utils_PingPongTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) {
		powerOfTwo = true;
	}
	if(smoothing == null) {
		smoothing = true;
	}
	this.__swapped = false;
	this.powerOfTwo = true;
	this.useOldTexture = false;
	this.gl = gl;
	this.width = width;
	this.height = height;
	this.smoothing = smoothing;
	this.powerOfTwo = powerOfTwo;
	var v = new openfl__$internal_renderer_opengl_utils_RenderTexture(gl,width,height,smoothing,powerOfTwo);
	if(this.__swapped) {
		this.__texture1 = v;
	} else {
		this.__texture0 = v;
	}
};
$hxClasses["openfl._internal.renderer.opengl.utils.PingPongTexture"] = openfl__$internal_renderer_opengl_utils_PingPongTexture;
openfl__$internal_renderer_opengl_utils_PingPongTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","PingPongTexture"];
openfl__$internal_renderer_opengl_utils_PingPongTexture.prototype = {
	gl: null
	,width: null
	,height: null
	,smoothing: null
	,useOldTexture: null
	,powerOfTwo: null
	,__swapped: null
	,__texture0: null
	,__texture1: null
	,swap: function() {
		this.__swapped = !this.__swapped;
		if((this.__swapped?this.__texture1:this.__texture0) == null) {
			var v = new openfl__$internal_renderer_opengl_utils_RenderTexture(this.gl,this.width,this.height,this.smoothing,this.powerOfTwo);
			if(this.__swapped) {
				this.__texture1 = v;
			} else {
				this.__texture0 = v;
			}
		}
	}
	,clear: function(r,g,b,a,mask) {
		if(a == null) {
			a = 0;
		}
		if(b == null) {
			b = 0;
		}
		if(g == null) {
			g = 0;
		}
		if(r == null) {
			r = 0;
		}
		(this.__swapped?this.__texture1:this.__texture0).clear(r,g,b,a,mask);
	}
	,resize: function(width,height) {
		this.width = width;
		this.height = height;
		(this.__swapped?this.__texture1:this.__texture0).resize(width,height);
	}
	,destroy: function() {
		if(this.__texture0 != null) {
			this.__texture0.destroy();
			this.__texture0 = null;
		}
		if(this.__texture1 != null) {
			this.__texture1.destroy();
			this.__texture1 = null;
		}
		this.__swapped = false;
	}
	,get_renderTexture: function() {
		if(this.__swapped) {
			return this.__texture1;
		} else {
			return this.__texture0;
		}
	}
	,set_renderTexture: function(v) {
		if(this.__swapped) {
			return this.__texture1 = v;
		} else {
			return this.__texture0 = v;
		}
	}
	,get_oldRenderTexture: function() {
		if(this.__swapped) {
			return this.__texture0;
		} else {
			return this.__texture1;
		}
	}
	,set_oldRenderTexture: function(v) {
		if(this.__swapped) {
			return this.__texture0 = v;
		} else {
			return this.__texture1 = v;
		}
	}
	,get_framebuffer: function() {
		return (this.__swapped?this.__texture1:this.__texture0).frameBuffer;
	}
	,get_texture: function() {
		if(this.useOldTexture) {
			return (this.__swapped?this.__texture0:this.__texture1).texture;
		} else {
			return (this.__swapped?this.__texture1:this.__texture0).texture;
		}
	}
	,get___otherTexture: function() {
		if(this.__swapped) {
			return this.__texture0;
		} else {
			return this.__texture1;
		}
	}
	,__class__: openfl__$internal_renderer_opengl_utils_PingPongTexture
	,__properties__: {get___otherTexture:"get___otherTexture",get_texture:"get_texture",get_framebuffer:"get_framebuffer",set_oldRenderTexture:"set_oldRenderTexture",get_oldRenderTexture:"get_oldRenderTexture",set_renderTexture:"set_renderTexture",get_renderTexture:"get_renderTexture"}
};
var openfl__$internal_renderer_opengl_utils_RenderTexture = function(gl,width,height,smoothing,powerOfTwo) {
	if(powerOfTwo == null) {
		powerOfTwo = true;
	}
	if(smoothing == null) {
		smoothing = true;
	}
	this.powerOfTwo = true;
	this.gl = gl;
	this.powerOfTwo = powerOfTwo;
	this.frameBuffer = gl.createFramebuffer();
	this.texture = gl.createTexture();
	gl.bindTexture(gl.TEXTURE_2D,this.texture);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MAG_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_MIN_FILTER,smoothing?gl.LINEAR:gl.NEAREST);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_S,gl.CLAMP_TO_EDGE);
	gl.texParameteri(gl.TEXTURE_2D,gl.TEXTURE_WRAP_T,gl.CLAMP_TO_EDGE);
	gl.bindFramebuffer(gl.FRAMEBUFFER,this.frameBuffer);
	gl.framebufferTexture2D(gl.FRAMEBUFFER,gl.COLOR_ATTACHMENT0,gl.TEXTURE_2D,this.texture,0);
	this.renderBuffer = gl.createRenderbuffer();
	gl.bindRenderbuffer(gl.RENDERBUFFER,this.renderBuffer);
	gl.framebufferRenderbuffer(gl.FRAMEBUFFER,gl.DEPTH_STENCIL_ATTACHMENT,gl.RENDERBUFFER,this.renderBuffer);
	this.resize(width,height);
};
$hxClasses["openfl._internal.renderer.opengl.utils.RenderTexture"] = openfl__$internal_renderer_opengl_utils_RenderTexture;
openfl__$internal_renderer_opengl_utils_RenderTexture.__name__ = ["openfl","_internal","renderer","opengl","utils","RenderTexture"];
openfl__$internal_renderer_opengl_utils_RenderTexture.prototype = {
	gl: null
	,frameBuffer: null
	,renderBuffer: null
	,texture: null
	,smoothing: null
	,width: null
	,height: null
	,powerOfTwo: null
	,__width: null
	,__height: null
	,__uvData: null
	,clear: function(r,g,b,a,mask) {
		if(a == null) {
			a = 0;
		}
		if(b == null) {
			b = 0;
		}
		if(g == null) {
			g = 0;
		}
		if(r == null) {
			r = 0;
		}
		this.gl.clearColor(r,g,b,a);
		this.gl.clear(mask == null?this.gl.COLOR_BUFFER_BIT:mask);
	}
	,destroy: function() {
		if(this.frameBuffer != null) {
			this.gl.deleteFramebuffer(this.frameBuffer);
		}
		if(this.texture != null) {
			this.gl.deleteTexture(this.texture);
		}
		this.frameBuffer = null;
		this.texture = null;
	}
	,resize: function(width,height) {
		if(this.width == width && this.height == height) {
			return;
		}
		this.width = width;
		this.height = height;
		var pow2W = width;
		var pow2H = height;
		if(this.powerOfTwo) {
			var n = 1;
			while(n < width) n <<= 1;
			pow2W = n;
			var n1 = 1;
			while(n1 < height) n1 <<= 1;
			pow2H = n1;
		}
		var lastW = this.__width;
		var lastH = this.__height;
		this.__width = pow2W;
		this.__height = pow2H;
		this.createUVs();
		if(lastW == pow2W && lastH == pow2H) {
			return;
		}
		this.gl.bindTexture(this.gl.TEXTURE_2D,this.texture);
		this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.__width,this.__height,0,this.gl.RGBA,this.gl.UNSIGNED_BYTE,null);
		this.gl.bindRenderbuffer(this.gl.RENDERBUFFER,this.renderBuffer);
		this.gl.renderbufferStorage(this.gl.RENDERBUFFER,this.gl.DEPTH_STENCIL,this.__width,this.__height);
	}
	,createUVs: function() {
		if(this.__uvData == null) {
			this.__uvData = new openfl_display_TextureUvs();
		}
		var w = this.width / this.__width;
		var h = this.height / this.__height;
		this.__uvData.x0 = 0;
		this.__uvData.y0 = 0;
		this.__uvData.x1 = w;
		this.__uvData.y1 = 0;
		this.__uvData.x2 = w;
		this.__uvData.y2 = h;
		this.__uvData.x3 = 0;
		this.__uvData.y3 = h;
	}
	,powOfTwo: function(value) {
		var n = 1;
		while(n < value) n <<= 1;
		return n;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_RenderTexture
};
var openfl__$internal_renderer_opengl_utils_ShaderManager = function(gl) {
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.ShaderManager"] = openfl__$internal_renderer_opengl_utils_ShaderManager;
openfl__$internal_renderer_opengl_utils_ShaderManager.__name__ = ["openfl","_internal","renderer","opengl","utils","ShaderManager"];
openfl__$internal_renderer_opengl_utils_ShaderManager.prototype = {
	gl: null
	,currentShader: null
	,defaultShader: null
	,fillShader: null
	,patternFillShader: null
	,drawTrianglesShader: null
	,primitiveShader: null
	,setContext: function(gl) {
		this.gl = gl;
		this.defaultShader = new openfl__$internal_renderer_opengl_shaders2_DefaultShader(gl);
		this.fillShader = new openfl__$internal_renderer_opengl_shaders2_FillShader(gl);
		this.patternFillShader = new openfl__$internal_renderer_opengl_shaders2_PatternFillShader(gl);
		this.drawTrianglesShader = new openfl__$internal_renderer_opengl_shaders2_DrawTrianglesShader(gl);
		this.primitiveShader = new openfl__$internal_renderer_opengl_shaders2_PrimitiveShader(gl);
		this.setShader(this.defaultShader,true);
	}
	,destroy: function() {
		this.defaultShader.destroy();
		this.fillShader.destroy();
		this.patternFillShader.destroy();
		this.drawTrianglesShader.destroy();
		this.primitiveShader.destroy();
		this.gl = null;
	}
	,setShader: function(shader,force) {
		if(force == null) {
			force = false;
		}
		if(shader == null) {
			this.currentShader = null;
			this.gl.useProgram(null);
			return true;
		}
		if(this.currentShader != null && !force && this.currentShader.ID == shader.ID) {
			return false;
		}
		this.currentShader = shader;
		this.gl.useProgram(shader.program);
		return true;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_ShaderManager
};
var openfl__$internal_renderer_opengl_utils_SpriteBatch = function(gl,maxSprites) {
	if(maxSprites == null) {
		maxSprites = 2000;
	}
	this.colorTransform = new openfl_geom_ColorTransform();
	this.uvs = new openfl_display_TextureUvs();
	this.matrix = new openfl_geom_Matrix();
	this.lastEnableColor = true;
	this.enableColor = true;
	this.attributes = [];
	this.writtenVertexBytes = 0;
	this.drawing = false;
	this.dirty = true;
	this.states = [];
	this.maxSprites = maxSprites;
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"));
	this.attributes.push(new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor"));
	var array = [1,1,1,1];
	this.attributes[2].defaultValue = array != null?new Float32Array(array):null;
	this.maxElementsPerVertex = 0;
	var _g = 0;
	var _g1 = this.attributes;
	while(_g < _g1.length) {
		var a = _g1[_g];
		++_g;
		var _g2 = a.type;
		var tmp;
		switch(_g2) {
		case 5120:case 5121:
			tmp = 1;
			break;
		case 5122:case 5123:
			tmp = 2;
			break;
		default:
			tmp = 4;
		}
		this.maxElementsPerVertex += Math.floor(a.components * tmp / 4);
	}
	this.vertexArraySize = maxSprites * this.maxElementsPerVertex * 4 * 4;
	this.indexArraySize = maxSprites * 6;
	this.vertexArray = new openfl__$internal_renderer_opengl_utils_VertexArray(this.attributes,this.vertexArraySize,false);
	var buffer = this.vertexArray.buffer;
	this.positions = buffer != null?new Float32Array(buffer,0):null;
	var buffer1 = this.vertexArray.buffer;
	this.colors = buffer1 != null?new Uint32Array(buffer1,0):null;
	var elements = this.indexArraySize;
	this.indices = elements != null?new Uint16Array(elements):null;
	var i = 0;
	var j = 0;
	while(i < this.indexArraySize) {
		this.indices[i] = j;
		this.indices[i + 1] = j + 1;
		this.indices[i + 2] = j + 2;
		this.indices[i + 3] = j;
		this.indices[i + 4] = j + 2;
		this.indices[i + 5] = j + 3;
		i += 6;
		j += 4;
	}
	this.currentState = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
	this.dirty = true;
	this.drawing = false;
	this.batchedSprites = 0;
	this.setContext(gl);
};
$hxClasses["openfl._internal.renderer.opengl.utils.SpriteBatch"] = openfl__$internal_renderer_opengl_utils_SpriteBatch;
openfl__$internal_renderer_opengl_utils_SpriteBatch.__name__ = ["openfl","_internal","renderer","opengl","utils","SpriteBatch"];
openfl__$internal_renderer_opengl_utils_SpriteBatch.prototype = {
	gl: null
	,renderSession: null
	,states: null
	,currentState: null
	,vertexArray: null
	,positions: null
	,colors: null
	,indexBuffer: null
	,indices: null
	,dirty: null
	,drawing: null
	,clipRect: null
	,maxSprites: null
	,batchedSprites: null
	,vertexArraySize: null
	,indexArraySize: null
	,maxElementsPerVertex: null
	,elementsPerVertex: null
	,writtenVertexBytes: null
	,shader: null
	,attributes: null
	,enableColor: null
	,lastEnableColor: null
	,matrix: null
	,uvs: null
	,colorTransform: null
	,destroy: function() {
		this.vertexArray.destroy();
		this.vertexArray = null;
		this.indices = null;
		this.gl.deleteBuffer(this.indexBuffer);
		this.currentState.destroy();
		var _g = 0;
		var _g1 = this.states;
		while(_g < _g1.length) {
			var state = _g1[_g];
			++_g;
			state.destroy();
		}
		this.colorTransform = null;
		this.gl = null;
	}
	,begin: function(renderSession,clipRect) {
		this.renderSession = renderSession;
		this.shader = renderSession.shaderManager.defaultShader;
		this.drawing = true;
		this.start(clipRect);
	}
	,finish: function() {
		this.stop();
		this.clipRect = null;
		this.drawing = false;
	}
	,start: function(clipRect) {
		if(!this.drawing) {
			this.stop();
		}
		this.dirty = true;
		this.clipRect = clipRect;
	}
	,stop: function() {
		this.flush();
	}
	,renderBitmapData: function(bitmapData,smoothing,matrix,ct,alpha,blendMode,flashShader,pixelSnapping,bgra) {
		if(bgra == null) {
			bgra = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(bitmapData == null) {
			return;
		}
		var texture = bitmapData.getTexture(this.gl);
		if(this.batchedSprites >= this.maxSprites) {
			this.flush();
		}
		var uvs = bitmapData.__uvData;
		if(uvs == null) {
			return;
		}
		if(flashShader != null) {
			flashShader.__init(this.gl);
			flashShader.__shader.wrapS = flashShader.repeatX;
			flashShader.__shader.wrapT = flashShader.repeatY;
			flashShader.__shader.smooth = flashShader.smooth;
			flashShader.__shader.blendMode = flashShader.blendMode;
			var _this = flashShader.data;
			var key = openfl_display_Shader.uObjectSize;
			var objSize = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			var _this1 = flashShader.data;
			var key1 = openfl_display_Shader.uTextureSize;
			var texSize = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
			if(bitmapData != null) {
				objSize.value[0] = bitmapData.width;
				objSize.value[1] = bitmapData.height;
				if(bitmapData.__pingPongTexture != null) {
					var _this2 = bitmapData.__pingPongTexture;
					texSize.value[0] = (_this2.__swapped?_this2.__texture1:_this2.__texture0).__width;
					var _this3 = bitmapData.__pingPongTexture;
					texSize.value[1] = (_this3.__swapped?_this3.__texture1:_this3.__texture0).__height;
				} else {
					texSize.value[0] = bitmapData.width;
					texSize.value[1] = bitmapData.height;
				}
			} else {
				objSize.value[0] = 0;
				objSize.value[1] = 0;
				texSize.value[0] = 0;
				texSize.value[1] = 0;
			}
		}
		var color = ((alpha * 255 | 0) & 255) << 24 | 16777215;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) {
				var _g2 = a.type;
				var tmp;
				switch(_g2) {
				case 5120:case 5121:
					tmp = 1;
					break;
				case 5122:case 5123:
					tmp = 2;
					break;
				default:
					tmp = 4;
				}
				r += Math.floor(a.components * tmp / 4);
			}
		}
		this.elementsPerVertex = r;
		var index = this.batchedSprites * 4 * this.elementsPerVertex;
		var width = bitmapData.width;
		var height = bitmapData.height;
		var a1 = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		if(pixelSnapping == null || pixelSnapping == 2) {
			this.positions[index] = tx;
			this.positions[index + 1] = ty;
			this.positions[index + 5] = a1 * width + tx;
			this.positions[index + 6] = b * width + ty;
			this.positions[index + 10] = a1 * width + c * height + tx;
			this.positions[index + 11] = d * height + b * width + ty;
			this.positions[index + 15] = c * height + tx;
			this.positions[index + 16] = d * height + ty;
		} else {
			this.positions[index] = Math.round(tx);
			this.positions[index + 1] = Math.round(ty);
			this.positions[index + 5] = Math.round(a1 * width + tx);
			this.positions[index + 6] = Math.round(b * width + ty);
			this.positions[index + 10] = Math.round(a1 * width + c * height + tx);
			this.positions[index + 11] = Math.round(d * height + b * width + ty);
			this.positions[index + 15] = Math.round(c * height + tx);
			this.positions[index + 16] = Math.round(d * height + ty);
		}
		if(this.enableColor) {
			this.colors[index + 4] = this.colors[index + 9] = this.colors[index + 14] = this.colors[index + 19] = color;
		}
		this.positions[index + 2] = uvs.x0;
		this.positions[index + 3] = uvs.y0;
		this.positions[index + 7] = uvs.x1;
		this.positions[index + 8] = uvs.y1;
		this.positions[index + 12] = uvs.x2;
		this.positions[index + 13] = uvs.y2;
		this.positions[index + 17] = uvs.x3;
		this.positions[index + 18] = uvs.y3;
		this.writtenVertexBytes = index + 20;
		var index1 = this.batchedSprites;
		var state = this.states[index1];
		if(state == null) {
			state = this.states[index1] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		}
		state.texture = texture;
		state.textureSmooth = smoothing;
		state.blendMode = blendMode;
		state.skipColorTransform = ct != null && ct.__isDefault();
		if(!state.skipColorTransform) {
			state.colorTransform.redMultiplier = ct.redMultiplier;
			state.colorTransform.greenMultiplier = ct.greenMultiplier;
			state.colorTransform.blueMultiplier = ct.blueMultiplier;
			state.colorTransform.alphaMultiplier = ct.alphaMultiplier;
			state.colorTransform.redOffset = ct.redOffset;
			state.colorTransform.greenOffset = ct.greenOffset;
			state.colorTransform.blueOffset = ct.blueOffset;
			state.colorTransform.alphaOffset = ct.alphaOffset;
		}
		state.skipColorTransformAlpha = true;
		if(flashShader == null) {
			state.shader = null;
			state.shaderData = null;
		} else {
			state.shader = flashShader.__shader;
			state.shaderData = flashShader.data;
		}
		this.batchedSprites++;
	}
	,renderTiles: function(object,sheet,tileData,smooth,flags,flashShader,count) {
		if(count == null) {
			count = -1;
		}
		if(flags == null) {
			flags = 0;
		}
		if(smooth == null) {
			smooth = false;
		}
		var texture = sheet.__bitmap.getTexture(this.gl);
		if(texture == null) {
			return;
		}
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useTransform = (flags & 16) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var useRGBOffset = (flags & 128) > 0;
		var blendMode;
		switch(flags & 983040) {
		case 65536:
			blendMode = 0;
			break;
		case 131072:
			blendMode = 9;
			break;
		case 262144:
			blendMode = 12;
			break;
		case 524288:
			blendMode = 14;
			break;
		default:
			switch(flags & 15728640) {
			case 1048576:
				blendMode = 2;
				break;
			case 2097152:
				blendMode = 8;
				break;
			case 4194304:
				blendMode = 11;
				break;
			case 8388608:
				blendMode = 5;
				break;
			default:
				switch(flags & 251658240) {
				case 16777216:
					blendMode = 3;
					break;
				case 33554432:
					blendMode = 6;
					break;
				default:
					blendMode = 10;
				}
			}
		}
		if(useTransform) {
			useScale = false;
			useRotation = false;
		}
		var scaleIndex = 0;
		var rotationIndex = 0;
		var rgbIndex = 0;
		var rgbOffsetIndex = 0;
		var alphaIndex = 0;
		var transformIndex = 0;
		var numValues = 3;
		if(useRect) {
			if(useOrigin) {
				numValues = 8;
			} else {
				numValues = 6;
			}
		}
		if(useScale) {
			scaleIndex = numValues;
			++numValues;
		}
		if(useRotation) {
			rotationIndex = numValues;
			++numValues;
		}
		if(useTransform) {
			transformIndex = numValues;
			numValues += 4;
		}
		if(useRGB) {
			rgbIndex = numValues;
			numValues += 3;
		}
		if(useAlpha) {
			alphaIndex = numValues;
			++numValues;
		}
		if(useRGBOffset) {
			rgbOffsetIndex = numValues;
			numValues += 4;
		}
		var totalCount = tileData.length;
		if(count >= 0 && totalCount > count) {
			totalCount = count;
		}
		Math.ceil(totalCount / numValues);
		var iIndex = 0;
		var tileID = -1;
		var rect = sheet.__rectTile;
		var tileUV = sheet.__rectUV;
		var center = sheet.__point;
		var x = 0.0;
		var y = 0.0;
		var alpha = 1.0;
		var tint = 16777215;
		var scale = 1.0;
		var rotation = 0.0;
		var cosTheta = 1.0;
		var sinTheta = 0.0;
		var a = 0.0;
		var b = 0.0;
		var c = 0.0;
		var d = 0.0;
		var tx = 0.0;
		var ty = 0.0;
		var ox = 0.0;
		var oy = 0.0;
		var oMatrix = object.__worldTransform;
		var bIndex = 0;
		var tMa = 1.0;
		var tMb = 0.0;
		var tMc = 0.0;
		var tMd = 1.0;
		var tMtx = 0.0;
		var tMty = 0.0;
		var oMa = oMatrix.a;
		var oMb = oMatrix.b;
		var oMc = oMatrix.c;
		var oMd = oMatrix.d;
		var oMtx = oMatrix.tx;
		var oMty = oMatrix.ty;
		var rw = 0.0;
		var rh = 0.0;
		var tuvx = 0.0;
		var tuvy = 0.0;
		var tuvw = 0.0;
		var tuvh = 0.0;
		this.enableColor = true;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a1 = _g1[_g];
			++_g;
			if(a1.enabled) {
				var _g2 = a1.type;
				var tmp;
				switch(_g2) {
				case 5120:case 5121:
					tmp = 1;
					break;
				case 5122:case 5123:
					tmp = 2;
					break;
				default:
					tmp = 4;
				}
				r += Math.floor(a1.components * tmp / 4);
			}
		}
		this.elementsPerVertex = r;
		if(flashShader != null) {
			flashShader.__init(this.gl);
			flashShader.__shader.wrapS = flashShader.repeatX;
			flashShader.__shader.wrapT = flashShader.repeatY;
			flashShader.__shader.smooth = flashShader.smooth;
			flashShader.__shader.blendMode = flashShader.blendMode;
			var _this = flashShader.data;
			var key = openfl_display_Shader.uObjectSize;
			var objSize = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			var _this1 = flashShader.data;
			var key1 = openfl_display_Shader.uTextureSize;
			var texSize = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
			objSize.value[0] = 0;
			objSize.value[1] = 0;
			texSize.value[0] = 0;
			texSize.value[1] = 0;
		}
		while(iIndex < totalCount) {
			if(this.batchedSprites >= this.maxSprites) {
				this.flush();
			}
			x = tileData[iIndex];
			y = tileData[iIndex + 1];
			if(useRect) {
				tileID = -1;
				rect.x = tileData[iIndex + 2];
				rect.y = tileData[iIndex + 3];
				rect.width = tileData[iIndex + 4];
				rect.height = tileData[iIndex + 5];
				if(useOrigin) {
					center.x = tileData[iIndex + 6];
					center.y = tileData[iIndex + 7];
				} else {
					center.setTo(0,0);
				}
				rw = rect.width;
				rh = rect.height;
				tuvx = rect.get_left() / sheet.__bitmap.width;
				tuvy = rect.get_top() / sheet.__bitmap.height;
				tuvw = rect.get_right() / sheet.__bitmap.width;
				tuvh = rect.get_bottom() / sheet.__bitmap.height;
			} else {
				tileID = (tileData[iIndex + 2] == null?0:tileData[iIndex + 2]) | 0;
				rect = sheet.__tileRects[tileID];
				center = sheet.__centerPoints[tileID];
				tileUV = sheet.__tileUVs[tileID];
				if(rect != null) {
					rw = rect.width;
					rh = rect.height;
					tuvx = tileUV.x;
					tuvy = tileUV.y;
					tuvw = tileUV.width;
					tuvh = tileUV.height;
				}
			}
			if(rect != null && rect.width > 0 && rect.height > 0 && center != null) {
				alpha = 1;
				tint = 16777215;
				scale = 1.0;
				rotation = 0.0;
				cosTheta = 1.0;
				sinTheta = 0.0;
				if(useAlpha) {
					alpha = tileData[iIndex + alphaIndex] * object.__worldAlpha;
				} else {
					alpha = object.__worldAlpha;
				}
				if(useRGB) {
					tint = (tileData[iIndex + rgbIndex] * 255 | 0) << 16 | (tileData[iIndex + rgbIndex + 1] * 255 | 0) << 8 | (tileData[iIndex + rgbIndex + 2] * 255 | 0);
				}
				var wct = object.__worldColorTransform;
				this.colorTransform.redMultiplier = wct.redMultiplier;
				this.colorTransform.greenMultiplier = wct.greenMultiplier;
				this.colorTransform.blueMultiplier = wct.blueMultiplier;
				this.colorTransform.alphaMultiplier = wct.alphaMultiplier;
				this.colorTransform.redOffset = wct.redOffset;
				this.colorTransform.greenOffset = wct.greenOffset;
				this.colorTransform.blueOffset = wct.blueOffset;
				this.colorTransform.alphaOffset = wct.alphaOffset;
				if(useRGBOffset) {
					this.colorTransform.redOffset += tileData[iIndex + rgbOffsetIndex];
					this.colorTransform.greenOffset += tileData[iIndex + rgbOffsetIndex + 1];
					this.colorTransform.blueOffset += tileData[iIndex + rgbOffsetIndex + 2];
					this.colorTransform.alphaOffset += tileData[iIndex + rgbOffsetIndex + 3];
				}
				if(useScale) {
					scale = tileData[iIndex + scaleIndex];
				}
				if(useRotation) {
					rotation = tileData[iIndex + rotationIndex];
					cosTheta = Math.cos(rotation);
					sinTheta = Math.sin(rotation);
				}
				if(useTransform) {
					a = tileData[iIndex + transformIndex];
					b = tileData[iIndex + transformIndex + 1];
					c = tileData[iIndex + transformIndex + 2];
					d = tileData[iIndex + transformIndex + 3];
				} else {
					a = scale * cosTheta;
					b = scale * sinTheta;
					c = -b;
					d = a;
				}
				ox = center.x * a + center.y * c;
				oy = center.x * b + center.y * d;
				tx = x - ox;
				ty = y - oy;
				tMa = (a * oMa + b * oMc) * rw;
				tMb = (a * oMb + b * oMd) * rw;
				tMc = (c * oMa + d * oMc) * rh;
				tMd = (c * oMb + d * oMd) * rh;
				tMtx = tx * oMa + ty * oMc + oMtx;
				tMty = tx * oMb + ty * oMd + oMty;
				bIndex = this.batchedSprites * 4 * this.elementsPerVertex;
				this.positions[bIndex] = tMtx;
				this.positions[bIndex + 1] = tMty;
				this.positions[bIndex + 5] = tMa + tMtx;
				this.positions[bIndex + 6] = tMb + tMty;
				this.positions[bIndex + 10] = tMa + tMc + tMtx;
				this.positions[bIndex + 11] = tMd + tMb + tMty;
				this.positions[bIndex + 15] = tMc + tMtx;
				this.positions[bIndex + 16] = tMd + tMty;
				this.colors[bIndex + 4] = this.colors[bIndex + 9] = this.colors[bIndex + 14] = this.colors[bIndex + 19] = ((alpha * 255 | 0) & 255) << 24 | tint;
				this.positions[bIndex + 2] = tuvx;
				this.positions[bIndex + 3] = tuvy;
				this.positions[bIndex + 7] = tuvw;
				this.positions[bIndex + 8] = tuvy;
				this.positions[bIndex + 12] = tuvw;
				this.positions[bIndex + 13] = tuvh;
				this.positions[bIndex + 17] = tuvx;
				this.positions[bIndex + 18] = tuvh;
				this.writtenVertexBytes = bIndex + 20;
				var index = this.batchedSprites;
				var colorTransform = this.colorTransform;
				var state = this.states[index];
				if(state == null) {
					state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
				}
				state.texture = texture;
				state.textureSmooth = smooth;
				state.blendMode = blendMode;
				state.skipColorTransform = colorTransform != null && colorTransform.__isDefault();
				if(!state.skipColorTransform) {
					state.colorTransform.redMultiplier = colorTransform.redMultiplier;
					state.colorTransform.greenMultiplier = colorTransform.greenMultiplier;
					state.colorTransform.blueMultiplier = colorTransform.blueMultiplier;
					state.colorTransform.alphaMultiplier = colorTransform.alphaMultiplier;
					state.colorTransform.redOffset = colorTransform.redOffset;
					state.colorTransform.greenOffset = colorTransform.greenOffset;
					state.colorTransform.blueOffset = colorTransform.blueOffset;
					state.colorTransform.alphaOffset = colorTransform.alphaOffset;
				}
				state.skipColorTransformAlpha = false;
				if(flashShader == null) {
					state.shader = null;
					state.shaderData = null;
				} else {
					state.shader = flashShader.__shader;
					state.shaderData = flashShader.data;
				}
				this.batchedSprites++;
			}
			iIndex += numValues;
		}
	}
	,fillVertices: function(index,width,height,matrix,uvs,color,pixelSnapping) {
		if(color == null) {
			color = -1;
		}
		var a = matrix.a;
		var b = matrix.b;
		var c = matrix.c;
		var d = matrix.d;
		var tx = matrix.tx;
		var ty = matrix.ty;
		if(pixelSnapping == null || pixelSnapping == 2) {
			this.positions[index] = tx;
			this.positions[index + 1] = ty;
			this.positions[index + 5] = a * width + tx;
			this.positions[index + 6] = b * width + ty;
			this.positions[index + 10] = a * width + c * height + tx;
			this.positions[index + 11] = d * height + b * width + ty;
			this.positions[index + 15] = c * height + tx;
			this.positions[index + 16] = d * height + ty;
		} else {
			this.positions[index] = Math.round(tx);
			this.positions[index + 1] = Math.round(ty);
			this.positions[index + 5] = Math.round(a * width + tx);
			this.positions[index + 6] = Math.round(b * width + ty);
			this.positions[index + 10] = Math.round(a * width + c * height + tx);
			this.positions[index + 11] = Math.round(d * height + b * width + ty);
			this.positions[index + 15] = Math.round(c * height + tx);
			this.positions[index + 16] = Math.round(d * height + ty);
		}
		if(this.enableColor) {
			this.colors[index + 4] = this.colors[index + 9] = this.colors[index + 14] = this.colors[index + 19] = color;
		}
		this.positions[index + 2] = uvs.x0;
		this.positions[index + 3] = uvs.y0;
		this.positions[index + 7] = uvs.x1;
		this.positions[index + 8] = uvs.y1;
		this.positions[index + 12] = uvs.x2;
		this.positions[index + 13] = uvs.y2;
		this.positions[index + 17] = uvs.x3;
		this.positions[index + 18] = uvs.y3;
		this.writtenVertexBytes = index + 20;
	}
	,enableAttributes: function(color) {
		if(color == null) {
			color = -1;
		}
		this.enableColor = color != -1;
		if(this.enableColor != this.lastEnableColor) {
			this.flush();
			this.lastEnableColor = this.enableColor;
		}
		this.attributes[2].enabled = this.lastEnableColor;
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) {
				var _g2 = a.type;
				var tmp;
				switch(_g2) {
				case 5120:case 5121:
					tmp = 1;
					break;
				case 5122:case 5123:
					tmp = 2;
					break;
				default:
					tmp = 4;
				}
				r += Math.floor(a.components * tmp / 4);
			}
		}
		this.elementsPerVertex = r;
	}
	,flush: function() {
		if(this.batchedSprites == 0) {
			return;
		}
		if(this.clipRect != null) {
			this.gl.enable(this.gl.SCISSOR_TEST);
			this.gl.scissor(Math.floor(this.clipRect.x),Math.floor(this.clipRect.y),Math.ceil(this.clipRect.width),Math.ceil(this.clipRect.height));
		}
		if(this.dirty) {
			this.dirty = false;
			this.renderSession.activeTextures = 1;
			var _this = this.vertexArray;
			_this.gl.bindBuffer(_this.gl.ARRAY_BUFFER,_this.glBuffer);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		}
		if(this.writtenVertexBytes > this.vertexArraySize * 0.5) {
			this.vertexArray.upload(this.positions);
		} else {
			this.vertexArray.upload(this.positions.subarray(0,this.writtenVertexBytes));
		}
		var nextState;
		var batchSize = 0;
		var start = 0;
		this.currentState.shader = null;
		this.currentState.shaderData = null;
		this.currentState.texture = null;
		this.currentState.textureSmooth = false;
		this.currentState.blendMode = this.renderSession.blendModeManager.currentBlendMode;
		this.currentState.colorTransform = null;
		this.currentState.skipColorTransformAlpha = false;
		var _g1 = 0;
		var _g = this.batchedSprites;
		while(_g1 < _g) {
			var i = _g1++;
			nextState = this.states[i];
			this.currentState.skipColorTransformAlpha = nextState.skipColorTransformAlpha;
			var other = this.currentState;
			if(!((nextState.shader == null && other.shader == null || nextState.shader != null && other.shader != null && nextState.shader.ID == other.shader.ID) && nextState.texture == other.texture && nextState.textureSmooth == other.textureSmooth && nextState.blendMode == other.blendMode && (nextState.skipColorTransform && other.skipColorTransform || !nextState.skipColorTransform && !other.skipColorTransform && nextState.colorTransform.__equals(other.colorTransform,nextState.skipColorTransformAlpha)))) {
				this.renderBatch(this.currentState,batchSize,start);
				start = i;
				batchSize = 0;
				this.currentState.shader = nextState.shader;
				this.currentState.shaderData = nextState.shaderData;
				this.currentState.texture = nextState.texture;
				this.currentState.textureSmooth = nextState.textureSmooth;
				this.currentState.blendMode = nextState.blendMode;
				this.currentState.skipColorTransform = nextState.skipColorTransform;
				this.currentState.colorTransform = this.currentState.skipColorTransform?null:nextState.colorTransform;
			}
			++batchSize;
		}
		this.renderBatch(this.currentState,batchSize,start);
		this.batchedSprites = 0;
		this.writtenVertexBytes = 0;
		if(this.clipRect != null) {
			this.gl.disable(this.gl.SCISSOR_TEST);
		}
	}
	,renderBatch: function(state,size,start) {
		if(size == 0 || state.texture == null) {
			return;
		}
		var shader = state.shader == null?this.renderSession.shaderManager.defaultShader:state.shader;
		this.renderSession.shaderManager.setShader(shader);
		shader.bindVertexArray(this.vertexArray);
		this.renderSession.blendModeManager.setBlendMode(shader.blendMode != null?shader.blendMode:state.blendMode);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,this.renderSession.projectionMatrix.toArray(true));
		if(state.colorTransform != null) {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),1);
			var ct = state.colorTransform;
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),ct.redMultiplier,ct.greenMultiplier,ct.blueMultiplier,state.skipColorTransformAlpha?1:ct.alphaMultiplier);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),ct.redOffset / 255.,ct.greenOffset / 255.,ct.blueOffset / 255.,ct.alphaOffset / 255.);
		} else {
			this.gl.uniform1i(shader.getUniformLocation("openfl_uUseColorTransform"),0);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorMultiplier"),1,1,1,1);
			this.gl.uniform4f(shader.getUniformLocation("openfl_uColorOffset"),0,0,0,0);
		}
		this.gl.activeTexture(this.gl.TEXTURE0);
		this.gl.bindTexture(this.gl.TEXTURE_2D,state.texture);
		this.gl.uniform1i(shader.getUniformLocation("openfl_uSampler0"),0);
		if(shader.smooth != null && shader.smooth || state.textureSmooth) {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.LINEAR);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.LINEAR);
		} else {
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST);
			this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST);
		}
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,shader.wrapS);
		this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,shader.wrapT);
		shader.applyData(state.shaderData,this.renderSession);
		this.gl.drawElements(this.gl.TRIANGLES,size * 6,this.gl.UNSIGNED_SHORT,start * 6 * 2);
		this.renderSession.drawCount++;
	}
	,setState: function(index,texture,smooth,blendMode,colorTransform,shader,skipAlpha) {
		if(skipAlpha == null) {
			skipAlpha = false;
		}
		if(smooth == null) {
			smooth = false;
		}
		var state = this.states[index];
		if(state == null) {
			state = this.states[index] = new openfl__$internal_renderer_opengl_utils__$SpriteBatch_State();
		}
		state.texture = texture;
		state.textureSmooth = smooth;
		state.blendMode = blendMode;
		state.skipColorTransform = colorTransform != null && colorTransform.__isDefault();
		if(!state.skipColorTransform) {
			state.colorTransform.redMultiplier = colorTransform.redMultiplier;
			state.colorTransform.greenMultiplier = colorTransform.greenMultiplier;
			state.colorTransform.blueMultiplier = colorTransform.blueMultiplier;
			state.colorTransform.alphaMultiplier = colorTransform.alphaMultiplier;
			state.colorTransform.redOffset = colorTransform.redOffset;
			state.colorTransform.greenOffset = colorTransform.greenOffset;
			state.colorTransform.blueOffset = colorTransform.blueOffset;
			state.colorTransform.alphaOffset = colorTransform.alphaOffset;
		}
		state.skipColorTransformAlpha = skipAlpha;
		if(shader == null) {
			state.shader = null;
			state.shaderData = null;
		} else {
			state.shader = shader.__shader;
			state.shaderData = shader.data;
		}
	}
	,setContext: function(gl) {
		this.gl = gl;
		this.vertexArray.setContext(gl,this.positions);
		this.indexBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER,this.indexBuffer);
		gl.bufferData(gl.ELEMENT_ARRAY_BUFFER,this.indices,gl.STATIC_DRAW);
	}
	,prepareShader: function(flashShader,bd) {
		if(flashShader != null) {
			flashShader.__init(this.gl);
			flashShader.__shader.wrapS = flashShader.repeatX;
			flashShader.__shader.wrapT = flashShader.repeatY;
			flashShader.__shader.smooth = flashShader.smooth;
			flashShader.__shader.blendMode = flashShader.blendMode;
			var _this = flashShader.data;
			var key = openfl_display_Shader.uObjectSize;
			var objSize = __map_reserved[key] != null?_this.getReserved(key):_this.h[key];
			var _this1 = flashShader.data;
			var key1 = openfl_display_Shader.uTextureSize;
			var texSize = __map_reserved[key1] != null?_this1.getReserved(key1):_this1.h[key1];
			if(bd != null) {
				objSize.value[0] = bd.width;
				objSize.value[1] = bd.height;
				if(bd.__pingPongTexture != null) {
					var _this2 = bd.__pingPongTexture;
					texSize.value[0] = (_this2.__swapped?_this2.__texture1:_this2.__texture0).__width;
					var _this3 = bd.__pingPongTexture;
					texSize.value[1] = (_this3.__swapped?_this3.__texture1:_this3.__texture0).__height;
				} else {
					texSize.value[0] = bd.width;
					texSize.value[1] = bd.height;
				}
			} else {
				objSize.value[0] = 0;
				objSize.value[1] = 0;
				texSize.value[0] = 0;
				texSize.value[1] = 0;
			}
		}
	}
	,getElementsPerVertex: function() {
		var r = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) {
				var _g2 = a.type;
				var tmp;
				switch(_g2) {
				case 5120:case 5121:
					tmp = 1;
					break;
				case 5122:case 5123:
					tmp = 2;
					break;
				default:
					tmp = 4;
				}
				r += Math.floor(a.components * tmp / 4);
			}
		}
		return r;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_SpriteBatch
};
var openfl__$internal_renderer_opengl_utils__$SpriteBatch_State = function() {
	this.skipColorTransformAlpha = false;
	this.skipColorTransform = false;
	this.colorTransform = new openfl_geom_ColorTransform();
	this.textureSmooth = true;
};
$hxClasses["openfl._internal.renderer.opengl.utils._SpriteBatch.State"] = openfl__$internal_renderer_opengl_utils__$SpriteBatch_State;
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.__name__ = ["openfl","_internal","renderer","opengl","utils","_SpriteBatch","State"];
openfl__$internal_renderer_opengl_utils__$SpriteBatch_State.prototype = {
	texture: null
	,textureSmooth: null
	,blendMode: null
	,colorTransform: null
	,skipColorTransform: null
	,skipColorTransformAlpha: null
	,shader: null
	,shaderData: null
	,equals: function(other) {
		if((this.shader == null && other.shader == null || this.shader != null && other.shader != null && this.shader.ID == other.shader.ID) && this.texture == other.texture && this.textureSmooth == other.textureSmooth && this.blendMode == other.blendMode) {
			if(!(this.skipColorTransform && other.skipColorTransform)) {
				if(!this.skipColorTransform && !other.skipColorTransform) {
					return this.colorTransform.__equals(other.colorTransform,this.skipColorTransformAlpha);
				} else {
					return false;
				}
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,destroy: function() {
		this.texture = null;
		this.colorTransform = null;
	}
	,__class__: openfl__$internal_renderer_opengl_utils__$SpriteBatch_State
};
var openfl__$internal_renderer_opengl_utils_StencilManager = function(gl) {
	this.stencilMask = 0;
	this.stencilStack = [];
	this.setContext(gl);
	this.reverse = true;
	this.count = 0;
};
$hxClasses["openfl._internal.renderer.opengl.utils.StencilManager"] = openfl__$internal_renderer_opengl_utils_StencilManager;
openfl__$internal_renderer_opengl_utils_StencilManager.__name__ = ["openfl","_internal","renderer","opengl","utils","StencilManager"];
openfl__$internal_renderer_opengl_utils_StencilManager.prototype = {
	count: null
	,gl: null
	,reverse: null
	,stencilStack: null
	,stencilMask: null
	,prepareGraphics: function(fill,renderSession,translationMatrix) {
		var shader = renderSession.shaderManager.fillShader;
		renderSession.shaderManager.setShader(shader);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
		this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
		var _this = fill.vertexArray;
		_this.gl.bindBuffer(_this.gl.ARRAY_BUFFER,_this.glBuffer);
		shader.bindVertexArray(fill.vertexArray);
		this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
	}
	,pushBucket: function(bucket,renderSession,translationMatrix,isMask) {
		if(isMask == null) {
			isMask = false;
		}
		if(!isMask) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.gl.stencilMask(255);
			this.gl.colorMask(false,false,false,false);
			this.gl.stencilFunc(this.gl.NEVER,1,255);
			this.gl.stencilOp(this.gl.INVERT,this.gl.KEEP,this.gl.KEEP);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		var _g = 0;
		var _g1 = bucket.fills;
		while(_g < _g1.length) {
			var fill = _g1[_g];
			++_g;
			if(fill.available) {
				continue;
			}
			var shader = renderSession.shaderManager.fillShader;
			renderSession.shaderManager.setShader(shader);
			this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uTranslationMatrix"),false,translationMatrix);
			this.gl.uniformMatrix3fv(shader.getUniformLocation("openfl_uProjectionMatrix"),false,renderSession.projectionMatrix.toArray(true));
			var _this = fill.vertexArray;
			_this.gl.bindBuffer(_this.gl.ARRAY_BUFFER,_this.glBuffer);
			shader.bindVertexArray(fill.vertexArray);
			this.gl.bindBuffer(this.gl.ELEMENT_ARRAY_BUFFER,fill.indexBuffer);
			this.gl.drawElements(fill.drawMode,fill.glIndices.length,this.gl.UNSIGNED_SHORT,0);
		}
		if(!isMask) {
			this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
			this.gl.stencilFunc(this.gl.EQUAL,255,255);
		}
	}
	,popBucket: function(object,bucket,renderSession) {
		this.gl.disable(this.gl.STENCIL_TEST);
	}
	,pushMask: function(object,renderSession) {
		var maskGraphics = object.__maskGraphics;
		if(maskGraphics == null || maskGraphics.__commands.get_length() <= 0) {
			return;
		}
		if(this.stencilMask == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
		}
		this.stencilMask++;
		if(maskGraphics.__dirty) {
			openfl__$internal_renderer_opengl_utils_GraphicsRenderer.updateGraphics(object,maskGraphics,renderSession.gl);
		}
		var func = this.stencilMask == 1?this.gl.NEVER:this.gl.EQUAL;
		var ref = this.stencilMask;
		var mask = 255 - this.stencilMask;
		this.gl.stencilMask(255);
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(func,ref,mask);
		this.gl.stencilOp(this.gl.REPLACE,this.gl.KEEP,this.gl.KEEP);
		var glStack = maskGraphics.__glStack[openfl__$internal_renderer_opengl_GLRenderer.glContextId];
		var bucket;
		var translationMatrix = object.__worldTransform;
		var _g1 = 0;
		var _g = glStack.buckets.length;
		while(_g1 < _g) {
			bucket = glStack.buckets[_g1++];
			if(bucket.overrideMatrix != null) {
				translationMatrix = bucket.overrideMatrix;
			} else {
				translationMatrix = object.__worldTransform;
			}
			switch(bucket.mode[1]) {
			case 1:case 2:
				this.pushBucket(bucket,renderSession,translationMatrix.toArray(true),true);
				break;
			default:
			}
		}
		this.gl.colorMask(true,true,true,renderSession.renderer.transparent);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.gl.stencilFunc(this.gl.EQUAL,this.stencilMask,255);
	}
	,popMask: function(object,renderSession) {
		this.stencilMask--;
		if(this.stencilMask <= 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
			this.stencilMask = 0;
		}
	}
	,bindGraphics: function(object,glData,renderSession) {
	}
	,destroy: function() {
		this.stencilStack = null;
		this.gl = null;
	}
	,popStencil: function(object,glData,renderSession) {
		this.stencilStack.pop();
		this.count--;
		if(this.stencilStack.length == 0) {
			this.gl.disable(this.gl.STENCIL_TEST);
		} else {
			var level = this.count;
			this.bindGraphics(object,glData,renderSession);
			this.gl.colorMask(false,false,false,false);
			if(glData.mode == 1) {
				this.reverse = !this.reverse;
				if(this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
				this.gl.stencilFunc(this.gl.ALWAYS,0,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
				this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level,255);
				}
			} else {
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
					this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
				}
				this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
				if(!this.reverse) {
					this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				} else {
					this.gl.stencilFunc(this.gl.EQUAL,level,255);
				}
			}
			this.gl.colorMask(true,true,true,true);
			this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		}
	}
	,pushStencil: function(object,glData,renderSession) {
		this.bindGraphics(object,glData,renderSession);
		if(this.stencilStack.length == 0) {
			this.gl.enable(this.gl.STENCIL_TEST);
			this.gl.clear(this.gl.STENCIL_BUFFER_BIT);
			this.reverse = true;
			this.count = 0;
		}
		this.stencilStack.push(glData);
		var level = this.count;
		this.gl.colorMask(false,false,false,false);
		this.gl.stencilFunc(this.gl.ALWAYS,0,255);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INVERT);
		if(glData.mode == 1) {
			this.gl.drawElements(this.gl.TRIANGLE_FAN,glData.indices.length - 4,this.gl.UNSIGNED_SHORT,0);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_FAN,4,this.gl.UNSIGNED_SHORT,(glData.indices.length - 4) * 2);
			if(this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			}
			this.reverse = !this.reverse;
		} else {
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.DECR);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level,255);
				this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.INCR);
			}
			this.gl.drawElements(this.gl.TRIANGLE_STRIP,glData.indices.length,this.gl.UNSIGNED_SHORT,0);
			if(!this.reverse) {
				this.gl.stencilFunc(this.gl.EQUAL,255 - (level + 1),255);
			} else {
				this.gl.stencilFunc(this.gl.EQUAL,level + 1,255);
			}
		}
		this.gl.colorMask(true,true,true,true);
		this.gl.stencilOp(this.gl.KEEP,this.gl.KEEP,this.gl.KEEP);
		this.count++;
	}
	,setContext: function(gl) {
		this.gl = gl;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_StencilManager
};
var openfl__$internal_renderer_opengl_utils_VertexArray = function(attributes,size,isStatic) {
	if(isStatic == null) {
		isStatic = false;
	}
	if(size == null) {
		size = 0;
	}
	this.isStatic = false;
	this.size = 0;
	this.attributes = [];
	this.size = size;
	this.attributes = attributes;
	if(size > 0) {
		this.buffer = new ArrayBuffer(size);
	}
	this.isStatic = isStatic;
};
$hxClasses["openfl._internal.renderer.opengl.utils.VertexArray"] = openfl__$internal_renderer_opengl_utils_VertexArray;
openfl__$internal_renderer_opengl_utils_VertexArray.__name__ = ["openfl","_internal","renderer","opengl","utils","VertexArray"];
openfl__$internal_renderer_opengl_utils_VertexArray.prototype = {
	gl: null
	,glBuffer: null
	,attributes: null
	,buffer: null
	,size: null
	,isStatic: null
	,bind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.glBuffer);
	}
	,unbind: function() {
		this.gl.bindBuffer(this.gl.ARRAY_BUFFER,null);
	}
	,upload: function(view) {
		this.gl.bufferSubData(this.gl.ARRAY_BUFFER,0,view);
	}
	,destroy: function() {
		this.gl.deleteBuffer(this.glBuffer);
		this.buffer = null;
	}
	,setContext: function(gl,view) {
		this.gl = gl;
		this.glBuffer = gl.createBuffer();
		gl.bindBuffer(gl.ARRAY_BUFFER,this.glBuffer);
		gl.bufferData(gl.ARRAY_BUFFER,view,this.isStatic?gl.STATIC_DRAW:gl.DYNAMIC_DRAW);
	}
	,get_stride: function() {
		var s = 0;
		var _g = 0;
		var _g1 = this.attributes;
		while(_g < _g1.length) {
			var a = _g1[_g];
			++_g;
			if(a.enabled) {
				var _g2 = a.type;
				var tmp;
				switch(_g2) {
				case 5120:case 5121:
					tmp = 1;
					break;
				case 5122:case 5123:
					tmp = 2;
					break;
				default:
					tmp = 4;
				}
				s += Math.floor(a.components * tmp / 4) * 4;
			}
		}
		return s;
	}
	,__class__: openfl__$internal_renderer_opengl_utils_VertexArray
	,__properties__: {get_stride:"get_stride"}
};
var openfl__$internal_text_TextEngine = function(textField) {
	this.textField = textField;
	this.width = 100;
	this.height = 100;
	this.text = "";
	this.bounds = new openfl_geom_Rectangle(0,0,0,0);
	this.type = 0;
	this.autoSize = 2;
	this.displayAsPassword = false;
	this.embedFonts = false;
	this.selectable = true;
	this.borderColor = 0;
	this.border = false;
	this.backgroundColor = 16777215;
	this.background = false;
	this.gridFitType = 1;
	this.maxChars = 0;
	this.multiline = false;
	this.sharpness = 0;
	this.scrollH = 0;
	this.scrollV = 1;
	this.wordWrap = false;
	this.lineAscents = [];
	this.lineBreaks = [];
	this.lineDescents = [];
	this.lineLeadings = [];
	this.lineHeights = [];
	this.lineWidths = [];
	this.layoutGroups = [];
	this.textFormatRanges = [];
	openfl__$internal_text_TextEngine.__canvas = window.document.createElement("canvas");
	openfl__$internal_text_TextEngine.__context = openfl__$internal_text_TextEngine.__canvas.getContext("2d");
};
$hxClasses["openfl._internal.text.TextEngine"] = openfl__$internal_text_TextEngine;
openfl__$internal_text_TextEngine.__name__ = ["openfl","_internal","text","TextEngine"];
openfl__$internal_text_TextEngine.__canvas = null;
openfl__$internal_text_TextEngine.__context = null;
openfl__$internal_text_TextEngine.findFont = function(name) {
	return null;
};
openfl__$internal_text_TextEngine.getFont = function(format) {
	var font = format.italic?"italic ":"normal ";
	font += "normal ";
	font += format.bold?"bold ":"normal ";
	font += format.size + "px";
	font += "/" + (format.size + format.leading + 6) + "px ";
	var _g1 = format.font;
	var tmp;
	switch(_g1) {
	case "_sans":
		tmp = "sans-serif";
		break;
	case "_serif":
		tmp = "serif";
		break;
	case "_typewriter":
		tmp = "monospace";
		break;
	default:
		tmp = "'" + format.font + "'";
	}
	font += "" + tmp;
	return font;
};
openfl__$internal_text_TextEngine.getFontInstance = function(format) {
	return null;
};
openfl__$internal_text_TextEngine.prototype = {
	antiAliasType: null
	,autoSize: null
	,background: null
	,backgroundColor: null
	,border: null
	,borderColor: null
	,bottomScrollV: null
	,bounds: null
	,caretIndex: null
	,displayAsPassword: null
	,embedFonts: null
	,gridFitType: null
	,height: null
	,layoutGroups: null
	,lineAscents: null
	,lineBreaks: null
	,lineDescents: null
	,lineLeadings: null
	,lineHeights: null
	,lineWidths: null
	,maxChars: null
	,maxScrollH: null
	,maxScrollV: null
	,multiline: null
	,numLines: null
	,restrict: null
	,scrollH: null
	,scrollV: null
	,selectable: null
	,sharpness: null
	,text: null
	,textHeight: null
	,textFormatRanges: null
	,textWidth: null
	,type: null
	,width: null
	,wordWrap: null
	,textField: null
	,__cursorPosition: null
	,__cursorTimer: null
	,__hasFocus: null
	,__isKeyDown: null
	,__measuredHeight: null
	,__measuredWidth: null
	,__selectionStart: null
	,__showCursor: null
	,__textFormat: null
	,__textLayout: null
	,__texture: null
	,__tileData: null
	,__tileDataLength: null
	,__tilesheets: null
	,__cairoFont: null
	,__font: null
	,__hiddenInput: null
	,getBounds: function() {
		var padding = this.border?1:0;
		this.bounds.width = this.width + padding;
		this.bounds.height = this.height + padding;
	}
	,getLine: function(index) {
		if(index < 0 || index > this.lineBreaks.length + 1) {
			return null;
		}
		if(this.lineBreaks.length == 0) {
			return this.text;
		} else {
			return this.text.substring(index > 0?this.lineBreaks[index - 1]:0,this.lineBreaks[index]);
		}
	}
	,getLineMeasurements: function() {
		this.lineAscents.splice(0,this.lineAscents.length);
		this.lineDescents.splice(0,this.lineDescents.length);
		this.lineLeadings.splice(0,this.lineLeadings.length);
		this.lineHeights.splice(0,this.lineHeights.length);
		this.lineWidths.splice(0,this.lineWidths.length);
		var currentLineAscent = 0.0;
		var currentLineDescent = 0.0;
		var currentLineLeading = null;
		var currentLineHeight = 0.0;
		var currentLineWidth = 0.0;
		this.textWidth = 0;
		this.textHeight = 0;
		this.numLines = 1;
		this.bottomScrollV = 0;
		this.maxScrollH = 0;
		var _g = 0;
		var _g1 = this.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			while(group.lineIndex > this.numLines - 1) {
				this.lineAscents.push(currentLineAscent);
				this.lineDescents.push(currentLineDescent);
				this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
				this.lineHeights.push(currentLineHeight);
				this.lineWidths.push(currentLineWidth);
				currentLineAscent = 0;
				currentLineDescent = 0;
				currentLineLeading = null;
				currentLineHeight = 0;
				currentLineWidth = 0;
				this.numLines++;
				if(this.textHeight <= this.height - 2) {
					this.bottomScrollV++;
				}
			}
			currentLineAscent = Math.max(currentLineAscent,group.ascent);
			currentLineDescent = Math.max(currentLineDescent,group.descent);
			if(currentLineLeading == null) {
				currentLineLeading = group.leading;
			} else {
				currentLineLeading = Math.max(currentLineLeading,group.leading) | 0;
			}
			currentLineHeight = Math.max(currentLineHeight,group.height);
			currentLineWidth = group.offsetX - 2 + group.width;
			if(currentLineWidth > this.textWidth) {
				this.textWidth = currentLineWidth;
			}
			this.textHeight = group.offsetY - 2 + group.ascent + group.descent;
		}
		this.lineAscents.push(currentLineAscent);
		this.lineDescents.push(currentLineDescent);
		this.lineLeadings.push(currentLineLeading != null?currentLineLeading:0);
		this.lineHeights.push(currentLineHeight);
		this.lineWidths.push(currentLineWidth);
		if(this.numLines == 1) {
			this.bottomScrollV = 1;
			if(currentLineLeading > 0) {
				this.textHeight += currentLineLeading;
			}
		} else if(this.textHeight <= this.height - 2) {
			this.bottomScrollV++;
		}
		if(this.textWidth > this.width - 4) {
			this.maxScrollH = this.textWidth - this.width + 4 | 0;
		} else {
			this.maxScrollH = 0;
		}
		this.maxScrollV = this.numLines - this.bottomScrollV + 1;
	}
	,getLayoutGroups: function() {
		var _gthis = this;
		this.layoutGroups.splice(0,this.layoutGroups.length);
		var rangeIndex = -1;
		var formatRange = null;
		var currentFormat = openfl_text_TextField.__defaultTextFormat.clone();
		var leading = 0;
		var ascent = 0.0;
		var descent = 0.0;
		var layoutGroup;
		var widthValue;
		var heightValue = 0.0;
		var spaceWidth = 0.0;
		var previousSpaceIndex = 0;
		var spaceIndex = this.text.indexOf(" ");
		var breakIndex = this.text.indexOf("\n");
		var marginRight = 0.0;
		var offsetX = 2.0;
		var offsetY = 2.0;
		var textIndex = 0;
		var lineIndex = 0;
		var lineFormat = null;
		if(-1 < _gthis.textFormatRanges.length - 1) {
			rangeIndex = 0;
			formatRange = _gthis.textFormatRanges[0];
			currentFormat.__merge(formatRange.format);
			openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
			ascent = currentFormat.size;
			descent = currentFormat.size * 0.185;
			leading = currentFormat.leading;
			heightValue = ascent + descent + leading;
			if(spaceIndex > -1) {
				spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
			}
		}
		lineFormat = formatRange.format;
		var wrap;
		while(textIndex < this.text.length) if(breakIndex > -1 && (spaceIndex == -1 || breakIndex < spaceIndex) && formatRange.end >= breakIndex) {
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,breakIndex);
			var text = this.text;
			var advances = [];
			var _g1 = textIndex;
			var _g = breakIndex;
			while(_g1 < _g) advances.push(openfl__$internal_text_TextEngine.__context.measureText(text.charAt(_g1++)).width);
			layoutGroup.advances = advances;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances1 = layoutGroup.advances;
			var width = 0.0;
			var _g2 = 0;
			while(_g2 < advances1.length) {
				var advance = advances1[_g2];
				++_g2;
				width += advance;
			}
			layoutGroup.width = width;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetY += heightValue;
			offsetX = 2;
			if(this.wordWrap && layoutGroup.offsetX + layoutGroup.width > this.width - 2) {
				layoutGroup.offsetY = offsetY;
				layoutGroup.offsetX = offsetX;
				offsetY += heightValue;
				++lineIndex;
			}
			textIndex = breakIndex + 1;
			breakIndex = this.text.indexOf("\n",textIndex);
			++lineIndex;
			if(formatRange.end == breakIndex) {
				if(rangeIndex < _gthis.textFormatRanges.length - 1) {
					++rangeIndex;
					formatRange = _gthis.textFormatRanges[rangeIndex];
					currentFormat.__merge(formatRange.format);
					openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
					ascent = currentFormat.size;
					descent = currentFormat.size * 0.185;
					leading = currentFormat.leading;
					heightValue = ascent + descent + leading;
					if(spaceIndex > -1) {
						spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
					}
				}
				lineFormat = formatRange.format;
			}
		} else if(formatRange.end >= spaceIndex && spaceIndex > -1) {
			layoutGroup = null;
			wrap = false;
			while(true) {
				if(spaceIndex == -1) {
					spaceIndex = formatRange.end;
				}
				var text1 = this.text;
				var advances2 = [];
				var _g11 = textIndex;
				var _g3 = spaceIndex;
				while(_g11 < _g3) advances2.push(openfl__$internal_text_TextEngine.__context.measureText(text1.charAt(_g11++)).width);
				var width1 = 0.0;
				var _g4 = 0;
				while(_g4 < advances2.length) {
					var advance1 = advances2[_g4];
					++_g4;
					width1 += advance1;
				}
				widthValue = width1;
				if(this.wordWrap) {
					if(offsetX + widthValue > this.width - 2) {
						wrap = true;
					}
				}
				if(wrap) {
					offsetY += heightValue;
					var i = this.layoutGroups.length - 1;
					var offsetCount = 0;
					while(true) {
						layoutGroup = this.layoutGroups[i];
						if(i > 0 && layoutGroup.startIndex > previousSpaceIndex) {
							++offsetCount;
						} else {
							break;
						}
						--i;
					}
					++lineIndex;
					offsetX = 2;
					if(offsetCount > 0) {
						var bumpX = this.layoutGroups[this.layoutGroups.length - offsetCount].offsetX;
						var _g12 = this.layoutGroups.length - offsetCount;
						var _g5 = this.layoutGroups.length;
						while(_g12 < _g5) {
							layoutGroup = this.layoutGroups[_g12++];
							layoutGroup.offsetX -= bumpX;
							layoutGroup.offsetY = offsetY;
							layoutGroup.lineIndex = lineIndex;
							offsetX += layoutGroup.width;
						}
					}
					layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
					layoutGroup.advances = advances2;
					layoutGroup.offsetX = offsetX;
					layoutGroup.ascent = ascent;
					layoutGroup.descent = descent;
					layoutGroup.leading = leading;
					layoutGroup.lineIndex = lineIndex;
					layoutGroup.offsetY = offsetY;
					layoutGroup.width = widthValue;
					layoutGroup.height = heightValue;
					this.layoutGroups.push(layoutGroup);
					offsetX = widthValue + spaceWidth;
					marginRight = spaceWidth;
					wrap = false;
				} else {
					if(layoutGroup != null && textIndex == spaceIndex) {
						if(formatRange.format.align != 2) {
							layoutGroup.endIndex = spaceIndex;
						}
						layoutGroup.advances.push(spaceWidth);
						marginRight += spaceWidth;
					} else if(layoutGroup == null || lineFormat.align == 2) {
						layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,spaceIndex);
						layoutGroup.advances = advances2;
						layoutGroup.offsetX = offsetX;
						layoutGroup.ascent = ascent;
						layoutGroup.descent = descent;
						layoutGroup.leading = leading;
						layoutGroup.lineIndex = lineIndex;
						layoutGroup.offsetY = offsetY;
						layoutGroup.width = widthValue;
						layoutGroup.height = heightValue;
						this.layoutGroups.push(layoutGroup);
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					} else {
						layoutGroup.endIndex = spaceIndex;
						layoutGroup.advances = layoutGroup.advances.concat(advances2);
						layoutGroup.width += marginRight + widthValue;
						layoutGroup.advances.push(spaceWidth);
						marginRight = spaceWidth;
					}
					offsetX += widthValue + spaceWidth;
				}
				textIndex = spaceIndex + 1;
				previousSpaceIndex = spaceIndex;
				spaceIndex = this.text.indexOf(" ",previousSpaceIndex + 1);
				if(formatRange.end <= previousSpaceIndex) {
					layoutGroup = null;
					if(rangeIndex < _gthis.textFormatRanges.length - 1) {
						++rangeIndex;
						formatRange = _gthis.textFormatRanges[rangeIndex];
						currentFormat.__merge(formatRange.format);
						openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
						ascent = currentFormat.size;
						descent = currentFormat.size * 0.185;
						leading = currentFormat.leading;
						heightValue = ascent + descent + leading;
						if(spaceIndex > -1) {
							spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
						}
					}
				}
				if(spaceIndex > breakIndex && breakIndex > -1 || textIndex > this.text.length || spaceIndex > formatRange.end || spaceIndex == -1 && breakIndex > -1) {
					break;
				}
			}
		} else {
			if(textIndex >= formatRange.end) {
				break;
			}
			layoutGroup = new openfl__$internal_text_TextLayoutGroup(formatRange.format,textIndex,formatRange.end);
			var text2 = this.text;
			var endIndex = formatRange.end;
			var advances3 = [];
			var _g13 = textIndex;
			while(_g13 < endIndex) advances3.push(openfl__$internal_text_TextEngine.__context.measureText(text2.charAt(_g13++)).width);
			layoutGroup.advances = advances3;
			layoutGroup.offsetX = offsetX;
			layoutGroup.ascent = ascent;
			layoutGroup.descent = descent;
			layoutGroup.leading = leading;
			layoutGroup.lineIndex = lineIndex;
			layoutGroup.offsetY = offsetY;
			var advances4 = layoutGroup.advances;
			var width2 = 0.0;
			var _g6 = 0;
			while(_g6 < advances4.length) {
				var advance2 = advances4[_g6];
				++_g6;
				width2 += advance2;
			}
			layoutGroup.width = width2;
			layoutGroup.height = heightValue;
			this.layoutGroups.push(layoutGroup);
			offsetX += layoutGroup.width;
			textIndex = formatRange.end;
			if(rangeIndex < _gthis.textFormatRanges.length - 1) {
				++rangeIndex;
				formatRange = _gthis.textFormatRanges[rangeIndex];
				currentFormat.__merge(formatRange.format);
				openfl__$internal_text_TextEngine.__context.font = openfl__$internal_text_TextEngine.getFont(currentFormat);
				ascent = currentFormat.size;
				descent = currentFormat.size * 0.185;
				leading = currentFormat.leading;
				heightValue = ascent + descent + leading;
				if(spaceIndex > -1) {
					spaceWidth = openfl__$internal_text_TextEngine.__context.measureText(" ").width;
				}
			}
		}
	}
	,setTextAlignment: function() {
		var lineIndex = -1;
		var offsetX = 0.0;
		var group;
		var lineLength;
		var _g1 = 0;
		var _g = this.layoutGroups.length;
		while(_g1 < _g) {
			var i = _g1++;
			group = this.layoutGroups[i];
			if(group.lineIndex != lineIndex) {
				lineIndex = group.lineIndex;
				switch(group.format.align) {
				case 0:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						offsetX = Math.round((this.width - 4 - this.lineWidths[lineIndex]) / 2);
					} else {
						offsetX = 0;
					}
					break;
				case 2:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						lineLength = 1;
						var _g3 = i + 1;
						var _g2 = this.layoutGroups.length;
						while(_g3 < _g2) if(this.layoutGroups[_g3++].lineIndex == lineIndex) {
							++lineLength;
						} else {
							break;
						}
						if(lineLength > 1) {
							group = this.layoutGroups[i + lineLength - 1];
							if(group.endIndex < this.text.length && this.text.charAt(group.endIndex) != "\n") {
								offsetX = (this.width - 4 - this.lineWidths[lineIndex]) / (lineLength - 1);
								var _g31 = 1;
								var _g21 = lineLength;
								while(_g31 < _g21) {
									var j = _g31++;
									this.layoutGroups[i + j].offsetX += offsetX * j;
								}
							}
						}
					}
					offsetX = 0;
					break;
				case 4:
					if(this.lineWidths[lineIndex] < this.width - 4) {
						offsetX = Math.round(this.width - 4 - this.lineWidths[lineIndex]);
					} else {
						offsetX = 0;
					}
					break;
				default:
					offsetX = 0;
				}
			}
			if(offsetX > 0) {
				group.offsetX += offsetX;
			}
		}
	}
	,update: function() {
		if(this.text == null || StringTools.trim(this.text) == "" || this.textFormatRanges.length == 0) {
			this.lineAscents.splice(0,this.lineAscents.length);
			this.lineBreaks.splice(0,this.lineBreaks.length);
			this.lineDescents.splice(0,this.lineDescents.length);
			this.lineLeadings.splice(0,this.lineLeadings.length);
			this.lineHeights.splice(0,this.lineHeights.length);
			this.lineWidths.splice(0,this.lineWidths.length);
			this.layoutGroups.splice(0,this.layoutGroups.length);
			this.textWidth = 0;
			this.textHeight = 0;
			this.numLines = 1;
			this.maxScrollH = 0;
			this.maxScrollV = 1;
			this.bottomScrollV = 1;
		} else {
			this.getLayoutGroups();
			this.getLineMeasurements();
			this.setTextAlignment();
		}
		this.getBounds();
	}
	,__class__: openfl__$internal_text_TextEngine
};
var openfl__$internal_text_TextFormatRange = function(format,start,end) {
	this.format = format;
	this.start = start;
	this.end = end;
};
$hxClasses["openfl._internal.text.TextFormatRange"] = openfl__$internal_text_TextFormatRange;
openfl__$internal_text_TextFormatRange.__name__ = ["openfl","_internal","text","TextFormatRange"];
openfl__$internal_text_TextFormatRange.prototype = {
	end: null
	,format: null
	,start: null
	,__class__: openfl__$internal_text_TextFormatRange
};
var openfl__$internal_text_TextLayoutGroup = function(format,startIndex,endIndex) {
	this.format = format;
	this.startIndex = startIndex;
	this.endIndex = endIndex;
};
$hxClasses["openfl._internal.text.TextLayoutGroup"] = openfl__$internal_text_TextLayoutGroup;
openfl__$internal_text_TextLayoutGroup.__name__ = ["openfl","_internal","text","TextLayoutGroup"];
openfl__$internal_text_TextLayoutGroup.prototype = {
	advances: null
	,ascent: null
	,descent: null
	,endIndex: null
	,format: null
	,height: null
	,leading: null
	,lineIndex: null
	,offsetX: null
	,offsetY: null
	,startIndex: null
	,width: null
	,__class__: openfl__$internal_text_TextLayoutGroup
};
var openfl_display_Application = function() {
	lime_app_Application.call(this);
	if(openfl_Lib.application == null) {
		openfl_Lib.application = this;
	}
};
$hxClasses["openfl.display.Application"] = openfl_display_Application;
openfl_display_Application.__name__ = ["openfl","display","Application"];
openfl_display_Application.__super__ = lime_app_Application;
openfl_display_Application.prototype = $extend(lime_app_Application.prototype,{
	create: function(config) {
		this.config = config;
		this.backend.create(config);
		if(config != null) {
			if(Object.prototype.hasOwnProperty.call(config,"fps")) {
				this.backend.setFrameRate(config.fps);
			}
			if(Object.prototype.hasOwnProperty.call(config,"windows")) {
				var _g1 = config.windows;
				while(0 < _g1.length) {
					this.createWindow(new openfl_display_Window(_g1[0]));
					break;
				}
			}
			if(this.preloader == null || this.preloader.complete) {
				this.onPreloadComplete();
			}
		}
	}
	,__class__: openfl_display_Application
});
var openfl_display_TextureUvs = function() {
	this.y3 = 0;
	this.y2 = 0;
	this.y1 = 0;
	this.y0 = 0;
	this.x3 = 0;
	this.x2 = 0;
	this.x1 = 0;
	this.x0 = 0;
};
$hxClasses["openfl.display.TextureUvs"] = openfl_display_TextureUvs;
openfl_display_TextureUvs.__name__ = ["openfl","display","TextureUvs"];
openfl_display_TextureUvs.prototype = {
	x0: null
	,x1: null
	,x2: null
	,x3: null
	,y0: null
	,y1: null
	,y2: null
	,y3: null
	,reset: function() {
		this.x0 = this.x1 = this.x2 = this.x3 = this.y0 = this.y1 = this.y2 = this.y3 = 0;
	}
	,__class__: openfl_display_TextureUvs
};
var openfl_display__$BlendMode_BlendMode_$Impl_$ = {};
$hxClasses["openfl.display._BlendMode.BlendMode_Impl_"] = openfl_display__$BlendMode_BlendMode_$Impl_$;
openfl_display__$BlendMode_BlendMode_$Impl_$.__name__ = ["openfl","display","_BlendMode","BlendMode_Impl_"];
openfl_display__$BlendMode_BlendMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "add":
		return 0;
	case "alpha":
		return 1;
	case "darken":
		return 2;
	case "difference":
		return 3;
	case "erase":
		return 4;
	case "hardlight":
		return 5;
	case "invert":
		return 6;
	case "layer":
		return 7;
	case "lighten":
		return 8;
	case "multiply":
		return 9;
	case "normal":
		return 10;
	case "overlay":
		return 11;
	case "screen":
		return 12;
	case "shader":
		return 13;
	case "subtract":
		return 14;
	default:
		return null;
	}
};
openfl_display__$BlendMode_BlendMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "add";
	case 1:
		return "alpha";
	case 2:
		return "darken";
	case 3:
		return "difference";
	case 4:
		return "erase";
	case 5:
		return "hardlight";
	case 6:
		return "invert";
	case 7:
		return "layer";
	case 8:
		return "lighten";
	case 9:
		return "multiply";
	case 10:
		return "normal";
	case 11:
		return "overlay";
	case 12:
		return "screen";
	case 13:
		return "shader";
	case 14:
		return "subtract";
	default:
		return null;
	}
};
var openfl_display__$CapsStyle_CapsStyle_$Impl_$ = {};
$hxClasses["openfl.display._CapsStyle.CapsStyle_Impl_"] = openfl_display__$CapsStyle_CapsStyle_$Impl_$;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.__name__ = ["openfl","display","_CapsStyle","CapsStyle_Impl_"];
openfl_display__$CapsStyle_CapsStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "round":
		return 1;
	case "square":
		return 2;
	default:
		return null;
	}
};
openfl_display__$CapsStyle_CapsStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "round";
	case 2:
		return "square";
	default:
		return null;
	}
};
var openfl_display_DirectRenderer = function(type) {
	if(type == null) {
		type = "DirectRenderer";
	}
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.DirectRenderer"] = openfl_display_DirectRenderer;
openfl_display_DirectRenderer.__name__ = ["openfl","display","DirectRenderer"];
openfl_display_DirectRenderer.__super__ = openfl_display_DisplayObject;
openfl_display_DirectRenderer.prototype = $extend(openfl_display_DisplayObject.prototype,{
	__render: null
	,get_render: function() {
		return this.__render;
	}
	,set_render: function(value) {
		return this.__render = value;
	}
	,__class__: openfl_display_DirectRenderer
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{set_render:"set_render",get_render:"get_render"})
});
var openfl_text_TextField = function() {
	openfl_display_InteractiveObject.call(this);
	this.__caretIndex = -1;
	this.__graphics = new openfl_display_Graphics();
	this.__textEngine = new openfl__$internal_text_TextEngine(this);
	this.__layoutDirty = true;
	this.__tabEnabled = true;
	if(openfl_text_TextField.__defaultTextFormat == null) {
		openfl_text_TextField.__defaultTextFormat = new openfl_text_TextFormat("Times New Roman",12,0,false,false,false,"","",3,0,0,0,0);
		openfl_text_TextField.__defaultTextFormat.blockIndent = 0;
		openfl_text_TextField.__defaultTextFormat.bullet = false;
		openfl_text_TextField.__defaultTextFormat.letterSpacing = 0;
		openfl_text_TextField.__defaultTextFormat.kerning = false;
	}
	this.__textFormat = openfl_text_TextField.__defaultTextFormat.clone();
	this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,0,0));
	this.addEventListener("mouseDown",$bind(this,this.this_onMouseDown));
};
$hxClasses["openfl.text.TextField"] = openfl_text_TextField;
openfl_text_TextField.__name__ = ["openfl","text","TextField"];
openfl_text_TextField.__defaultTextFormat = null;
openfl_text_TextField.__super__ = openfl_display_InteractiveObject;
openfl_text_TextField.prototype = $extend(openfl_display_InteractiveObject.prototype,{
	bottomScrollV: null
	,caretIndex: null
	,length: null
	,maxScrollH: null
	,maxScrollV: null
	,numLines: null
	,selectionBeginIndex: null
	,selectionEndIndex: null
	,textHeight: null
	,textWidth: null
	,__bounds: null
	,__caretIndex: null
	,__cursorTimer: null
	,__dirty: null
	,__inputEnabled: null
	,__isHTML: null
	,__layoutDirty: null
	,__selectionIndex: null
	,__showCursor: null
	,__textEngine: null
	,__textFormat: null
	,__div: null
	,appendText: function(text) {
		this.__textEngine.text += text;
		this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,getCharBoundaries: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) {
			return null;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(charIndex >= group.startIndex && charIndex <= group.endIndex) {
				var x = group.offsetX;
				var _g3 = 0;
				var _g2 = charIndex - group.startIndex;
				while(_g3 < _g2) x += group.advances[_g3++];
				return new openfl_geom_Rectangle(x,group.offsetY,group.advances[charIndex - group.startIndex],group.ascent + group.descent);
			}
		}
		return null;
	}
	,getCharIndexAtPoint: function(x,y) {
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights[_g1++];
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				if(x >= group.offsetX && x <= group.offsetX + group.width) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i = _g3++;
						advance += group.advances[i];
						if(x <= group.offsetX + advance) {
							return group.startIndex + i;
						}
					}
					return group.endIndex;
				}
			}
		}
		return -1;
	}
	,getFirstCharInParagraph: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) {
			return 0;
		}
		var index = this.__textEngine.text.indexOf("\n");
		var startIndex = 0;
		while(index > -1) {
			if(index <= charIndex) {
				startIndex = index + 1;
			} else if(index > charIndex) {
				break;
			}
			index = this.__textEngine.text.indexOf("\n",index + 1);
		}
		return startIndex;
	}
	,getLineIndexAtPoint: function(x,y) {
		this.__updateLayout();
		if(x <= 2 || x > this.get_width() + 4 || y <= 0 || y > this.get_height() + 4) {
			return -1;
		}
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights[_g1++];
		var _g2 = 0;
		var _g11 = this.__textEngine.layoutGroups;
		while(_g2 < _g11.length) {
			var group = _g11[_g2];
			++_g2;
			if(y >= group.offsetY && y <= group.offsetY + group.height) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineIndexOfChar: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) {
			return -1;
		}
		this.__updateLayout();
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.startIndex <= charIndex && group.endIndex >= charIndex) {
				return group.lineIndex;
			}
		}
		return -1;
	}
	,getLineLength: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return 0;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__textEngine.text.length;
		}
		return endIndex - startIndex;
	}
	,getLineMetrics: function(lineIndex) {
		this.__updateLayout();
		var ascender = this.__textEngine.lineAscents[lineIndex];
		var descender = this.__textEngine.lineDescents[lineIndex];
		var leading = this.__textEngine.lineLeadings[lineIndex];
		var lineHeight = this.__textEngine.lineHeights[lineIndex];
		var lineWidth = this.__textEngine.lineWidths[lineIndex];
		var margin;
		switch(this.__textFormat.align) {
		case 0:
			margin = (this.__textEngine.width - lineWidth) / 2;
			break;
		case 1:case 4:
			margin = this.__textEngine.width - lineWidth - 2;
			break;
		case 2:case 3:case 5:
			margin = 2;
			break;
		}
		return new openfl_text_TextLineMetrics(margin,lineWidth,lineHeight,ascender,descender,leading);
	}
	,getLineOffset: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return -1;
		}
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				return group.startIndex;
			}
		}
		return 0;
	}
	,getLineText: function(lineIndex) {
		this.__updateLayout();
		if(lineIndex < 0 || lineIndex > this.__textEngine.numLines - 1) {
			return null;
		}
		var startIndex = -1;
		var endIndex = -1;
		var _g = 0;
		var _g1 = this.__textEngine.layoutGroups;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.lineIndex == lineIndex) {
				if(startIndex == -1) {
					startIndex = group.startIndex;
				}
			} else if(group.lineIndex == lineIndex + 1) {
				endIndex = group.startIndex;
				break;
			}
		}
		if(endIndex == -1) {
			endIndex = this.__textEngine.text.length;
		}
		return this.__textEngine.text.substring(startIndex,endIndex);
	}
	,getParagraphLength: function(charIndex) {
		if(charIndex < 0 || charIndex > this.__textEngine.text.length - 1) {
			return 0;
		}
		var startIndex = this.getFirstCharInParagraph(charIndex);
		var endIndex = this.__textEngine.text.indexOf("\n",charIndex) + 1;
		if(endIndex == 0) {
			endIndex = this.__textEngine.text.length;
		}
		return endIndex - startIndex;
	}
	,getTextFormat: function(beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		var format = null;
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var group = _g1[_g];
			++_g;
			if(group.start <= beginIndex && group.end >= beginIndex || group.start <= endIndex && group.end >= endIndex) {
				if(format == null) {
					format = group.format.clone();
				} else {
					if(group.format.font != format.font) {
						format.font = null;
					}
					if(group.format.size != format.size) {
						format.size = null;
					}
					if(group.format.color != format.color) {
						format.color = null;
					}
					if(group.format.bold != format.bold) {
						format.bold = null;
					}
					if(group.format.italic != format.italic) {
						format.italic = null;
					}
					if(group.format.underline != format.underline) {
						format.underline = null;
					}
					if(group.format.url != format.url) {
						format.url = null;
					}
					if(group.format.target != format.target) {
						format.target = null;
					}
					if(group.format.align != format.align) {
						format.align = null;
					}
					if(group.format.leftMargin != format.leftMargin) {
						format.leftMargin = null;
					}
					if(group.format.rightMargin != format.rightMargin) {
						format.rightMargin = null;
					}
					if(group.format.indent != format.indent) {
						format.indent = null;
					}
					if(group.format.leading != format.leading) {
						format.leading = null;
					}
					if(group.format.blockIndent != format.blockIndent) {
						format.blockIndent = null;
					}
					if(group.format.bullet != format.bullet) {
						format.bullet = null;
					}
					if(group.format.kerning != format.kerning) {
						format.kerning = null;
					}
					if(group.format.letterSpacing != format.letterSpacing) {
						format.letterSpacing = null;
					}
					if(group.format.tabStops != format.tabStops) {
						format.tabStops = null;
					}
				}
			}
		}
		return format;
	}
	,replaceSelectedText: function(value) {
		if(value == "" && this.__selectionIndex == this.__caretIndex) {
			return;
		}
		var startIndex = this.__caretIndex < this.__selectionIndex?this.__caretIndex:this.__selectionIndex;
		this.replaceText(startIndex,this.__caretIndex > this.__selectionIndex?this.__caretIndex:this.__selectionIndex,value);
		this.__caretIndex = startIndex + value.length;
		this.__selectionIndex = this.__caretIndex;
	}
	,replaceText: function(beginIndex,endIndex,newText) {
		if(endIndex < beginIndex || beginIndex < 0 || endIndex > this.__textEngine.text.length || newText == null) {
			return;
		}
		this.__textEngine.text = this.__textEngine.text.substring(0,beginIndex) + newText + this.__textEngine.text.substring(endIndex);
		var offset = newText.length - (endIndex - beginIndex);
		var i = 0;
		var range;
		while(i < this.__textEngine.textFormatRanges.length) {
			range = this.__textEngine.textFormatRanges[i];
			if(range.start <= beginIndex && range.end >= endIndex) {
				range.end += offset;
				++i;
			} else if(range.start >= beginIndex && range.end <= endIndex) {
				this.__textEngine.textFormatRanges.splice(i,1);
				offset -= range.end - range.start;
			} else if(range.start > beginIndex && range.start <= endIndex) {
				range.start += offset;
				++i;
			} else {
				++i;
			}
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,setSelection: function(beginIndex,endIndex) {
		this.__selectionIndex = beginIndex;
		this.__caretIndex = endIndex;
	}
	,setTextFormat: function(format,beginIndex,endIndex) {
		if(endIndex == null) {
			endIndex = 0;
		}
		if(beginIndex == null) {
			beginIndex = 0;
		}
		if(format.font != null) {
			this.__textFormat.font = format.font;
		}
		if(format.size != null) {
			this.__textFormat.size = format.size;
		}
		if(format.color != null) {
			this.__textFormat.color = format.color;
		}
		if(format.bold != null) {
			this.__textFormat.bold = format.bold;
		}
		if(format.italic != null) {
			this.__textFormat.italic = format.italic;
		}
		if(format.underline != null) {
			this.__textFormat.underline = format.underline;
		}
		if(format.url != null) {
			this.__textFormat.url = format.url;
		}
		if(format.target != null) {
			this.__textFormat.target = format.target;
		}
		if(format.align != null) {
			this.__textFormat.align = format.align;
		}
		if(format.leftMargin != null) {
			this.__textFormat.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.__textFormat.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.__textFormat.indent = format.indent;
		}
		if(format.leading != null) {
			this.__textFormat.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.__textFormat.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.__textFormat.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.__textFormat.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.__textFormat.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.__textFormat.tabStops = format.tabStops;
		}
		this.__dirty = true;
		this.__layoutDirty = true;
	}
	,__getBounds: function(rect,matrix) {
		this.__updateLayout();
		var bounds = openfl_geom_Rectangle.__temp;
		this.__textEngine.bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__getCursor: function() {
		if(this.__textEngine.selectable) {
			return lime_ui_MouseCursor.TEXT;
		} else {
			return null;
		}
	}
	,__getPosition: function(x,y) {
		this.__updateLayout();
		x += this.get_scrollH();
		var _g1 = 0;
		var _g = this.get_scrollV() - 1;
		while(_g1 < _g) y += this.__textEngine.lineHeights[_g1++];
		if(y > this.__textEngine.textHeight) {
			y = this.__textEngine.textHeight;
		}
		var firstGroup = true;
		var group;
		var nextGroup;
		var _g11 = 0;
		var _g2 = this.__textEngine.layoutGroups.length;
		while(_g11 < _g2) {
			var i = _g11++;
			group = this.__textEngine.layoutGroups[i];
			if(i < this.__textEngine.layoutGroups.length - 1) {
				nextGroup = this.__textEngine.layoutGroups[i + 1];
			} else {
				nextGroup = null;
			}
			if(firstGroup) {
				if(y < group.offsetY) {
					y = group.offsetY;
				}
				if(x < group.offsetX) {
					x = group.offsetX;
				}
				firstGroup = false;
			}
			if(y >= group.offsetY && y <= group.offsetY + group.height || nextGroup == null) {
				if(x >= group.offsetX && x <= group.offsetX + group.width || (nextGroup == null || nextGroup.lineIndex != group.lineIndex)) {
					var advance = 0.0;
					var _g3 = 0;
					var _g21 = group.advances.length;
					while(_g3 < _g21) {
						var i1 = _g3++;
						advance += group.advances[i1];
						if(x <= group.offsetX + advance) {
							if(x <= group.offsetX + (advance - group.advances[i1]) + group.advances[i1] / 2) {
								return group.startIndex + i1;
							} else if(group.startIndex + i1 < group.endIndex) {
								return group.startIndex + i1 + 1;
							} else {
								return group.endIndex;
							}
						}
					}
					return group.endIndex;
				}
			}
		}
		return this.__textEngine.text.length;
	}
	,__hitTest: function(x,y,shapeFlag,stack,interactiveOnly,hitObject) {
		if(!hitObject.get_visible() || this.__isMask || interactiveOnly && !this.mouseEnabled) {
			return false;
		}
		if(this.get_mask() != null && !this.get_mask().__hitTestMask(x,y)) {
			return false;
		}
		this.__getWorldTransform();
		this.__updateLayout();
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(px,norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			if(stack != null) {
				stack.push(hitObject);
			}
			return true;
		}
		return false;
	}
	,__hitTestMask: function(x,y) {
		this.__getWorldTransform();
		this.__updateLayout();
		var _this = this.__worldTransform;
		var norm = _this.a * _this.d - _this.b * _this.c;
		var px = norm == 0?-_this.tx:1.0 / norm * (_this.c * (_this.ty - y) + _this.d * (x - _this.tx));
		var _this1 = this.__worldTransform;
		var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
		if(this.__textEngine.bounds.contains(px,norm1 == 0?-_this1.ty:1.0 / norm1 * (_this1.a * (y - _this1.ty) + _this1.b * (_this1.tx - x)))) {
			return true;
		}
		return false;
	}
	,__renderCairo: function(renderSession) {
		openfl__$internal_renderer_cairo_CairoTextField.render(this,renderSession);
		openfl_display_InteractiveObject.prototype.__renderCairo.call(this,renderSession);
	}
	,__renderCanvas: function(renderSession) {
		if(this.__dirty) {
			var textEngine = this.__textEngine;
			this.__updateLayout();
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				var bounds = textEngine.bounds;
				if(this.__graphics == null || this.__graphics.__canvas == null) {
					if(this.__graphics == null) {
						this.__graphics = new openfl_display_Graphics();
					}
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
					this.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
				}
				var graphics = this.__graphics;
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(textEngine.displayAsPassword) {
						var length = text.length;
						var mask = "";
						var _g1 = 0;
						var _g = length;
						while(_g1 < _g) {
							var i = _g1++;
							mask += "*";
						}
						text = mask;
					}
					graphics.__canvas.width = Math.ceil(bounds.width);
					graphics.__canvas.height = Math.ceil(bounds.height);
					if(textEngine.antiAliasType != 0 || textEngine.gridFitType != 1) {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					} else {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g11 = 0;
					var _g2 = this.get_scrollV() - 1;
					while(_g11 < _g2) {
						var i1 = _g11++;
						scrollY -= textEngine.lineHeights[i1];
					}
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g3 = 0;
					var _g12 = textEngine.layoutGroups;
					while(_g3 < _g12.length) {
						var group = _g12[_g3];
						++_g3;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g31 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g31 < _g21) {
										var i2 = _g31++;
										if(group.advances.length <= i2) {
											break;
										}
										advance += group.advances[i2];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					graphics.__canvas.width = Math.ceil(bounds.width);
					graphics.__canvas.height = Math.ceil(bounds.height);
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		if(this.__textEngine.antiAliasType == 0 && this.__textEngine.gridFitType == 1) {
			var smoothingEnabled = renderSession.context.imageSmoothingEnabled;
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = false;
				renderSession.context.msImageSmoothingEnabled = false;
				renderSession.context.imageSmoothingEnabled = false;
			}
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
			if(smoothingEnabled) {
				renderSession.context.mozImageSmoothingEnabled = true;
				renderSession.context.msImageSmoothingEnabled = true;
				renderSession.context.imageSmoothingEnabled = true;
			}
		} else {
			openfl_display_InteractiveObject.prototype.__renderCanvas.call(this,renderSession);
		}
	}
	,__renderDOM: function(renderSession) {
		var textField = this;
		var textEngine = textField.__textEngine;
		if(textField.stage != null && textField.__worldVisible && textField.__renderable) {
			if(textField.__dirty || textField.__div == null) {
				if(textEngine.text != "" || textEngine.background || textEngine.border || textEngine.type == 1) {
					if(textField.__div == null) {
						textField.__div = window.document.createElement("div");
						openfl__$internal_renderer_dom_DOMRenderer.initializeElement(textField,textField.__div,renderSession);
						textField.__style.setProperty("outline","none",null);
						textField.__div.addEventListener("input",function(event) {
							event.preventDefault();
							if(textField.get_htmlText() != textField.__div.innerHTML) {
								textField.set_htmlText(textField.__div.innerHTML);
								textField.__dirty = false;
							}
						},true);
					}
					if(textEngine.selectable) {
						textField.__style.setProperty("cursor","text",null);
					} else {
						textField.__style.setProperty("cursor","inherit",null);
					}
					textField.__div.contentEditable = textEngine.type == 1;
					var style = textField.__style;
					textField.__div.innerHTML = textEngine.text;
					if(textEngine.background) {
						style.setProperty("background-color","#" + StringTools.hex(textEngine.backgroundColor,6),null);
					} else {
						style.removeProperty("background-color");
					}
					if(textEngine.border) {
						style.setProperty("border","solid 1px #" + StringTools.hex(textEngine.borderColor,6),null);
					} else {
						style.removeProperty("border");
					}
					style.setProperty("font",openfl__$internal_text_TextEngine.getFont(textField.__textFormat),null);
					style.setProperty("color","#" + StringTools.hex(textField.__textFormat.color,6),null);
					if(textEngine.autoSize != 2) {
						style.setProperty("width","auto",null);
					} else {
						style.setProperty("width",textEngine.width + "px",null);
					}
					style.setProperty("height",textEngine.height + "px",null);
					switch(textField.__textFormat.align) {
					case 0:
						style.setProperty("text-align","center",null);
						break;
					case 4:
						style.setProperty("text-align","right",null);
						break;
					default:
						style.setProperty("text-align","left",null);
					}
					textField.__dirty = false;
				} else if(textField.__div != null) {
					renderSession.element.removeChild(textField.__div);
					textField.__div = null;
				}
			}
			if(textField.__div != null) {
				openfl__$internal_renderer_dom_DOMRenderer.applyStyle(textField,renderSession,true,true,false);
			}
		} else if(textField.__div != null) {
			renderSession.element.removeChild(textField.__div);
			textField.__div = null;
			textField.__style = null;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.__cacheAsBitmap) {
			var hasCacheMatrix = this.__cacheAsBitmapMatrix != null;
			var x = this.__cachedBitmapBounds.x;
			var y = this.__cachedBitmapBounds.y;
			var w = this.__cachedBitmapBounds.width;
			var h = this.__cachedBitmapBounds.height;
			if(this.__cacheGLMatrix == null) {
				this.__cacheGLMatrix = new openfl_geom_Matrix();
			}
			if(hasCacheMatrix) {
				var bmpBounds = openfl_geom_Rectangle.__temp;
				this.__cachedBitmapBounds.__transform(bmpBounds,this.__cacheAsBitmapMatrix);
				x = bmpBounds.x;
				y = bmpBounds.y;
				w = bmpBounds.width;
				h = bmpBounds.height;
				this.__cacheGLMatrix = this.__cacheAsBitmapMatrix.clone();
			} else {
				this.__cacheGLMatrix.identity();
			}
			if(!(w <= 0 && h <= 0)) {
				if(this.__updateCachedBitmap || this.__updateFilters) {
					if(this.__cachedFilterBounds != null) {
						w += Math.abs(this.__cachedFilterBounds.x) + Math.abs(this.__cachedFilterBounds.width);
						h += Math.abs(this.__cachedFilterBounds.y) + Math.abs(this.__cachedFilterBounds.height);
					}
					if(this.__cachedBitmap == null) {
						this.__cachedBitmap = openfl_display_BitmapData.__asRenderTexture();
					}
					this.__cachedBitmap.__resize(Math.ceil(w),Math.ceil(h));
					var m = this.__cacheGLMatrix.clone();
					m.translate(-x,-y);
					var shader = this.__shader;
					this.__shader = null;
					this.__cachedBitmap.__drawGL(renderSession,this,m,null,null,null,true,false,true);
					this.__shader = shader;
					this.__updateCachedBitmap = false;
				}
				if(this.__updateFilters) {
					openfl_filters_BitmapFilter.__applyFilters(this.__filters,renderSession,this.__cachedBitmap,this.__cachedBitmap,null,null);
					this.__updateFilters = false;
				}
				this.__cacheGLMatrix.invert();
				var _this = this.__cacheGLMatrix;
				_this.tx = x * _this.a + y * _this.c + _this.tx;
				_this.ty = x * _this.b + y * _this.d + _this.ty;
				this.__cacheGLMatrix.concat(this.__renderTransform);
				this.__cacheGLMatrix.translate(this.__offset.x,this.__offset.y);
				renderSession.spriteBatch.renderBitmapData(this.__cachedBitmap,this.__cacheAsBitmapSmooth,this.__cacheGLMatrix,this.__worldColorTransform,this.__worldAlpha,this.blendMode,this.__shader,0);
			}
			return;
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.pushRect(this.__scrollRect,this.__renderTransform);
		}
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.pushMask(this);
		}
		if(this.__dirty) {
			var textEngine = this.__textEngine;
			this.__updateLayout();
			if((textEngine.text == null || textEngine.text == "") && !textEngine.background && !textEngine.border && !textEngine.__hasFocus || (textEngine.width <= 0 || textEngine.height <= 0) && textEngine.autoSize != 2) {
				this.__graphics.__canvas = null;
				this.__graphics.__context = null;
				this.__graphics.set___dirty(false);
				this.__dirty = false;
			} else {
				var bounds = textEngine.bounds;
				if(this.__graphics == null || this.__graphics.__canvas == null) {
					if(this.__graphics == null) {
						this.__graphics = new openfl_display_Graphics();
					}
					this.__graphics.__canvas = window.document.createElement("canvas");
					this.__graphics.__context = this.__graphics.__canvas.getContext("2d");
					this.__graphics.__bounds = new openfl_geom_Rectangle(0,0,bounds.width,bounds.height);
				}
				var graphics = this.__graphics;
				openfl__$internal_renderer_canvas_CanvasTextField.context = graphics.__context;
				if(textEngine.text != null && textEngine.text != "" || textEngine.__hasFocus) {
					var text = textEngine.text;
					if(textEngine.displayAsPassword) {
						var length = text.length;
						var mask = "";
						var _g1 = 0;
						var _g = length;
						while(_g1 < _g) {
							var i = _g1++;
							mask += "*";
						}
						text = mask;
					}
					graphics.__canvas.width = Math.ceil(bounds.width);
					graphics.__canvas.height = Math.ceil(bounds.height);
					if(textEngine.antiAliasType != 0 || textEngine.gridFitType != 1) {
						graphics.__context.mozImageSmoothingEnabled = true;
						graphics.__context.msImageSmoothingEnabled = true;
						graphics.__context.imageSmoothingEnabled = true;
					} else {
						graphics.__context.mozImageSmoothingEnabled = false;
						graphics.__context.msImageSmoothingEnabled = false;
						graphics.__context.imageSmoothingEnabled = false;
					}
					if(textEngine.border || textEngine.background) {
						openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
					openfl__$internal_renderer_canvas_CanvasTextField.context.textBaseline = "top";
					openfl__$internal_renderer_canvas_CanvasTextField.context.textAlign = "start";
					var scrollX = -this.get_scrollH();
					var scrollY = 0.0;
					var _g11 = 0;
					var _g2 = this.get_scrollV() - 1;
					while(_g11 < _g2) scrollY -= textEngine.lineHeights[_g11++];
					var advance;
					var offsetY = 0.0;
					var applyHack = new EReg("(iPad|iPhone|iPod|Firefox)","g").match(window.navigator.userAgent);
					var _g3 = 0;
					var _g12 = textEngine.layoutGroups;
					while(_g3 < _g12.length) {
						var group = _g12[_g3];
						++_g3;
						if(group.lineIndex < this.get_scrollV() - 1) {
							continue;
						}
						if(group.lineIndex > this.get_scrollV() + textEngine.bottomScrollV - 2) {
							break;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.font = openfl__$internal_text_TextEngine.getFont(group.format);
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(group.format.color,6);
						if(applyHack) {
							offsetY = group.format.size * 0.185;
						}
						openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(group.startIndex,group.endIndex),group.offsetX + scrollX,group.offsetY + offsetY + scrollY);
						if(this.__caretIndex > -1 && textEngine.selectable) {
							if(this.__selectionIndex == this.__caretIndex) {
								if(this.__showCursor && group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex) {
									advance = 0.0;
									var _g31 = 0;
									var _g21 = this.__caretIndex - group.startIndex;
									while(_g31 < _g21) {
										var i1 = _g31++;
										if(group.advances.length <= i1) {
											break;
										}
										advance += group.advances[i1];
									}
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(group.offsetX + advance,group.offsetY,1,group.height);
								}
							} else if(group.startIndex <= this.__caretIndex && group.endIndex >= this.__caretIndex || group.startIndex <= this.__selectionIndex && group.endIndex >= this.__selectionIndex) {
								var selectionStart = Math.min(this.__selectionIndex,this.__caretIndex) | 0;
								var selectionEnd = Math.max(this.__selectionIndex,this.__caretIndex) | 0;
								if(group.startIndex > selectionStart) {
									selectionStart = group.startIndex;
								}
								if(group.endIndex < selectionEnd) {
									selectionEnd = group.endIndex;
								}
								var start;
								var end;
								start = this.getCharBoundaries(selectionStart);
								if(selectionEnd >= textEngine.text.length) {
									end = this.getCharBoundaries(textEngine.text.length - 1);
									end.x += end.width + 2;
								} else {
									end = this.getCharBoundaries(selectionEnd);
								}
								if(start != null && end != null) {
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#000000";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillRect(start.x,start.y,end.x - start.x,group.height);
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#FFFFFF";
									openfl__$internal_renderer_canvas_CanvasTextField.context.fillText(text.substring(selectionStart,selectionEnd),scrollX + start.x,group.offsetY + offsetY + scrollY);
								}
							}
						}
					}
				} else {
					graphics.__canvas.width = Math.ceil(bounds.width);
					graphics.__canvas.height = Math.ceil(bounds.height);
					if(textEngine.border || textEngine.background) {
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0.5,0.5,bounds.width - 1,bounds.height - 1);
						} else {
							openfl__$internal_renderer_canvas_CanvasTextField.context.rect(0,0,bounds.width,bounds.height);
						}
						if(textEngine.background) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.fillStyle = "#" + StringTools.hex(textEngine.backgroundColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.fill();
						}
						if(textEngine.border) {
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineWidth = 1;
							openfl__$internal_renderer_canvas_CanvasTextField.context.lineCap = "square";
							openfl__$internal_renderer_canvas_CanvasTextField.context.strokeStyle = "#" + StringTools.hex(textEngine.borderColor,6);
							openfl__$internal_renderer_canvas_CanvasTextField.context.stroke();
						}
					}
				}
				graphics.__bitmap = openfl_display_BitmapData.fromCanvas(this.__graphics.__canvas);
				this.__dirty = false;
				graphics.set___dirty(false);
			}
		}
		openfl__$internal_renderer_opengl_GLRenderer.renderBitmap(this,renderSession,this.__textEngine.antiAliasType != 0 || this.__textEngine.gridFitType != 1);
		if(this.__mask != null && this.__maskGraphics != null && this.__maskGraphics.__commands.get_length() > 0) {
			renderSession.maskManager.popMask();
		}
		if(this.__scrollRect != null) {
			renderSession.maskManager.popRect();
		}
	}
	,__startCursorTimer: function() {
		this.__cursorTimer = haxe_Timer.delay($bind(this,this.__startCursorTimer),600);
		this.__showCursor = !this.__showCursor;
		this.__dirty = true;
	}
	,__startTextInput: function() {
		if(this.__caretIndex < 0) {
			this.__caretIndex = this.__textEngine.text.length;
			this.__selectionIndex = this.__caretIndex;
		}
		if(this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(true);
			if(!this.__inputEnabled) {
				this.stage.window.backend.setEnableTextEvents(true);
				if(!this.stage.window.onTextInput.has($bind(this,this.window_onTextInput))) {
					this.stage.window.onTextInput.add($bind(this,this.window_onTextInput));
					this.stage.window.onKeyDown.add($bind(this,this.window_onKeyDown));
				}
				this.__inputEnabled = true;
				this.__startCursorTimer();
			}
		}
	}
	,__stopCursorTimer: function() {
		if(this.__cursorTimer != null) {
			this.__cursorTimer.stop();
			this.__cursorTimer = null;
		}
		if(this.__showCursor) {
			this.__showCursor = false;
			this.__dirty = true;
		}
	}
	,__stopTextInput: function() {
		if(this.__inputEnabled && this.stage != null) {
			this.stage.window.backend.setEnableTextEvents(false);
			this.stage.window.onTextInput.remove($bind(this,this.window_onTextInput));
			this.stage.window.onKeyDown.remove($bind(this,this.window_onKeyDown));
			this.__inputEnabled = false;
			this.__stopCursorTimer();
		}
	}
	,__updateLayout: function() {
		if(this.__layoutDirty) {
			this.__textEngine.update();
			if(this.__textEngine.autoSize != 2) {
				var cacheWidth = this.__textEngine.width;
				switch(this.__textEngine.autoSize) {
				case 0:case 1:case 3:
					if(!this.__textEngine.wordWrap) {
						this.__textEngine.width = this.__textEngine.textWidth + 4;
					}
					this.__textEngine.height = this.__textEngine.textHeight + 4;
					break;
				default:
				}
				if(this.__textEngine.width != cacheWidth) {
					switch(this.__textEngine.autoSize) {
					case 0:
						var _g1 = this;
						_g1.set_x(_g1.get_x() + (cacheWidth - this.__textEngine.width) / 2);
						break;
					case 3:
						var _g11 = this;
						_g11.set_x(_g11.get_x() + (cacheWidth - this.__textEngine.width));
						break;
					default:
					}
				}
				this.__textEngine.getBounds();
			}
			this.__layoutDirty = false;
		}
	}
	,get_antiAliasType: function() {
		return this.__textEngine.antiAliasType;
	}
	,set_antiAliasType: function(value) {
		return this.__textEngine.antiAliasType = value;
	}
	,get_autoSize: function() {
		return this.__textEngine.autoSize;
	}
	,set_autoSize: function(value) {
		if(value != this.__textEngine.autoSize) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.autoSize = value;
	}
	,get_background: function() {
		return this.__textEngine.background;
	}
	,set_background: function(value) {
		if(value != this.__textEngine.background) {
			this.__dirty = true;
		}
		return this.__textEngine.background = value;
	}
	,get_backgroundColor: function() {
		return this.__textEngine.backgroundColor;
	}
	,set_backgroundColor: function(value) {
		if(value != this.__textEngine.backgroundColor) {
			this.__dirty = true;
		}
		return this.__textEngine.backgroundColor = value;
	}
	,get_border: function() {
		return this.__textEngine.border;
	}
	,set_border: function(value) {
		if(value != this.__textEngine.border) {
			this.__dirty = true;
		}
		return this.__textEngine.border = value;
	}
	,get_borderColor: function() {
		return this.__textEngine.borderColor;
	}
	,set_borderColor: function(value) {
		if(value != this.__textEngine.borderColor) {
			this.__dirty = true;
		}
		return this.__textEngine.borderColor = value;
	}
	,get_bottomScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.bottomScrollV;
	}
	,get_caretIndex: function() {
		return this.__caretIndex;
	}
	,get_defaultTextFormat: function() {
		return this.__textFormat.clone();
	}
	,set_defaultTextFormat: function(value) {
		this.__textFormat.__merge(value);
		this.__layoutDirty = true;
		this.__dirty = true;
		return value;
	}
	,get_displayAsPassword: function() {
		return this.__textEngine.displayAsPassword;
	}
	,set_displayAsPassword: function(value) {
		if(value != this.__textEngine.displayAsPassword) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.displayAsPassword = value;
	}
	,get_embedFonts: function() {
		return this.__textEngine.embedFonts;
	}
	,set_embedFonts: function(value) {
		return this.__textEngine.embedFonts = value;
	}
	,get_gridFitType: function() {
		return this.__textEngine.gridFitType;
	}
	,set_gridFitType: function(value) {
		return this.__textEngine.gridFitType = value;
	}
	,get_height: function() {
		this.__updateLayout();
		return this.__textEngine.height;
	}
	,set_height: function(value) {
		if(this.get_scaleY() != 1 || value != this.__textEngine.height) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleY(1);
		return this.__textEngine.height = value;
	}
	,get_htmlText: function() {
		return this.__textEngine.text;
	}
	,set_htmlText: function(value) {
		if(!this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.__isHTML = true;
		if(this.__div == null) {
			value = value.replace(new RegExp("<br>","g".split("u").join("")),"\n");
			value = value.replace(new RegExp("<br/>","g".split("u").join("")),"\n");
			var segments = value.split("<font");
			if(segments.length == 1) {
				value = value.replace(new RegExp("<.*?>","g".split("u").join("")),"");
				if(this.__textEngine.textFormatRanges.length > 1) {
					this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
				}
				var range = this.__textEngine.textFormatRanges[0];
				range.format = this.__textFormat;
				range.start = 0;
				range.end = value.length;
				return this.__textEngine.text = value;
			} else {
				this.__textEngine.textFormatRanges.splice(0,this.__textEngine.textFormatRanges.length);
				value = "";
				var _g = 0;
				while(_g < segments.length) {
					var segment = segments[_g];
					++_g;
					if(segment == "") {
						continue;
					}
					var closeFontIndex = segment.indexOf("</font>");
					if(closeFontIndex > -1) {
						var start = segment.indexOf(">") + 1;
						var format = this.__textFormat.clone();
						var faceIndex = segment.indexOf("face=");
						var colorIndex = segment.indexOf("color=");
						var sizeIndex = segment.indexOf("size=");
						if(faceIndex > -1 && faceIndex < start) {
							format.font = HxOverrides.substr(segment,faceIndex + 6,segment.indexOf("\"",faceIndex));
						}
						if(colorIndex > -1 && colorIndex < start) {
							format.color = Std.parseInt("0x" + HxOverrides.substr(segment,colorIndex + 8,6));
						}
						if(sizeIndex > -1 && sizeIndex < start) {
							format.size = Std.parseInt(HxOverrides.substr(segment,sizeIndex + 6,segment.indexOf("\"",sizeIndex)));
						}
						var sub = segment.substring(start,closeFontIndex);
						sub = sub.replace(new RegExp("<.*?>","g".split("u").join("")),"");
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(format,value.length,value.length + sub.length));
						value += sub;
						if(closeFontIndex + 7 < segment.length) {
							sub = HxOverrides.substr(segment,closeFontIndex + 7,null);
							this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + sub.length));
							value += sub;
						}
					} else {
						this.__textEngine.textFormatRanges.push(new openfl__$internal_text_TextFormatRange(this.__textFormat,value.length,value.length + segment.length));
						value += segment;
					}
				}
			}
		}
		return this.__textEngine.text = value;
	}
	,get_length: function() {
		if(this.__textEngine.text != null) {
			return this.__textEngine.text.length;
		}
		return 0;
	}
	,get_maxChars: function() {
		return this.__textEngine.maxChars;
	}
	,set_maxChars: function(value) {
		if(value != this.__textEngine.maxChars) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.maxChars = value;
	}
	,get_maxScrollH: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollH;
	}
	,get_maxScrollV: function() {
		this.__updateLayout();
		return this.__textEngine.maxScrollV;
	}
	,get_multiline: function() {
		return this.__textEngine.multiline;
	}
	,set_multiline: function(value) {
		if(value != this.__textEngine.multiline) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.multiline = value;
	}
	,get_numLines: function() {
		this.__updateLayout();
		return this.__textEngine.numLines;
	}
	,get_restrict: function() {
		return this.__textEngine.restrict;
	}
	,set_restrict: function(value) {
		return this.__textEngine.restrict = value;
	}
	,get_scrollH: function() {
		return this.__textEngine.scrollH;
	}
	,set_scrollH: function(value) {
		if(value > this.__textEngine.maxScrollH) {
			value = this.__textEngine.maxScrollH;
		}
		if(value < 0) {
			value = 0;
		}
		if(value != this.__textEngine.scrollH) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollH = value;
	}
	,get_scrollV: function() {
		return this.__textEngine.scrollV;
	}
	,set_scrollV: function(value) {
		if(value > this.__textEngine.maxScrollV) {
			value = this.__textEngine.maxScrollV;
		}
		if(value < 1) {
			value = 1;
		}
		if(value != this.__textEngine.scrollV) {
			this.__dirty = true;
		}
		return this.__textEngine.scrollV = value;
	}
	,get_selectable: function() {
		return this.__textEngine.selectable;
	}
	,set_selectable: function(value) {
		if(value != this.__textEngine.selectable && this.get_type() == 1) {
			if(this.stage != null && this.stage.get_focus() == this) {
				this.__startTextInput();
			} else if(!value) {
				this.__stopTextInput();
			}
		}
		return this.__textEngine.selectable = value;
	}
	,get_selectionBeginIndex: function() {
		return Math.min(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_selectionEndIndex: function() {
		return Math.max(this.__caretIndex,this.__selectionIndex) | 0;
	}
	,get_sharpness: function() {
		return this.__textEngine.sharpness;
	}
	,set_sharpness: function(value) {
		if(value != this.__textEngine.sharpness) {
			this.__dirty = true;
		}
		return this.__textEngine.sharpness = value;
	}
	,get_text: function() {
		return this.__textEngine.text;
	}
	,set_text: function(value) {
		if(this.__isHTML || this.__textEngine.text != value) {
			this.__dirty = true;
			this.__layoutDirty = true;
		} else {
			return value;
		}
		if(this.__textEngine.textFormatRanges.length > 1) {
			this.__textEngine.textFormatRanges.splice(1,this.__textEngine.textFormatRanges.length - 1);
		}
		var range = this.__textEngine.textFormatRanges[0];
		range.format = this.__textFormat;
		range.start = 0;
		range.end = value.length;
		this.__isHTML = false;
		return this.__textEngine.text = value;
	}
	,get_textColor: function() {
		return this.__textFormat.color;
	}
	,set_textColor: function(value) {
		if(value != this.__textFormat.color) {
			this.__dirty = true;
		}
		var _g = 0;
		var _g1 = this.__textEngine.textFormatRanges;
		while(_g < _g1.length) {
			var range = _g1[_g];
			++_g;
			range.format.color = value;
		}
		return this.__textFormat.color = value;
	}
	,get_textWidth: function() {
		this.__updateLayout();
		return this.__textEngine.textWidth;
	}
	,get_textHeight: function() {
		this.__updateLayout();
		return this.__textEngine.textHeight;
	}
	,get_type: function() {
		return this.__textEngine.type;
	}
	,set_type: function(value) {
		if(value != this.__textEngine.type) {
			if(value == 1) {
				this.addEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.addEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.addEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.this_onFocusIn(null);
			} else {
				this.removeEventListener("focusIn",$bind(this,this.this_onFocusIn));
				this.removeEventListener("focusOut",$bind(this,this.this_onFocusOut));
				this.removeEventListener("addedToStage",$bind(this,this.this_onAddedToStage));
				this.__stopTextInput();
			}
			this.__dirty = true;
		}
		return this.__textEngine.type = value;
	}
	,get_width: function() {
		this.__updateLayout();
		return this.__textEngine.width;
	}
	,set_width: function(value) {
		if(this.get_scaleX() != 1 || this.__textEngine.width != value) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		this.set_scaleX(1);
		return this.__textEngine.width = value;
	}
	,get_wordWrap: function() {
		return this.__textEngine.wordWrap;
	}
	,set_wordWrap: function(value) {
		if(value != this.__textEngine.wordWrap) {
			this.__dirty = true;
			this.__layoutDirty = true;
		}
		return this.__textEngine.wordWrap = value;
	}
	,stage_onMouseMove: function(event) {
		if(this.stage == null) {
			return;
		}
		if(this.__textEngine.selectable && this.__selectionIndex >= 0) {
			this.__updateLayout();
			var position = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			if(position != this.__caretIndex) {
				this.__caretIndex = position;
				this.__dirty = true;
			}
		}
	}
	,stage_onMouseUp: function(event) {
		if(this.stage == null) {
			return;
		}
		this.stage.removeEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.removeEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
		if(this.stage.get_focus() == this) {
			this.__getWorldTransform();
			this.__updateLayout();
			var _this = this.__worldTransform;
			var norm = _this.a * _this.d - _this.b * _this.c;
			var _this1 = this.__worldTransform;
			var norm1 = _this1.a * _this1.d - _this1.b * _this1.c;
			var upPos = this.__getPosition(this.get_mouseX(),this.get_mouseY());
			var leftPos;
			var rightPos;
			leftPos = Math.min(this.__selectionIndex,upPos) | 0;
			rightPos = Math.max(this.__selectionIndex,upPos) | 0;
			this.__selectionIndex = leftPos;
			this.__caretIndex = rightPos;
			if(this.__inputEnabled) {
				this.this_onFocusIn(null);
				this.__stopCursorTimer();
				this.__startCursorTimer();
			}
		}
	}
	,this_onAddedToStage: function(event) {
		this.this_onFocusIn(null);
	}
	,this_onFocusIn: function(event) {
		if(this.get_selectable() && this.get_type() == 1 && this.stage != null && this.stage.get_focus() == this) {
			this.__startTextInput();
		}
	}
	,this_onFocusOut: function(event) {
		this.__stopTextInput();
	}
	,this_onMouseDown: function(event) {
		if(!this.get_selectable()) {
			return;
		}
		this.__updateLayout();
		this.__caretIndex = this.__getPosition(this.get_mouseX(),this.get_mouseY());
		this.__selectionIndex = this.__caretIndex;
		this.__dirty = true;
		this.stage.addEventListener("mouseMove",$bind(this,this.stage_onMouseMove));
		this.stage.addEventListener("mouseUp",$bind(this,this.stage_onMouseUp));
	}
	,window_onKeyDown: function(key,modifier) {
		switch(key) {
		case 8:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex > 0) {
				this.__selectionIndex = this.__caretIndex - 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 99:
			if(modifier == 64 || modifier == 128) {
				lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
			}
			break;
		case 118:
			if(modifier == 64 || modifier == 128) {
				var text = lime_system_Clipboard.get_text();
				if(text != null) {
					this.replaceSelectedText(text);
				} else {
					this.replaceSelectedText("");
				}
				this.dispatchEvent(new openfl_events_Event("change",true));
			} else {
				this.__textEngine.textFormatRanges[this.__textEngine.textFormatRanges.length - 1].end = this.__textEngine.text.length;
			}
			break;
		case 120:
			if(modifier == 64 || modifier == 128) {
				lime_system_Clipboard.set_text(this.__textEngine.text.substring(this.__caretIndex,this.__selectionIndex));
				if(this.__caretIndex != this.__selectionIndex) {
					this.replaceSelectedText("");
					this.dispatchEvent(new openfl_events_Event("change",true));
				}
			}
			break;
		case 127:
			if(this.__selectionIndex == this.__caretIndex && this.__caretIndex < this.__textEngine.text.length) {
				this.__selectionIndex = this.__caretIndex + 1;
			}
			if(this.__selectionIndex != this.__caretIndex) {
				this.replaceSelectedText("");
				this.__selectionIndex = this.__caretIndex;
				this.dispatchEvent(new openfl_events_Event("change",true));
			}
			break;
		case 1073741903:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex < this.__textEngine.text.length) {
					this.__caretIndex++;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex < this.__textEngine.text.length) {
						this.__caretIndex++;
					}
				} else {
					this.__caretIndex = Math.max(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		case 1073741904:
			if(lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)) {
				if(this.__caretIndex > 0) {
					this.__caretIndex--;
				}
			} else {
				if(this.__selectionIndex == this.__caretIndex) {
					if(this.__caretIndex > 0) {
						this.__caretIndex--;
					}
				} else {
					this.__caretIndex = Math.min(this.__caretIndex,this.__selectionIndex) | 0;
				}
				this.__selectionIndex = this.__caretIndex;
			}
			this.__stopCursorTimer();
			this.__startCursorTimer();
			break;
		default:
		}
	}
	,window_onTextInput: function(value) {
		this.replaceSelectedText(value);
		this.dispatchEvent(new openfl_events_Event("change",true));
	}
	,__class__: openfl_text_TextField
	,__properties__: $extend(openfl_display_InteractiveObject.prototype.__properties__,{set_wordWrap:"set_wordWrap",get_wordWrap:"get_wordWrap",set_type:"set_type",get_type:"get_type",get_textWidth:"get_textWidth",get_textHeight:"get_textHeight",set_textColor:"set_textColor",get_textColor:"get_textColor",set_text:"set_text",get_text:"get_text",set_sharpness:"set_sharpness",get_sharpness:"get_sharpness",get_selectionEndIndex:"get_selectionEndIndex",get_selectionBeginIndex:"get_selectionBeginIndex",set_selectable:"set_selectable",get_selectable:"get_selectable",set_scrollV:"set_scrollV",get_scrollV:"get_scrollV",set_scrollH:"set_scrollH",get_scrollH:"get_scrollH",set_restrict:"set_restrict",get_restrict:"get_restrict",get_numLines:"get_numLines",set_multiline:"set_multiline",get_multiline:"get_multiline",get_maxScrollV:"get_maxScrollV",get_maxScrollH:"get_maxScrollH",set_maxChars:"set_maxChars",get_maxChars:"get_maxChars",get_length:"get_length",set_htmlText:"set_htmlText",get_htmlText:"get_htmlText",set_gridFitType:"set_gridFitType",get_gridFitType:"get_gridFitType",set_embedFonts:"set_embedFonts",get_embedFonts:"get_embedFonts",set_displayAsPassword:"set_displayAsPassword",get_displayAsPassword:"get_displayAsPassword",set_defaultTextFormat:"set_defaultTextFormat",get_defaultTextFormat:"get_defaultTextFormat",get_caretIndex:"get_caretIndex",get_bottomScrollV:"get_bottomScrollV",set_borderColor:"set_borderColor",get_borderColor:"get_borderColor",set_border:"set_border",get_border:"get_border",set_backgroundColor:"set_backgroundColor",get_backgroundColor:"get_backgroundColor",set_background:"set_background",get_background:"get_background",set_autoSize:"set_autoSize",get_autoSize:"get_autoSize",set_antiAliasType:"set_antiAliasType",get_antiAliasType:"get_antiAliasType"})
});
var openfl_display_FPS = function(x,y,color) {
	if(color == null) {
		color = 0;
	}
	if(y == null) {
		y = 10;
	}
	if(x == null) {
		x = 10;
	}
	openfl_text_TextField.call(this);
	this.set_x(x);
	this.set_y(y);
	this.currentFPS = 0;
	this.set_selectable(false);
	this.mouseEnabled = false;
	this.set_defaultTextFormat(new openfl_text_TextFormat("_sans",12,color));
	this.set_text("FPS: ");
	this.cacheCount = 0;
	this.times = [];
	this.addEventListener("enterFrame",$bind(this,this.this_onEnterFrame));
};
$hxClasses["openfl.display.FPS"] = openfl_display_FPS;
openfl_display_FPS.__name__ = ["openfl","display","FPS"];
openfl_display_FPS.__super__ = openfl_text_TextField;
openfl_display_FPS.prototype = $extend(openfl_text_TextField.prototype,{
	currentFPS: null
	,cacheCount: null
	,times: null
	,this_onEnterFrame: function(event) {
		var currentTime = haxe_Timer.stamp();
		this.times.push(currentTime);
		while(this.times[0] < currentTime - 1) this.times.shift();
		var currentCount = this.times.length;
		this.currentFPS = Math.round((currentCount + this.cacheCount) / 2);
		if(currentCount != this.cacheCount) {
			this.set_text("FPS: " + this.currentFPS);
		}
		this.cacheCount = currentCount;
	}
	,__class__: openfl_display_FPS
});
var openfl_display_FrameLabel = function(name,frame) {
	openfl_events_EventDispatcher.call(this);
	this.__name = name;
	this.__frame = frame;
};
$hxClasses["openfl.display.FrameLabel"] = openfl_display_FrameLabel;
openfl_display_FrameLabel.__name__ = ["openfl","display","FrameLabel"];
openfl_display_FrameLabel.__super__ = openfl_events_EventDispatcher;
openfl_display_FrameLabel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	frame: null
	,name: null
	,__frame: null
	,__name: null
	,get_frame: function() {
		return this.__frame;
	}
	,get_name: function() {
		return this.__name;
	}
	,__class__: openfl_display_FrameLabel
	,__properties__: {get_name:"get_name",get_frame:"get_frame"}
});
var openfl_display__$GradientType_GradientType_$Impl_$ = {};
$hxClasses["openfl.display._GradientType.GradientType_Impl_"] = openfl_display__$GradientType_GradientType_$Impl_$;
openfl_display__$GradientType_GradientType_$Impl_$.__name__ = ["openfl","display","_GradientType","GradientType_Impl_"];
openfl_display__$GradientType_GradientType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linear":
		return 0;
	case "radial":
		return 1;
	default:
		return null;
	}
};
openfl_display__$GradientType_GradientType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linear";
	case 1:
		return "radial";
	default:
		return null;
	}
};
var openfl_display_Graphics = function() {
	this.__glStack = [];
	this.__dirty = true;
	this.__commands = new openfl__$internal_renderer_DrawCommandBuffer();
	this.__strokePadding = 0;
	this.__positionX = 0;
	this.__positionY = 0;
	this.__hardware = true;
	this.moveTo(0,0);
};
$hxClasses["openfl.display.Graphics"] = openfl_display_Graphics;
openfl_display_Graphics.__name__ = ["openfl","display","Graphics"];
openfl_display_Graphics.prototype = {
	__hardware: null
	,__bounds: null
	,__commands: null
	,__dirty: null
	,__glStack: null
	,__drawPaths: null
	,__image: null
	,__positionX: null
	,__positionY: null
	,__strokePadding: null
	,__transformDirty: null
	,__visible: null
	,__cachedTexture: null
	,__owner: null
	,__canvas: null
	,__context: null
	,__bitmap: null
	,beginBitmapFill: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.beginBitmapFill(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
		this.__visible = true;
	}
	,beginFill: function(color,alpha) {
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		this.__commands.beginFill(color & 16777215,alpha);
		if(alpha > 0) {
			this.__visible = true;
		}
	}
	,beginGradientFill: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.beginGradientFill(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
		this.__hardware = false;
		var _g = 0;
		while(_g < alphas.length) {
			var alpha = alphas[_g];
			++_g;
			if(alpha > 0) {
				this.__visible = true;
				break;
			}
		}
	}
	,clear: function() {
		this.__commands.clear();
		this.__strokePadding = 0;
		if(this.__bounds != null) {
			this.set___dirty(true);
			this.__transformDirty = true;
			this.__bounds = null;
		}
		this.__visible = false;
		this.__hardware = true;
		this.moveTo(0,0);
	}
	,copyFrom: function(sourceGraphics) {
		this.__bounds = sourceGraphics.__bounds != null?sourceGraphics.__bounds.clone():null;
		this.__commands = sourceGraphics.__commands.copy();
		this.set___dirty(true);
		this.__strokePadding = sourceGraphics.__strokePadding;
		this.__positionX = sourceGraphics.__positionX;
		this.__positionY = sourceGraphics.__positionY;
		this.__transformDirty = true;
		this.__visible = sourceGraphics.__visible;
	}
	,cubicCurveTo: function(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix1;
		var iy1;
		var ix2;
		var iy2;
		ix1 = anchorX;
		ix2 = anchorX;
		if(!((controlX1 < anchorX && controlX1 > this.__positionX || controlX1 > anchorX && controlX1 < this.__positionX) && (controlX2 < anchorX && controlX2 > this.__positionX || controlX2 > anchorX && controlX2 < this.__positionX))) {
			var u = 2 * this.__positionX - 4 * controlX1 + 2 * controlX2;
			var v = controlX1 - this.__positionX;
			var w = -this.__positionX + 3 * controlX1 + anchorX - 3 * controlX2;
			var t1 = (-u + Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			var t2 = (-u - Math.sqrt(u * u - 4 * v * w)) / (2 * w);
			if(t1 > 0 && t1 < 1) {
				ix1 = this.__calculateBezierCubicPoint(t1,this.__positionX,controlX1,controlX2,anchorX);
			}
			if(t2 > 0 && t2 < 1) {
				ix2 = this.__calculateBezierCubicPoint(t2,this.__positionX,controlX1,controlX2,anchorX);
			}
		}
		iy1 = anchorY;
		iy2 = anchorY;
		if(!((controlY1 < anchorY && controlY1 > this.__positionX || controlY1 > anchorY && controlY1 < this.__positionX) && (controlY2 < anchorY && controlY2 > this.__positionX || controlY2 > anchorY && controlY2 < this.__positionX))) {
			var u1 = 2 * this.__positionX - 4 * controlY1 + 2 * controlY2;
			var v1 = controlY1 - this.__positionX;
			var w1 = -this.__positionX + 3 * controlY1 + anchorY - 3 * controlY2;
			var t11 = (-u1 + Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			var t21 = (-u1 - Math.sqrt(u1 * u1 - 4 * v1 * w1)) / (2 * w1);
			if(t11 > 0 && t11 < 1) {
				iy1 = this.__calculateBezierCubicPoint(t11,this.__positionX,controlY1,controlY2,anchorY);
			}
			if(t21 > 0 && t21 < 1) {
				iy2 = this.__calculateBezierCubicPoint(t21,this.__positionX,controlY1,controlY2,anchorY);
			}
		}
		this.__inflateBounds(ix1 - this.__strokePadding,iy1 - this.__strokePadding);
		this.__inflateBounds(ix1 + this.__strokePadding,iy1 + this.__strokePadding);
		this.__inflateBounds(ix2 - this.__strokePadding,iy2 - this.__strokePadding);
		this.__inflateBounds(ix2 + this.__strokePadding,iy2 + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.cubicCurveTo(controlX1,controlY1,controlX2,controlY2,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		var ix;
		var iy;
		if(controlX < anchorX && controlX > this.__positionX || controlX > anchorX && controlX < this.__positionX) {
			ix = anchorX;
		} else {
			ix = this.__calculateBezierQuadPoint((this.__positionX - controlX) / (this.__positionX - 2 * controlX + anchorX),this.__positionX,controlX,anchorX);
		}
		if(controlY < anchorY && controlY > this.__positionY || controlY > anchorY && controlY < this.__positionY) {
			iy = anchorY;
		} else {
			iy = this.__calculateBezierQuadPoint((this.__positionY - controlY) / (this.__positionY - 2 * controlY + anchorY),this.__positionY,controlY,anchorY);
		}
		this.__inflateBounds(ix - this.__strokePadding,iy - this.__strokePadding);
		this.__inflateBounds(ix + this.__strokePadding,iy + this.__strokePadding);
		this.__positionX = anchorX;
		this.__positionY = anchorY;
		this.__commands.curveTo(controlX,controlY,anchorX,anchorY);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawCircle: function(x,y,radius) {
		if(radius <= 0) {
			return;
		}
		this.__inflateBounds(x - radius - this.__strokePadding,y - radius - this.__strokePadding);
		this.__inflateBounds(x + radius + this.__strokePadding,y + radius + this.__strokePadding);
		this.__commands.drawCircle(x,y,radius);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawEllipse: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawEllipse(x,y,width,height);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawGraphicsData: function(graphicsData) {
		var fill;
		var bitmapFill;
		var gradientFill;
		var stroke;
		var path;
		var _g = 0;
		while(_g < graphicsData.length) {
			var graphics = graphicsData.data[_g];
			++_g;
			if(js_Boot.__instanceof(graphics,openfl_display_GraphicsSolidFill)) {
				fill = graphics;
				this.beginFill(fill.color,fill.alpha);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsBitmapFill)) {
				bitmapFill = graphics;
				this.beginBitmapFill(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsGradientFill)) {
				gradientFill = graphics;
				this.beginGradientFill(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsStroke)) {
				stroke = graphics;
				if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsSolidFill)) {
					fill = stroke.fill;
					this.lineStyle(stroke.thickness,fill.color,fill.alpha,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
				} else {
					this.lineStyle(stroke.thickness,0,1,stroke.pixelHinting,stroke.scaleMode,stroke.caps,stroke.joints,stroke.miterLimit);
					if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsBitmapFill)) {
						bitmapFill = stroke.fill;
						this.lineBitmapStyle(bitmapFill.bitmapData,bitmapFill.matrix,bitmapFill.repeat,bitmapFill.smooth);
					} else if(js_Boot.__instanceof(stroke.fill,openfl_display_GraphicsGradientFill)) {
						gradientFill = stroke.fill;
						this.lineGradientStyle(gradientFill.type,gradientFill.colors,gradientFill.alphas,gradientFill.ratios,gradientFill.matrix,gradientFill.spreadMethod,gradientFill.interpolationMethod,gradientFill.focalPointRatio);
					}
				}
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsPath)) {
				path = graphics;
				this.drawPath(path.commands,path.data,path.winding);
			} else if(js_Boot.__instanceof(graphics,openfl_display_GraphicsEndFill)) {
				this.endFill();
			}
		}
	}
	,drawPath: function(commands,data,winding) {
		if(winding == null) {
			winding = "evenOdd";
		}
		var dataIndex = 0;
		var _g = 0;
		try {
			while(_g < commands.length) {
				var command = commands.data[_g];
				++_g;
				if(command != null) {
					switch(command) {
					case 1:
						this.moveTo(data.data[dataIndex],data.data[dataIndex + 1]);
						dataIndex += 2;
						break;
					case 2:
						this.lineTo(data.data[dataIndex],data.data[dataIndex + 1]);
						dataIndex += 2;
						break;
					case 3:
						this.curveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3]);
						dataIndex += 4;
						break;
					case 4:
						this.moveTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
						throw "__break__";
						break;
					case 5:
						this.lineTo(data.data[dataIndex + 2],data.data[dataIndex + 3]);
						throw "__break__";
						break;
					case 6:
						this.cubicCurveTo(data.data[dataIndex],data.data[dataIndex + 1],data.data[dataIndex + 2],data.data[dataIndex + 3],data.data[dataIndex + 4],data.data[dataIndex + 5]);
						dataIndex += 6;
						break;
					default:
					}
				}
			}
		} catch( e ) { if( e != "__break__" ) throw e; }
	}
	,drawRect: function(x,y,width,height) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRect(x,y,width,height);
		this.set___dirty(true);
	}
	,drawRoundRect: function(x,y,width,height,ellipseWidth,ellipseHeight) {
		if(width <= 0 || height <= 0) {
			return;
		}
		this.__inflateBounds(x - this.__strokePadding,y - this.__strokePadding);
		this.__inflateBounds(x + width + this.__strokePadding,y + height + this.__strokePadding);
		this.__commands.drawRoundRect(x,y,width,height,ellipseWidth,ellipseHeight);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,drawRoundRectComplex: function(x,y,width,height,topLeftRadius,topRightRadius,bottomLeftRadius,bottomRightRadius) {
		openfl_Lib.notImplemented("Graphics.drawRoundRectComplex");
	}
	,drawTiles: function(sheet,tileData,smooth,flags,shader,count) {
		if(count == null) {
			count = -1;
		}
		if(flags == null) {
			flags = 0;
		}
		if(smooth == null) {
			smooth = false;
		}
		var useScale = (flags & 1) > 0;
		var useRotation = (flags & 2) > 0;
		var useRGB = (flags & 4) > 0;
		var useAlpha = (flags & 8) > 0;
		var useTransform = (flags & 16) > 0;
		var useColorTransform = (flags & 128) > 0;
		var useRect = (flags & 32) > 0;
		var useOrigin = (flags & 64) > 0;
		var rect = openfl_geom_Rectangle.__temp;
		var matrix = openfl_geom_Matrix.__temp;
		var numValues = 3;
		var totalCount = count;
		if(count < 0) {
			totalCount = tileData.length;
		}
		if(useTransform || useScale || useRotation || useRGB || useAlpha || useColorTransform) {
			var scaleIndex = 0;
			var rotationIndex = 0;
			var transformIndex = 0;
			if(useRect) {
				if(useOrigin) {
					numValues = 8;
				} else {
					numValues = 6;
				}
			}
			if(useScale) {
				scaleIndex = numValues;
				++numValues;
			}
			if(useRotation) {
				rotationIndex = numValues;
				++numValues;
			}
			if(useTransform) {
				transformIndex = numValues;
				numValues += 4;
			}
			if(useRGB) {
				numValues += 3;
			}
			if(useAlpha) {
				++numValues;
			}
			if(useColorTransform) {
				numValues += 4;
			}
			var index = 0;
			var cacheID = -1;
			var x;
			var y;
			var id;
			var scale;
			var rotation;
			var tileWidth;
			var tileHeight;
			var originX;
			var originY;
			var tile = null;
			var tilePoint = null;
			while(index < totalCount) {
				x = tileData[index];
				y = tileData[index + 1];
				if(!useRect) {
					id = tileData[index + 2] | 0;
				} else {
					id = -1;
				}
				scale = 1.0;
				rotation = 0.0;
				if(useScale) {
					scale = tileData[index + scaleIndex];
				}
				if(useRotation) {
					rotation = tileData[index + rotationIndex];
				}
				if(id < 0) {
					tile = null;
				} else if(!useRect && cacheID != id) {
					cacheID = id;
					tile = sheet.__tileRects[id];
					tilePoint = sheet.__centerPoints[id];
				} else if(useRect) {
					tile = sheet.__rectTile;
					tile.setTo(tileData[index + 2],tileData[index + 3],tileData[index + 4],tileData[index + 5]);
					tilePoint = sheet.__point;
					if(useOrigin) {
						tilePoint.setTo(tileData[index + 6] / tile.width,tileData[index + 7] / tile.height);
					} else {
						tilePoint.setTo(0,0);
					}
				}
				if(tile != null) {
					if(useTransform) {
						rect.setTo(0,0,tile.width,tile.height);
						matrix.setTo(tileData[index + transformIndex],tileData[index + transformIndex + 1],tileData[index + transformIndex + 2],tileData[index + transformIndex + 3],0,0);
						originX = tilePoint.x * scale;
						originY = tilePoint.y * scale;
						matrix.translate(x - (originX * matrix.a + originY * matrix.c + matrix.tx),y - (originX * matrix.b + originY * matrix.d + matrix.ty));
						rect.__transform(rect,matrix);
						this.__inflateBounds(rect.x,rect.y);
						this.__inflateBounds(rect.get_right(),rect.get_bottom());
					} else {
						tileWidth = tile.width * scale;
						tileHeight = tile.height * scale;
						x -= tilePoint.x * tileWidth;
						y -= tilePoint.y * tileHeight;
						if(rotation != 0) {
							rect.setTo(0,0,tileWidth,tileHeight);
							matrix.identity();
							matrix.rotate(rotation);
							matrix.translate(x,y);
							rect.__transform(rect,matrix);
							this.__inflateBounds(rect.x,rect.y);
							this.__inflateBounds(rect.get_right(),rect.get_bottom());
						} else {
							this.__inflateBounds(x,y);
							this.__inflateBounds(x + tileWidth,y + tileHeight);
						}
					}
				}
				index += numValues;
			}
		} else {
			var x1;
			var y1;
			var id1;
			var tile1;
			var centerPoint;
			var originX1;
			var originY1;
			var rect1 = openfl_geom_Rectangle.__temp;
			var index1 = 0;
			while(index1 < totalCount) {
				x1 = tileData[index1++];
				y1 = tileData[index1++];
				if(!useRect) {
					id1 = tileData[index1++] | 0;
				} else {
					id1 = -1;
				}
				originX1 = 0.0;
				originY1 = 0.0;
				if(useRect) {
					rect1.setTo(tileData[index1++],tileData[index1++],tileData[index1++],tileData[index1++]);
					if(useOrigin) {
						originX1 = tileData[index1++];
						originY1 = tileData[index1++];
					}
					this.__inflateBounds(x1 - originX1,y1 - originY1);
					this.__inflateBounds(x1 - originX1 + rect1.width,y1 - originY1 + rect1.height);
				} else {
					tile1 = sheet.__tileRects[id1];
					if(tile1 != null) {
						centerPoint = sheet.__centerPoints[id1];
						originX1 = centerPoint.x * tile1.width;
						originY1 = centerPoint.y * tile1.height;
						this.__inflateBounds(x1 - originX1,y1 - originY1);
						this.__inflateBounds(x1 - originX1 + tile1.width,y1 - originY1 + tile1.height);
					}
				}
			}
		}
		this.__commands.drawTiles(sheet,tileData,smooth,flags,shader,count);
		this.set___dirty(true);
		this.__visible = true;
	}
	,drawTriangles: function(vertices,indices,uvtData,culling) {
		if(culling == null) {
			culling = 1;
		}
		var vlen = vertices.length / 2 | 0;
		if(culling == null) {
			culling = 1;
		}
		if(indices == null) {
			if(vlen % 3 != 0) {
				throw new js__$Boot_HaxeError(new openfl_errors_ArgumentError("Not enough vertices to close a triangle."));
			}
			var this1 = new openfl_VectorData();
			this1.data = new Array(0);
			this1.length = 0;
			this1.fixed = false;
			indices = this1;
			var _g1 = 0;
			var _g = vlen;
			while(_g1 < _g) {
				var i = _g1++;
				if(!indices.fixed) {
					indices.length++;
					if(indices.data.length < indices.length) {
						var length = indices.data.length + 10;
						var data = new Array(length);
						haxe_ds__$Vector_Vector_$Impl_$.blit(indices.data,0,data,0,indices.data.length);
						indices.data = data;
					}
					indices.data[indices.length - 1] = i;
				}
			}
		}
		this.__inflateBounds(0,0);
		var tmpx = -Infinity;
		var tmpy = -Infinity;
		var maxX = -Infinity;
		var maxY = -Infinity;
		var _g11 = 0;
		var _g2 = vlen;
		while(_g11 < _g2) {
			var i1 = _g11++;
			tmpx = vertices.data[i1 * 2];
			tmpy = vertices.data[i1 * 2 + 1];
			if(maxX < tmpx) {
				maxX = tmpx;
			}
			if(maxY < tmpy) {
				maxY = tmpy;
			}
		}
		this.__inflateBounds(maxX,maxY);
		this.__commands.drawTriangles(vertices,indices,uvtData,culling);
		this.set___dirty(true);
		this.__visible = true;
	}
	,endFill: function() {
		this.__commands.endFill();
	}
	,lineBitmapStyle: function(bitmap,matrix,repeat,smooth) {
		if(smooth == null) {
			smooth = false;
		}
		if(repeat == null) {
			repeat = true;
		}
		this.__commands.lineBitmapStyle(bitmap,matrix != null?matrix.clone():null,repeat,smooth);
	}
	,lineGradientStyle: function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
		if(focalPointRatio == null) {
			focalPointRatio = 0;
		}
		if(interpolationMethod == null) {
			interpolationMethod = 1;
		}
		if(spreadMethod == null) {
			spreadMethod = 0;
		}
		this.__commands.lineGradientStyle(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio);
	}
	,lineStyle: function(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit) {
		if(miterLimit == null) {
			miterLimit = 3;
		}
		if(scaleMode == null) {
			scaleMode = 2;
		}
		if(pixelHinting == null) {
			pixelHinting = false;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(color == null) {
			color = 0;
		}
		if(thickness != null) {
			if(joints == 1) {
				if(thickness > this.__strokePadding) {
					this.__strokePadding = thickness;
				}
			} else if(thickness / 2 > this.__strokePadding) {
				this.__strokePadding = thickness / 2;
			}
		}
		this.__commands.lineStyle(thickness,color,alpha,pixelHinting,scaleMode,caps,joints,miterLimit);
		if(thickness != null) {
			this.__visible = true;
		}
	}
	,lineTo: function(x,y) {
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding,this.__positionY + this.__strokePadding);
		this.__positionX = x;
		this.__positionY = y;
		this.__inflateBounds(this.__positionX - this.__strokePadding,this.__positionY - this.__strokePadding);
		this.__inflateBounds(this.__positionX + this.__strokePadding * 2,this.__positionY + this.__strokePadding);
		this.__commands.lineTo(x,y);
		this.__hardware = false;
		this.set___dirty(true);
	}
	,moveTo: function(x,y) {
		this.__positionX = x;
		this.__positionY = y;
		this.__commands.moveTo(x,y);
	}
	,__calculateBezierCubicPoint: function(t,p1,p2,p3,p4) {
		var iT = 1 - t;
		return p1 * (iT * iT * iT) + 3 * p2 * t * (iT * iT) + 3 * p3 * iT * (t * t) + p4 * (t * t * t);
	}
	,__calculateBezierQuadPoint: function(t,p1,p2,p3) {
		var iT = 1 - t;
		return iT * iT * p1 + 2 * iT * t * p2 + t * t * p3;
	}
	,__getBounds: function(rect,matrix) {
		if(this.__bounds == null) {
			return;
		}
		var bounds = openfl_geom_Rectangle.__temp;
		this.__bounds.__transform(bounds,matrix);
		rect.__expand(bounds.x,bounds.y,bounds.width,bounds.height);
	}
	,__hitTest: function(x,y,shapeFlag,matrix) {
		if(this.__bounds == null) {
			return false;
		}
		var norm = matrix.a * matrix.d - matrix.b * matrix.c;
		var px = norm == 0?-matrix.tx:1.0 / norm * (matrix.c * (matrix.ty - y) + matrix.d * (x - matrix.tx));
		var norm1 = matrix.a * matrix.d - matrix.b * matrix.c;
		var py = norm1 == 0?-matrix.ty:1.0 / norm1 * (matrix.a * (y - matrix.ty) + matrix.b * (matrix.tx - x));
		if(px > this.__bounds.x && py > this.__bounds.y && this.__bounds.contains(px,py)) {
			if(shapeFlag) {
				return openfl__$internal_renderer_canvas_CanvasGraphics.hitTest(this,px,py);
			}
			return true;
		}
		return false;
	}
	,__inflateBounds: function(x,y) {
		if(this.__bounds == null) {
			this.__bounds = new openfl_geom_Rectangle(x,y,0,0);
			this.__transformDirty = true;
			return;
		}
		if(x < this.__bounds.x) {
			this.__bounds.width += this.__bounds.x - x;
			this.__bounds.x = x;
			this.__transformDirty = true;
		}
		if(y < this.__bounds.y) {
			this.__bounds.height += this.__bounds.y - y;
			this.__bounds.y = y;
			this.__transformDirty = true;
		}
		if(x > this.__bounds.x + this.__bounds.width) {
			this.__bounds.width = x - this.__bounds.x;
		}
		if(y > this.__bounds.y + this.__bounds.height) {
			this.__bounds.height = y - this.__bounds.y;
		}
	}
	,set___dirty: function(value) {
		if(value && this.__owner != null) {
			var _this = this.__owner;
			if(!_this.__renderDirty) {
				_this.__updateCachedBitmap = true;
				_this.__updateFilters = _this.get_filters() != null && _this.get_filters().length > 0;
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__dirty = value;
	}
	,__class__: openfl_display_Graphics
	,__properties__: {set___dirty:"set___dirty"}
};
var openfl_display_IGraphicsFill = function() { };
$hxClasses["openfl.display.IGraphicsFill"] = openfl_display_IGraphicsFill;
openfl_display_IGraphicsFill.__name__ = ["openfl","display","IGraphicsFill"];
openfl_display_IGraphicsFill.prototype = {
	__graphicsFillType: null
	,__class__: openfl_display_IGraphicsFill
};
var openfl_display_IGraphicsData = function() { };
$hxClasses["openfl.display.IGraphicsData"] = openfl_display_IGraphicsData;
openfl_display_IGraphicsData.__name__ = ["openfl","display","IGraphicsData"];
openfl_display_IGraphicsData.prototype = {
	__graphicsDataType: null
	,__class__: openfl_display_IGraphicsData
};
var openfl_display_GraphicsBitmapFill = function(bitmapData,matrix,repeat,smooth) {
	if(smooth == null) {
		smooth = false;
	}
	if(repeat == null) {
		repeat = true;
	}
	this.bitmapData = bitmapData;
	this.matrix = matrix;
	this.repeat = repeat;
	this.smooth = smooth;
	this.__graphicsDataType = openfl_display_GraphicsDataType.BITMAP;
	this.__graphicsFillType = openfl_display_GraphicsFillType.BITMAP_FILL;
};
$hxClasses["openfl.display.GraphicsBitmapFill"] = openfl_display_GraphicsBitmapFill;
openfl_display_GraphicsBitmapFill.__name__ = ["openfl","display","GraphicsBitmapFill"];
openfl_display_GraphicsBitmapFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsBitmapFill.prototype = {
	bitmapData: null
	,matrix: null
	,repeat: null
	,smooth: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsBitmapFill
};
var openfl_display_GraphicsEndFill = function() {
	this.__graphicsDataType = openfl_display_GraphicsDataType.END;
	this.__graphicsFillType = openfl_display_GraphicsFillType.END_FILL;
};
$hxClasses["openfl.display.GraphicsEndFill"] = openfl_display_GraphicsEndFill;
openfl_display_GraphicsEndFill.__name__ = ["openfl","display","GraphicsEndFill"];
openfl_display_GraphicsEndFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsEndFill.prototype = {
	__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsEndFill
};
var openfl_display_GraphicsGradientFill = function(type,colors,alphas,ratios,matrix,spreadMethod,interpolationMethod,focalPointRatio) {
	if(focalPointRatio == null) {
		focalPointRatio = 0;
	}
	if(type == null) {
		type = 0;
	}
	if(spreadMethod == null) {
		spreadMethod = 0;
	}
	if(interpolationMethod == null) {
		interpolationMethod = 1;
	}
	this.type = type;
	this.colors = colors;
	this.alphas = alphas;
	this.ratios = ratios;
	this.matrix = matrix;
	this.spreadMethod = spreadMethod;
	this.interpolationMethod = interpolationMethod;
	this.focalPointRatio = focalPointRatio;
	this.__graphicsDataType = openfl_display_GraphicsDataType.GRADIENT;
	this.__graphicsFillType = openfl_display_GraphicsFillType.GRADIENT_FILL;
};
$hxClasses["openfl.display.GraphicsGradientFill"] = openfl_display_GraphicsGradientFill;
openfl_display_GraphicsGradientFill.__name__ = ["openfl","display","GraphicsGradientFill"];
openfl_display_GraphicsGradientFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsGradientFill.prototype = {
	alphas: null
	,colors: null
	,focalPointRatio: null
	,interpolationMethod: null
	,matrix: null
	,ratios: null
	,spreadMethod: null
	,type: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsGradientFill
};
var openfl_display_IGraphicsPath = function() { };
$hxClasses["openfl.display.IGraphicsPath"] = openfl_display_IGraphicsPath;
openfl_display_IGraphicsPath.__name__ = ["openfl","display","IGraphicsPath"];
var openfl_display_GraphicsPath = function(commands,data,winding) {
	if(winding == null) {
		winding = "evenOdd";
	}
	this.commands = commands;
	this.data = data;
	this.winding = winding;
	this.__graphicsDataType = openfl_display_GraphicsDataType.PATH;
};
$hxClasses["openfl.display.GraphicsPath"] = openfl_display_GraphicsPath;
openfl_display_GraphicsPath.__name__ = ["openfl","display","GraphicsPath"];
openfl_display_GraphicsPath.__interfaces__ = [openfl_display_IGraphicsPath,openfl_display_IGraphicsData];
openfl_display_GraphicsPath.prototype = {
	commands: null
	,data: null
	,winding: null
	,__graphicsDataType: null
	,curveTo: function(controlX,controlY,anchorX,anchorY) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 3;
			}
			var this2 = this.data;
			if(!this2.fixed) {
				this2.length++;
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
				this2.data[this2.length - 1] = anchorX;
			}
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
				this3.data[this3.length - 1] = anchorY;
			}
			var this4 = this.data;
			if(!this4.fixed) {
				this4.length++;
				if(this4.data.length < this4.length) {
					var length3 = this4.data.length + 10;
					var data3 = new Array(length3);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
					this4.data = data3;
				}
				this4.data[this4.length - 1] = controlX;
			}
			var this5 = this.data;
			if(!this5.fixed) {
				this5.length++;
				if(this5.data.length < this5.length) {
					var length4 = this5.data.length + 10;
					var data4 = new Array(length4);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
					this5.data = data4;
				}
				this5.data[this5.length - 1] = controlY;
			}
		}
	}
	,lineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			var this2 = this.data;
			if(!this2.fixed) {
				this2.length++;
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
				this2.data[this2.length - 1] = x;
			}
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
				this3.data[this3.length - 1] = y;
			}
		}
	}
	,moveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			var this2 = this.data;
			if(!this2.fixed) {
				this2.length++;
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
				this2.data[this2.length - 1] = x;
			}
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
				this3.data[this3.length - 1] = y;
			}
		}
	}
	,wideLineTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 2;
			}
			var this2 = this.data;
			if(!this2.fixed) {
				this2.length++;
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
				this2.data[this2.length - 1] = x;
			}
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
				this3.data[this3.length - 1] = y;
			}
		}
	}
	,wideMoveTo: function(x,y) {
		if(this.commands != null && this.data != null) {
			var this1 = this.commands;
			if(!this1.fixed) {
				this1.length++;
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
				this1.data[this1.length - 1] = 1;
			}
			var this2 = this.data;
			if(!this2.fixed) {
				this2.length++;
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
				this2.data[this2.length - 1] = x;
			}
			var this3 = this.data;
			if(!this3.fixed) {
				this3.length++;
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
				this3.data[this3.length - 1] = y;
			}
		}
	}
	,__class__: openfl_display_GraphicsPath
};
var openfl_display_GraphicsSolidFill = function(color,alpha) {
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	this.alpha = alpha;
	this.color = color;
	this.__graphicsDataType = openfl_display_GraphicsDataType.SOLID;
	this.__graphicsFillType = openfl_display_GraphicsFillType.SOLID_FILL;
};
$hxClasses["openfl.display.GraphicsSolidFill"] = openfl_display_GraphicsSolidFill;
openfl_display_GraphicsSolidFill.__name__ = ["openfl","display","GraphicsSolidFill"];
openfl_display_GraphicsSolidFill.__interfaces__ = [openfl_display_IGraphicsFill,openfl_display_IGraphicsData];
openfl_display_GraphicsSolidFill.prototype = {
	alpha: null
	,color: null
	,__graphicsDataType: null
	,__graphicsFillType: null
	,__class__: openfl_display_GraphicsSolidFill
};
var openfl_display_IGraphicsStroke = function() { };
$hxClasses["openfl.display.IGraphicsStroke"] = openfl_display_IGraphicsStroke;
openfl_display_IGraphicsStroke.__name__ = ["openfl","display","IGraphicsStroke"];
var openfl_display_GraphicsStroke = function(thickness,pixelHinting,scaleMode,caps,joints,miterLimit,fill) {
	if(miterLimit == null) {
		miterLimit = 3;
	}
	if(pixelHinting == null) {
		pixelHinting = false;
	}
	if(thickness == null) {
		thickness = 0.0;
	}
	this.caps = caps != null?caps:0;
	this.fill = fill;
	this.joints = joints != null?joints:2;
	this.miterLimit = miterLimit;
	this.pixelHinting = pixelHinting;
	this.scaleMode = scaleMode != null?scaleMode:2;
	this.thickness = thickness;
	this.__graphicsDataType = openfl_display_GraphicsDataType.STROKE;
};
$hxClasses["openfl.display.GraphicsStroke"] = openfl_display_GraphicsStroke;
openfl_display_GraphicsStroke.__name__ = ["openfl","display","GraphicsStroke"];
openfl_display_GraphicsStroke.__interfaces__ = [openfl_display_IGraphicsStroke,openfl_display_IGraphicsData];
openfl_display_GraphicsStroke.prototype = {
	caps: null
	,fill: null
	,joints: null
	,miterLimit: null
	,pixelHinting: null
	,scaleMode: null
	,thickness: null
	,__graphicsDataType: null
	,__class__: openfl_display_GraphicsStroke
};
var openfl_display_GraphicsDataType = $hxClasses["openfl.display.GraphicsDataType"] = { __ename__ : ["openfl","display","GraphicsDataType"], __constructs__ : ["STROKE","SOLID","GRADIENT","PATH","BITMAP","END"] };
openfl_display_GraphicsDataType.STROKE = ["STROKE",0];
openfl_display_GraphicsDataType.STROKE.toString = $estr;
openfl_display_GraphicsDataType.STROKE.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.SOLID = ["SOLID",1];
openfl_display_GraphicsDataType.SOLID.toString = $estr;
openfl_display_GraphicsDataType.SOLID.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.GRADIENT = ["GRADIENT",2];
openfl_display_GraphicsDataType.GRADIENT.toString = $estr;
openfl_display_GraphicsDataType.GRADIENT.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.PATH = ["PATH",3];
openfl_display_GraphicsDataType.PATH.toString = $estr;
openfl_display_GraphicsDataType.PATH.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.BITMAP = ["BITMAP",4];
openfl_display_GraphicsDataType.BITMAP.toString = $estr;
openfl_display_GraphicsDataType.BITMAP.__enum__ = openfl_display_GraphicsDataType;
openfl_display_GraphicsDataType.END = ["END",5];
openfl_display_GraphicsDataType.END.toString = $estr;
openfl_display_GraphicsDataType.END.__enum__ = openfl_display_GraphicsDataType;
var openfl_display_GraphicsFillType = $hxClasses["openfl.display.GraphicsFillType"] = { __ename__ : ["openfl","display","GraphicsFillType"], __constructs__ : ["SOLID_FILL","GRADIENT_FILL","BITMAP_FILL","END_FILL"] };
openfl_display_GraphicsFillType.SOLID_FILL = ["SOLID_FILL",0];
openfl_display_GraphicsFillType.SOLID_FILL.toString = $estr;
openfl_display_GraphicsFillType.SOLID_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.GRADIENT_FILL = ["GRADIENT_FILL",1];
openfl_display_GraphicsFillType.GRADIENT_FILL.toString = $estr;
openfl_display_GraphicsFillType.GRADIENT_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.BITMAP_FILL = ["BITMAP_FILL",2];
openfl_display_GraphicsFillType.BITMAP_FILL.toString = $estr;
openfl_display_GraphicsFillType.BITMAP_FILL.__enum__ = openfl_display_GraphicsFillType;
openfl_display_GraphicsFillType.END_FILL = ["END_FILL",3];
openfl_display_GraphicsFillType.END_FILL.toString = $estr;
openfl_display_GraphicsFillType.END_FILL.__enum__ = openfl_display_GraphicsFillType;
var openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$ = {};
$hxClasses["openfl.display._InterpolationMethod.InterpolationMethod_Impl_"] = openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.__name__ = ["openfl","display","_InterpolationMethod","InterpolationMethod_Impl_"];
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "linearRGB":
		return 0;
	case "rgb":
		return 1;
	default:
		return null;
	}
};
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "linearRGB";
	case 1:
		return "rgb";
	default:
		return null;
	}
};
var openfl_display_JPEGEncoderOptions = function(quality) {
	if(quality == null) {
		quality = 80;
	}
	this.quality = quality;
};
$hxClasses["openfl.display.JPEGEncoderOptions"] = openfl_display_JPEGEncoderOptions;
openfl_display_JPEGEncoderOptions.__name__ = ["openfl","display","JPEGEncoderOptions"];
openfl_display_JPEGEncoderOptions.prototype = {
	quality: null
	,__class__: openfl_display_JPEGEncoderOptions
};
var openfl_display__$JointStyle_JointStyle_$Impl_$ = {};
$hxClasses["openfl.display._JointStyle.JointStyle_Impl_"] = openfl_display__$JointStyle_JointStyle_$Impl_$;
openfl_display__$JointStyle_JointStyle_$Impl_$.__name__ = ["openfl","display","_JointStyle","JointStyle_Impl_"];
openfl_display__$JointStyle_JointStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bevel":
		return 0;
	case "miter":
		return 1;
	case "round":
		return 2;
	default:
		return null;
	}
};
openfl_display__$JointStyle_JointStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bevel";
	case 1:
		return "miter";
	case 2:
		return "round";
	default:
		return null;
	}
};
var openfl_display__$LineScaleMode_LineScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._LineScaleMode.LineScaleMode_Impl_"] = openfl_display__$LineScaleMode_LineScaleMode_$Impl_$;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.__name__ = ["openfl","display","_LineScaleMode","LineScaleMode_Impl_"];
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "horizontal":
		return 0;
	case "none":
		return 1;
	case "normal":
		return 2;
	case "vertical":
		return 3;
	default:
		return null;
	}
};
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "horizontal";
	case 1:
		return "none";
	case 2:
		return "normal";
	case 3:
		return "vertical";
	default:
		return null;
	}
};
var openfl_display_Loader = function() {
	openfl_display_DisplayObjectContainer.call(this);
	this.contentLoaderInfo = openfl_display_LoaderInfo.create(this);
};
$hxClasses["openfl.display.Loader"] = openfl_display_Loader;
openfl_display_Loader.__name__ = ["openfl","display","Loader"];
openfl_display_Loader.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Loader.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	content: null
	,contentLoaderInfo: null
	,mImage: null
	,mShape: null
	,close: function() {
		openfl_Lib.notImplemented("Loader.close");
	}
	,load: function(request,context) {
		var extension = "";
		var parts = request.url.split(".");
		if(parts.length > 0) {
			extension = parts[parts.length - 1].toLowerCase();
		}
		if(extension.indexOf("?") != -1) {
			extension = extension.split("?")[0];
		}
		this.contentLoaderInfo.url = request.url;
		if(request.contentType == null || request.contentType == "") {
			var tmp;
			switch(extension) {
			case "gif":
				tmp = "image/gif";
				break;
			case "jpeg":case "jpg":
				tmp = "image/jpeg";
				break;
			case "png":
				tmp = "image/png";
				break;
			case "swf":
				tmp = "application/x-shockwave-flash";
				break;
			default:
				tmp = "application/x-www-form-urlencoded";
			}
			this.contentLoaderInfo.contentType = tmp;
		} else {
			this.contentLoaderInfo.contentType = request.contentType;
		}
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromFile(request.url,function(bitmapData) {
				worker.sendComplete(bitmapData);
			},function() {
				worker.sendError("ioError");
			});
		});
		worker.onError.add($bind(this,this.BitmapData_onError));
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,loadBytes: function(buffer,context) {
		var worker = new lime_system_BackgroundWorker();
		worker.doWork.add(function(_) {
			openfl_display_BitmapData.fromBytes(buffer,null,function(bitmapData) {
				worker.sendComplete(bitmapData);
			});
		});
		worker.onComplete.add($bind(this,this.BitmapData_onLoad));
		worker.run();
	}
	,unload: function() {
		if(this.get_numChildren() > 0) {
			while(this.get_numChildren() > 0) this.removeChildAt(0);
			this.content = null;
			this.contentLoaderInfo.url = null;
			this.contentLoaderInfo.contentType = null;
			this.contentLoaderInfo.content = null;
			this.contentLoaderInfo.bytesLoaded = 0;
			this.contentLoaderInfo.bytesTotal = 0;
			this.contentLoaderInfo.width = 0;
			this.contentLoaderInfo.height = 0;
			var event = new openfl_events_Event("unload");
			event.currentTarget = this;
			this.__dispatchEvent(event);
		}
	}
	,unloadAndStop: function(gc) {
		if(gc == null) {
			gc = true;
		}
		openfl_Lib.notImplemented("Loader.unloadAndStop");
	}
	,BitmapData_onLoad: function(bitmapData) {
		this.contentLoaderInfo.content = new openfl_display_Bitmap(bitmapData);
		this.content = this.contentLoaderInfo.content;
		this.addChild(this.contentLoaderInfo.content);
		var event = new openfl_events_Event("complete");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,BitmapData_onError: function(_) {
		var event = new openfl_events_IOErrorEvent("ioError");
		event.target = this.contentLoaderInfo;
		event.currentTarget = this.contentLoaderInfo;
		this.contentLoaderInfo.dispatchEvent(event);
	}
	,__class__: openfl_display_Loader
});
var openfl_display_OpenGLView = function() {
	openfl_display_DirectRenderer.call(this,"OpenGLView");
	if(!this.__added) {
		this.__added = true;
		haxe_Log.trace("Warning: OpenGLView is not available in HTML5 canvas rendering mode",{ fileName : "OpenGLView.hx", lineNumber : 76, className : "openfl.display.OpenGLView", methodName : "new"});
		haxe_Log.trace("Please compile your project using -Ddom or -Dwebgl (beta) to enable",{ fileName : "OpenGLView.hx", lineNumber : 77, className : "openfl.display.OpenGLView", methodName : "new"});
	}
};
$hxClasses["openfl.display.OpenGLView"] = openfl_display_OpenGLView;
openfl_display_OpenGLView.__name__ = ["openfl","display","OpenGLView"];
openfl_display_OpenGLView.__properties__ = {get_isSupported:"get_isSupported"}
openfl_display_OpenGLView.isSupported = null;
openfl_display_OpenGLView.get_isSupported = function() {
	return false;
};
openfl_display_OpenGLView.__super__ = openfl_display_DirectRenderer;
openfl_display_OpenGLView.prototype = $extend(openfl_display_DirectRenderer.prototype,{
	__added: null
	,__initialized: null
	,__renderCanvas: function(renderSession) {
	}
	,__renderDOM: function(renderSession) {
		if(this.stage != null && this.__worldVisible && this.__renderable) {
			if(!this.__added) {
				renderSession.element.appendChild(this.__canvas);
				this.__added = true;
				openfl__$internal_renderer_dom_DOMRenderer.initializeElement(this,this.__canvas,renderSession);
			}
			if(this.__context != null) {
				var rect = null;
				if(this.get_scrollRect() == null) {
					rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
				} else {
					rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
				}
				if(this.__render != null) {
					this.__render(rect);
				}
			}
		} else if(this.__added) {
			renderSession.element.removeChild(this.__canvas);
			this.__added = false;
		}
	}
	,__renderGL: function(renderSession) {
		if(this.stage != null && this.__renderable) {
			var rect = null;
			if(this.get_scrollRect() == null) {
				rect = new openfl_geom_Rectangle(0,0,this.stage.stageWidth,this.stage.stageHeight);
			} else {
				rect = new openfl_geom_Rectangle(this.get_x() + this.get_scrollRect().x,this.get_y() + this.get_scrollRect().y,this.get_scrollRect().width,this.get_scrollRect().height);
			}
			if(this.__render != null) {
				this.__render(rect);
			}
			renderSession.shaderManager.setShader(null);
			renderSession.blendModeManager.setBlendMode(null);
		}
	}
	,__class__: openfl_display_OpenGLView
});
var openfl_display_PNGEncoderOptions = function(fastCompression) {
	if(fastCompression == null) {
		fastCompression = false;
	}
	this.fastCompression = fastCompression;
};
$hxClasses["openfl.display.PNGEncoderOptions"] = openfl_display_PNGEncoderOptions;
openfl_display_PNGEncoderOptions.__name__ = ["openfl","display","PNGEncoderOptions"];
openfl_display_PNGEncoderOptions.prototype = {
	fastCompression: null
	,__class__: openfl_display_PNGEncoderOptions
};
var openfl_display__$PixelSnapping_PixelSnapping_$Impl_$ = {};
$hxClasses["openfl.display._PixelSnapping.PixelSnapping_Impl_"] = openfl_display__$PixelSnapping_PixelSnapping_$Impl_$;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.__name__ = ["openfl","display","_PixelSnapping","PixelSnapping_Impl_"];
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.fromString = function(value) {
	switch(value) {
	case "always":
		return 0;
	case "auto":
		return 1;
	case "never":
		return 2;
	default:
		return null;
	}
};
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "always";
	case 1:
		return "auto";
	case 2:
		return "never";
	default:
		return null;
	}
};
var openfl_display_Preloader = function(display) {
	lime_app_Preloader.call(this);
	if(display != null) {
		this.display = display;
		openfl_Lib.current.addChild(display);
		if(js_Boot.__instanceof(display,NMEPreloader)) {
			(js_Boot.__cast(display , NMEPreloader)).onInit();
		}
	}
};
$hxClasses["openfl.display.Preloader"] = openfl_display_Preloader;
openfl_display_Preloader.__name__ = ["openfl","display","Preloader"];
openfl_display_Preloader.__super__ = lime_app_Preloader;
openfl_display_Preloader.prototype = $extend(lime_app_Preloader.prototype,{
	display: null
	,displayComplete: null
	,load: function(urls,types) {
		var sounds = [];
		var url = null;
		var _g1 = 0;
		var _g = urls.length;
		while(_g1 < _g) {
			var i = _g1++;
			url = urls[i];
			switch(types[i]) {
			case "MUSIC":case "SOUND":
				var sound = haxe_io_Path.withoutExtension(url);
				if(!HxOverrides.remove(sounds,sound)) {
					this.total++;
				}
				sounds.push(sound);
				break;
			default:
			}
		}
		var _g2 = 0;
		while(_g2 < sounds.length) {
			var soundName = sounds[_g2];
			++_g2;
			var sound1 = new openfl_media_Sound();
			sound1.addEventListener("complete",$bind(this,this.sound_onComplete));
			sound1.addEventListener("ioError",$bind(this,this.sound_onIOError));
			sound1.load(new openfl_net_URLRequest(soundName + ".ogg"));
		}
		lime_app_Preloader.prototype.load.call(this,urls,types);
	}
	,start: function() {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			this.display.addEventListener("complete",$bind(this,this.display_onComplete));
			(js_Boot.__cast(this.display , NMEPreloader)).onLoaded();
		} else {
			lime_app_Preloader.prototype.start.call(this);
		}
	}
	,update: function(loaded,total) {
		if(this.display != null && js_Boot.__instanceof(this.display,NMEPreloader)) {
			(js_Boot.__cast(this.display , NMEPreloader)).onUpdate(loaded,total);
		}
	}
	,display_onComplete: function(event) {
		this.display.removeEventListener("complete",$bind(this,this.display_onComplete));
		openfl_Lib.current.removeChild(this.display);
		openfl_Lib.current.stage.set_focus(null);
		this.display = null;
		lime_app_Preloader.prototype.start.call(this);
	}
	,sound_onComplete: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,sound_onIOError: function(event) {
		this.loaded++;
		this.onProgress.dispatch(this.loaded,this.total);
		if(this.loaded == this.total) {
			this.start();
		}
	}
	,__class__: openfl_display_Preloader
});
var openfl_display_Shader = function(precision) {
	if(precision == null) {
		precision = 1;
	}
	this.__dirty = true;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.precision = 1;
	this.precision = precision;
	this.data = new haxe_ds_StringMap();
	var value = new openfl_display_GLShaderParameter("vec2");
	var _this = this.data;
	var key = openfl_display_Shader.uObjectSize;
	if(__map_reserved[key] != null) {
		_this.setReserved(key,value);
	} else {
		_this.h[key] = value;
	}
	var value1 = new openfl_display_GLShaderParameter("vec2");
	var _this1 = this.data;
	var key1 = openfl_display_Shader.uTextureSize;
	if(__map_reserved[key1] != null) {
		_this1.setReserved(key1,value1);
	} else {
		_this1.h[key1] = value1;
	}
};
$hxClasses["openfl.display.Shader"] = openfl_display_Shader;
openfl_display_Shader.__name__ = ["openfl","display","Shader"];
openfl_display_Shader.prototype = {
	precision: null
	,data: null
	,repeatX: null
	,repeatY: null
	,smooth: null
	,blendMode: null
	,__dirty: null
	,__fragmentCode: null
	,__vertexCode: null
	,__shader: null
	,__init: function(gl) {
		var dirty = this.__dirty;
		if(dirty) {
			if(this.__shader != null) {
				this.__shader.destroy();
			}
			this.__shader = new openfl__$internal_renderer_opengl_shaders2_Shader(gl);
			this.__shader.vertexString = this.__vertexCode != null?this.__vertexCode:openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC.join("\n");
			this.__shader.fragmentString = this.__fragmentCode;
			this.__dirty = false;
		}
		this.__shader.init(dirty);
	}
	,__buildFragmentCode: function(code) {
		var output = [];
		output.push("#ifdef GL_ES");
		var _g = this.precision;
		var tmp;
		switch(_g) {
		case 1:
			tmp = "precision mediump float;";
			break;
		case 2:
			tmp = "precision highp float;";
			break;
		default:
			tmp = "precision lowp float;";
		}
		output.push(tmp);
		output.push("#endif");
		output = output.concat(openfl_display_Shader.fragmentHeader);
		output.push(code);
		this.__fragmentCode = output.join("\n");
	}
	,__buildVertexCode: function(code) {
		var output = [];
		output.push("#ifdef GL_ES");
		var _g = this.precision;
		var tmp;
		switch(_g) {
		case 1:
			tmp = "precision mediump float;";
			break;
		case 2:
			tmp = "precision highp float;";
			break;
		default:
			tmp = "precision lowp float;";
		}
		output.push(tmp);
		output.push("#endif");
		output = output.concat(openfl_display_Shader.vertexHeader);
		output.push(code);
		this.__vertexCode = output.join("\n");
	}
	,__class__: openfl_display_Shader
};
var openfl_display_GLShaderParameter = function(type,arraySize) {
	this.internalType = 0;
	this.transpose = false;
	this.repeatY = 33071;
	this.repeatX = 33071;
	this.smooth = false;
	this.arraySize = 0;
	this.size = 0;
	this.type = type;
	this.arraySize = arraySize == null?0:arraySize;
	this.__init();
};
$hxClasses["openfl.display.GLShaderParameter"] = openfl_display_GLShaderParameter;
openfl_display_GLShaderParameter.__name__ = ["openfl","display","GLShaderParameter"];
openfl_display_GLShaderParameter.prototype = {
	type: null
	,size: null
	,arraySize: null
	,value: null
	,bitmap: null
	,smooth: null
	,repeatX: null
	,repeatY: null
	,transpose: null
	,internalType: null
	,__init: function() {
		var _g = this.type;
		switch(_g) {
		case "bool":
			this.internalType = 1;
			this.size = 1;
			if(this.internalType == 4) {
				throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			}
			this.value = [0.0];
			break;
		case "float":
			this.internalType = 2;
			this.size = 1;
			if(this.internalType == 4) {
				throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			}
			this.value = [0.0];
			break;
		case "int":
			this.internalType = 1;
			this.size = 1;
			if(this.internalType == 4) {
				throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
			}
			this.value = [0.0];
			break;
		case "sampler2D":case "samplerCube":
			if(_g.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) {
					this.internalType = 1;
				} else {
					this.internalType = 2;
				}
				this.size = Std.parseInt(this.type.charAt(this.type.length - 1));
				var _g1 = [];
				var _g2 = 0;
				var _g11 = this.size;
				while(_g2 < _g11) {
					++_g2;
					_g1.push(0.0);
				}
				if(this.internalType == 4) {
					throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				}
				this.value = _g1;
			} else if(_g.indexOf("mat") > -1) {
				this.internalType = 3;
				this.size = Std.parseInt(this.type.charAt(this.type.length - 1));
				var v;
				switch(this.size) {
				case 2:
					v = [1,0,1,0];
					break;
				case 3:
					v = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					v = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					v = [0];
				}
				if(this.internalType == 4) {
					throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				}
				this.value = v;
			} else {
				this.internalType = 4;
				this.size = 0;
			}
			break;
		default:
			if(_g.indexOf("vec") > -1) {
				if(StringTools.startsWith(this.type,"b") || StringTools.startsWith(this.type,"i")) {
					this.internalType = 1;
				} else {
					this.internalType = 2;
				}
				this.size = Std.parseInt(this.type.charAt(this.type.length - 1));
				var _g3 = [];
				var _g21 = 0;
				var _g12 = this.size;
				while(_g21 < _g12) {
					++_g21;
					_g3.push(0.0);
				}
				if(this.internalType == 4) {
					throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				}
				this.value = _g3;
			} else if(_g.indexOf("mat") > -1) {
				this.internalType = 3;
				this.size = Std.parseInt(this.type.charAt(this.type.length - 1));
				var v1;
				switch(this.size) {
				case 2:
					v1 = [1,0,1,0];
					break;
				case 3:
					v1 = [1,0,0,0,1,0,0,0,1];
					break;
				case 4:
					v1 = [1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1];
					break;
				default:
					v1 = [0];
				}
				if(this.internalType == 4) {
					throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
				}
				this.value = v1;
			} else {
				this.internalType = 0;
				haxe_Log.trace("Can't initialize value for type " + this.type,{ fileName : "Shader.hx", lineNumber : 307, className : "openfl.display.GLShaderParameter", methodName : "__init"});
			}
		}
	}
	,set_value: function(v) {
		if(this.internalType == 4) {
			throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		}
		return this.value = v;
	}
	,set_bitmap: function(v) {
		if(this.internalType != 4) {
			throw new js__$Boot_HaxeError("This parameter doesn't accept a bitmap, use value instead");
		}
		return this.bitmap = v;
	}
	,__class__: openfl_display_GLShaderParameter
	,__properties__: {set_bitmap:"set_bitmap",set_value:"set_value"}
};
var openfl_display_Shape = function() {
	openfl_display_DisplayObject.call(this);
};
$hxClasses["openfl.display.Shape"] = openfl_display_Shape;
openfl_display_Shape.__name__ = ["openfl","display","Shape"];
openfl_display_Shape.__super__ = openfl_display_DisplayObject;
openfl_display_Shape.prototype = $extend(openfl_display_DisplayObject.prototype,{
	graphics: null
	,get_graphics: function() {
		if(this.__graphics == null) {
			this.__graphics = new openfl_display_Graphics();
			this.__graphics.__owner = this;
		}
		return this.__graphics;
	}
	,__class__: openfl_display_Shape
	,__properties__: $extend(openfl_display_DisplayObject.prototype.__properties__,{get_graphics:"get_graphics"})
});
var openfl_display__$SpreadMethod_SpreadMethod_$Impl_$ = {};
$hxClasses["openfl.display._SpreadMethod.SpreadMethod_Impl_"] = openfl_display__$SpreadMethod_SpreadMethod_$Impl_$;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.__name__ = ["openfl","display","_SpreadMethod","SpreadMethod_Impl_"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "pad":
		return 0;
	case "reflect":
		return 1;
	case "repeat":
		return 2;
	default:
		return null;
	}
};
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "pad";
	case 1:
		return "reflect";
	case 2:
		return "repeat";
	default:
		return null;
	}
};
var openfl_display_Stage = function(window,color) {
	openfl_display_DisplayObjectContainer.call(this);
	this.application = window.application;
	this.window = window;
	if(color == null) {
		this.__transparent = true;
		this.set_color(0);
	} else {
		this.set_color(color);
	}
	this.set_name(null);
	this.__deltaTime = 0;
	this.__displayState = 2;
	this.__mouseX = 0;
	this.__mouseY = 0;
	this.__lastClickTime = 0;
	this.stageWidth = window.__width * window.__scale | 0;
	this.stageHeight = window.__height * window.__scale | 0;
	this.stage = this;
	this.align = 6;
	this.allowsFullScreen = false;
	this.allowsFullScreenInteractive = false;
	this.quality = 1;
	this.scaleMode = 2;
	this.stageFocusRect = true;
	this.__macKeyboard = /AppleWebKit/.test (navigator.userAgent) && /Mobile\/\w+/.test (navigator.userAgent) || /Mac/.test (navigator.platform);
	this.__clearBeforeRender = true;
	this.__stack = [];
	this.__mouseOutStack = [];
	var this1 = new openfl_VectorData();
	var this2 = new Array(0);
	this1.data = this2;
	this1.length = 0;
	this1.fixed = false;
	this.stage3Ds = this1;
	var this3 = this.stage3Ds;
	var x = new openfl_display_Stage3D();
	if(!this3.fixed) {
		this3.length++;
		if(this3.data.length < this3.length) {
			var length = this3.data.length + 10;
			var this4 = new Array(length);
			var data = this4;
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data,0,this3.data.length);
			this3.data = data;
		}
		this3.data[this3.length - 1] = x;
	}
	if(openfl_Lib.current.stage == null) {
		this.stage.addChild(openfl_Lib.current);
	}
};
$hxClasses["openfl.display.Stage"] = openfl_display_Stage;
openfl_display_Stage.__name__ = ["openfl","display","Stage"];
openfl_display_Stage.__interfaces__ = [lime_app_IModule];
openfl_display_Stage.__super__ = openfl_display_DisplayObjectContainer;
openfl_display_Stage.prototype = $extend(openfl_display_DisplayObjectContainer.prototype,{
	align: null
	,allowsFullScreen: null
	,allowsFullScreenInteractive: null
	,application: null
	,quality: null
	,scaleMode: null
	,stage3Ds: null
	,stageFocusRect: null
	,stageHeight: null
	,stageWidth: null
	,window: null
	,__clearBeforeRender: null
	,__color: null
	,__colorSplit: null
	,__colorString: null
	,__deltaTime: null
	,__dirty: null
	,__displayState: null
	,__dragBounds: null
	,__dragObject: null
	,__dragOffsetX: null
	,__dragOffsetY: null
	,__focus: null
	,__fullscreen: null
	,__invalidated: null
	,__lastClickTime: null
	,__macKeyboard: null
	,__mouseDownLeft: null
	,__mouseDownMiddle: null
	,__mouseDownRight: null
	,__mouseOutStack: null
	,__mouseX: null
	,__mouseY: null
	,__originalWidth: null
	,__originalHeight: null
	,__renderer: null
	,__rendering: null
	,__stack: null
	,__transparent: null
	,__wasDirty: null
	,globalToLocal: function(pos) {
		return pos.clone();
	}
	,invalidate: function() {
		this.__invalidated = true;
	}
	,localToGlobal: function(pos) {
		return pos.clone();
	}
	,onGamepadAxisMove: function(gamepad,axis,value) {
		openfl_ui_GameInput.__onGamepadAxisMove(gamepad,axis,value);
	}
	,onGamepadButtonDown: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonDown(gamepad,button);
	}
	,onGamepadButtonUp: function(gamepad,button) {
		openfl_ui_GameInput.__onGamepadButtonUp(gamepad,button);
	}
	,onGamepadConnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadConnect(gamepad);
	}
	,onGamepadDisconnect: function(gamepad) {
		openfl_ui_GameInput.__onGamepadDisconnect(gamepad);
	}
	,onJoystickAxisMove: function(joystick,axis,value) {
	}
	,onJoystickButtonDown: function(joystick,button) {
	}
	,onJoystickButtonUp: function(joystick,button) {
	}
	,onJoystickConnect: function(joystick) {
	}
	,onJoystickDisconnect: function(joystick) {
	}
	,onJoystickHatMove: function(joystick,hat,position) {
	}
	,onJoystickTrackballMove: function(joystick,trackball,value) {
	}
	,onKeyDown: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyDown",keyCode,modifier);
	}
	,onKeyUp: function(window,keyCode,modifier) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onKey("keyUp",keyCode,modifier);
	}
	,onModuleExit: function(code) {
		if(this.window != null) {
			this.__broadcast(new openfl_events_Event("deactivate"),true);
		}
	}
	,onMouseDown: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseDown";
			break;
		case 2:
			type = "rightMouseDown";
			break;
		default:
			type = "mouseDown";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseMove: function(window,x,y) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouse("mouseMove",x * window.__scale | 0,y * window.__scale | 0,0);
	}
	,onMouseMoveRelative: function(window,x,y) {
	}
	,onMouseUp: function(window,x,y,button) {
		if(this.window == null || this.window != window) {
			return;
		}
		var type;
		switch(button) {
		case 1:
			type = "middleMouseUp";
			break;
		case 2:
			type = "rightMouseUp";
			break;
		default:
			type = "mouseUp";
		}
		this.__onMouse(type,x * window.__scale | 0,y * window.__scale | 0,button);
	}
	,onMouseWheel: function(window,deltaX,deltaY) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__onMouseWheel(deltaX * window.__scale | 0,deltaY * window.__scale | 0);
	}
	,onPreloadComplete: function() {
	}
	,onPreloadProgress: function(loaded,total) {
	}
	,onRenderContextLost: function(renderer) {
	}
	,onRenderContextRestored: function(renderer,context) {
	}
	,onTextEdit: function(window,text,start,length) {
	}
	,onTextInput: function(window,text) {
		if(this.window == null || this.window != window) {
			return;
		}
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		var event = new openfl_events_TextEvent("textInput",true,false,text);
		if(stack.length > 0) {
			stack.reverse();
			this.__fireEvent(event,stack);
		} else {
			this.__broadcast(event,true);
		}
	}
	,onTouchMove: function(touch) {
		this.__onTouch("touchMove",touch);
	}
	,onTouchEnd: function(touch) {
		this.__onTouch("touchEnd",touch);
	}
	,onTouchStart: function(touch) {
		this.__onTouch("touchBegin",touch);
	}
	,onWindowActivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__broadcast(new openfl_events_Event("activate"),true);
	}
	,onWindowClose: function(window) {
		if(this.window == window) {
			this.window = null;
		}
	}
	,onWindowCreate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(window.renderer != null) {
			var _g = window.renderer.context;
			switch(_g[1]) {
			case 0:
				break;
			case 1:
				this.__renderer = new openfl__$internal_renderer_canvas_CanvasRenderer(this.stageWidth,this.stageHeight,_g[2]);
				break;
			case 2:
				break;
			case 4:
				break;
			case 5:
				break;
			default:
			}
		}
	}
	,onWindowDeactivate: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__broadcast(new openfl_events_Event("deactivate"),true);
	}
	,onWindowDropFile: function(window,file) {
	}
	,onWindowEnter: function(window) {
	}
	,onWindowFocusIn: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__broadcast(new openfl_events_FocusEvent("focusIn",true,false,null,false,0),true);
	}
	,onWindowFocusOut: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__broadcast(new openfl_events_FocusEvent("focusOut",true,false,null,false,0),true);
	}
	,onWindowFullscreen: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(this.__displayState == 2) {
			this.__displayState = 1;
		}
	}
	,onWindowLeave: function(window) {
		if(this.window == null || this.window != window) {
			return;
		}
		this.__dispatchEvent(new openfl_events_Event("mouseLeave"));
	}
	,onWindowMinimize: function(window) {
	}
	,onWindowMove: function(window,x,y) {
	}
	,onWindowResize: function(window,width,height) {
		if(this.window == null || this.window != window) {
			return;
		}
		if(this.__displayState != 2 && !window.__fullscreen) {
			this.__displayState = 2;
		}
		this.stageWidth = width * window.__scale | 0;
		this.stageHeight = height * window.__scale | 0;
		if(this.__renderer != null) {
			this.__renderer.resize(this.stageWidth,this.stageHeight);
		}
		this.__broadcast(new openfl_events_Event("resize"),false);
	}
	,onWindowRestore: function(window) {
	}
	,render: function(renderer) {
		if(renderer.window == null || renderer.window != this.window) {
			return;
		}
		if(this.application != null && this.application.windows.length > 0) {
			if(!this.__transformDirty) {
				this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
			if(!this.__renderDirty) {
				this.__updateCachedBitmap = true;
				this.__updateFilters = this.get_filters() != null && this.get_filters().length > 0;
				this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		if(this.__rendering) {
			return;
		}
		this.__rendering = true;
		this.__broadcast(new openfl_events_Event("enterFrame"),true);
		if(this.__invalidated) {
			this.__invalidated = false;
			this.__broadcast(new openfl_events_Event("render"),true);
		}
		this.__renderable = true;
		this.__enterFrame(this.__deltaTime);
		this.__deltaTime = 0;
		this.__update(false,true);
		if(this.__renderer != null) {
			var _g = renderer.context;
			if(_g[1] == 4) {
				var cairo = _g[2];
				(js_Boot.__cast(this.__renderer , openfl__$internal_renderer_cairo_CairoRenderer)).cairo = cairo;
				this.__renderer.renderSession.cairo = cairo;
			}
			this.__renderer.render(this);
		}
		this.__rendering = false;
	}
	,update: function(deltaTime) {
		this.__deltaTime = deltaTime;
	}
	,__drag: function(mouse) {
		var parent = this.__dragObject.parent;
		if(parent != null) {
			mouse = parent.globalToLocal(mouse);
		}
		var x = mouse.x + this.__dragOffsetX;
		var y = mouse.y + this.__dragOffsetY;
		if(this.__dragBounds != null) {
			if(x < this.__dragBounds.x) {
				x = this.__dragBounds.x;
			} else if(x > this.__dragBounds.get_right()) {
				x = this.__dragBounds.get_right();
			}
			if(y < this.__dragBounds.y) {
				y = this.__dragBounds.y;
			} else if(y > this.__dragBounds.get_bottom()) {
				y = this.__dragBounds.get_bottom();
			}
		}
		this.__dragObject.set_x(x);
		this.__dragObject.set_y(y);
	}
	,__fireEvent: function(event,stack) {
		var length = stack.length;
		if(length == 0) {
			event.eventPhase = 2;
			event.target.__broadcast(event,false);
		} else {
			event.eventPhase = 1;
			event.target = stack[stack.length - 1];
			var _g1 = 0;
			var _g = length - 1;
			while(_g1 < _g) {
				stack[_g1++].__broadcast(event,false);
				if(event.__isCanceled) {
					return;
				}
			}
			event.eventPhase = 2;
			event.target.__broadcast(event,false);
			if(event.__isCanceled) {
				return;
			}
			if(event.bubbles) {
				event.eventPhase = 3;
				var i = length - 2;
				while(i >= 0) {
					stack[i].__broadcast(event,false);
					if(event.__isCanceled) {
						return;
					}
					--i;
				}
			}
		}
	}
	,__getInteractive: function(stack) {
		if(stack != null) {
			stack.push(this);
		}
		return true;
	}
	,__onKey: function(type,keyCode,modifier) {
		openfl_events_MouseEvent.__altKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier);
		openfl_events_MouseEvent.__commandKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier);
		openfl_events_MouseEvent.__ctrlKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier);
		openfl_events_MouseEvent.__shiftKey = lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier);
		var stack = [];
		if(this.__focus == null) {
			this.__getInteractive(stack);
		} else {
			this.__focus.__getInteractive(stack);
		}
		if(stack.length > 0) {
			var keyLocation;
			switch(keyCode) {
			case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
				keyLocation = 3;
				break;
			case 1073742048:case 1073742049:case 1073742050:case 1073742051:
				keyLocation = 1;
				break;
			case 1073742052:case 1073742053:case 1073742054:case 1073742055:
				keyLocation = 2;
				break;
			default:
				keyLocation = 0;
			}
			var keyCode1;
			switch(keyCode) {
			case 8:
				keyCode1 = 8;
				break;
			case 9:
				keyCode1 = 9;
				break;
			case 13:
				keyCode1 = 13;
				break;
			case 27:
				keyCode1 = 27;
				break;
			case 32:
				keyCode1 = 32;
				break;
			case 33:
				keyCode1 = 49;
				break;
			case 34:
				keyCode1 = 222;
				break;
			case 35:
				keyCode1 = 51;
				break;
			case 36:
				keyCode1 = 52;
				break;
			case 37:
				keyCode1 = 53;
				break;
			case 38:
				keyCode1 = 55;
				break;
			case 39:
				keyCode1 = 222;
				break;
			case 40:
				keyCode1 = 57;
				break;
			case 41:
				keyCode1 = 48;
				break;
			case 42:
				keyCode1 = 56;
				break;
			case 44:
				keyCode1 = 188;
				break;
			case 45:
				keyCode1 = 189;
				break;
			case 46:
				keyCode1 = 190;
				break;
			case 47:
				keyCode1 = 191;
				break;
			case 48:
				keyCode1 = 48;
				break;
			case 49:
				keyCode1 = 49;
				break;
			case 50:
				keyCode1 = 50;
				break;
			case 51:
				keyCode1 = 51;
				break;
			case 52:
				keyCode1 = 52;
				break;
			case 53:
				keyCode1 = 53;
				break;
			case 54:
				keyCode1 = 54;
				break;
			case 55:
				keyCode1 = 55;
				break;
			case 56:
				keyCode1 = 56;
				break;
			case 57:
				keyCode1 = 57;
				break;
			case 58:
				keyCode1 = 186;
				break;
			case 59:
				keyCode1 = 186;
				break;
			case 60:
				keyCode1 = 60;
				break;
			case 61:
				keyCode1 = 187;
				break;
			case 62:
				keyCode1 = 190;
				break;
			case 63:
				keyCode1 = 191;
				break;
			case 64:
				keyCode1 = 50;
				break;
			case 91:
				keyCode1 = 219;
				break;
			case 92:
				keyCode1 = 220;
				break;
			case 93:
				keyCode1 = 221;
				break;
			case 94:
				keyCode1 = 54;
				break;
			case 95:
				keyCode1 = 189;
				break;
			case 96:
				keyCode1 = 192;
				break;
			case 97:
				keyCode1 = 65;
				break;
			case 98:
				keyCode1 = 66;
				break;
			case 99:
				keyCode1 = 67;
				break;
			case 100:
				keyCode1 = 68;
				break;
			case 101:
				keyCode1 = 69;
				break;
			case 102:
				keyCode1 = 70;
				break;
			case 103:
				keyCode1 = 71;
				break;
			case 104:
				keyCode1 = 72;
				break;
			case 105:
				keyCode1 = 73;
				break;
			case 106:
				keyCode1 = 74;
				break;
			case 107:
				keyCode1 = 75;
				break;
			case 108:
				keyCode1 = 76;
				break;
			case 109:
				keyCode1 = 77;
				break;
			case 110:
				keyCode1 = 78;
				break;
			case 111:
				keyCode1 = 79;
				break;
			case 112:
				keyCode1 = 80;
				break;
			case 113:
				keyCode1 = 81;
				break;
			case 114:
				keyCode1 = 82;
				break;
			case 115:
				keyCode1 = 83;
				break;
			case 116:
				keyCode1 = 84;
				break;
			case 117:
				keyCode1 = 85;
				break;
			case 118:
				keyCode1 = 86;
				break;
			case 119:
				keyCode1 = 87;
				break;
			case 120:
				keyCode1 = 88;
				break;
			case 121:
				keyCode1 = 89;
				break;
			case 122:
				keyCode1 = 90;
				break;
			case 127:
				keyCode1 = 46;
				break;
			case 1073741881:
				keyCode1 = 20;
				break;
			case 1073741882:
				keyCode1 = 112;
				break;
			case 1073741883:
				keyCode1 = 113;
				break;
			case 1073741884:
				keyCode1 = 114;
				break;
			case 1073741885:
				keyCode1 = 115;
				break;
			case 1073741886:
				keyCode1 = 116;
				break;
			case 1073741887:
				keyCode1 = 117;
				break;
			case 1073741888:
				keyCode1 = 118;
				break;
			case 1073741889:
				keyCode1 = 119;
				break;
			case 1073741890:
				keyCode1 = 120;
				break;
			case 1073741891:
				keyCode1 = 121;
				break;
			case 1073741892:
				keyCode1 = 122;
				break;
			case 1073741893:
				keyCode1 = 123;
				break;
			case 1073741894:
				keyCode1 = 301;
				break;
			case 1073741895:
				keyCode1 = 145;
				break;
			case 1073741896:
				keyCode1 = 19;
				break;
			case 1073741897:
				keyCode1 = 45;
				break;
			case 1073741898:
				keyCode1 = 36;
				break;
			case 1073741899:
				keyCode1 = 33;
				break;
			case 1073741901:
				keyCode1 = 35;
				break;
			case 1073741902:
				keyCode1 = 34;
				break;
			case 1073741903:
				keyCode1 = 39;
				break;
			case 1073741904:
				keyCode1 = 37;
				break;
			case 1073741905:
				keyCode1 = 40;
				break;
			case 1073741906:
				keyCode1 = 38;
				break;
			case 1073741907:
				keyCode1 = 144;
				break;
			case 1073741908:
				keyCode1 = 111;
				break;
			case 1073741909:
				keyCode1 = 106;
				break;
			case 1073741910:
				keyCode1 = 109;
				break;
			case 1073741911:
				keyCode1 = 107;
				break;
			case 1073741912:
				keyCode1 = 108;
				break;
			case 1073741913:
				keyCode1 = 97;
				break;
			case 1073741914:
				keyCode1 = 98;
				break;
			case 1073741915:
				keyCode1 = 99;
				break;
			case 1073741916:
				keyCode1 = 100;
				break;
			case 1073741917:
				keyCode1 = 101;
				break;
			case 1073741918:
				keyCode1 = 102;
				break;
			case 1073741919:
				keyCode1 = 103;
				break;
			case 1073741920:
				keyCode1 = 104;
				break;
			case 1073741921:
				keyCode1 = 105;
				break;
			case 1073741922:
				keyCode1 = 96;
				break;
			case 1073741923:
				keyCode1 = 110;
				break;
			case 1073741925:
				keyCode1 = 302;
				break;
			case 1073741928:
				keyCode1 = 124;
				break;
			case 1073741929:
				keyCode1 = 125;
				break;
			case 1073741930:
				keyCode1 = 126;
				break;
			case 1073741982:
				keyCode1 = 13;
				break;
			case 1073742044:
				keyCode1 = 110;
				break;
			case 1073742048:
				keyCode1 = 17;
				break;
			case 1073742049:
				keyCode1 = 16;
				break;
			case 1073742050:
				keyCode1 = 18;
				break;
			case 1073742051:
				keyCode1 = 15;
				break;
			case 1073742052:
				keyCode1 = 17;
				break;
			case 1073742053:
				keyCode1 = 16;
				break;
			case 1073742054:
				keyCode1 = 18;
				break;
			case 1073742055:
				keyCode1 = 15;
				break;
			default:
				keyCode1 = keyCode;
			}
			var event = new openfl_events_KeyboardEvent(type,true,false,openfl_ui_Keyboard.__getCharCode(keyCode1,lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier)),keyCode1,keyLocation,this.__macKeyboard?lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier) || lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier):lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_altKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_shiftKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_ctrlKey(modifier),lime_ui__$KeyModifier_KeyModifier_$Impl_$.get_metaKey(modifier));
			stack.reverse();
			this.__fireEvent(event,stack);
			if(event.__isCanceled) {
				if(type == "keyDown") {
					this.window.onKeyDown.cancel();
				} else {
					this.window.onKeyUp.cancel();
				}
			}
		}
	}
	,__onMouse: function(type,x,y,button) {
		if(button > 2) {
			return;
		}
		this.__mouseX = x;
		this.__mouseY = y;
		var stack = [];
		var target = null;
		var targetPoint = new openfl_geom_Point(x,y);
		if(this.__hitTest(x,y,true,stack,true,this)) {
			target = stack[stack.length - 1];
		} else {
			target = this;
			stack = [this];
		}
		if(target == null) {
			target = this;
		}
		var clickType = null;
		switch(type) {
		case "middleMouseDown":
			this.__mouseDownMiddle = target;
			break;
		case "middleMouseUp":
			if(this.__mouseDownMiddle == target) {
				clickType = "middleClick";
			}
			this.__mouseDownMiddle = null;
			break;
		case "mouseDown":
			if(target.get_tabEnabled()) {
				this.set_focus(target);
			} else {
				this.set_focus(null);
			}
			this.__mouseDownLeft = target;
			break;
		case "mouseUp":
			if(this.__mouseDownLeft == target) {
				clickType = "click";
			}
			this.__mouseDownLeft = null;
			break;
		case "rightMouseDown":
			this.__mouseDownRight = target;
			break;
		case "rightMouseUp":
			if(this.__mouseDownRight == target) {
				clickType = "rightClick";
			}
			this.__mouseDownRight = null;
			break;
		default:
		}
		this.__fireEvent(openfl_events_MouseEvent.__create(type,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
		if(clickType != null) {
			this.__fireEvent(openfl_events_MouseEvent.__create(clickType,button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
			if(type == "mouseUp" && (js_Boot.__cast(target , openfl_display_InteractiveObject)).doubleClickEnabled) {
				var currentTime = openfl_Lib.getTimer();
				if(currentTime - this.__lastClickTime < 500) {
					this.__fireEvent(openfl_events_MouseEvent.__create("doubleClick",button,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target),stack);
					this.__lastClickTime = 0;
				} else {
					this.__lastClickTime = currentTime;
				}
			}
		}
		var cursor = null;
		var _g = 0;
		while(_g < stack.length) {
			var target1 = stack[_g];
			++_g;
			cursor = target1.__getCursor();
			if(cursor != null) {
				lime_ui_Mouse.set_cursor(cursor);
				break;
			}
		}
		if(cursor == null) {
			lime_ui_Mouse.set_cursor(lime_ui_MouseCursor.ARROW);
		}
		var event;
		var localPoint;
		var _g1 = 0;
		var _g11 = this.__mouseOutStack;
		while(_g1 < _g11.length) {
			var target2 = _g11[_g1];
			++_g1;
			if(stack.indexOf(target2) == -1) {
				HxOverrides.remove(this.__mouseOutStack,target2);
				localPoint = target2.globalToLocal(targetPoint);
				event = openfl_events_MouseEvent.__create("mouseOut",button,this.__mouseX,this.__mouseY,localPoint,target2);
				event.bubbles = false;
				target2.__dispatchEvent(event);
			}
		}
		var _g2 = 0;
		while(_g2 < stack.length) {
			var target3 = stack[_g2];
			++_g2;
			if(this.__mouseOutStack.indexOf(target3) == -1) {
				if(target3.hasEventListener("mouseOver")) {
					localPoint = target3.globalToLocal(targetPoint);
					event = openfl_events_MouseEvent.__create("mouseOver",button,this.__mouseX,this.__mouseY,localPoint,target3);
					event.bubbles = false;
					target3.__dispatchEvent(event);
				}
				if(target3.hasEventListener("mouseOut")) {
					this.__mouseOutStack.push(target3);
				}
			}
		}
		if(this.__dragObject != null) {
			this.__drag(targetPoint);
		}
	}
	,__onMouseWheel: function(deltaX,deltaY) {
		var x = this.__mouseX;
		var y = this.__mouseY;
		var stack = [];
		if(!this.__hitTest(x,y,false,stack,true,this)) {
			stack = [this];
		}
		var target = stack[stack.length - 1];
		var targetPoint = new openfl_geom_Point(x,y);
		this.__fireEvent(openfl_events_MouseEvent.__create("mouseWheel",0,this.__mouseX,this.__mouseY,target == this?targetPoint:target.globalToLocal(targetPoint),target,deltaY | 0),stack);
	}
	,__onTouch: function(type,touch) {
		var point = new openfl_geom_Point(touch.x * this.stageWidth,touch.y * this.stageHeight);
		this.__mouseX = point.x;
		this.__mouseY = point.y;
		var __stack = [];
		if(this.__hitTest(this.__mouseX,this.__mouseY,false,__stack,true,this)) {
			var target = __stack[__stack.length - 1];
			if(target == null) {
				target = this;
			}
			var localPoint = target.globalToLocal(point);
			var touchEvent = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,localPoint,target);
			touchEvent.touchPointID = touch.id;
			touchEvent.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent,__stack);
		} else {
			var touchEvent1 = openfl_events_TouchEvent.__create(type,null,this.__mouseX,this.__mouseY,point,this);
			touchEvent1.touchPointID = touch.id;
			touchEvent1.isPrimaryTouchPoint = true;
			this.__fireEvent(touchEvent1,[this.stage]);
		}
	}
	,__resize: function() {
	}
	,__startDrag: function(sprite,lockCenter,bounds) {
		this.__dragBounds = bounds == null?null:bounds.clone();
		this.__dragObject = sprite;
		if(this.__dragObject != null) {
			if(lockCenter) {
				this.__dragOffsetX = -this.__dragObject.get_width() / 2;
				this.__dragOffsetY = -this.__dragObject.get_height() / 2;
			} else {
				var mouse = new openfl_geom_Point(this.get_mouseX(),this.get_mouseY());
				var parent = this.__dragObject.parent;
				if(parent != null) {
					mouse = parent.globalToLocal(mouse);
				}
				this.__dragOffsetX = this.__dragObject.get_x() - mouse.x;
				this.__dragOffsetY = this.__dragObject.get_y() - mouse.y;
			}
		}
	}
	,__stopDrag: function(sprite) {
		this.__dragBounds = null;
		this.__dragObject = null;
	}
	,__update: function(transformOnly,updateChildren,maskGrahpics) {
		if(transformOnly) {
			if(openfl_display_DisplayObject.__worldTransformDirty > 0) {
				openfl_display_DisplayObjectContainer.prototype.__update.call(this,true,updateChildren,maskGrahpics);
				if(updateChildren) {
					openfl_display_DisplayObject.__worldTransformDirty = 0;
					this.__dirty = true;
				}
			}
		} else if(openfl_display_DisplayObject.__worldTransformDirty > 0 || this.__dirty || openfl_display_DisplayObject.__worldRenderDirty > 0) {
			openfl_display_DisplayObjectContainer.prototype.__update.call(this,false,updateChildren,maskGrahpics);
			if(updateChildren) {
				openfl_display_DisplayObject.__worldTransformDirty = 0;
				openfl_display_DisplayObject.__worldRenderDirty = 0;
				this.__dirty = false;
			}
		}
	}
	,get_mouseX: function() {
		return this.__mouseX;
	}
	,get_mouseY: function() {
		return this.__mouseY;
	}
	,canvas_onContextLost: function(event) {
	}
	,canvas_onContextRestored: function(event) {
	}
	,get_color: function() {
		return this.__color;
	}
	,set_color: function(value) {
		this.__colorSplit = [((value & 16711680) >>> 16) / 255,((value & 65280) >>> 8) / 255,(value & 255) / 255];
		this.__colorString = "#" + StringTools.hex(value,6);
		return this.__color = value;
	}
	,get_displayState: function() {
		return this.__displayState;
	}
	,set_displayState: function(value) {
		if(this.window != null) {
			if(value == 2) {
				if(this.window.__fullscreen) {
					this.window.set_fullscreen(false);
					this.stageWidth = this.window.__width * this.window.__scale | 0;
					this.stageHeight = this.window.__height * this.window.__scale | 0;
					this.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,false,true));
				}
			} else if(!this.window.__fullscreen) {
				this.window.set_fullscreen(true);
				this.stageWidth = this.window.__width * this.window.__scale | 0;
				this.stageHeight = this.window.__height * this.window.__scale | 0;
				this.dispatchEvent(new openfl_events_FullScreenEvent("fullScreen",false,false,true,true));
			}
		}
		return this.__displayState = value;
	}
	,get_focus: function() {
		return this.__focus;
	}
	,set_focus: function(value) {
		if(value != this.__focus) {
			var oldFocus = this.__focus;
			this.__focus = value;
			if(oldFocus != null) {
				var event = new openfl_events_FocusEvent("focusOut",true,false,this.__focus,false,0);
				this.__stack = [];
				oldFocus.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event,this.__stack);
			}
			if(this.__focus != null) {
				var event1 = new openfl_events_FocusEvent("focusIn",true,false,oldFocus,false,0);
				this.__stack = [];
				value.__getInteractive(this.__stack);
				this.__stack.reverse();
				this.__fireEvent(event1,this.__stack);
			}
		}
		return this.__focus;
	}
	,get_frameRate: function() {
		if(this.application != null) {
			return this.application.backend.getFrameRate();
		}
		return 0;
	}
	,set_frameRate: function(value) {
		if(this.application != null) {
			return this.application.backend.setFrameRate(value);
		}
		return value;
	}
	,__class__: openfl_display_Stage
	,__properties__: $extend(openfl_display_DisplayObjectContainer.prototype.__properties__,{set_frameRate:"set_frameRate",get_frameRate:"get_frameRate",set_focus:"set_focus",get_focus:"get_focus",set_displayState:"set_displayState",get_displayState:"get_displayState",set_color:"set_color",get_color:"get_color"})
});
var openfl_display_Stage3D = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.display.Stage3D"] = openfl_display_Stage3D;
openfl_display_Stage3D.__name__ = ["openfl","display","Stage3D"];
openfl_display_Stage3D.__super__ = openfl_events_EventDispatcher;
openfl_display_Stage3D.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context3D: null
	,visible: null
	,x: null
	,y: null
	,requestContext3D: function(context3DRenderMode) {
		if(context3DRenderMode == null) {
			context3DRenderMode = "";
		}
		var _gthis = this;
		if(openfl_display_OpenGLView.get_isSupported()) {
			haxe_Timer.delay(function() {
				_gthis.context3D = new openfl_display3D_Context3D();
				_gthis.dispatchEvent(new openfl_events_Event("context3DCreate"));
			},1);
		} else {
			haxe_Timer.delay(function() {
				_gthis.dispatchEvent(new openfl_events_ErrorEvent("error"));
			},1);
		}
	}
	,__class__: openfl_display_Stage3D
});
var openfl_display__$StageAlign_StageAlign_$Impl_$ = {};
$hxClasses["openfl.display._StageAlign.StageAlign_Impl_"] = openfl_display__$StageAlign_StageAlign_$Impl_$;
openfl_display__$StageAlign_StageAlign_$Impl_$.__name__ = ["openfl","display","_StageAlign","StageAlign_Impl_"];
openfl_display__$StageAlign_StageAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bottom":
		return 0;
	case "bottomLeft":
		return 1;
	case "bottomRight":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "top":
		return 5;
	case "topLeft":
		return 6;
	case "topRight":
		return 7;
	default:
		return null;
	}
};
openfl_display__$StageAlign_StageAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bottom";
	case 1:
		return "bottomLeft";
	case 2:
		return "bottomRight";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "top";
	case 6:
		return "topLeft";
	case 7:
		return "topRight";
	default:
		return null;
	}
};
var openfl_display__$StageDisplayState_StageDisplayState_$Impl_$ = {};
$hxClasses["openfl.display._StageDisplayState.StageDisplayState_Impl_"] = openfl_display__$StageDisplayState_StageDisplayState_$Impl_$;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.__name__ = ["openfl","display","_StageDisplayState","StageDisplayState_Impl_"];
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.fromString = function(value) {
	switch(value) {
	case "fullScreen":
		return 0;
	case "fullScreenInteractive":
		return 1;
	case "normal":
		return 2;
	default:
		return null;
	}
};
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "fullScreen";
	case 1:
		return "fullScreenInteractive";
	case 2:
		return "normal";
	default:
		return null;
	}
};
var openfl_display__$StageQuality_StageQuality_$Impl_$ = {};
$hxClasses["openfl.display._StageQuality.StageQuality_Impl_"] = openfl_display__$StageQuality_StageQuality_$Impl_$;
openfl_display__$StageQuality_StageQuality_$Impl_$.__name__ = ["openfl","display","_StageQuality","StageQuality_Impl_"];
openfl_display__$StageQuality_StageQuality_$Impl_$.fromString = function(value) {
	switch(value) {
	case "best":
		return 0;
	case "high":
		return 1;
	case "low":
		return 2;
	case "medium":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageQuality_StageQuality_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "best";
	case 1:
		return "high";
	case 2:
		return "low";
	case 3:
		return "medium";
	default:
		return null;
	}
};
var openfl_display__$StageScaleMode_StageScaleMode_$Impl_$ = {};
$hxClasses["openfl.display._StageScaleMode.StageScaleMode_Impl_"] = openfl_display__$StageScaleMode_StageScaleMode_$Impl_$;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.__name__ = ["openfl","display","_StageScaleMode","StageScaleMode_Impl_"];
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.fromString = function(value) {
	switch(value) {
	case "exactFit":
		return 0;
	case "noBorder":
		return 1;
	case "noScale":
		return 2;
	case "showAll":
		return 3;
	default:
		return null;
	}
};
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "exactFit";
	case 1:
		return "noBorder";
	case 2:
		return "noScale";
	case 3:
		return "showAll";
	default:
		return null;
	}
};
var openfl_display_Tilesheet = function(image) {
	this.__bitmap = image;
	this.__centerPoints = [];
	this.__tileRects = [];
	this.__tileUVs = [];
	this.__rectTile = new openfl_geom_Rectangle();
	this.__rectUV = new openfl_geom_Rectangle();
	this.__point = new openfl_geom_Point();
};
$hxClasses["openfl.display.Tilesheet"] = openfl_display_Tilesheet;
openfl_display_Tilesheet.__name__ = ["openfl","display","Tilesheet"];
openfl_display_Tilesheet.prototype = {
	__bitmap: null
	,__centerPoints: null
	,__tileRects: null
	,__tileUVs: null
	,__rectTile: null
	,__rectUV: null
	,__point: null
	,addTileRect: function(rectangle,centerPoint) {
		this.__tileRects.push(rectangle);
		if(centerPoint == null) {
			centerPoint = openfl_display_Tilesheet.__defaultPoint;
		}
		this.__centerPoints.push(centerPoint);
		this.__tileUVs.push(new openfl_geom_Rectangle(rectangle.get_left() / this.__bitmap.width,rectangle.get_top() / this.__bitmap.height,rectangle.get_right() / this.__bitmap.width,rectangle.get_bottom() / this.__bitmap.height));
		return this.__tileRects.length - 1;
	}
	,drawTiles: function(graphics,tileData,smooth,flags,count) {
		if(count == null) {
			count = -1;
		}
		if(flags == null) {
			flags = 0;
		}
		if(smooth == null) {
			smooth = false;
		}
		graphics.drawTiles(this,tileData,smooth,flags,null,count);
	}
	,getTileCenter: function(index) {
		return this.__centerPoints[index];
	}
	,getTileRect: function(index) {
		return this.__tileRects[index];
	}
	,getTileUVs: function(index) {
		return this.__tileUVs[index];
	}
	,__class__: openfl_display_Tilesheet
};
var openfl_display__$TriangleCulling_TriangleCulling_$Impl_$ = {};
$hxClasses["openfl.display._TriangleCulling.TriangleCulling_Impl_"] = openfl_display__$TriangleCulling_TriangleCulling_$Impl_$;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.__name__ = ["openfl","display","_TriangleCulling","TriangleCulling_Impl_"];
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.fromString = function(value) {
	switch(value) {
	case "negative":
		return 0;
	case "none":
		return 1;
	case "positive":
		return 2;
	default:
		return null;
	}
};
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "negative";
	case 1:
		return "none";
	case 2:
		return "positive";
	default:
		return null;
	}
};
var openfl_display_Window = function(config) {
	lime_ui_Window.call(this,config);
};
$hxClasses["openfl.display.Window"] = openfl_display_Window;
openfl_display_Window.__name__ = ["openfl","display","Window"];
openfl_display_Window.__super__ = lime_ui_Window;
openfl_display_Window.prototype = $extend(lime_ui_Window.prototype,{
	create: function(application) {
		lime_ui_Window.prototype.create.call(this,application);
		this.stage = new openfl_display_Stage(this,Object.prototype.hasOwnProperty.call(this.config,"background")?this.config.background:16777215);
		application.addModule(this.stage);
	}
	,__class__: openfl_display_Window
});
var openfl_display3D_Context3D = function() {
	this.disposed = false;
	this.stencilCompareMode = 519;
	this.stencilRef = 0;
	this.stencilReadMask = 255;
	this._yFlip = 1;
	this.vertexBuffersCreated = [];
	this.indexBuffersCreated = [];
	this.programsCreated = [];
	this.texturesCreated = [];
	this.samplerParameters = [];
	var _g1 = 0;
	var _g = openfl_display3D_Context3D.MAX_SAMPLERS;
	while(_g1 < _g) {
		var i = _g1++;
		this.samplerParameters[i] = new openfl_display3D__$Context3D_SamplerState();
		this.samplerParameters[i].wrap = openfl_display3D_Context3DWrapMode.CLAMP;
		this.samplerParameters[i].filter = openfl_display3D_Context3DTextureFilter.LINEAR;
		this.samplerParameters[i].mipfilter = openfl_display3D_Context3DMipFilter.MIPNONE;
	}
	var stage = openfl_Lib.current.stage;
	this.ogl = new openfl_display_OpenGLView();
	this.ogl.set_scrollRect(new openfl_geom_Rectangle(0,0,stage.stageWidth,stage.stageHeight));
	this.scrollRect = this.ogl.get_scrollRect().clone();
	this.ogl.set_width(stage.stageWidth);
	this.ogl.set_height(stage.stageHeight);
	stage.addChildAt(this.ogl,0);
	lime_graphics_opengl_GL.context.pixelStorei(37440,1);
	lime_graphics_opengl_GL.context.pixelStorei(37441,1);
};
$hxClasses["openfl.display3D.Context3D"] = openfl_display3D_Context3D;
openfl_display3D_Context3D.__name__ = ["openfl","display3D","Context3D"];
openfl_display3D_Context3D.prototype = {
	driverInfo: null
	,enableErrorChecking: null
	,blendDestinationFactor: null
	,blendEnabled: null
	,blendSourceFactor: null
	,currentProgram: null
	,disposed: null
	,drawing: null
	,framebuffer: null
	,indexBuffersCreated: null
	,ogl: null
	,programsCreated: null
	,renderbuffer: null
	,samplerParameters: null
	,scrollRect: null
	,stencilbuffer: null
	,stencilCompareMode: null
	,stencilRef: null
	,stencilReadMask: null
	,texturesCreated: null
	,vertexBuffersCreated: null
	,_yFlip: null
	,backBufferDepthAndStencil: null
	,rttDepthAndStencil: null
	,scissorRectangle: null
	,renderToTexture: null
	,rttWidth: null
	,rttHeight: null
	,clear: function(red,green,blue,alpha,depth,stencil,mask) {
		if(mask == null) {
			mask = 17664;
		}
		if(stencil == null) {
			stencil = 0;
		}
		if(depth == null) {
			depth = 1;
		}
		if(alpha == null) {
			alpha = 1;
		}
		if(blue == null) {
			blue = 0;
		}
		if(green == null) {
			green = 0;
		}
		if(red == null) {
			red = 0;
		}
		if(!this.drawing) {
			this.__updateBlendStatus();
			this.drawing = true;
		}
		if(this.scissorRectangle != null) {
			lime_graphics_opengl_GL.context.disable(3089);
		}
		lime_graphics_opengl_GL.context.clearColor(red,green,blue,alpha);
		lime_graphics_opengl_GL.context.clearDepth(depth);
		lime_graphics_opengl_GL.context.clearStencil(stencil);
		lime_graphics_opengl_GL.context.clear(mask);
		if(this.scissorRectangle != null) {
			lime_graphics_opengl_GL.context.enable(3089);
		}
	}
	,configureBackBuffer: function(width,height,antiAlias,enableDepthAndStencil) {
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = true;
		}
		this.backBufferDepthAndStencil = enableDepthAndStencil;
		this.updateDepthAndStencilState();
		this.setBackBufferViewPort(null,null,width,height);
		this.updateScissorRectangle();
	}
	,setBackBufferViewPort: function(x,y,width,height) {
		if(x == null) {
			x = this.scrollRect.x | 0;
		}
		if(y == null) {
			y = this.scrollRect.y | 0;
		}
		if(width == null) {
			width = this.scrollRect.width | 0;
		}
		if(height == null) {
			height = this.scrollRect.height | 0;
		}
		this.scrollRect.x = x;
		this.scrollRect.y = y;
		this.scrollRect.width = width;
		this.scrollRect.height = height;
		this.ogl.set_width(x + width);
		this.ogl.set_height(y + height);
		this.updateBackBufferViewPort();
	}
	,updateBackBufferViewPort: function() {
		if(!this.renderToTexture) {
			lime_graphics_opengl_GL.context.viewport(this.scrollRect.x | 0,this.scrollRect.y | 0,this.scrollRect.width | 0,this.scrollRect.height | 0);
		}
	}
	,updateDepthAndStencilState: function() {
		if(this.renderToTexture?this.rttDepthAndStencil:this.backBufferDepthAndStencil) {
			if(lime_app_Application.current.windows[0].config.depthBuffer) {
				lime_graphics_opengl_GL.context.enable(2929);
			}
			if(lime_app_Application.current.windows[0].config.stencilBuffer) {
				lime_graphics_opengl_GL.context.enable(2960);
			}
		} else {
			lime_graphics_opengl_GL.context.disable(2929);
			lime_graphics_opengl_GL.context.disable(2960);
		}
	}
	,createCubeTexture: function(size,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		var texture = new openfl_display3D_textures_CubeTexture(this,lime_graphics_opengl_GL.context.createTexture(),size);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createIndexBuffer: function(numIndices,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
		}
		var indexBuffer = new openfl_display3D_IndexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numIndices,bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW?35044:35048);
		this.indexBuffersCreated.push(indexBuffer);
		return indexBuffer;
	}
	,createProgram: function() {
		var program = new openfl_display3D_Program3D(this,lime_graphics_opengl_GL.context.createProgram());
		this.programsCreated.push(program);
		return program;
	}
	,createRectangleTexture: function(width,height,format,optimizeForRenderToTexture) {
		var texture = new openfl_display3D_textures_RectangleTexture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createTexture: function(width,height,format,optimizeForRenderToTexture,streamingLevels) {
		if(streamingLevels == null) {
			streamingLevels = 0;
		}
		var texture = new openfl_display3D_textures_Texture(this,lime_graphics_opengl_GL.context.createTexture(),optimizeForRenderToTexture,width,height);
		this.texturesCreated.push(texture);
		return texture;
	}
	,createVertexBuffer: function(numVertices,data32PerVertex,bufferUsage) {
		if(bufferUsage == null) {
			bufferUsage = openfl_display3D_Context3DBufferUsage.STATIC_DRAW;
		}
		var vertexBuffer = new openfl_display3D_VertexBuffer3D(this,lime_graphics_opengl_GL.context.createBuffer(),numVertices,data32PerVertex,bufferUsage == openfl_display3D_Context3DBufferUsage.STATIC_DRAW?35044:35048);
		this.vertexBuffersCreated.push(vertexBuffer);
		return vertexBuffer;
	}
	,__deleteTexture: function(texture) {
		if(texture.glTexture == null) {
			return;
		}
		HxOverrides.remove(this.texturesCreated,texture);
		lime_graphics_opengl_GL.context.deleteTexture(texture.glTexture);
		texture.glTexture = null;
	}
	,__deleteVertexBuffer: function(buffer) {
		if(buffer.glBuffer == null) {
			return;
		}
		HxOverrides.remove(this.vertexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteIndexBuffer: function(buffer) {
		if(buffer.glBuffer == null) {
			return;
		}
		HxOverrides.remove(this.indexBuffersCreated,buffer);
		lime_graphics_opengl_GL.context.deleteBuffer(buffer.glBuffer);
		buffer.glBuffer = null;
	}
	,__deleteProgram: function(program) {
		if(program.glProgram == null) {
			return;
		}
		HxOverrides.remove(this.programsCreated,program);
		lime_graphics_opengl_GL.context.deleteProgram(program.glProgram);
		program.glProgram = null;
	}
	,dispose: function() {
		var _g = 0;
		var _g1 = this.vertexBuffersCreated;
		while(_g < _g1.length) {
			var vertexBuffer = _g1[_g];
			++_g;
			vertexBuffer.dispose();
		}
		this.vertexBuffersCreated = null;
		var _g2 = 0;
		var _g11 = this.indexBuffersCreated;
		while(_g2 < _g11.length) {
			var indexBuffer = _g11[_g2];
			++_g2;
			indexBuffer.dispose();
		}
		this.indexBuffersCreated = null;
		var _g3 = 0;
		var _g12 = this.programsCreated;
		while(_g3 < _g12.length) {
			var program = _g12[_g3];
			++_g3;
			program.dispose();
		}
		this.programsCreated = null;
		this.samplerParameters = null;
		var _g4 = 0;
		var _g13 = this.texturesCreated;
		while(_g4 < _g13.length) {
			var texture = _g13[_g4];
			++_g4;
			texture.dispose();
		}
		this.texturesCreated = null;
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.deleteFramebuffer(this.framebuffer);
			this.framebuffer = null;
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.deleteRenderbuffer(this.renderbuffer);
			this.renderbuffer = null;
		}
		this.disposed = true;
	}
	,drawToBitmapData: function(destination) {
	}
	,drawTriangles: function(indexBuffer,firstIndex,numTriangles) {
		if(numTriangles == null) {
			numTriangles = -1;
		}
		if(firstIndex == null) {
			firstIndex = 0;
		}
		lime_graphics_opengl_GL.context.uniform1f(lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,"yflip"),this._yFlip);
		if(!this.drawing) {
			throw new js__$Boot_HaxeError(new openfl_errors_Error("Need to clear before drawing if the buffer has not been cleared since the last present() call."));
		}
		var numIndices = numTriangles == -1?indexBuffer.numIndices:numTriangles * 3;
		var byteOffset = firstIndex * 2;
		lime_graphics_opengl_GL.context.bindBuffer(34963,indexBuffer.glBuffer);
		lime_graphics_opengl_GL.context.drawElements(4,numIndices,5123,byteOffset);
	}
	,present: function() {
		this.drawing = false;
		lime_graphics_opengl_GL.context.useProgram(null);
		lime_graphics_opengl_GL.context.bindBuffer(34962,null);
		lime_graphics_opengl_GL.context.disable(2884);
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		}
	}
	,removeRenderMethod: function(func) {
		this.ogl.set_render(null);
	}
	,setBlendFactors: function(sourceFactor,destinationFactor) {
		this.blendEnabled = true;
		this.blendSourceFactor = sourceFactor;
		this.blendDestinationFactor = destinationFactor;
		this.__updateBlendStatus();
	}
	,setColorMask: function(red,green,blue,alpha) {
		lime_graphics_opengl_GL.context.colorMask(red,green,blue,alpha);
	}
	,setCulling: function(triangleFaceToCull) {
		if(triangleFaceToCull == 0) {
			lime_graphics_opengl_GL.context.disable(2884);
		} else {
			lime_graphics_opengl_GL.context.enable(2884);
			switch(triangleFaceToCull) {
			case 1028:
				lime_graphics_opengl_GL.context.cullFace(1028);
				break;
			case 1029:
				lime_graphics_opengl_GL.context.cullFace(1029);
				break;
			case 1032:
				lime_graphics_opengl_GL.context.cullFace(1032);
				break;
			default:
				throw new js__$Boot_HaxeError("Unknown Context3DTriangleFace type.");
			}
		}
		switch(triangleFaceToCull) {
		case 0:
			this._yFlip = 1;
			break;
		case 1028:
			this._yFlip = 1;
			break;
		case 1029:
			this._yFlip = -1;
			break;
		case 1032:
			this._yFlip = 1;
			break;
		default:
			throw new js__$Boot_HaxeError("Unknown culling mode " + triangleFaceToCull + ".");
		}
	}
	,setDepthTest: function(depthMask,passCompareMode) {
		lime_graphics_opengl_GL.context.depthFunc(passCompareMode);
		lime_graphics_opengl_GL.context.depthMask(depthMask);
	}
	,setGLSLProgramConstantsFromByteArray: function(locationName,data,byteArrayOffset) {
		if(byteArrayOffset == null) {
			byteArrayOffset = 0;
		}
		data.position = byteArrayOffset;
		lime_graphics_opengl_GL.context.uniform4f(lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName),data.readFloat(),data.readFloat(),data.readFloat(),data.readFloat());
	}
	,setGLSLProgramConstantsFromMatrix: function(locationName,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		var this1 = matrix.rawData;
		var value = [];
		var _g1 = 0;
		var _g = this1.data.length;
		while(_g1 < _g) value.push(this1.data[_g1++]);
		var array = value;
		lime_graphics_opengl_GL.context.uniformMatrix4fv(location,!transposedMatrix,array != null?new Float32Array(array):null);
	}
	,setGLSLProgramConstantsFromVector4: function(locationName,data,startIndex) {
		if(startIndex == null) {
			startIndex = 0;
		}
		lime_graphics_opengl_GL.context.uniform4f(lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName),data[startIndex],data[startIndex + 1],data[startIndex + 2],data[startIndex + 3]);
	}
	,setGLSLTextureAt: function(locationName,texture,textureIndex) {
		switch(textureIndex) {
		case 0:
			lime_graphics_opengl_GL.context.activeTexture(33984);
			break;
		case 1:
			lime_graphics_opengl_GL.context.activeTexture(33985);
			break;
		case 2:
			lime_graphics_opengl_GL.context.activeTexture(33986);
			break;
		case 3:
			lime_graphics_opengl_GL.context.activeTexture(33987);
			break;
		case 4:
			lime_graphics_opengl_GL.context.activeTexture(33988);
			break;
		case 5:
			lime_graphics_opengl_GL.context.activeTexture(33989);
			break;
		case 6:
			lime_graphics_opengl_GL.context.activeTexture(33990);
			break;
		case 7:
			lime_graphics_opengl_GL.context.activeTexture(33991);
			break;
		default:
			throw new js__$Boot_HaxeError("Does not support texture8 or more");
		}
		if(texture == null) {
			lime_graphics_opengl_GL.context.bindTexture(3553,null);
			lime_graphics_opengl_GL.context.bindTexture(34067,null);
			return;
		}
		var location = lime_graphics_opengl_GL.context.getUniformLocation(this.currentProgram.glProgram,locationName);
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			lime_graphics_opengl_GL.context.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_Texture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.context.bindTexture(3553,(js_Boot.__cast(texture , openfl_display3D_textures_RectangleTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			lime_graphics_opengl_GL.context.bindTexture(34067,(js_Boot.__cast(texture , openfl_display3D_textures_CubeTexture)).glTexture);
			lime_graphics_opengl_GL.context.uniform1i(location,textureIndex);
		} else {
			throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
		}
		var parameters = this.samplerParameters[textureIndex];
		if(parameters != null) {
			this.setTextureParameters(texture,parameters.wrap,parameters.filter,parameters.mipfilter);
		} else {
			this.setTextureParameters(texture,openfl_display3D_Context3DWrapMode.CLAMP,openfl_display3D_Context3DTextureFilter.NEAREST,openfl_display3D_Context3DMipFilter.MIPNONE);
		}
	}
	,setGLSLVertexBufferAt: function(locationName,buffer,bufferOffset,format) {
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		var location = this.currentProgram != null && this.currentProgram.glProgram != null?lime_graphics_opengl_GL.context.getAttribLocation(this.currentProgram.glProgram,locationName):-1;
		if(location == -1) {
			return;
		}
		if(buffer == null) {
			if(location > -1) {
				lime_graphics_opengl_GL.context.disableVertexAttribArray(location);
			}
			return;
		}
		lime_graphics_opengl_GL.context.bindBuffer(34962,buffer.glBuffer);
		var dimension = 4;
		if(format == openfl_display3D_Context3DVertexBufferFormat.BYTES_4) {
			dimension = 4;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_1) {
			dimension = 1;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_2) {
			dimension = 2;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_3) {
			dimension = 3;
		} else if(format == openfl_display3D_Context3DVertexBufferFormat.FLOAT_4) {
			dimension = 4;
		} else {
			throw new js__$Boot_HaxeError("Buffer format " + Std.string(format) + " is not supported");
		}
		lime_graphics_opengl_GL.context.enableVertexAttribArray(location);
		lime_graphics_opengl_GL.context.vertexAttribPointer(location,dimension,5126,false,buffer.data32PerVertex * 4,bufferOffset * 4);
	}
	,setProgram: function(program3D) {
		var glProgram = null;
		if(program3D != null) {
			glProgram = program3D.glProgram;
		}
		lime_graphics_opengl_GL.context.useProgram(glProgram);
		this.currentProgram = program3D;
	}
	,setProgramConstantsFromByteArray: function(programType,firstRegister,numRegisters,data,byteArrayOffset) {
		data.position = byteArrayOffset;
		var _g1 = 0;
		while(_g1 < numRegisters) this.setGLSLProgramConstantsFromByteArray(this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + _g1++),data);
	}
	,setProgramConstantsFromMatrix: function(programType,firstRegister,matrix,transposedMatrix) {
		if(transposedMatrix == null) {
			transposedMatrix = false;
		}
		var d = matrix.rawData;
		if(transposedMatrix) {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[4],d.data[8],d.data[12]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[1],d.data[5],d.data[9],d.data[13]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[2],d.data[6],d.data[10],d.data[14]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[3],d.data[7],d.data[11],d.data[15]],1);
		} else {
			this.setProgramConstantsFromVector(programType,firstRegister,[d.data[0],d.data[1],d.data[2],d.data[3]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 1,[d.data[4],d.data[5],d.data[6],d.data[7]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 2,[d.data[8],d.data[9],d.data[10],d.data[11]],1);
			this.setProgramConstantsFromVector(programType,firstRegister + 3,[d.data[12],d.data[13],d.data[14],d.data[15]],1);
		}
	}
	,setProgramConstantsFromVector: function(programType,firstRegister,data,numRegisters) {
		if(numRegisters == null) {
			numRegisters = 1;
		}
		var _g1 = 0;
		while(_g1 < numRegisters) {
			var i = _g1++;
			this.setGLSLProgramConstantsFromVector4(this.__getUniformLocationNameFromAgalRegisterIndex(programType,firstRegister + i),data,i * 4);
		}
	}
	,setRenderMethod: function(func) {
		this.ogl.set_render(function(rect) {
			func(null);
		});
	}
	,setRenderToBackBuffer: function() {
		lime_graphics_opengl_GL.context.disable(2929);
		lime_graphics_opengl_GL.context.disable(2960);
		lime_graphics_opengl_GL.context.disable(3089);
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		if(this.framebuffer != null) {
			lime_graphics_opengl_GL.context.bindFramebuffer(36160,null);
		}
		if(this.renderbuffer != null) {
			lime_graphics_opengl_GL.context.bindRenderbuffer(36161,null);
		}
		this.renderToTexture = false;
		this.updateBackBufferViewPort();
		this.updateScissorRectangle();
		this.updateDepthAndStencilState();
	}
	,setRenderToTexture: function(texture,enableDepthAndStencil,antiAlias,surfaceSelector) {
		if(surfaceSelector == null) {
			surfaceSelector = 0;
		}
		if(antiAlias == null) {
			antiAlias = 0;
		}
		if(enableDepthAndStencil == null) {
			enableDepthAndStencil = false;
		}
		if(this.framebuffer == null) {
			this.framebuffer = lime_graphics_opengl_GL.context.createFramebuffer();
		}
		lime_graphics_opengl_GL.context.bindFramebuffer(36160,this.framebuffer);
		if(this.renderbuffer == null) {
			this.renderbuffer = lime_graphics_opengl_GL.context.createRenderbuffer();
		}
		lime_graphics_opengl_GL.context.bindRenderbuffer(36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		}
		lime_graphics_opengl_GL.context.framebufferTexture2D(36160,36064,3553,texture.glTexture,0);
		lime_graphics_opengl_GL.context.renderbufferStorage(36161,34041,texture.width,texture.height);
		lime_graphics_opengl_GL.context.framebufferRenderbuffer(36160,33306,36161,this.renderbuffer);
		if(enableDepthAndStencil) {
			lime_graphics_opengl_GL.context.enable(2929);
			lime_graphics_opengl_GL.context.enable(2960);
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,texture.glTexture);
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,texture.width,texture.height,0,6408,5121,null);
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9985);
		lime_graphics_opengl_GL.context.viewport(0,0,texture.width,texture.height);
		this.renderToTexture = true;
		this.rttDepthAndStencil = enableDepthAndStencil;
		this.rttWidth = texture.width;
		this.rttHeight = texture.height;
		this.updateScissorRectangle();
		this.updateDepthAndStencilState();
	}
	,setSamplerStateAt: function(sampler,wrap,filter,mipfilter) {
		if(0 <= sampler && sampler < openfl_display3D_Context3D.MAX_SAMPLERS) {
			this.samplerParameters[sampler].wrap = wrap;
			this.samplerParameters[sampler].filter = filter;
			this.samplerParameters[sampler].mipfilter = mipfilter;
		} else {
			throw new js__$Boot_HaxeError("Sampler is out of bounds.");
		}
	}
	,setScissorRectangle: function(rectangle) {
		this.scissorRectangle = rectangle;
		if(rectangle == null) {
			lime_graphics_opengl_GL.context.disable(3089);
			return;
		}
		lime_graphics_opengl_GL.context.enable(3089);
		this.updateScissorRectangle();
	}
	,updateScissorRectangle: function() {
		if(this.scissorRectangle == null) {
			return;
		}
		lime_graphics_opengl_GL.context.scissor(this.scissorRectangle.x | 0,(this.renderToTexture?this.rttHeight:this.scrollRect.height | 0) - (this.scissorRectangle.y | 0) - (this.scissorRectangle.height | 0) | 0,this.scissorRectangle.width | 0,this.scissorRectangle.height | 0);
	}
	,setStencilActions: function(triangleFace,compareMode,actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail) {
		this.stencilCompareMode = compareMode;
		lime_graphics_opengl_GL.context.stencilOp(actionOnBothPass,actionOnDepthFail,actionOnDepthPassStencilFail);
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
	}
	,setStencilReferenceValue: function(referenceValue,readMask,writeMask) {
		if(writeMask == null) {
			writeMask = 255;
		}
		if(readMask == null) {
			readMask = 255;
		}
		this.stencilReadMask = readMask;
		this.stencilRef = referenceValue;
		lime_graphics_opengl_GL.context.stencilFunc(this.stencilCompareMode,this.stencilRef,this.stencilReadMask);
		lime_graphics_opengl_GL.context.stencilMask(writeMask);
	}
	,setTextureAt: function(sampler,texture) {
		this.setGLSLTextureAt("fs" + sampler,texture,sampler);
	}
	,setTextureParameters: function(texture,wrap,filter,mipfilter) {
		if(!openfl_display3D_Context3D.anisotropySupportTested) {
			var ext = lime_graphics_opengl_GL.context.getExtension("EXT_texture_filter_anisotropic");
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) {
				ext = lime_graphics_opengl_GL.context.getExtension("MOZ_EXT_texture_filter_anisotropic");
			}
			if(ext == null || Reflect.field(ext,"MAX_TEXTURE_MAX_ANISOTROPY_EXT") == null) {
				ext = lime_graphics_opengl_GL.context.getExtension("WEBKIT_EXT_texture_filter_anisotropic");
			}
			openfl_display3D_Context3D.supportsAnisotropy = ext != null;
			if(openfl_display3D_Context3D.supportsAnisotropy) {
				openfl_display3D_Context3D.maxSupportedAnisotropy = lime_graphics_opengl_GL.context.getParameter(ext.MAX_TEXTURE_MAX_ANISOTROPY_EXT);
				lime_graphics_opengl_GL.context.texParameteri(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,openfl_display3D_Context3D.maxSupportedAnisotropy);
			}
			openfl_display3D_Context3D.anisotropySupportTested = true;
		}
		if(js_Boot.__instanceof(texture,openfl_display3D_textures_Texture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(3553,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				}
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				}
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				}
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				}
				break;
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				}
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				}
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var tex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !tex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(3553);
				tex.mipmapsGenerated = true;
			}
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_RectangleTexture)) {
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
			switch(filter[1]) {
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				}
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				}
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				}
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				}
				break;
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				}
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(3553,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				}
				break;
			}
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
		} else if(js_Boot.__instanceof(texture,openfl_display3D_textures_CubeTexture)) {
			switch(wrap[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,33071);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,33071);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10242,10497);
				lime_graphics_opengl_GL.context.texParameteri(34067,10243,10497);
				break;
			}
			switch(filter[1]) {
			case 0:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(2,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):2);
				}
				break;
			case 1:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(4,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):4);
				}
				break;
			case 2:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(8,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):8);
				}
				break;
			case 3:
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,_$UInt_UInt_$Impl_$.gt(16,openfl_display3D_Context3D.maxSupportedAnisotropy)?_$UInt_UInt_$Impl_$.toFloat(openfl_display3D_Context3D.maxSupportedAnisotropy):16);
				}
				break;
			case 4:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9729);
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				}
				break;
			case 5:
				lime_graphics_opengl_GL.context.texParameteri(34067,10240,9728);
				if(openfl_display3D_Context3D.supportsAnisotropy) {
					lime_graphics_opengl_GL.context.texParameterf(34067,openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT,1);
				}
				break;
			}
			switch(mipfilter[1]) {
			case 0:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9987);
				break;
			case 1:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,9984);
				break;
			case 2:
				lime_graphics_opengl_GL.context.texParameteri(34067,10241,filter == openfl_display3D_Context3DTextureFilter.NEAREST?9728:9729);
				break;
			}
			var cubetex = texture;
			if(mipfilter != openfl_display3D_Context3DMipFilter.MIPNONE && !cubetex.mipmapsGenerated) {
				lime_graphics_opengl_GL.context.generateMipmap(34067);
				cubetex.mipmapsGenerated = true;
			}
		} else {
			throw new js__$Boot_HaxeError("Texture of type " + Type.getClassName(texture == null?null:js_Boot.getClass(texture)) + " not supported yet");
		}
	}
	,setVertexBufferAt: function(index,buffer,bufferOffset,format) {
		if(bufferOffset == null) {
			bufferOffset = 0;
		}
		this.setGLSLVertexBufferAt("va" + index,buffer,bufferOffset,format);
	}
	,__getUniformLocationNameFromAgalRegisterIndex: function(programType,firstRegister) {
		if(programType == openfl_display3D_Context3DProgramType.VERTEX) {
			return "vc" + firstRegister;
		} else if(programType == openfl_display3D_Context3DProgramType.FRAGMENT) {
			return "fc" + firstRegister;
		}
		throw new js__$Boot_HaxeError("Program Type " + Std.string(programType) + " not supported");
	}
	,__updateBlendStatus: function() {
		if(this.blendEnabled) {
			lime_graphics_opengl_GL.context.enable(3042);
			lime_graphics_opengl_GL.context.blendEquation(32774);
			lime_graphics_opengl_GL.context.blendFunc(this.blendSourceFactor,this.blendDestinationFactor);
		} else {
			lime_graphics_opengl_GL.context.disable(3042);
		}
	}
	,__class__: openfl_display3D_Context3D
};
var openfl_display3D__$Context3D_SamplerState = function() {
};
$hxClasses["openfl.display3D._Context3D.SamplerState"] = openfl_display3D__$Context3D_SamplerState;
openfl_display3D__$Context3D_SamplerState.__name__ = ["openfl","display3D","_Context3D","SamplerState"];
openfl_display3D__$Context3D_SamplerState.prototype = {
	wrap: null
	,filter: null
	,mipfilter: null
	,__class__: openfl_display3D__$Context3D_SamplerState
};
var openfl_display3D_Context3DBufferUsage = $hxClasses["openfl.display3D.Context3DBufferUsage"] = { __ename__ : ["openfl","display3D","Context3DBufferUsage"], __constructs__ : ["STATIC_DRAW","DYNAMIC_DRAW"] };
openfl_display3D_Context3DBufferUsage.STATIC_DRAW = ["STATIC_DRAW",0];
openfl_display3D_Context3DBufferUsage.STATIC_DRAW.toString = $estr;
openfl_display3D_Context3DBufferUsage.STATIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW = ["DYNAMIC_DRAW",1];
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.toString = $estr;
openfl_display3D_Context3DBufferUsage.DYNAMIC_DRAW.__enum__ = openfl_display3D_Context3DBufferUsage;
var openfl_display3D_Context3DClearMask = function() { };
$hxClasses["openfl.display3D.Context3DClearMask"] = openfl_display3D_Context3DClearMask;
openfl_display3D_Context3DClearMask.__name__ = ["openfl","display3D","Context3DClearMask"];
var openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DCompareMode.Context3DCompareMode_Impl_"] = openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.__name__ = ["openfl","display3D","_Context3DCompareMode","Context3DCompareMode_Impl_"];
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DMipFilter = $hxClasses["openfl.display3D.Context3DMipFilter"] = { __ename__ : ["openfl","display3D","Context3DMipFilter"], __constructs__ : ["MIPLINEAR","MIPNEAREST","MIPNONE"] };
openfl_display3D_Context3DMipFilter.MIPLINEAR = ["MIPLINEAR",0];
openfl_display3D_Context3DMipFilter.MIPLINEAR.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPLINEAR.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNEAREST = ["MIPNEAREST",1];
openfl_display3D_Context3DMipFilter.MIPNEAREST.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNEAREST.__enum__ = openfl_display3D_Context3DMipFilter;
openfl_display3D_Context3DMipFilter.MIPNONE = ["MIPNONE",2];
openfl_display3D_Context3DMipFilter.MIPNONE.toString = $estr;
openfl_display3D_Context3DMipFilter.MIPNONE.__enum__ = openfl_display3D_Context3DMipFilter;
var openfl_display3D_Context3DProgramType = $hxClasses["openfl.display3D.Context3DProgramType"] = { __ename__ : ["openfl","display3D","Context3DProgramType"], __constructs__ : ["VERTEX","FRAGMENT"] };
openfl_display3D_Context3DProgramType.VERTEX = ["VERTEX",0];
openfl_display3D_Context3DProgramType.VERTEX.toString = $estr;
openfl_display3D_Context3DProgramType.VERTEX.__enum__ = openfl_display3D_Context3DProgramType;
openfl_display3D_Context3DProgramType.FRAGMENT = ["FRAGMENT",1];
openfl_display3D_Context3DProgramType.FRAGMENT.toString = $estr;
openfl_display3D_Context3DProgramType.FRAGMENT.__enum__ = openfl_display3D_Context3DProgramType;
var openfl_display3D_Context3DTextureFilter = $hxClasses["openfl.display3D.Context3DTextureFilter"] = { __ename__ : ["openfl","display3D","Context3DTextureFilter"], __constructs__ : ["ANISOTROPIC2X","ANISOTROPIC4X","ANISOTROPIC8X","ANISOTROPIC16X","LINEAR","NEAREST"] };
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X = ["ANISOTROPIC2X",0];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC2X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X = ["ANISOTROPIC4X",1];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC4X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X = ["ANISOTROPIC8X",2];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC8X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X = ["ANISOTROPIC16X",3];
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.toString = $estr;
openfl_display3D_Context3DTextureFilter.ANISOTROPIC16X.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.LINEAR = ["LINEAR",4];
openfl_display3D_Context3DTextureFilter.LINEAR.toString = $estr;
openfl_display3D_Context3DTextureFilter.LINEAR.__enum__ = openfl_display3D_Context3DTextureFilter;
openfl_display3D_Context3DTextureFilter.NEAREST = ["NEAREST",5];
openfl_display3D_Context3DTextureFilter.NEAREST.toString = $estr;
openfl_display3D_Context3DTextureFilter.NEAREST.__enum__ = openfl_display3D_Context3DTextureFilter;
var openfl_display3D_Context3DTextureFormat = $hxClasses["openfl.display3D.Context3DTextureFormat"] = { __ename__ : ["openfl","display3D","Context3DTextureFormat"], __constructs__ : ["BGRA","COMPRESSED","COMPRESSED_ALPHA"] };
openfl_display3D_Context3DTextureFormat.BGRA = ["BGRA",0];
openfl_display3D_Context3DTextureFormat.BGRA.toString = $estr;
openfl_display3D_Context3DTextureFormat.BGRA.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED = ["COMPRESSED",1];
openfl_display3D_Context3DTextureFormat.COMPRESSED.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED.__enum__ = openfl_display3D_Context3DTextureFormat;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA = ["COMPRESSED_ALPHA",2];
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.toString = $estr;
openfl_display3D_Context3DTextureFormat.COMPRESSED_ALPHA.__enum__ = openfl_display3D_Context3DTextureFormat;
var openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$ = {};
$hxClasses["openfl.display3D._Context3DTriangleFace.Context3DTriangleFace_Impl_"] = openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.__name__ = ["openfl","display3D","_Context3DTriangleFace","Context3DTriangleFace_Impl_"];
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$._new = function(a) {
	return a;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.fromInt = function(s) {
	return s;
};
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.toInt = function(this1) {
	return this1;
};
var openfl_display3D_Context3DVertexBufferFormat = $hxClasses["openfl.display3D.Context3DVertexBufferFormat"] = { __ename__ : ["openfl","display3D","Context3DVertexBufferFormat"], __constructs__ : ["BYTES_4","FLOAT_1","FLOAT_2","FLOAT_3","FLOAT_4"] };
openfl_display3D_Context3DVertexBufferFormat.BYTES_4 = ["BYTES_4",0];
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.BYTES_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1 = ["FLOAT_1",1];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_1.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2 = ["FLOAT_2",2];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_2.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3 = ["FLOAT_3",3];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_3.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4 = ["FLOAT_4",4];
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.toString = $estr;
openfl_display3D_Context3DVertexBufferFormat.FLOAT_4.__enum__ = openfl_display3D_Context3DVertexBufferFormat;
var openfl_display3D_Context3DWrapMode = $hxClasses["openfl.display3D.Context3DWrapMode"] = { __ename__ : ["openfl","display3D","Context3DWrapMode"], __constructs__ : ["CLAMP","REPEAT"] };
openfl_display3D_Context3DWrapMode.CLAMP = ["CLAMP",0];
openfl_display3D_Context3DWrapMode.CLAMP.toString = $estr;
openfl_display3D_Context3DWrapMode.CLAMP.__enum__ = openfl_display3D_Context3DWrapMode;
openfl_display3D_Context3DWrapMode.REPEAT = ["REPEAT",1];
openfl_display3D_Context3DWrapMode.REPEAT.toString = $estr;
openfl_display3D_Context3DWrapMode.REPEAT.__enum__ = openfl_display3D_Context3DWrapMode;
var openfl_display3D_IndexBuffer3D = function(context,glBuffer,numIndices,bufferUsage) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numIndices = numIndices;
	this.bufferUsage = bufferUsage;
};
$hxClasses["openfl.display3D.IndexBuffer3D"] = openfl_display3D_IndexBuffer3D;
openfl_display3D_IndexBuffer3D.__name__ = ["openfl","display3D","IndexBuffer3D"];
openfl_display3D_IndexBuffer3D.prototype = {
	context: null
	,glBuffer: null
	,numIndices: null
	,bufferUsage: null
	,dispose: function() {
		this.context.__deleteIndexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var length = count * 2;
		var offset = byteArrayOffset + startOffset * 2;
		var indices = length != null?new Int16Array(length):null;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			indices[i] = byteArray.readUnsignedByte();
			++i;
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,this.bufferUsage);
	}
	,uploadFromVector: function(data,startOffset,count) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		var indices = count != null?new Int16Array(count):null;
		var _g1 = startOffset;
		var _g = startOffset + count;
		while(_g1 < _g) {
			var i = _g1++;
			indices[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34963,indices,this.bufferUsage);
	}
	,uploadFromInt16Array: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34963,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34963,data,this.bufferUsage);
	}
	,__class__: openfl_display3D_IndexBuffer3D
};
var openfl_display3D_Program3D = function(context,program) {
	this.context = context;
	this.glProgram = program;
};
$hxClasses["openfl.display3D.Program3D"] = openfl_display3D_Program3D;
openfl_display3D_Program3D.__name__ = ["openfl","display3D","Program3D"];
openfl_display3D_Program3D.prototype = {
	context: null
	,glProgram: null
	,dispose: function() {
		this.context.__deleteProgram(this);
	}
	,upload: function(vertexShader,fragmentShader) {
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,vertexShader);
		lime_graphics_opengl_GL.context.attachShader(this.glProgram,fragmentShader);
		lime_graphics_opengl_GL.context.linkProgram(this.glProgram);
		if(lime_graphics_opengl_GL.context.getProgramParameter(this.glProgram,35714) == 0) {
			var result = lime_graphics_opengl_GL.context.getProgramInfoLog(this.glProgram);
			if(result != "") {
				throw new js__$Boot_HaxeError(result);
			}
		}
	}
	,__class__: openfl_display3D_Program3D
};
var openfl_display3D_VertexBuffer3D = function(context,glBuffer,numVertices,data32PerVertex,bufferUsage) {
	this.context = context;
	this.glBuffer = glBuffer;
	this.numVertices = numVertices;
	this.data32PerVertex = data32PerVertex;
	this.bufferUsage = bufferUsage;
};
$hxClasses["openfl.display3D.VertexBuffer3D"] = openfl_display3D_VertexBuffer3D;
openfl_display3D_VertexBuffer3D.__name__ = ["openfl","display3D","VertexBuffer3D"];
openfl_display3D_VertexBuffer3D.prototype = {
	context: null
	,data32PerVertex: null
	,glBuffer: null
	,numVertices: null
	,bufferUsage: null
	,dispose: function() {
		this.context.__deleteVertexBuffer(this);
	}
	,uploadFromByteArray: function(byteArray,byteArrayOffset,startOffset,count) {
		var bytesPerVertex = this.data32PerVertex * 4;
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = count * bytesPerVertex;
		var offset = byteArrayOffset + startOffset * bytesPerVertex;
		var float32Array = length != null?new Float32Array(length):null;
		byteArray.position = offset;
		var i = 0;
		while(byteArray.position < length + offset) {
			float32Array[i] = byteArray.readUnsignedByte();
			++i;
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,this.bufferUsage);
	}
	,uploadFromFloat32Array: function(data) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		lime_graphics_opengl_GL.context.bufferData(34962,data,this.bufferUsage);
	}
	,uploadFromVector: function(data,startVertex,numVertices) {
		lime_graphics_opengl_GL.context.bindBuffer(34962,this.glBuffer);
		var length = numVertices * this.data32PerVertex;
		var float32Array = length != null?new Float32Array(length):null;
		var _g1 = startVertex;
		var _g = startVertex + length;
		while(_g1 < _g) {
			var i = _g1++;
			float32Array[i] = data.data[i];
		}
		lime_graphics_opengl_GL.context.bufferData(34962,float32Array,this.bufferUsage);
	}
	,__class__: openfl_display3D_VertexBuffer3D
};
var openfl_display3D_textures_TextureBase = function(context,glTexture,width,height) {
	if(height == null) {
		height = 0;
	}
	if(width == null) {
		width = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.context = context;
	this.width = width;
	this.height = height;
	this.glTexture = glTexture;
};
$hxClasses["openfl.display3D.textures.TextureBase"] = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_TextureBase.__name__ = ["openfl","display3D","textures","TextureBase"];
openfl_display3D_textures_TextureBase.__super__ = openfl_events_EventDispatcher;
openfl_display3D_textures_TextureBase.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	context: null
	,height: null
	,frameBuffer: null
	,glTexture: null
	,width: null
	,dispose: function() {
		this.context.__deleteTexture(this);
	}
	,__class__: openfl_display3D_textures_TextureBase
});
var openfl_display3D_textures_CubeTexture = function(context,glTexture,size) {
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,size,size);
	this.size = size;
	this.mipmapsGenerated = false;
	this._textures = [];
	var _g = 0;
	while(_g < 6) this._textures[_g++] = lime_graphics_opengl_GL.context.createTexture();
};
$hxClasses["openfl.display3D.textures.CubeTexture"] = openfl_display3D_textures_CubeTexture;
openfl_display3D_textures_CubeTexture.__name__ = ["openfl","display3D","textures","CubeTexture"];
openfl_display3D_textures_CubeTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_CubeTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	size: null
	,_textures: null
	,mipmapsGenerated: null
	,glTextureAt: function(index) {
		return this._textures[index];
	}
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
	}
	,uploadFromBitmapData: function(bitmapData,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		var source = bitmapData.image.get_data();
		lime_graphics_opengl_GL.context.bindTexture(34067,this.glTexture);
		switch(side) {
		case 0:
			lime_graphics_opengl_GL.context.texImage2D(34069,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 1:
			lime_graphics_opengl_GL.context.texImage2D(34070,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 2:
			lime_graphics_opengl_GL.context.texImage2D(34071,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 3:
			lime_graphics_opengl_GL.context.texImage2D(34072,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 4:
			lime_graphics_opengl_GL.context.texImage2D(34073,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		case 5:
			lime_graphics_opengl_GL.context.texImage2D(34074,miplevel,6408,bitmapData.width,bitmapData.height,0,6408,5121,source);
			break;
		default:
			throw new js__$Boot_HaxeError("unknown side type");
		}
		lime_graphics_opengl_GL.context.bindTexture(34067,null);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,side,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
	}
	,__class__: openfl_display3D_textures_CubeTexture
});
var openfl_display3D_textures_RectangleTexture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	if(this.optimizeForRenderToTexture == null) {
		this.optimizeForRenderToTexture = false;
	}
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.RectangleTexture"] = openfl_display3D_textures_RectangleTexture;
openfl_display3D_textures_RectangleTexture.__name__ = ["openfl","display3D","textures","RectangleTexture"];
openfl_display3D_textures_RectangleTexture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_RectangleTexture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		var p = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(bitmapData.image.get_data().buffer);
		this.width = bitmapData.width;
		this.height = bitmapData.height;
		this.uploadFromByteArray(p,0);
	}
	,uploadFromByteArray: function(data,byteArrayOffset) {
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime_graphics_opengl_GL.context.pixelStorei(37440,1);
		}
		lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
		lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
		lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var source = elements != null?new Uint8Array(elements):null;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			source[i] = data.readUnsignedByte();
			++i;
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,0,6408,this.width,this.height,0,6408,5121,source);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_RectangleTexture
});
var openfl_display3D_textures_Texture = function(context,glTexture,optimize,width,height) {
	this.optimizeForRenderToTexture = optimize;
	this.mipmapsGenerated = false;
	if(openfl_display3D_textures_Texture.internalFormat == -1) {
		openfl_display3D_textures_Texture.internalFormat = 6408;
	}
	if(this.optimizeForRenderToTexture == null) {
		this.optimizeForRenderToTexture = false;
	}
	openfl_display3D_textures_TextureBase.call(this,context,glTexture,width,height);
};
$hxClasses["openfl.display3D.textures.Texture"] = openfl_display3D_textures_Texture;
openfl_display3D_textures_Texture.__name__ = ["openfl","display3D","textures","Texture"];
openfl_display3D_textures_Texture.__super__ = openfl_display3D_textures_TextureBase;
openfl_display3D_textures_Texture.prototype = $extend(openfl_display3D_textures_TextureBase.prototype,{
	optimizeForRenderToTexture: null
	,mipmapsGenerated: null
	,uploadCompressedTextureFromByteArray: function(data,byteArrayOffset,async) {
		if(async == null) {
			async = false;
		}
	}
	,uploadFromBitmapData: function(bitmapData,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		var image = bitmapData.image;
		if(!image.get_premultiplied() && image.get_transparent()) {
			image = image.clone();
			image.set_premultiplied(true);
		}
		this.width = image.width;
		this.height = image.height;
		this.uploadFromUInt8Array(image.get_data(),miplevel);
	}
	,uploadFromByteArray: function(data,byteArrayOffset,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		var elements = openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data);
		var source = elements != null?new Uint8Array(elements):null;
		data.position = byteArrayOffset;
		var i = 0;
		while(data.position < openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(data)) {
			source[i] = data.readUnsignedByte();
			++i;
		}
		this.uploadFromUInt8Array(source,miplevel);
	}
	,uploadFromUInt8Array: function(data,miplevel) {
		if(miplevel == null) {
			miplevel = 0;
		}
		lime_graphics_opengl_GL.context.bindTexture(3553,this.glTexture);
		if(this.optimizeForRenderToTexture) {
			lime_graphics_opengl_GL.context.pixelStorei(37440,1);
			lime_graphics_opengl_GL.context.texParameteri(3553,10240,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10241,9728);
			lime_graphics_opengl_GL.context.texParameteri(3553,10242,33071);
			lime_graphics_opengl_GL.context.texParameteri(3553,10243,33071);
		}
		lime_graphics_opengl_GL.context.texImage2D(3553,miplevel,openfl_display3D_textures_Texture.internalFormat,this.width,this.height,0,openfl_display3D_textures_Texture.internalFormat,5121,data);
		lime_graphics_opengl_GL.context.bindTexture(3553,null);
	}
	,__class__: openfl_display3D_textures_Texture
});
var openfl_errors_Error = function(message,id) {
	if(id == null) {
		id = 0;
	}
	if(message == null) {
		message = "";
	}
	this.message = message;
	this.errorID = id;
	this.name = "Error";
};
$hxClasses["openfl.errors.Error"] = openfl_errors_Error;
openfl_errors_Error.__name__ = ["openfl","errors","Error"];
openfl_errors_Error.prototype = {
	errorID: null
	,message: null
	,name: null
	,getStackTrace: function() {
		return haxe_CallStack.toString(haxe_CallStack.exceptionStack());
	}
	,toString: function() {
		if(this.message != null) {
			return this.message;
		} else {
			return "Error";
		}
	}
	,__class__: openfl_errors_Error
};
var openfl_errors_ArgumentError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "ArgumentError";
};
$hxClasses["openfl.errors.ArgumentError"] = openfl_errors_ArgumentError;
openfl_errors_ArgumentError.__name__ = ["openfl","errors","ArgumentError"];
openfl_errors_ArgumentError.__super__ = openfl_errors_Error;
openfl_errors_ArgumentError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_ArgumentError
});
var openfl_errors_IOError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message);
	this.name = "IOError";
};
$hxClasses["openfl.errors.IOError"] = openfl_errors_IOError;
openfl_errors_IOError.__name__ = ["openfl","errors","IOError"];
openfl_errors_IOError.__super__ = openfl_errors_Error;
openfl_errors_IOError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_IOError
});
var openfl_errors_EOFError = function() {
	openfl_errors_IOError.call(this,"End of file was encountered");
	this.name = "EOFError";
	this.errorID = 2030;
};
$hxClasses["openfl.errors.EOFError"] = openfl_errors_EOFError;
openfl_errors_EOFError.__name__ = ["openfl","errors","EOFError"];
openfl_errors_EOFError.__super__ = openfl_errors_IOError;
openfl_errors_EOFError.prototype = $extend(openfl_errors_IOError.prototype,{
	__class__: openfl_errors_EOFError
});
var openfl_errors_RangeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "RangeError";
};
$hxClasses["openfl.errors.RangeError"] = openfl_errors_RangeError;
openfl_errors_RangeError.__name__ = ["openfl","errors","RangeError"];
openfl_errors_RangeError.__super__ = openfl_errors_Error;
openfl_errors_RangeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_RangeError
});
var openfl_errors_TypeError = function(message) {
	if(message == null) {
		message = "";
	}
	openfl_errors_Error.call(this,message,0);
	this.name = "TypeError";
};
$hxClasses["openfl.errors.TypeError"] = openfl_errors_TypeError;
openfl_errors_TypeError.__name__ = ["openfl","errors","TypeError"];
openfl_errors_TypeError.__super__ = openfl_errors_Error;
openfl_errors_TypeError.prototype = $extend(openfl_errors_Error.prototype,{
	__class__: openfl_errors_TypeError
});
var openfl_events_Event = function(type,bubbles,cancelable) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.type = type;
	this.bubbles = bubbles;
	this.cancelable = cancelable;
	this.eventPhase = 2;
};
$hxClasses["openfl.events.Event"] = openfl_events_Event;
openfl_events_Event.__name__ = ["openfl","events","Event"];
openfl_events_Event.prototype = {
	bubbles: null
	,cancelable: null
	,currentTarget: null
	,eventPhase: null
	,target: null
	,type: null
	,__isCanceled: null
	,__isCanceledNow: null
	,__preventDefault: null
	,clone: function() {
		var event = new openfl_events_Event(this.type,this.bubbles,this.cancelable);
		event.eventPhase = this.eventPhase;
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		return event;
	}
	,formatToString: function(className,p1,p2,p3,p4,p5) {
		var parameters = [];
		if(p1 != null) {
			parameters.push(p1);
		}
		if(p2 != null) {
			parameters.push(p2);
		}
		if(p3 != null) {
			parameters.push(p3);
		}
		if(p4 != null) {
			parameters.push(p4);
		}
		if(p5 != null) {
			parameters.push(p5);
		}
		return $bind(this,this.__formatToString).apply(this,[className,parameters]);
	}
	,isDefaultPrevented: function() {
		return this.__preventDefault;
	}
	,preventDefault: function() {
		if(this.cancelable) {
			this.__preventDefault = true;
		}
	}
	,stopImmediatePropagation: function() {
		this.__isCanceled = true;
		this.__isCanceledNow = true;
	}
	,stopPropagation: function() {
		this.__isCanceled = true;
	}
	,toString: function() {
		return this.__formatToString("Event",["type","bubbles","cancelable"]);
	}
	,__formatToString: function(className,parameters) {
		var output = "[" + className;
		var arg = null;
		var _g = 0;
		while(_g < parameters.length) {
			var param = parameters[_g];
			++_g;
			arg = Reflect.field(this,param);
			if(typeof(arg) == "string") {
				output += " " + param + "=\"" + Std.string(arg) + "\"";
			} else {
				output += " " + param + "=" + Std.string(arg);
			}
		}
		output += "]";
		return output;
	}
	,__class__: openfl_events_Event
};
var openfl_events_ActivityEvent = function(type,bubbles,cancelable,activating) {
	if(activating == null) {
		activating = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.activating = activating;
};
$hxClasses["openfl.events.ActivityEvent"] = openfl_events_ActivityEvent;
openfl_events_ActivityEvent.__name__ = ["openfl","events","ActivityEvent"];
openfl_events_ActivityEvent.__super__ = openfl_events_Event;
openfl_events_ActivityEvent.prototype = $extend(openfl_events_Event.prototype,{
	activating: null
	,clone: function() {
		var event = new openfl_events_ActivityEvent(this.type,this.bubbles,this.cancelable,this.activating);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ActivityEvent",["type","bubbles","cancelable","activating"]);
	}
	,__class__: openfl_events_ActivityEvent
});
var openfl_events_TextEvent = function(type,bubbles,cancelable,text) {
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.text = text;
};
$hxClasses["openfl.events.TextEvent"] = openfl_events_TextEvent;
openfl_events_TextEvent.__name__ = ["openfl","events","TextEvent"];
openfl_events_TextEvent.__super__ = openfl_events_Event;
openfl_events_TextEvent.prototype = $extend(openfl_events_Event.prototype,{
	text: null
	,clone: function() {
		var event = new openfl_events_TextEvent(this.type,this.bubbles,this.cancelable,this.text);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TextEvent",["type","bubbles","cancelable","text"]);
	}
	,__class__: openfl_events_TextEvent
});
var openfl_events_ErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_TextEvent.call(this,type,bubbles,cancelable,text);
	this.errorID = id;
};
$hxClasses["openfl.events.ErrorEvent"] = openfl_events_ErrorEvent;
openfl_events_ErrorEvent.__name__ = ["openfl","events","ErrorEvent"];
openfl_events_ErrorEvent.__super__ = openfl_events_TextEvent;
openfl_events_ErrorEvent.prototype = $extend(openfl_events_TextEvent.prototype,{
	errorID: null
	,clone: function() {
		var event = new openfl_events_ErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_ErrorEvent
});
var openfl_events__$EventDispatcher_Listener = function(callback,useCapture,priority) {
	this.callback = callback;
	this.useCapture = useCapture;
	this.priority = priority;
};
$hxClasses["openfl.events._EventDispatcher.Listener"] = openfl_events__$EventDispatcher_Listener;
openfl_events__$EventDispatcher_Listener.__name__ = ["openfl","events","_EventDispatcher","Listener"];
openfl_events__$EventDispatcher_Listener.prototype = {
	callback: null
	,priority: null
	,useCapture: null
	,match: function(callback,useCapture) {
		if(Reflect.compareMethods(this.callback,callback)) {
			return this.useCapture == useCapture;
		} else {
			return false;
		}
	}
	,__class__: openfl_events__$EventDispatcher_Listener
};
var openfl_events_FocusEvent = function(type,bubbles,cancelable,relatedObject,shiftKey,keyCode) {
	if(keyCode == null) {
		keyCode = 0;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.keyCode = keyCode;
	this.shiftKey = shiftKey;
	this.relatedObject = relatedObject;
};
$hxClasses["openfl.events.FocusEvent"] = openfl_events_FocusEvent;
openfl_events_FocusEvent.__name__ = ["openfl","events","FocusEvent"];
openfl_events_FocusEvent.__super__ = openfl_events_Event;
openfl_events_FocusEvent.prototype = $extend(openfl_events_Event.prototype,{
	keyCode: null
	,relatedObject: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_FocusEvent(this.type,this.bubbles,this.cancelable,this.relatedObject,this.shiftKey,this.keyCode);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FocusEvent",["type","bubbles","cancelable","relatedObject","shiftKey","keyCode"]);
	}
	,__class__: openfl_events_FocusEvent
});
var openfl_events_FullScreenEvent = function(type,bubbles,cancelable,fullScreen,interactive) {
	if(interactive == null) {
		interactive = false;
	}
	if(fullScreen == null) {
		fullScreen = false;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ActivityEvent.call(this,type,bubbles,cancelable);
	this.fullScreen = fullScreen;
	this.interactive = interactive;
};
$hxClasses["openfl.events.FullScreenEvent"] = openfl_events_FullScreenEvent;
openfl_events_FullScreenEvent.__name__ = ["openfl","events","FullScreenEvent"];
openfl_events_FullScreenEvent.__super__ = openfl_events_ActivityEvent;
openfl_events_FullScreenEvent.prototype = $extend(openfl_events_ActivityEvent.prototype,{
	fullScreen: null
	,interactive: null
	,clone: function() {
		var event = new openfl_events_FullScreenEvent(this.type,this.bubbles,this.cancelable,this.fullScreen,this.interactive);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("FullscreenEvent",["type","bubbles","cancelable","fullscreen","interactive"]);
	}
	,__class__: openfl_events_FullScreenEvent
});
var openfl_events_GameInputEvent = function(type,bubbles,cancelable,device) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.device = device;
};
$hxClasses["openfl.events.GameInputEvent"] = openfl_events_GameInputEvent;
openfl_events_GameInputEvent.__name__ = ["openfl","events","GameInputEvent"];
openfl_events_GameInputEvent.__super__ = openfl_events_Event;
openfl_events_GameInputEvent.prototype = $extend(openfl_events_Event.prototype,{
	device: null
	,clone: function() {
		var event = new openfl_events_GameInputEvent(this.type,this.bubbles,this.cancelable,this.device);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("GameInputEvent",["type","bubbles","cancelable","device"]);
	}
	,__class__: openfl_events_GameInputEvent
});
var openfl_events_HTTPStatusEvent = function(type,bubbles,cancelable,status,redirected) {
	if(redirected == null) {
		redirected = false;
	}
	if(status == null) {
		status = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.status = status;
	this.redirected = redirected;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.HTTPStatusEvent"] = openfl_events_HTTPStatusEvent;
openfl_events_HTTPStatusEvent.__name__ = ["openfl","events","HTTPStatusEvent"];
openfl_events_HTTPStatusEvent.__super__ = openfl_events_Event;
openfl_events_HTTPStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	redirected: null
	,responseHeaders: null
	,responseURL: null
	,status: null
	,clone: function() {
		var event = new openfl_events_HTTPStatusEvent(this.type,this.bubbles,null,this.status,this.redirected);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("HTTPStatusEvent",["type","bubbles","cancelable","status","redirected"]);
	}
	,__class__: openfl_events_HTTPStatusEvent
});
var openfl_events_IOErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.IOErrorEvent"] = openfl_events_IOErrorEvent;
openfl_events_IOErrorEvent.__name__ = ["openfl","events","IOErrorEvent"];
openfl_events_IOErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_IOErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_IOErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("IOErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_IOErrorEvent
});
var openfl_events_KeyboardEvent = function(type,bubbles,cancelable,charCodeValue,keyCodeValue,keyLocationValue,ctrlKeyValue,altKeyValue,shiftKeyValue,controlKeyValue,commandKeyValue) {
	if(commandKeyValue == null) {
		commandKeyValue = false;
	}
	if(controlKeyValue == null) {
		controlKeyValue = false;
	}
	if(shiftKeyValue == null) {
		shiftKeyValue = false;
	}
	if(altKeyValue == null) {
		altKeyValue = false;
	}
	if(ctrlKeyValue == null) {
		ctrlKeyValue = false;
	}
	if(keyCodeValue == null) {
		keyCodeValue = 0;
	}
	if(charCodeValue == null) {
		charCodeValue = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.charCode = charCodeValue;
	this.keyCode = keyCodeValue;
	this.keyLocation = keyLocationValue != null?keyLocationValue:0;
	this.ctrlKey = ctrlKeyValue;
	this.altKey = altKeyValue;
	this.shiftKey = shiftKeyValue;
	this.controlKey = controlKeyValue;
	this.commandKey = commandKeyValue;
};
$hxClasses["openfl.events.KeyboardEvent"] = openfl_events_KeyboardEvent;
openfl_events_KeyboardEvent.__name__ = ["openfl","events","KeyboardEvent"];
openfl_events_KeyboardEvent.__super__ = openfl_events_Event;
openfl_events_KeyboardEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,charCode: null
	,ctrlKey: null
	,commandKey: null
	,controlKey: null
	,keyCode: null
	,keyLocation: null
	,shiftKey: null
	,clone: function() {
		var event = new openfl_events_KeyboardEvent(this.type,this.bubbles,this.cancelable,this.charCode,this.keyCode,this.keyLocation,this.ctrlKey,this.altKey,this.shiftKey,this.controlKey,this.commandKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("KeyboardEvent",["type","bubbles","cancelable","charCode","keyCode","keyLocation","ctrlKey","altKey","shiftKey"]);
	}
	,__class__: openfl_events_KeyboardEvent
});
var openfl_events_MouseEvent = function(type,bubbles,cancelable,localX,localY,relatedObject,ctrlKey,altKey,shiftKey,buttonDown,delta,commandKey,clickCount) {
	if(clickCount == null) {
		clickCount = 0;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(delta == null) {
		delta = 0;
	}
	if(buttonDown == null) {
		buttonDown = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.shiftKey = shiftKey;
	this.altKey = altKey;
	this.ctrlKey = ctrlKey;
	this.bubbles = bubbles;
	this.relatedObject = relatedObject;
	this.delta = delta;
	this.localX = localX;
	this.localY = localY;
	this.buttonDown = buttonDown;
	this.commandKey = commandKey;
	this.clickCount = clickCount;
};
$hxClasses["openfl.events.MouseEvent"] = openfl_events_MouseEvent;
openfl_events_MouseEvent.__name__ = ["openfl","events","MouseEvent"];
openfl_events_MouseEvent.__altKey = null;
openfl_events_MouseEvent.__buttonDown = null;
openfl_events_MouseEvent.__commandKey = null;
openfl_events_MouseEvent.__ctrlKey = null;
openfl_events_MouseEvent.__shiftKey = null;
openfl_events_MouseEvent.__create = function(type,button,stageX,stageY,local,target,delta) {
	if(delta == null) {
		delta = 0;
	}
	switch(type) {
	case "mouseDown":
		openfl_events_MouseEvent.__buttonDown = true;
		break;
	case "mouseUp":
		openfl_events_MouseEvent.__buttonDown = false;
		break;
	default:
	}
	var event = new openfl_events_MouseEvent(type,true,false,local.x,local.y,null,openfl_events_MouseEvent.__ctrlKey,openfl_events_MouseEvent.__altKey,openfl_events_MouseEvent.__shiftKey,openfl_events_MouseEvent.__buttonDown,delta,openfl_events_MouseEvent.__commandKey);
	event.stageX = stageX;
	event.stageY = stageY;
	event.target = target;
	return event;
};
openfl_events_MouseEvent.__super__ = openfl_events_Event;
openfl_events_MouseEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,buttonDown: null
	,commandKey: null
	,clickCount: null
	,ctrlKey: null
	,delta: null
	,localX: null
	,localY: null
	,relatedObject: null
	,shiftKey: null
	,stageX: null
	,stageY: null
	,clone: function() {
		var event = new openfl_events_MouseEvent(this.type,this.bubbles,this.cancelable,this.localX,this.localY,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.buttonDown,this.delta,this.commandKey,this.clickCount);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("MouseEvent",["type","bubbles","cancelable","localX","localY","relatedObject","ctrlKey","altKey","shiftKey","buttonDown","delta"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_MouseEvent
});
var openfl_events_NetStatusEvent = function(type,bubbles,cancelable,info) {
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	this.info = info;
	openfl_events_Event.call(this,type,bubbles,cancelable);
};
$hxClasses["openfl.events.NetStatusEvent"] = openfl_events_NetStatusEvent;
openfl_events_NetStatusEvent.__name__ = ["openfl","events","NetStatusEvent"];
openfl_events_NetStatusEvent.__super__ = openfl_events_Event;
openfl_events_NetStatusEvent.prototype = $extend(openfl_events_Event.prototype,{
	info: null
	,clone: function() {
		var event = new openfl_events_NetStatusEvent(this.type,this.bubbles,this.cancelable,this.info);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("NetStatusEvent",["type","bubbles","cancelable","info"]);
	}
	,__class__: openfl_events_NetStatusEvent
});
var openfl_events_ProgressEvent = function(type,bubbles,cancelable,bytesLoaded,bytesTotal) {
	if(bytesTotal == null) {
		bytesTotal = 0;
	}
	if(bytesLoaded == null) {
		bytesLoaded = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.bytesLoaded = bytesLoaded;
	this.bytesTotal = bytesTotal;
};
$hxClasses["openfl.events.ProgressEvent"] = openfl_events_ProgressEvent;
openfl_events_ProgressEvent.__name__ = ["openfl","events","ProgressEvent"];
openfl_events_ProgressEvent.__super__ = openfl_events_Event;
openfl_events_ProgressEvent.prototype = $extend(openfl_events_Event.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,clone: function() {
		var event = new openfl_events_ProgressEvent(this.type,this.bubbles,this.cancelable,this.bytesLoaded,this.bytesTotal);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("ProgressEvent",["type","bubbles","cancelable","bytesLoaded","bytesTotal"]);
	}
	,__class__: openfl_events_ProgressEvent
});
var openfl_events_SecurityErrorEvent = function(type,bubbles,cancelable,text,id) {
	if(id == null) {
		id = 0;
	}
	if(text == null) {
		text = "";
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = false;
	}
	openfl_events_ErrorEvent.call(this,type,bubbles,cancelable,text,id);
};
$hxClasses["openfl.events.SecurityErrorEvent"] = openfl_events_SecurityErrorEvent;
openfl_events_SecurityErrorEvent.__name__ = ["openfl","events","SecurityErrorEvent"];
openfl_events_SecurityErrorEvent.__super__ = openfl_events_ErrorEvent;
openfl_events_SecurityErrorEvent.prototype = $extend(openfl_events_ErrorEvent.prototype,{
	clone: function() {
		var event = new openfl_events_SecurityErrorEvent(this.type,this.bubbles,this.cancelable,this.text,this.errorID);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("SecurityErrorEvent",["type","bubbles","cancelable","text","errorID"]);
	}
	,__class__: openfl_events_SecurityErrorEvent
});
var openfl_events_TouchEvent = function(type,bubbles,cancelable,touchPointID,isPrimaryTouchPoint,localX,localY,sizeX,sizeY,pressure,relatedObject,ctrlKey,altKey,shiftKey,commandKey,controlKey,timestamp,touchIntent,samples,isTouchPointCanceled) {
	if(isTouchPointCanceled == null) {
		isTouchPointCanceled = false;
	}
	if(timestamp == null) {
		timestamp = 0;
	}
	if(controlKey == null) {
		controlKey = false;
	}
	if(commandKey == null) {
		commandKey = false;
	}
	if(shiftKey == null) {
		shiftKey = false;
	}
	if(altKey == null) {
		altKey = false;
	}
	if(ctrlKey == null) {
		ctrlKey = false;
	}
	if(pressure == null) {
		pressure = 0;
	}
	if(sizeY == null) {
		sizeY = 0;
	}
	if(sizeX == null) {
		sizeX = 0;
	}
	if(localY == null) {
		localY = 0;
	}
	if(localX == null) {
		localX = 0;
	}
	if(isPrimaryTouchPoint == null) {
		isPrimaryTouchPoint = false;
	}
	if(touchPointID == null) {
		touchPointID = 0;
	}
	if(cancelable == null) {
		cancelable = false;
	}
	if(bubbles == null) {
		bubbles = true;
	}
	openfl_events_Event.call(this,type,bubbles,cancelable);
	this.touchPointID = touchPointID;
	this.isPrimaryTouchPoint = isPrimaryTouchPoint;
	this.localX = localX;
	this.localY = localY;
	this.sizeX = sizeX;
	this.sizeY = sizeY;
	this.pressure = pressure;
	this.relatedObject = relatedObject;
	this.ctrlKey = ctrlKey;
	this.altKey = altKey;
	this.shiftKey = shiftKey;
	this.commandKey = commandKey;
	this.controlKey = controlKey;
};
$hxClasses["openfl.events.TouchEvent"] = openfl_events_TouchEvent;
openfl_events_TouchEvent.__name__ = ["openfl","events","TouchEvent"];
openfl_events_TouchEvent.__create = function(type,touch,stageX,stageY,local,target) {
	var evt = new openfl_events_TouchEvent(type,true,false,0,true,local.x,local.y,1,1,1);
	evt.stageX = stageX;
	evt.stageY = stageY;
	evt.target = target;
	return evt;
};
openfl_events_TouchEvent.__super__ = openfl_events_Event;
openfl_events_TouchEvent.prototype = $extend(openfl_events_Event.prototype,{
	altKey: null
	,commandKey: null
	,controlKey: null
	,ctrlKey: null
	,delta: null
	,isPrimaryTouchPoint: null
	,localX: null
	,localY: null
	,pressure: null
	,relatedObject: null
	,shiftKey: null
	,sizeX: null
	,sizeY: null
	,stageX: null
	,stageY: null
	,touchPointID: null
	,clone: function() {
		var event = new openfl_events_TouchEvent(this.type,this.bubbles,this.cancelable,this.touchPointID,this.isPrimaryTouchPoint,this.localX,this.localY,this.sizeX,this.sizeY,this.pressure,this.relatedObject,this.ctrlKey,this.altKey,this.shiftKey,this.commandKey,this.controlKey);
		event.target = this.target;
		event.currentTarget = this.currentTarget;
		event.eventPhase = this.eventPhase;
		return event;
	}
	,toString: function() {
		return this.__formatToString("TouchEvent",["type","bubbles","cancelable","touchPointID","isPrimaryTouchPoint","localX","localY","sizeX","sizeY","pressure","relatedObject","ctrlKey","altKey","shiftKey","commandKey","controlKey"]);
	}
	,updateAfterEvent: function() {
	}
	,__class__: openfl_events_TouchEvent
});
var openfl_external_ExternalInterface = function() { };
$hxClasses["openfl.external.ExternalInterface"] = openfl_external_ExternalInterface;
openfl_external_ExternalInterface.__name__ = ["openfl","external","ExternalInterface"];
openfl_external_ExternalInterface.objectID = null;
openfl_external_ExternalInterface.addCallback = function(functionName,closure) {
	if(openfl_Lib.application.windows[0].backend.element != null) {
		openfl_Lib.application.windows[0].backend.element[functionName] = closure;
	}
};
openfl_external_ExternalInterface.call = function(functionName,p1,p2,p3,p4,p5) {
	var callResponse = null;
	var thisArg = functionName.split(".").slice(0,-1).join(".");
	if(thisArg.length > 0) {
		functionName += ".bind(" + thisArg + ")";
	}
	if(p1 == null) {
		callResponse = eval(functionName)();
	} else if(p2 == null) {
		callResponse = eval(functionName)(p1);
	} else if(p3 == null) {
		callResponse = eval(functionName)(p1,p2);
	} else if(p4 == null) {
		callResponse = eval(functionName)(p1,p2,p3);
	} else if(p5 == null) {
		callResponse = eval(functionName)(p1,p2,p3,p4);
	} else {
		callResponse = eval(functionName)(p1,p2,p3,p4,p5);
	}
	return callResponse;
};
var openfl_filters_BitmapFilter = function() {
	this.__saveLastFilter = false;
	this.__passes = 0;
	this.__dirty = true;
};
$hxClasses["openfl.filters.BitmapFilter"] = openfl_filters_BitmapFilter;
openfl_filters_BitmapFilter.__name__ = ["openfl","filters","BitmapFilter"];
openfl_filters_BitmapFilter.__tmpRenderTexture = null;
openfl_filters_BitmapFilter.__applyFilters = function(filters,renderSession,source,target,sourceRect,destPoint) {
	var same = target == source && target.__usingPingPongTexture;
	if(same) {
		target.__pingPongTexture.useOldTexture = true;
	}
	if(sourceRect == null) {
		sourceRect = source.rect;
	}
	var lastFilterOutput = null;
	var useLastFilter = false;
	var srcShader = source.__shader;
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		useLastFilter = false;
		if(filter.__saveLastFilter) {
			target.__pingPongTexture.swap();
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,true);
			var _this = target.__pingPongTexture;
			if(_this.__swapped) {
				lastFilterOutput = _this.__texture0;
			} else {
				lastFilterOutput = _this.__texture1;
			}
			var _this1 = target.__pingPongTexture;
			var v = openfl_filters_BitmapFilter.__tmpRenderTexture;
			if(_this1.__swapped) {
				_this1.__texture0 = v;
			} else {
				_this1.__texture1 = v;
			}
		}
		var _g2 = 0;
		var _g1 = filter.__passes;
		while(_g2 < _g1) {
			var pass = _g2++;
			if(filter.__saveLastFilter) {
				useLastFilter = filter.__useLastFilter(pass);
			} else {
				useLastFilter = false;
			}
			if(same && !useLastFilter) {
				target.__pingPongTexture.swap();
			}
			if(useLastFilter) {
				var _this2 = target.__pingPongTexture;
				openfl_filters_BitmapFilter.__tmpRenderTexture = _this2.__swapped?_this2.__texture0:_this2.__texture1;
				var _this3 = target.__pingPongTexture;
				if(_this3.__swapped) {
					_this3.__texture0 = lastFilterOutput;
				} else {
					_this3.__texture1 = lastFilterOutput;
				}
			}
			source.__shader = filter.__preparePass(pass);
			target.__drawGL(renderSession,source,null,null,null,sourceRect,true,!target.__usingPingPongTexture,!useLastFilter);
		}
	}
	source.__shader = srcShader;
	if(same) {
		target.__pingPongTexture.useOldTexture = false;
	}
};
openfl_filters_BitmapFilter.__expandBounds = function(filters,rect,matrix) {
	var r = openfl_geom_Rectangle.__temp;
	r.setEmpty();
	var _g = 0;
	while(_g < filters.length) {
		var filter = filters[_g];
		++_g;
		filter.__growBounds(r);
	}
	r.__transform(r,matrix);
	rect.__expand(r.x,r.y,r.width,r.height);
};
openfl_filters_BitmapFilter.prototype = {
	__dirty: null
	,__passes: null
	,__saveLastFilter: null
	,clone: function() {
		return new openfl_filters_BitmapFilter();
	}
	,__applyFilter: function(sourceData,targetData,sourceRect,destPoint) {
	}
	,__growBounds: function(rect) {
	}
	,__preparePass: function(pass) {
		return null;
	}
	,__useLastFilter: function(pass) {
		return false;
	}
	,__class__: openfl_filters_BitmapFilter
};
var openfl_filters_BlurFilter = function(blurX,blurY,quality) {
	if(quality == null) {
		quality = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.blurX = blurX;
	this.blurY = blurY;
	this.set_quality(quality);
	this.__blurShader = new openfl_filters__$BlurFilter_BlurShader();
	this.__blurShader.smooth = true;
};
$hxClasses["openfl.filters.BlurFilter"] = openfl_filters_BlurFilter;
openfl_filters_BlurFilter.__name__ = ["openfl","filters","BlurFilter"];
openfl_filters_BlurFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_BlurFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	blurX: null
	,blurY: null
	,quality: null
	,__blurShader: null
	,clone: function() {
		return new openfl_filters_BlurFilter(this.blurX,this.blurY,this.quality);
	}
	,__growBounds: function(rect) {
		rect.x += -this.blurX * 0.5 * this.quality;
		rect.y += -this.blurY * 0.5 * this.quality;
		rect.width += this.blurX * 0.5 * this.quality;
		rect.height += this.blurY * 0.5 * this.quality;
	}
	,__preparePass: function(pass) {
		var even = pass % 2 == 0;
		var scale = Math.pow(0.5,pass >> 1);
		this.__blurShader.__uRadius.value[0] = even?scale * this.blurX:0;
		this.__blurShader.__uRadius.value[1] = even?0:scale * this.blurY;
		return this.__blurShader;
	}
	,set_quality: function(value) {
		this.__passes = value * 2;
		return this.quality = value;
	}
	,__class__: openfl_filters_BlurFilter
	,__properties__: {set_quality:"set_quality"}
});
var openfl_filters__$BlurFilter_BlurShader = function() {
	this.__uRadius = new openfl_display_GLShaderParameter("vec2",0);
	this.fragment = ["varying vec2 vBlurCoords[7];","void main(void)","{","vec4 sum = vec4(0.0);","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]) * 0.00443;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]) * 0.05399;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]) * 0.24197;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]) * 0.39894;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]) * 0.24197;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]) * 0.05399;","sum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]) * 0.00443;","\tgl_FragColor = sum;","}"];
	this.vertex = ["uniform vec2 uRadius;","varying vec2 vBlurCoords[7];","void main(void)","{","vec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";","vBlurCoords[0] = " + openfl_display_Shader.aTexCoord + " - r * 1.2;","vBlurCoords[1] = " + openfl_display_Shader.aTexCoord + " - r * 0.8;","vBlurCoords[2] = " + openfl_display_Shader.aTexCoord + " - r * 0.4;","vBlurCoords[3] = " + openfl_display_Shader.aTexCoord + ";","vBlurCoords[4] = " + openfl_display_Shader.aTexCoord + " + r * 0.4;","vBlurCoords[5] = " + openfl_display_Shader.aTexCoord + " + r * 0.8;","vBlurCoords[6] = " + openfl_display_Shader.aTexCoord + " + r * 1.2;","" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";","" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";","gl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);","}"];
	openfl_display_Shader.call(this);
	var _this = this.data;
	var value = this.__uRadius;
	if(__map_reserved.uRadius != null) {
		_this.setReserved("uRadius",value);
	} else {
		_this.h["uRadius"] = value;
	}
	this.__buildVertexCode("uniform vec2 uRadius;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nvec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";\nvBlurCoords[0] = " + openfl_display_Shader.aTexCoord + " - r * 1.2;\nvBlurCoords[1] = " + openfl_display_Shader.aTexCoord + " - r * 0.8;\nvBlurCoords[2] = " + openfl_display_Shader.aTexCoord + " - r * 0.4;\nvBlurCoords[3] = " + openfl_display_Shader.aTexCoord + ";\nvBlurCoords[4] = " + openfl_display_Shader.aTexCoord + " + r * 0.4;\nvBlurCoords[5] = " + openfl_display_Shader.aTexCoord + " + r * 0.8;\nvBlurCoords[6] = " + openfl_display_Shader.aTexCoord + " + r * 1.2;\n" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";\n" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";\ngl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);\n}");
	this.__buildFragmentCode("varying vec2 vBlurCoords[7];\nvoid main(void)\n{\nvec4 sum = vec4(0.0);\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]) * 0.00443;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]) * 0.05399;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]) * 0.24197;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]) * 0.39894;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]) * 0.24197;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]) * 0.05399;\nsum += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]) * 0.00443;\n\tgl_FragColor = sum;\n}");
};
$hxClasses["openfl.filters._BlurFilter.BlurShader"] = openfl_filters__$BlurFilter_BlurShader;
openfl_filters__$BlurFilter_BlurShader.__name__ = ["openfl","filters","_BlurFilter","BlurShader"];
openfl_filters__$BlurFilter_BlurShader.__super__ = openfl_display_Shader;
openfl_filters__$BlurFilter_BlurShader.prototype = $extend(openfl_display_Shader.prototype,{
	vertex: null
	,fragment: null
	,__uRadius: null
	,get_uRadius: function() {
		return this.__uRadius.value;
	}
	,set_uRadius: function(v) {
		var _this = this.__uRadius;
		if(_this.internalType == 4) {
			throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		}
		return _this.value = v;
	}
	,__class__: openfl_filters__$BlurFilter_BlurShader
	,__properties__: {set_uRadius:"set_uRadius",get_uRadius:"get_uRadius"}
});
var openfl_filters_DropShadowFilter = function(distance,angle,color,alpha,blurX,blurY,strength,quality,inner,knockout,hideObject) {
	if(hideObject == null) {
		hideObject = false;
	}
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 1;
	}
	if(blurY == null) {
		blurY = 4;
	}
	if(blurX == null) {
		blurX = 4;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 0;
	}
	if(angle == null) {
		angle = 45;
	}
	if(distance == null) {
		distance = 4;
	}
	openfl_filters_BitmapFilter.call(this);
	this.distance = distance;
	this.angle = angle;
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.set_hideObject(hideObject);
	this.__dropShadowShader = new openfl_filters__$DropShadowFilter_DropShadowShader();
	this.__dropShadowShader.smooth = true;
};
$hxClasses["openfl.filters.DropShadowFilter"] = openfl_filters_DropShadowFilter;
openfl_filters_DropShadowFilter.__name__ = ["openfl","filters","DropShadowFilter"];
openfl_filters_DropShadowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_DropShadowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,angle: null
	,blurX: null
	,blurY: null
	,color: null
	,distance: null
	,hideObject: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,__dropShadowShader: null
	,clone: function() {
		return new openfl_filters_DropShadowFilter(this.distance,this.angle,this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout,this.hideObject);
	}
	,__growBounds: function(rect) {
		var sX = this.distance * Math.cos(this.angle * Math.PI / 180);
		var sY = this.distance * Math.sin(this.angle * Math.PI / 180);
		rect.x += -(Math.abs(sX) + this.blurX * 0.5) * this.quality;
		rect.y += -(Math.abs(sY) + this.blurY * 0.5) * this.quality;
		rect.width += (sX + this.blurX * 0.5) * this.quality;
		rect.height += (sY + this.blurY * 0.5) * this.quality;
	}
	,__preparePass: function(pass) {
		if(pass == this.__passes - 1) {
			return null;
		} else {
			var even = pass % 2 == 0;
			var scale = Math.pow(0.5,pass >> 1);
			this.__dropShadowShader.__uRadius.value[0] = even?scale * this.blurX:0;
			this.__dropShadowShader.__uRadius.value[1] = even?0:scale * this.blurY;
			this.__dropShadowShader.__uShift.value[0] = pass == 0?this.distance * Math.cos(this.angle * Math.PI / 180):0;
			this.__dropShadowShader.__uShift.value[1] = pass == 0?this.distance * Math.sin(this.angle * Math.PI / 180):0;
			this.__dropShadowShader.__uColor.value[0] = (this.color >> 16 & 255) / 255;
			this.__dropShadowShader.__uColor.value[1] = (this.color >> 8 & 255) / 255;
			this.__dropShadowShader.__uColor.value[2] = (this.color & 255) / 255;
			this.__dropShadowShader.__uColor.value[3] = this.alpha;
			return this.__dropShadowShader;
		}
	}
	,__useLastFilter: function(pass) {
		return pass == this.__passes - 1;
	}
	,set_knockout: function(value) {
		this.__saveLastFilter = !value;
		return this.knockout = value;
	}
	,set_hideObject: function(value) {
		this.__saveLastFilter = !value;
		return this.hideObject = value;
	}
	,set_quality: function(value) {
		this.__passes = value * 2 + 1;
		return this.quality = value;
	}
	,__class__: openfl_filters_DropShadowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout",set_hideObject:"set_hideObject"}
});
var openfl_filters__$DropShadowFilter_DropShadowShader = function() {
	this.__uColor = new openfl_display_GLShaderParameter("vec4",0);
	this.__uShift = new openfl_display_GLShaderParameter("vec2",0);
	this.__uRadius = new openfl_display_GLShaderParameter("vec2",0);
	this.fragment = ["uniform vec4 uColor;","varying vec2 vBlurCoords[7];","void main(void)","{","float a = 0.0;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]).a * 0.00443;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]).a * 0.05399;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]).a * 0.24197;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]).a * 0.39894;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]).a * 0.24197;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]).a * 0.05399;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]).a * 0.00443;","a *= uColor.a;","\tgl_FragColor = vec4(uColor.rgb * a, a);","}"];
	this.vertex = ["uniform vec2 uRadius;","uniform vec2 uShift;","varying vec2 vBlurCoords[7];","void main(void)","{","vec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";","vec2 tc = " + openfl_display_Shader.aTexCoord + " - (uShift / " + openfl_display_Shader.uTextureSize + ");","vBlurCoords[0] = tc - r * 1.2;","vBlurCoords[1] = tc - r * 0.8;","vBlurCoords[2] = tc - r * 0.4;","vBlurCoords[3] = tc;","vBlurCoords[4] = tc + r * 0.4;","vBlurCoords[5] = tc + r * 0.8;","vBlurCoords[6] = tc + r * 1.2;","" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";","" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";","gl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);","}"];
	openfl_display_Shader.call(this);
	var _this = this.data;
	var value = this.__uRadius;
	if(__map_reserved.uRadius != null) {
		_this.setReserved("uRadius",value);
	} else {
		_this.h["uRadius"] = value;
	}
	var _this1 = this.data;
	var value1 = this.__uShift;
	if(__map_reserved.uShift != null) {
		_this1.setReserved("uShift",value1);
	} else {
		_this1.h["uShift"] = value1;
	}
	var _this2 = this.data;
	var value2 = this.__uColor;
	if(__map_reserved.uColor != null) {
		_this2.setReserved("uColor",value2);
	} else {
		_this2.h["uColor"] = value2;
	}
	this.__buildVertexCode("uniform vec2 uRadius;\nuniform vec2 uShift;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nvec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";\nvec2 tc = " + openfl_display_Shader.aTexCoord + " - (uShift / " + openfl_display_Shader.uTextureSize + ");\nvBlurCoords[0] = tc - r * 1.2;\nvBlurCoords[1] = tc - r * 0.8;\nvBlurCoords[2] = tc - r * 0.4;\nvBlurCoords[3] = tc;\nvBlurCoords[4] = tc + r * 0.4;\nvBlurCoords[5] = tc + r * 0.8;\nvBlurCoords[6] = tc + r * 1.2;\n" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";\n" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";\ngl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);\n}");
	this.__buildFragmentCode("uniform vec4 uColor;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nfloat a = 0.0;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]).a * 0.00443;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]).a * 0.05399;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]).a * 0.24197;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]).a * 0.39894;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]).a * 0.24197;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]).a * 0.05399;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]).a * 0.00443;\na *= uColor.a;\n\tgl_FragColor = vec4(uColor.rgb * a, a);\n}");
};
$hxClasses["openfl.filters._DropShadowFilter.DropShadowShader"] = openfl_filters__$DropShadowFilter_DropShadowShader;
openfl_filters__$DropShadowFilter_DropShadowShader.__name__ = ["openfl","filters","_DropShadowFilter","DropShadowShader"];
openfl_filters__$DropShadowFilter_DropShadowShader.__super__ = openfl_display_Shader;
openfl_filters__$DropShadowFilter_DropShadowShader.prototype = $extend(openfl_display_Shader.prototype,{
	vertex: null
	,fragment: null
	,__uRadius: null
	,get_uRadius: function() {
		return this.__uRadius.value;
	}
	,set_uRadius: function(v) {
		var _this = this.__uRadius;
		if(_this.internalType == 4) {
			throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		}
		return _this.value = v;
	}
	,__uShift: null
	,get_uShift: function() {
		return this.__uShift.value;
	}
	,set_uShift: function(v) {
		var _this = this.__uShift;
		if(_this.internalType == 4) {
			throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		}
		return _this.value = v;
	}
	,__uColor: null
	,get_uColor: function() {
		return this.__uColor.value;
	}
	,set_uColor: function(v) {
		var _this = this.__uColor;
		if(_this.internalType == 4) {
			throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		}
		return _this.value = v;
	}
	,__class__: openfl_filters__$DropShadowFilter_DropShadowShader
	,__properties__: {set_uColor:"set_uColor",get_uColor:"get_uColor",set_uShift:"set_uShift",get_uShift:"get_uShift",set_uRadius:"set_uRadius",get_uRadius:"get_uRadius"}
});
var openfl_filters_GlowFilter = function(color,alpha,blurX,blurY,strength,quality,inner,knockout) {
	if(knockout == null) {
		knockout = false;
	}
	if(inner == null) {
		inner = false;
	}
	if(quality == null) {
		quality = 1;
	}
	if(strength == null) {
		strength = 2;
	}
	if(blurY == null) {
		blurY = 6;
	}
	if(blurX == null) {
		blurX = 6;
	}
	if(alpha == null) {
		alpha = 1;
	}
	if(color == null) {
		color = 16711680;
	}
	openfl_filters_BitmapFilter.call(this);
	this.color = color;
	this.alpha = alpha;
	this.blurX = blurX;
	this.blurY = blurY;
	this.strength = strength;
	this.set_quality(quality);
	this.inner = inner;
	this.set_knockout(knockout);
	this.__glowShader = new openfl_filters__$GlowFilter_GlowShader();
	this.__glowShader.smooth = true;
};
$hxClasses["openfl.filters.GlowFilter"] = openfl_filters_GlowFilter;
openfl_filters_GlowFilter.__name__ = ["openfl","filters","GlowFilter"];
openfl_filters_GlowFilter.__super__ = openfl_filters_BitmapFilter;
openfl_filters_GlowFilter.prototype = $extend(openfl_filters_BitmapFilter.prototype,{
	alpha: null
	,blurX: null
	,blurY: null
	,color: null
	,inner: null
	,knockout: null
	,quality: null
	,strength: null
	,__glowShader: null
	,clone: function() {
		return new openfl_filters_GlowFilter(this.color,this.alpha,this.blurX,this.blurY,this.strength,this.quality,this.inner,this.knockout);
	}
	,__growBounds: function(rect) {
		rect.x += -this.blurX * 0.5 * this.quality;
		rect.y += -this.blurY * 0.5 * this.quality;
		rect.width += this.blurX * 0.5 * this.quality;
		rect.height += this.blurY * 0.5 * this.quality;
	}
	,__preparePass: function(pass) {
		if(pass == this.__passes - 1) {
			return null;
		} else {
			var even = pass % 2 == 0;
			var scale = Math.pow(0.5,pass >> 1);
			this.__glowShader.__uRadius.value[0] = even?scale * this.blurX:0;
			this.__glowShader.__uRadius.value[1] = even?0:scale * this.blurY;
			this.__glowShader.__uColor.value[0] = (this.color >> 16 & 255) / 255;
			this.__glowShader.__uColor.value[1] = (this.color >> 8 & 255) / 255;
			this.__glowShader.__uColor.value[2] = (this.color & 255) / 255;
			this.__glowShader.__uColor.value[3] = this.alpha;
			return this.__glowShader;
		}
	}
	,__useLastFilter: function(pass) {
		return pass == this.__passes - 1;
	}
	,set_knockout: function(value) {
		this.__saveLastFilter = !value;
		return this.knockout = value;
	}
	,set_quality: function(value) {
		this.__passes = value * 2 + 1;
		return this.quality = value;
	}
	,__class__: openfl_filters_GlowFilter
	,__properties__: {set_quality:"set_quality",set_knockout:"set_knockout"}
});
var openfl_filters__$GlowFilter_GlowShader = function() {
	this.__uColor = new openfl_display_GLShaderParameter("vec4",0);
	this.__uRadius = new openfl_display_GLShaderParameter("vec2",0);
	this.fragment = ["uniform vec4 uColor;","varying vec2 vBlurCoords[7];","void main(void)","{","float a = 0.0;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]).a * 0.00443;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]).a * 0.05399;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]).a * 0.24197;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]).a * 0.39894;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]).a * 0.24197;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]).a * 0.05399;","a += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]).a * 0.00443;","a *= uColor.a;","\tgl_FragColor = vec4(uColor.rgb * a, a);","}"];
	this.vertex = ["uniform vec2 uRadius;","varying vec2 vBlurCoords[7];","void main(void)","{","vec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";","vBlurCoords[0] = " + openfl_display_Shader.aTexCoord + " - r * 1.2;","vBlurCoords[1] = " + openfl_display_Shader.aTexCoord + " - r * 0.8;","vBlurCoords[2] = " + openfl_display_Shader.aTexCoord + " - r * 0.4;","vBlurCoords[3] = " + openfl_display_Shader.aTexCoord + ";","vBlurCoords[4] = " + openfl_display_Shader.aTexCoord + " + r * 0.4;","vBlurCoords[5] = " + openfl_display_Shader.aTexCoord + " + r * 0.8;","vBlurCoords[6] = " + openfl_display_Shader.aTexCoord + " + r * 1.2;","" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";","" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";","gl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);","}"];
	openfl_display_Shader.call(this);
	var _this = this.data;
	var value = this.__uRadius;
	if(__map_reserved.uRadius != null) {
		_this.setReserved("uRadius",value);
	} else {
		_this.h["uRadius"] = value;
	}
	var _this1 = this.data;
	var value1 = this.__uColor;
	if(__map_reserved.uColor != null) {
		_this1.setReserved("uColor",value1);
	} else {
		_this1.h["uColor"] = value1;
	}
	this.__buildVertexCode("uniform vec2 uRadius;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nvec2 r = uRadius / " + openfl_display_Shader.uTextureSize + ";\nvBlurCoords[0] = " + openfl_display_Shader.aTexCoord + " - r * 1.2;\nvBlurCoords[1] = " + openfl_display_Shader.aTexCoord + " - r * 0.8;\nvBlurCoords[2] = " + openfl_display_Shader.aTexCoord + " - r * 0.4;\nvBlurCoords[3] = " + openfl_display_Shader.aTexCoord + ";\nvBlurCoords[4] = " + openfl_display_Shader.aTexCoord + " + r * 0.4;\nvBlurCoords[5] = " + openfl_display_Shader.aTexCoord + " + r * 0.8;\nvBlurCoords[6] = " + openfl_display_Shader.aTexCoord + " + r * 1.2;\n" + openfl_display_Shader.vTexCoord + " = " + openfl_display_Shader.aTexCoord + ";\n" + openfl_display_Shader.vColor + " = " + openfl_display_Shader.aColor + ";\ngl_Position = vec4((" + openfl_display_Shader.uProjectionMatrix + " * vec3(" + openfl_display_Shader.aPosition + ", 1.0)).xy, 0.0, 1.0);\n}");
	this.__buildFragmentCode("uniform vec4 uColor;\nvarying vec2 vBlurCoords[7];\nvoid main(void)\n{\nfloat a = 0.0;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[0]).a * 0.00443;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[1]).a * 0.05399;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[2]).a * 0.24197;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[3]).a * 0.39894;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[4]).a * 0.24197;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[5]).a * 0.05399;\na += texture2D(" + openfl_display_Shader.uSampler + ", vBlurCoords[6]).a * 0.00443;\na *= uColor.a;\n\tgl_FragColor = vec4(uColor.rgb * a, a);\n}");
};
$hxClasses["openfl.filters._GlowFilter.GlowShader"] = openfl_filters__$GlowFilter_GlowShader;
openfl_filters__$GlowFilter_GlowShader.__name__ = ["openfl","filters","_GlowFilter","GlowShader"];
openfl_filters__$GlowFilter_GlowShader.__super__ = openfl_display_Shader;
openfl_filters__$GlowFilter_GlowShader.prototype = $extend(openfl_display_Shader.prototype,{
	vertex: null
	,fragment: null
	,__uRadius: null
	,get_uRadius: function() {
		return this.__uRadius.value;
	}
	,set_uRadius: function(v) {
		var _this = this.__uRadius;
		if(_this.internalType == 4) {
			throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		}
		return _this.value = v;
	}
	,__uColor: null
	,get_uColor: function() {
		return this.__uColor.value;
	}
	,set_uColor: function(v) {
		var _this = this.__uColor;
		if(_this.internalType == 4) {
			throw new js__$Boot_HaxeError("This parameter doesn't accept a value, use bitmap instead");
		}
		return _this.value = v;
	}
	,__class__: openfl_filters__$GlowFilter_GlowShader
	,__properties__: {set_uColor:"set_uColor",get_uColor:"get_uColor",set_uRadius:"set_uRadius",get_uRadius:"get_uRadius"}
});
var openfl_geom_Matrix3D = function(v) {
	if(v != null && v.length == 16) {
		this.rawData = v;
	} else {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var length = value.length;
		var vec = new Array(length);
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
};
$hxClasses["openfl.geom.Matrix3D"] = openfl_geom_Matrix3D;
openfl_geom_Matrix3D.__name__ = ["openfl","geom","Matrix3D"];
openfl_geom_Matrix3D.create2D = function(x,y,scale,rotation) {
	if(rotation == null) {
		rotation = 0;
	}
	if(scale == null) {
		scale = 1;
	}
	var theta = rotation * Math.PI / 180.0;
	var c = Math.cos(theta);
	var s = Math.sin(theta);
	var value = [c * scale,-s * scale,0,0,s * scale,c * scale,0,0,0,0,1,0,x,y,0,1];
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var length = value.length;
	var vec = new Array(length);
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return new openfl_geom_Matrix3D(vectorData);
};
openfl_geom_Matrix3D.createABCD = function(a,b,c,d,tx,ty) {
	var value = [a,b,0,0,c,d,0,0,0,0,1,0,tx,ty,0,1];
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var length = value.length;
	var vec = new Array(length);
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return new openfl_geom_Matrix3D(vectorData);
};
openfl_geom_Matrix3D.createOrtho = function(x0,x1,y0,y1,zNear,zFar) {
	var sx = 1.0 / (x1 - x0);
	var sy = 1.0 / (y1 - y0);
	var sz = 1.0 / (zFar - zNear);
	var value = [2.0 * sx,0,0,0,0,2.0 * sy,0,0,0,0,-2. * sz,0,-(x0 + x1) * sx,-(y0 + y1) * sy,-(zNear + zFar) * sz,1];
	var vectorData = new openfl_VectorData();
	vectorData.length = value.length;
	vectorData.fixed = true;
	var length = value.length;
	var vec = new Array(length);
	var _g1 = 0;
	var _g = value.length;
	while(_g1 < _g) {
		var i = _g1++;
		vec[i] = value[i];
	}
	vectorData.data = vec;
	return new openfl_geom_Matrix3D(vectorData);
};
openfl_geom_Matrix3D.interpolate = function(thisMat,toMat,percent) {
	var m = new openfl_geom_Matrix3D();
	var _g = 0;
	while(_g < 16) {
		var i = _g++;
		var this1 = m.rawData;
		if(!this1.fixed) {
			if(i >= this1.length) {
				this1.length = i + 1;
			}
			if(this1.data.length < this1.length) {
				var length = this1.data.length + 10;
				var data = new Array(length);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[i] = thisMat.rawData.data[i] + (toMat.rawData.data[i] - thisMat.rawData.data[i]) * percent;
	}
	return m;
};
openfl_geom_Matrix3D.__getAxisRotation = function(x,y,z,degrees) {
	var m = new openfl_geom_Matrix3D();
	var a1 = new openfl_geom_Vector3D(x,y,z);
	var rad = -degrees * (Math.PI / 180);
	var c = Math.cos(rad);
	var s = Math.sin(rad);
	var t = 1.0 - c;
	var this1 = m.rawData;
	var value = c + a1.x * a1.x * t;
	if(!this1.fixed) {
		if(0 >= this1.length) {
			this1.length = 1;
		}
		if(this1.data.length < this1.length) {
			var length = this1.data.length + 10;
			var data = new Array(length);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
			this1.data = data;
		}
	}
	this1.data[0] = value;
	var this2 = m.rawData;
	var value1 = c + a1.y * a1.y * t;
	if(!this2.fixed) {
		if(5 >= this2.length) {
			this2.length = 6;
		}
		if(this2.data.length < this2.length) {
			var length1 = this2.data.length + 10;
			var data1 = new Array(length1);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
			this2.data = data1;
		}
	}
	this2.data[5] = value1;
	var this3 = m.rawData;
	var value2 = c + a1.z * a1.z * t;
	if(!this3.fixed) {
		if(10 >= this3.length) {
			this3.length = 11;
		}
		if(this3.data.length < this3.length) {
			var length2 = this3.data.length + 10;
			var data2 = new Array(length2);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
			this3.data = data2;
		}
	}
	this3.data[10] = value2;
	var tmp1 = a1.x * a1.y * t;
	var tmp2 = a1.z * s;
	var this4 = m.rawData;
	if(!this4.fixed) {
		if(4 >= this4.length) {
			this4.length = 5;
		}
		if(this4.data.length < this4.length) {
			var length3 = this4.data.length + 10;
			var data3 = new Array(length3);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
			this4.data = data3;
		}
	}
	this4.data[4] = tmp1 + tmp2;
	var this5 = m.rawData;
	if(!this5.fixed) {
		if(1 >= this5.length) {
			this5.length = 2;
		}
		if(this5.data.length < this5.length) {
			var length4 = this5.data.length + 10;
			var data4 = new Array(length4);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
			this5.data = data4;
		}
	}
	this5.data[1] = tmp1 - tmp2;
	tmp1 = a1.x * a1.z * t;
	tmp2 = a1.y * s;
	var this6 = m.rawData;
	if(!this6.fixed) {
		if(8 >= this6.length) {
			this6.length = 9;
		}
		if(this6.data.length < this6.length) {
			var length5 = this6.data.length + 10;
			var data5 = new Array(length5);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data5,0,this6.data.length);
			this6.data = data5;
		}
	}
	this6.data[8] = tmp1 - tmp2;
	var this7 = m.rawData;
	if(!this7.fixed) {
		if(2 >= this7.length) {
			this7.length = 3;
		}
		if(this7.data.length < this7.length) {
			var length6 = this7.data.length + 10;
			var data6 = new Array(length6);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data6,0,this7.data.length);
			this7.data = data6;
		}
	}
	this7.data[2] = tmp1 + tmp2;
	tmp1 = a1.y * a1.z * t;
	tmp2 = a1.x * s;
	var this8 = m.rawData;
	if(!this8.fixed) {
		if(9 >= this8.length) {
			this8.length = 10;
		}
		if(this8.data.length < this8.length) {
			var length7 = this8.data.length + 10;
			var data7 = new Array(length7);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data7,0,this8.data.length);
			this8.data = data7;
		}
	}
	this8.data[9] = tmp1 + tmp2;
	var this9 = m.rawData;
	if(!this9.fixed) {
		if(6 >= this9.length) {
			this9.length = 7;
		}
		if(this9.data.length < this9.length) {
			var length8 = this9.data.length + 10;
			var data8 = new Array(length8);
			haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data8,0,this9.data.length);
			this9.data = data8;
		}
	}
	this9.data[6] = tmp1 - tmp2;
	return m;
};
openfl_geom_Matrix3D.prototype = {
	determinant: null
	,rawData: null
	,append: function(lhs) {
		var m111 = this.rawData.data[0];
		var m121 = this.rawData.data[4];
		var m131 = this.rawData.data[8];
		var m141 = this.rawData.data[12];
		var m112 = this.rawData.data[1];
		var m122 = this.rawData.data[5];
		var m132 = this.rawData.data[9];
		var m142 = this.rawData.data[13];
		var m113 = this.rawData.data[2];
		var m123 = this.rawData.data[6];
		var m133 = this.rawData.data[10];
		var m143 = this.rawData.data[14];
		var m114 = this.rawData.data[3];
		var m124 = this.rawData.data[7];
		var m134 = this.rawData.data[11];
		var m144 = this.rawData.data[15];
		var m211 = lhs.rawData.data[0];
		var m221 = lhs.rawData.data[4];
		var m231 = lhs.rawData.data[8];
		var m241 = lhs.rawData.data[12];
		var m212 = lhs.rawData.data[1];
		var m222 = lhs.rawData.data[5];
		var m232 = lhs.rawData.data[9];
		var m242 = lhs.rawData.data[13];
		var m213 = lhs.rawData.data[2];
		var m223 = lhs.rawData.data[6];
		var m233 = lhs.rawData.data[10];
		var m243 = lhs.rawData.data[14];
		var m214 = lhs.rawData.data[3];
		var m224 = lhs.rawData.data[7];
		var m234 = lhs.rawData.data[11];
		var m244 = lhs.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) {
				this1.length = 1;
			}
			if(this1.data.length < this1.length) {
				var length = this1.data.length + 10;
				var data = new Array(length);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this2 = this.rawData;
		if(!this2.fixed) {
			if(1 >= this2.length) {
				this2.length = 2;
			}
			if(this2.data.length < this2.length) {
				var length1 = this2.data.length + 10;
				var data1 = new Array(length1);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
				this2.data = data1;
			}
		}
		this2.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(2 >= this3.length) {
				this3.length = 3;
			}
			if(this3.data.length < this3.length) {
				var length2 = this3.data.length + 10;
				var data2 = new Array(length2);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
				this3.data = data2;
			}
		}
		this3.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this4 = this.rawData;
		if(!this4.fixed) {
			if(3 >= this4.length) {
				this4.length = 4;
			}
			if(this4.data.length < this4.length) {
				var length3 = this4.data.length + 10;
				var data3 = new Array(length3);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
				this4.data = data3;
			}
		}
		this4.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(4 >= this5.length) {
				this5.length = 5;
			}
			if(this5.data.length < this5.length) {
				var length4 = this5.data.length + 10;
				var data4 = new Array(length4);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
				this5.data = data4;
			}
		}
		this5.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this6 = this.rawData;
		if(!this6.fixed) {
			if(5 >= this6.length) {
				this6.length = 6;
			}
			if(this6.data.length < this6.length) {
				var length5 = this6.data.length + 10;
				var data5 = new Array(length5);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data5,0,this6.data.length);
				this6.data = data5;
			}
		}
		this6.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(6 >= this7.length) {
				this7.length = 7;
			}
			if(this7.data.length < this7.length) {
				var length6 = this7.data.length + 10;
				var data6 = new Array(length6);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data6,0,this7.data.length);
				this7.data = data6;
			}
		}
		this7.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this8 = this.rawData;
		if(!this8.fixed) {
			if(7 >= this8.length) {
				this8.length = 8;
			}
			if(this8.data.length < this8.length) {
				var length7 = this8.data.length + 10;
				var data7 = new Array(length7);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data7,0,this8.data.length);
				this8.data = data7;
			}
		}
		this8.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(8 >= this9.length) {
				this9.length = 9;
			}
			if(this9.data.length < this9.length) {
				var length8 = this9.data.length + 10;
				var data8 = new Array(length8);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data8,0,this9.data.length);
				this9.data = data8;
			}
		}
		this9.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this10 = this.rawData;
		if(!this10.fixed) {
			if(9 >= this10.length) {
				this10.length = 10;
			}
			if(this10.data.length < this10.length) {
				var length9 = this10.data.length + 10;
				var data9 = new Array(length9);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this10.data,0,data9,0,this10.data.length);
				this10.data = data9;
			}
		}
		this10.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(10 >= this11.length) {
				this11.length = 11;
			}
			if(this11.data.length < this11.length) {
				var length10 = this11.data.length + 10;
				var data10 = new Array(length10);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data10,0,this11.data.length);
				this11.data = data10;
			}
		}
		this11.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this12 = this.rawData;
		if(!this12.fixed) {
			if(11 >= this12.length) {
				this12.length = 12;
			}
			if(this12.data.length < this12.length) {
				var length11 = this12.data.length + 10;
				var data11 = new Array(length11);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this12.data,0,data11,0,this12.data.length);
				this12.data = data11;
			}
		}
		this12.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(12 >= this13.length) {
				this13.length = 13;
			}
			if(this13.data.length < this13.length) {
				var length12 = this13.data.length + 10;
				var data12 = new Array(length12);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data12,0,this13.data.length);
				this13.data = data12;
			}
		}
		this13.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this14 = this.rawData;
		if(!this14.fixed) {
			if(13 >= this14.length) {
				this14.length = 14;
			}
			if(this14.data.length < this14.length) {
				var length13 = this14.data.length + 10;
				var data13 = new Array(length13);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this14.data,0,data13,0,this14.data.length);
				this14.data = data13;
			}
		}
		this14.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(14 >= this15.length) {
				this15.length = 15;
			}
			if(this15.data.length < this15.length) {
				var length14 = this15.data.length + 10;
				var data14 = new Array(length14);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data14,0,this15.data.length);
				this15.data = data14;
			}
		}
		this15.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this16 = this.rawData;
		if(!this16.fixed) {
			if(15 >= this16.length) {
				this16.length = 16;
			}
			if(this16.data.length < this16.length) {
				var length15 = this16.data.length + 10;
				var data15 = new Array(length15);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this16.data,0,data15,0,this16.data.length);
				this16.data = data15;
			}
		}
		this16.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,appendRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			m.appendTranslation(pivotPoint.x,pivotPoint.y,pivotPoint.z);
		}
		this.append(m);
	}
	,appendScale: function(xScale,yScale,zScale) {
		var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var length = value.length;
		var vec = new Array(length);
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.append(new openfl_geom_Matrix3D(vectorData));
	}
	,appendTranslation: function(x,y,z) {
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(12 >= this1.length) {
				this1.length = 13;
			}
			if(this1.data.length < this1.length) {
				var length = this1.data.length + 10;
				var data = new Array(length);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = this.rawData.data[12] + x;
		var this2 = this.rawData;
		if(!this2.fixed) {
			if(13 >= this2.length) {
				this2.length = 14;
			}
			if(this2.data.length < this2.length) {
				var length1 = this2.data.length + 10;
				var data1 = new Array(length1);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
				this2.data = data1;
			}
		}
		this2.data[13] = this.rawData.data[13] + y;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(14 >= this3.length) {
				this3.length = 15;
			}
			if(this3.data.length < this3.length) {
				var length2 = this3.data.length + 10;
				var data2 = new Array(length2);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
				this3.data = data2;
			}
		}
		this3.data[14] = this.rawData.data[14] + z;
	}
	,clone: function() {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var length = this1.length;
		vectorData.data = new Array(length);
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		return new openfl_geom_Matrix3D(vectorData);
	}
	,copyColumnFrom: function(column,vector3D) {
		switch(column) {
		case 0:
			var this1 = this.rawData;
			var value = vector3D.x;
			if(!this1.fixed) {
				if(0 >= this1.length) {
					this1.length = 1;
				}
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = value;
			var this2 = this.rawData;
			var value1 = vector3D.y;
			if(!this2.fixed) {
				if(1 >= this2.length) {
					this2.length = 2;
				}
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
			}
			this2.data[1] = value1;
			var this3 = this.rawData;
			var value2 = vector3D.z;
			if(!this3.fixed) {
				if(2 >= this3.length) {
					this3.length = 3;
				}
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
			}
			this3.data[2] = value2;
			var this4 = this.rawData;
			var value3 = vector3D.w;
			if(!this4.fixed) {
				if(3 >= this4.length) {
					this4.length = 4;
				}
				if(this4.data.length < this4.length) {
					var length3 = this4.data.length + 10;
					var data3 = new Array(length3);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
					this4.data = data3;
				}
			}
			this4.data[3] = value3;
			break;
		case 1:
			var this5 = this.rawData;
			var value4 = vector3D.x;
			if(!this5.fixed) {
				if(4 >= this5.length) {
					this5.length = 5;
				}
				if(this5.data.length < this5.length) {
					var length4 = this5.data.length + 10;
					var data4 = new Array(length4);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
					this5.data = data4;
				}
			}
			this5.data[4] = value4;
			var this6 = this.rawData;
			var value5 = vector3D.y;
			if(!this6.fixed) {
				if(5 >= this6.length) {
					this6.length = 6;
				}
				if(this6.data.length < this6.length) {
					var length5 = this6.data.length + 10;
					var data5 = new Array(length5);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data5,0,this6.data.length);
					this6.data = data5;
				}
			}
			this6.data[5] = value5;
			var this7 = this.rawData;
			var value6 = vector3D.z;
			if(!this7.fixed) {
				if(6 >= this7.length) {
					this7.length = 7;
				}
				if(this7.data.length < this7.length) {
					var length6 = this7.data.length + 10;
					var data6 = new Array(length6);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data6,0,this7.data.length);
					this7.data = data6;
				}
			}
			this7.data[6] = value6;
			var this8 = this.rawData;
			var value7 = vector3D.w;
			if(!this8.fixed) {
				if(7 >= this8.length) {
					this8.length = 8;
				}
				if(this8.data.length < this8.length) {
					var length7 = this8.data.length + 10;
					var data7 = new Array(length7);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data7,0,this8.data.length);
					this8.data = data7;
				}
			}
			this8.data[7] = value7;
			break;
		case 2:
			var this9 = this.rawData;
			var value8 = vector3D.x;
			if(!this9.fixed) {
				if(8 >= this9.length) {
					this9.length = 9;
				}
				if(this9.data.length < this9.length) {
					var length8 = this9.data.length + 10;
					var data8 = new Array(length8);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data8,0,this9.data.length);
					this9.data = data8;
				}
			}
			this9.data[8] = value8;
			var this10 = this.rawData;
			var value9 = vector3D.y;
			if(!this10.fixed) {
				if(9 >= this10.length) {
					this10.length = 10;
				}
				if(this10.data.length < this10.length) {
					var length9 = this10.data.length + 10;
					var data9 = new Array(length9);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this10.data,0,data9,0,this10.data.length);
					this10.data = data9;
				}
			}
			this10.data[9] = value9;
			var this11 = this.rawData;
			var value10 = vector3D.z;
			if(!this11.fixed) {
				if(10 >= this11.length) {
					this11.length = 11;
				}
				if(this11.data.length < this11.length) {
					var length10 = this11.data.length + 10;
					var data10 = new Array(length10);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data10,0,this11.data.length);
					this11.data = data10;
				}
			}
			this11.data[10] = value10;
			var this12 = this.rawData;
			var value11 = vector3D.w;
			if(!this12.fixed) {
				if(11 >= this12.length) {
					this12.length = 12;
				}
				if(this12.data.length < this12.length) {
					var length11 = this12.data.length + 10;
					var data11 = new Array(length11);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this12.data,0,data11,0,this12.data.length);
					this12.data = data11;
				}
			}
			this12.data[11] = value11;
			break;
		case 3:
			var this13 = this.rawData;
			var value12 = vector3D.x;
			if(!this13.fixed) {
				if(12 >= this13.length) {
					this13.length = 13;
				}
				if(this13.data.length < this13.length) {
					var length12 = this13.data.length + 10;
					var data12 = new Array(length12);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data12,0,this13.data.length);
					this13.data = data12;
				}
			}
			this13.data[12] = value12;
			var this14 = this.rawData;
			var value13 = vector3D.y;
			if(!this14.fixed) {
				if(13 >= this14.length) {
					this14.length = 14;
				}
				if(this14.data.length < this14.length) {
					var length13 = this14.data.length + 10;
					var data13 = new Array(length13);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this14.data,0,data13,0,this14.data.length);
					this14.data = data13;
				}
			}
			this14.data[13] = value13;
			var this15 = this.rawData;
			var value14 = vector3D.z;
			if(!this15.fixed) {
				if(14 >= this15.length) {
					this15.length = 15;
				}
				if(this15.data.length < this15.length) {
					var length14 = this15.data.length + 10;
					var data14 = new Array(length14);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data14,0,this15.data.length);
					this15.data = data14;
				}
			}
			this15.data[14] = value14;
			var this16 = this.rawData;
			var value15 = vector3D.w;
			if(!this16.fixed) {
				if(15 >= this16.length) {
					this16.length = 16;
				}
				if(this16.data.length < this16.length) {
					var length15 = this16.data.length + 10;
					var data15 = new Array(length15);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this16.data,0,data15,0,this16.data.length);
					this16.data = data15;
				}
			}
			this16.data[15] = value15;
			break;
		default:
		}
	}
	,copyColumnTo: function(column,vector3D) {
		switch(column) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[1];
			vector3D.z = this.rawData.data[2];
			vector3D.w = this.rawData.data[3];
			break;
		case 1:
			vector3D.x = this.rawData.data[4];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[6];
			vector3D.w = this.rawData.data[7];
			break;
		case 2:
			vector3D.x = this.rawData.data[8];
			vector3D.y = this.rawData.data[9];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[11];
			break;
		case 3:
			vector3D.x = this.rawData.data[12];
			vector3D.y = this.rawData.data[13];
			vector3D.z = this.rawData.data[14];
			vector3D.w = this.rawData.data[15];
			break;
		default:
		}
	}
	,copyFrom: function(other) {
		var this1 = other.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var length = this1.length;
		vectorData.data = new Array(length);
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		this.rawData = vectorData;
	}
	,copyRawDataFrom: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var length = vector.length - index;
		var _g1 = 0;
		var _g = length;
		while(_g1 < _g) {
			var i = _g1++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) {
					this1.length = i + 1;
				}
				if(this1.data.length < this1.length) {
					var length1 = this1.data.length + 10;
					var data = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = vector.data[i + index];
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRawDataTo: function(vector,index,transpose) {
		if(transpose == null) {
			transpose = false;
		}
		if(index == null) {
			index = 0;
		}
		if(transpose) {
			this.transpose();
		}
		var _g1 = 0;
		var _g = this.rawData.length;
		while(_g1 < _g) {
			var i = _g1++;
			var key = i + index;
			if(!vector.fixed) {
				if(key >= vector.length) {
					vector.length = key + 1;
				}
				if(vector.data.length < vector.length) {
					var length = vector.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(vector.data,0,data,0,vector.data.length);
					vector.data = data;
				}
			}
			vector.data[key] = this.rawData.data[i];
		}
		if(transpose) {
			this.transpose();
		}
	}
	,copyRowFrom: function(row,vector3D) {
		switch(row) {
		case 0:
			var this1 = this.rawData;
			var value = vector3D.x;
			if(!this1.fixed) {
				if(0 >= this1.length) {
					this1.length = 1;
				}
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = value;
			var this2 = this.rawData;
			var value1 = vector3D.y;
			if(!this2.fixed) {
				if(4 >= this2.length) {
					this2.length = 5;
				}
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
			}
			this2.data[4] = value1;
			var this3 = this.rawData;
			var value2 = vector3D.z;
			if(!this3.fixed) {
				if(8 >= this3.length) {
					this3.length = 9;
				}
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
			}
			this3.data[8] = value2;
			var this4 = this.rawData;
			var value3 = vector3D.w;
			if(!this4.fixed) {
				if(12 >= this4.length) {
					this4.length = 13;
				}
				if(this4.data.length < this4.length) {
					var length3 = this4.data.length + 10;
					var data3 = new Array(length3);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
					this4.data = data3;
				}
			}
			this4.data[12] = value3;
			break;
		case 1:
			var this5 = this.rawData;
			var value4 = vector3D.x;
			if(!this5.fixed) {
				if(1 >= this5.length) {
					this5.length = 2;
				}
				if(this5.data.length < this5.length) {
					var length4 = this5.data.length + 10;
					var data4 = new Array(length4);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
					this5.data = data4;
				}
			}
			this5.data[1] = value4;
			var this6 = this.rawData;
			var value5 = vector3D.y;
			if(!this6.fixed) {
				if(5 >= this6.length) {
					this6.length = 6;
				}
				if(this6.data.length < this6.length) {
					var length5 = this6.data.length + 10;
					var data5 = new Array(length5);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data5,0,this6.data.length);
					this6.data = data5;
				}
			}
			this6.data[5] = value5;
			var this7 = this.rawData;
			var value6 = vector3D.z;
			if(!this7.fixed) {
				if(9 >= this7.length) {
					this7.length = 10;
				}
				if(this7.data.length < this7.length) {
					var length6 = this7.data.length + 10;
					var data6 = new Array(length6);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data6,0,this7.data.length);
					this7.data = data6;
				}
			}
			this7.data[9] = value6;
			var this8 = this.rawData;
			var value7 = vector3D.w;
			if(!this8.fixed) {
				if(13 >= this8.length) {
					this8.length = 14;
				}
				if(this8.data.length < this8.length) {
					var length7 = this8.data.length + 10;
					var data7 = new Array(length7);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data7,0,this8.data.length);
					this8.data = data7;
				}
			}
			this8.data[13] = value7;
			break;
		case 2:
			var this9 = this.rawData;
			var value8 = vector3D.x;
			if(!this9.fixed) {
				if(2 >= this9.length) {
					this9.length = 3;
				}
				if(this9.data.length < this9.length) {
					var length8 = this9.data.length + 10;
					var data8 = new Array(length8);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data8,0,this9.data.length);
					this9.data = data8;
				}
			}
			this9.data[2] = value8;
			var this10 = this.rawData;
			var value9 = vector3D.y;
			if(!this10.fixed) {
				if(6 >= this10.length) {
					this10.length = 7;
				}
				if(this10.data.length < this10.length) {
					var length9 = this10.data.length + 10;
					var data9 = new Array(length9);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this10.data,0,data9,0,this10.data.length);
					this10.data = data9;
				}
			}
			this10.data[6] = value9;
			var this11 = this.rawData;
			var value10 = vector3D.z;
			if(!this11.fixed) {
				if(10 >= this11.length) {
					this11.length = 11;
				}
				if(this11.data.length < this11.length) {
					var length10 = this11.data.length + 10;
					var data10 = new Array(length10);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data10,0,this11.data.length);
					this11.data = data10;
				}
			}
			this11.data[10] = value10;
			var this12 = this.rawData;
			var value11 = vector3D.w;
			if(!this12.fixed) {
				if(14 >= this12.length) {
					this12.length = 15;
				}
				if(this12.data.length < this12.length) {
					var length11 = this12.data.length + 10;
					var data11 = new Array(length11);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this12.data,0,data11,0,this12.data.length);
					this12.data = data11;
				}
			}
			this12.data[14] = value11;
			break;
		case 3:
			var this13 = this.rawData;
			var value12 = vector3D.x;
			if(!this13.fixed) {
				if(3 >= this13.length) {
					this13.length = 4;
				}
				if(this13.data.length < this13.length) {
					var length12 = this13.data.length + 10;
					var data12 = new Array(length12);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data12,0,this13.data.length);
					this13.data = data12;
				}
			}
			this13.data[3] = value12;
			var this14 = this.rawData;
			var value13 = vector3D.y;
			if(!this14.fixed) {
				if(7 >= this14.length) {
					this14.length = 8;
				}
				if(this14.data.length < this14.length) {
					var length13 = this14.data.length + 10;
					var data13 = new Array(length13);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this14.data,0,data13,0,this14.data.length);
					this14.data = data13;
				}
			}
			this14.data[7] = value13;
			var this15 = this.rawData;
			var value14 = vector3D.z;
			if(!this15.fixed) {
				if(11 >= this15.length) {
					this15.length = 12;
				}
				if(this15.data.length < this15.length) {
					var length14 = this15.data.length + 10;
					var data14 = new Array(length14);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data14,0,this15.data.length);
					this15.data = data14;
				}
			}
			this15.data[11] = value14;
			var this16 = this.rawData;
			var value15 = vector3D.w;
			if(!this16.fixed) {
				if(15 >= this16.length) {
					this16.length = 16;
				}
				if(this16.data.length < this16.length) {
					var length15 = this16.data.length + 10;
					var data15 = new Array(length15);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this16.data,0,data15,0,this16.data.length);
					this16.data = data15;
				}
			}
			this16.data[15] = value15;
			break;
		default:
		}
	}
	,copyRowTo: function(row,vector3D) {
		switch(row) {
		case 0:
			vector3D.x = this.rawData.data[0];
			vector3D.y = this.rawData.data[4];
			vector3D.z = this.rawData.data[8];
			vector3D.w = this.rawData.data[12];
			break;
		case 1:
			vector3D.x = this.rawData.data[1];
			vector3D.y = this.rawData.data[5];
			vector3D.z = this.rawData.data[9];
			vector3D.w = this.rawData.data[13];
			break;
		case 2:
			vector3D.x = this.rawData.data[2];
			vector3D.y = this.rawData.data[6];
			vector3D.z = this.rawData.data[10];
			vector3D.w = this.rawData.data[14];
			break;
		case 3:
			vector3D.x = this.rawData.data[3];
			vector3D.y = this.rawData.data[7];
			vector3D.z = this.rawData.data[11];
			vector3D.w = this.rawData.data[15];
			break;
		default:
		}
	}
	,copyToMatrix3D: function(other) {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var length = this1.length;
		vectorData.data = new Array(length);
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		other.rawData = vectorData;
	}
	,decompose: function(orientationStyle) {
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		var this1 = new openfl_VectorData();
		this1.data = new Array(0);
		this1.length = 0;
		this1.fixed = false;
		var vec = this1;
		var this2 = this.clone().rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this2.length;
		vectorData.fixed = this2.fixed;
		var length = this2.length;
		vectorData.data = new Array(length);
		haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,vectorData.data,0,this2.length);
		var mr = vectorData;
		var pos = new openfl_geom_Vector3D(mr.data[12],mr.data[13],mr.data[14]);
		if(!mr.fixed) {
			if(12 >= mr.length) {
				mr.length = 13;
			}
			if(mr.data.length < mr.length) {
				var length1 = mr.data.length + 10;
				var data = new Array(length1);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data,0,mr.data.length);
				mr.data = data;
			}
		}
		mr.data[12] = 0;
		if(!mr.fixed) {
			if(13 >= mr.length) {
				mr.length = 14;
			}
			if(mr.data.length < mr.length) {
				var length2 = mr.data.length + 10;
				var data1 = new Array(length2);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data1,0,mr.data.length);
				mr.data = data1;
			}
		}
		mr.data[13] = 0;
		if(!mr.fixed) {
			if(14 >= mr.length) {
				mr.length = 15;
			}
			if(mr.data.length < mr.length) {
				var length3 = mr.data.length + 10;
				var data2 = new Array(length3);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data2,0,mr.data.length);
				mr.data = data2;
			}
		}
		mr.data[14] = 0;
		var scale = new openfl_geom_Vector3D();
		scale.x = Math.sqrt(mr.data[0] * mr.data[0] + mr.data[1] * mr.data[1] + mr.data[2] * mr.data[2]);
		scale.y = Math.sqrt(mr.data[4] * mr.data[4] + mr.data[5] * mr.data[5] + mr.data[6] * mr.data[6]);
		scale.z = Math.sqrt(mr.data[8] * mr.data[8] + mr.data[9] * mr.data[9] + mr.data[10] * mr.data[10]);
		if(mr.data[0] * (mr.data[5] * mr.data[10] - mr.data[6] * mr.data[9]) - mr.data[1] * (mr.data[4] * mr.data[10] - mr.data[6] * mr.data[8]) + mr.data[2] * (mr.data[4] * mr.data[9] - mr.data[5] * mr.data[8]) < 0) {
			scale.z = -scale.z;
		}
		var value = mr.data[0] / scale.x;
		if(!mr.fixed) {
			if(0 >= mr.length) {
				mr.length = 1;
			}
			if(mr.data.length < mr.length) {
				var length4 = mr.data.length + 10;
				var data3 = new Array(length4);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data3,0,mr.data.length);
				mr.data = data3;
			}
		}
		mr.data[0] = value;
		var value1 = mr.data[1] / scale.x;
		if(!mr.fixed) {
			if(1 >= mr.length) {
				mr.length = 2;
			}
			if(mr.data.length < mr.length) {
				var length5 = mr.data.length + 10;
				var data4 = new Array(length5);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data4,0,mr.data.length);
				mr.data = data4;
			}
		}
		mr.data[1] = value1;
		var value2 = mr.data[2] / scale.x;
		if(!mr.fixed) {
			if(2 >= mr.length) {
				mr.length = 3;
			}
			if(mr.data.length < mr.length) {
				var length6 = mr.data.length + 10;
				var data5 = new Array(length6);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data5,0,mr.data.length);
				mr.data = data5;
			}
		}
		mr.data[2] = value2;
		var value3 = mr.data[4] / scale.y;
		if(!mr.fixed) {
			if(4 >= mr.length) {
				mr.length = 5;
			}
			if(mr.data.length < mr.length) {
				var length7 = mr.data.length + 10;
				var data6 = new Array(length7);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data6,0,mr.data.length);
				mr.data = data6;
			}
		}
		mr.data[4] = value3;
		var value4 = mr.data[5] / scale.y;
		if(!mr.fixed) {
			if(5 >= mr.length) {
				mr.length = 6;
			}
			if(mr.data.length < mr.length) {
				var length8 = mr.data.length + 10;
				var data7 = new Array(length8);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data7,0,mr.data.length);
				mr.data = data7;
			}
		}
		mr.data[5] = value4;
		var value5 = mr.data[6] / scale.y;
		if(!mr.fixed) {
			if(6 >= mr.length) {
				mr.length = 7;
			}
			if(mr.data.length < mr.length) {
				var length9 = mr.data.length + 10;
				var data8 = new Array(length9);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data8,0,mr.data.length);
				mr.data = data8;
			}
		}
		mr.data[6] = value5;
		var value6 = mr.data[8] / scale.z;
		if(!mr.fixed) {
			if(8 >= mr.length) {
				mr.length = 9;
			}
			if(mr.data.length < mr.length) {
				var length10 = mr.data.length + 10;
				var data9 = new Array(length10);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data9,0,mr.data.length);
				mr.data = data9;
			}
		}
		mr.data[8] = value6;
		var value7 = mr.data[9] / scale.z;
		if(!mr.fixed) {
			if(9 >= mr.length) {
				mr.length = 10;
			}
			if(mr.data.length < mr.length) {
				var length11 = mr.data.length + 10;
				var data10 = new Array(length11);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data10,0,mr.data.length);
				mr.data = data10;
			}
		}
		mr.data[9] = value7;
		var value8 = mr.data[10] / scale.z;
		if(!mr.fixed) {
			if(10 >= mr.length) {
				mr.length = 11;
			}
			if(mr.data.length < mr.length) {
				var length12 = mr.data.length + 10;
				var data11 = new Array(length12);
				haxe_ds__$Vector_Vector_$Impl_$.blit(mr.data,0,data11,0,mr.data.length);
				mr.data = data11;
			}
		}
		mr.data[10] = value8;
		var rot = new openfl_geom_Vector3D();
		switch(orientationStyle) {
		case 0:
			rot.w = Math.acos((mr.data[0] + mr.data[5] + mr.data[10] - 1) / 2);
			var len = Math.sqrt((mr.data[6] - mr.data[9]) * (mr.data[6] - mr.data[9]) + (mr.data[8] - mr.data[2]) * (mr.data[8] - mr.data[2]) + (mr.data[1] - mr.data[4]) * (mr.data[1] - mr.data[4]));
			if(len != 0) {
				rot.x = (mr.data[6] - mr.data[9]) / len;
				rot.y = (mr.data[8] - mr.data[2]) / len;
				rot.z = (mr.data[1] - mr.data[4]) / len;
			} else {
				rot.x = rot.y = rot.z = 0;
			}
			break;
		case 1:
			rot.y = Math.asin(-mr.data[2]);
			if(mr.data[2] != 1 && mr.data[2] != -1) {
				rot.x = Math.atan2(mr.data[6],mr.data[10]);
				rot.z = Math.atan2(mr.data[1],mr.data[0]);
			} else {
				rot.z = 0;
				rot.x = Math.atan2(mr.data[4],mr.data[5]);
			}
			break;
		case 2:
			var tr = mr.data[0] + mr.data[5] + mr.data[10];
			if(tr > 0) {
				rot.w = Math.sqrt(1 + tr) / 2;
				rot.x = (mr.data[6] - mr.data[9]) / (4 * rot.w);
				rot.y = (mr.data[8] - mr.data[2]) / (4 * rot.w);
				rot.z = (mr.data[1] - mr.data[4]) / (4 * rot.w);
			} else if(mr.data[0] > mr.data[5] && mr.data[0] > mr.data[10]) {
				rot.x = Math.sqrt(1 + mr.data[0] - mr.data[5] - mr.data[10]) / 2;
				rot.w = (mr.data[6] - mr.data[9]) / (4 * rot.x);
				rot.y = (mr.data[1] + mr.data[4]) / (4 * rot.x);
				rot.z = (mr.data[8] + mr.data[2]) / (4 * rot.x);
			} else if(mr.data[5] > mr.data[10]) {
				rot.y = Math.sqrt(1 + mr.data[5] - mr.data[0] - mr.data[10]) / 2;
				rot.x = (mr.data[1] + mr.data[4]) / (4 * rot.y);
				rot.w = (mr.data[8] - mr.data[2]) / (4 * rot.y);
				rot.z = (mr.data[6] + mr.data[9]) / (4 * rot.y);
			} else {
				rot.z = Math.sqrt(1 + mr.data[10] - mr.data[0] - mr.data[5]) / 2;
				rot.x = (mr.data[8] + mr.data[2]) / (4 * rot.z);
				rot.y = (mr.data[6] + mr.data[9]) / (4 * rot.z);
				rot.w = (mr.data[1] - mr.data[4]) / (4 * rot.z);
			}
			break;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var length13 = vec.data.length + 10;
				var data12 = new Array(length13);
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data12,0,vec.data.length);
				vec.data = data12;
			}
			vec.data[vec.length - 1] = pos;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var length14 = vec.data.length + 10;
				var data13 = new Array(length14);
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data13,0,vec.data.length);
				vec.data = data13;
			}
			vec.data[vec.length - 1] = rot;
		}
		if(!vec.fixed) {
			vec.length++;
			if(vec.data.length < vec.length) {
				var length15 = vec.data.length + 10;
				var data14 = new Array(length15);
				haxe_ds__$Vector_Vector_$Impl_$.blit(vec.data,0,data14,0,vec.data.length);
				vec.data = data14;
			}
			vec.data[vec.length - 1] = scale;
		}
		return vec;
	}
	,deltaTransformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[3],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[7],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[11],0);
	}
	,identity: function() {
		var value = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var length = value.length;
		var vec = new Array(length);
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.rawData = vectorData;
	}
	,interpolateTo: function(toMat,percent) {
		var _g = 0;
		while(_g < 16) {
			var i = _g++;
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(i >= this1.length) {
					this1.length = i + 1;
				}
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[i] = this.rawData.data[i] + (toMat.rawData.data[i] - this.rawData.data[i]) * percent;
		}
	}
	,invert: function() {
		var d = this.get_determinant();
		var invertable = Math.abs(d) > 0.00000000001;
		if(invertable) {
			d = 1 / d;
			var m11 = this.rawData.data[0];
			var m21 = this.rawData.data[4];
			var m31 = this.rawData.data[8];
			var m41 = this.rawData.data[12];
			var m12 = this.rawData.data[1];
			var m22 = this.rawData.data[5];
			var m32 = this.rawData.data[9];
			var m42 = this.rawData.data[13];
			var m13 = this.rawData.data[2];
			var m23 = this.rawData.data[6];
			var m33 = this.rawData.data[10];
			var m43 = this.rawData.data[14];
			var m14 = this.rawData.data[3];
			var m24 = this.rawData.data[7];
			var m34 = this.rawData.data[11];
			var m44 = this.rawData.data[15];
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) {
					this1.length = 1;
				}
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = d * (m22 * (m33 * m44 - m43 * m34) - m32 * (m23 * m44 - m43 * m24) + m42 * (m23 * m34 - m33 * m24));
			var this2 = this.rawData;
			if(!this2.fixed) {
				if(1 >= this2.length) {
					this2.length = 2;
				}
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
			}
			this2.data[1] = -d * (m12 * (m33 * m44 - m43 * m34) - m32 * (m13 * m44 - m43 * m14) + m42 * (m13 * m34 - m33 * m14));
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(2 >= this3.length) {
					this3.length = 3;
				}
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
			}
			this3.data[2] = d * (m12 * (m23 * m44 - m43 * m24) - m22 * (m13 * m44 - m43 * m14) + m42 * (m13 * m24 - m23 * m14));
			var this4 = this.rawData;
			if(!this4.fixed) {
				if(3 >= this4.length) {
					this4.length = 4;
				}
				if(this4.data.length < this4.length) {
					var length3 = this4.data.length + 10;
					var data3 = new Array(length3);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
					this4.data = data3;
				}
			}
			this4.data[3] = -d * (m12 * (m23 * m34 - m33 * m24) - m22 * (m13 * m34 - m33 * m14) + m32 * (m13 * m24 - m23 * m14));
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(4 >= this5.length) {
					this5.length = 5;
				}
				if(this5.data.length < this5.length) {
					var length4 = this5.data.length + 10;
					var data4 = new Array(length4);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
					this5.data = data4;
				}
			}
			this5.data[4] = -d * (m21 * (m33 * m44 - m43 * m34) - m31 * (m23 * m44 - m43 * m24) + m41 * (m23 * m34 - m33 * m24));
			var this6 = this.rawData;
			if(!this6.fixed) {
				if(5 >= this6.length) {
					this6.length = 6;
				}
				if(this6.data.length < this6.length) {
					var length5 = this6.data.length + 10;
					var data5 = new Array(length5);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data5,0,this6.data.length);
					this6.data = data5;
				}
			}
			this6.data[5] = d * (m11 * (m33 * m44 - m43 * m34) - m31 * (m13 * m44 - m43 * m14) + m41 * (m13 * m34 - m33 * m14));
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(6 >= this7.length) {
					this7.length = 7;
				}
				if(this7.data.length < this7.length) {
					var length6 = this7.data.length + 10;
					var data6 = new Array(length6);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data6,0,this7.data.length);
					this7.data = data6;
				}
			}
			this7.data[6] = -d * (m11 * (m23 * m44 - m43 * m24) - m21 * (m13 * m44 - m43 * m14) + m41 * (m13 * m24 - m23 * m14));
			var this8 = this.rawData;
			if(!this8.fixed) {
				if(7 >= this8.length) {
					this8.length = 8;
				}
				if(this8.data.length < this8.length) {
					var length7 = this8.data.length + 10;
					var data7 = new Array(length7);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data7,0,this8.data.length);
					this8.data = data7;
				}
			}
			this8.data[7] = d * (m11 * (m23 * m34 - m33 * m24) - m21 * (m13 * m34 - m33 * m14) + m31 * (m13 * m24 - m23 * m14));
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(8 >= this9.length) {
					this9.length = 9;
				}
				if(this9.data.length < this9.length) {
					var length8 = this9.data.length + 10;
					var data8 = new Array(length8);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data8,0,this9.data.length);
					this9.data = data8;
				}
			}
			this9.data[8] = d * (m21 * (m32 * m44 - m42 * m34) - m31 * (m22 * m44 - m42 * m24) + m41 * (m22 * m34 - m32 * m24));
			var this10 = this.rawData;
			if(!this10.fixed) {
				if(9 >= this10.length) {
					this10.length = 10;
				}
				if(this10.data.length < this10.length) {
					var length9 = this10.data.length + 10;
					var data9 = new Array(length9);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this10.data,0,data9,0,this10.data.length);
					this10.data = data9;
				}
			}
			this10.data[9] = -d * (m11 * (m32 * m44 - m42 * m34) - m31 * (m12 * m44 - m42 * m14) + m41 * (m12 * m34 - m32 * m14));
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(10 >= this11.length) {
					this11.length = 11;
				}
				if(this11.data.length < this11.length) {
					var length10 = this11.data.length + 10;
					var data10 = new Array(length10);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data10,0,this11.data.length);
					this11.data = data10;
				}
			}
			this11.data[10] = d * (m11 * (m22 * m44 - m42 * m24) - m21 * (m12 * m44 - m42 * m14) + m41 * (m12 * m24 - m22 * m14));
			var this12 = this.rawData;
			if(!this12.fixed) {
				if(11 >= this12.length) {
					this12.length = 12;
				}
				if(this12.data.length < this12.length) {
					var length11 = this12.data.length + 10;
					var data11 = new Array(length11);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this12.data,0,data11,0,this12.data.length);
					this12.data = data11;
				}
			}
			this12.data[11] = -d * (m11 * (m22 * m34 - m32 * m24) - m21 * (m12 * m34 - m32 * m14) + m31 * (m12 * m24 - m22 * m14));
			var this13 = this.rawData;
			if(!this13.fixed) {
				if(12 >= this13.length) {
					this13.length = 13;
				}
				if(this13.data.length < this13.length) {
					var length12 = this13.data.length + 10;
					var data12 = new Array(length12);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data12,0,this13.data.length);
					this13.data = data12;
				}
			}
			this13.data[12] = -d * (m21 * (m32 * m43 - m42 * m33) - m31 * (m22 * m43 - m42 * m23) + m41 * (m22 * m33 - m32 * m23));
			var this14 = this.rawData;
			if(!this14.fixed) {
				if(13 >= this14.length) {
					this14.length = 14;
				}
				if(this14.data.length < this14.length) {
					var length13 = this14.data.length + 10;
					var data13 = new Array(length13);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this14.data,0,data13,0,this14.data.length);
					this14.data = data13;
				}
			}
			this14.data[13] = d * (m11 * (m32 * m43 - m42 * m33) - m31 * (m12 * m43 - m42 * m13) + m41 * (m12 * m33 - m32 * m13));
			var this15 = this.rawData;
			if(!this15.fixed) {
				if(14 >= this15.length) {
					this15.length = 15;
				}
				if(this15.data.length < this15.length) {
					var length14 = this15.data.length + 10;
					var data14 = new Array(length14);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data14,0,this15.data.length);
					this15.data = data14;
				}
			}
			this15.data[14] = -d * (m11 * (m22 * m43 - m42 * m23) - m21 * (m12 * m43 - m42 * m13) + m41 * (m12 * m23 - m22 * m13));
			var this16 = this.rawData;
			if(!this16.fixed) {
				if(15 >= this16.length) {
					this16.length = 16;
				}
				if(this16.data.length < this16.length) {
					var length15 = this16.data.length + 10;
					var data15 = new Array(length15);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this16.data,0,data15,0,this16.data.length);
					this16.data = data15;
				}
			}
			this16.data[15] = d * (m11 * (m22 * m33 - m32 * m23) - m21 * (m12 * m33 - m32 * m13) + m31 * (m12 * m23 - m22 * m13));
		}
		return invertable;
	}
	,pointAt: function(pos,at,up) {
		if(at == null) {
			at = new openfl_geom_Vector3D(0,0,-1);
		}
		if(up == null) {
			up = new openfl_geom_Vector3D(0,-1,0);
		}
		var dir = at.subtract(pos);
		var vup = up.clone();
		var right;
		dir.normalize();
		vup.normalize();
		var dir2 = dir.clone();
		dir2.scaleBy(vup.dotProduct(dir));
		vup = vup.subtract(dir2);
		if(vup.get_length() > 0) {
			vup.normalize();
		} else if(dir.x != 0) {
			vup = new openfl_geom_Vector3D(-dir.y,dir.x,0);
		} else {
			vup = new openfl_geom_Vector3D(1,0,0);
		}
		right = vup.crossProduct(dir);
		right.normalize();
		var this1 = this.rawData;
		var value = right.x;
		if(!this1.fixed) {
			if(0 >= this1.length) {
				this1.length = 1;
			}
			if(this1.data.length < this1.length) {
				var length = this1.data.length + 10;
				var data = new Array(length);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = value;
		var this2 = this.rawData;
		var value1 = right.y;
		if(!this2.fixed) {
			if(4 >= this2.length) {
				this2.length = 5;
			}
			if(this2.data.length < this2.length) {
				var length1 = this2.data.length + 10;
				var data1 = new Array(length1);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
				this2.data = data1;
			}
		}
		this2.data[4] = value1;
		var this3 = this.rawData;
		var value2 = right.z;
		if(!this3.fixed) {
			if(8 >= this3.length) {
				this3.length = 9;
			}
			if(this3.data.length < this3.length) {
				var length2 = this3.data.length + 10;
				var data2 = new Array(length2);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
				this3.data = data2;
			}
		}
		this3.data[8] = value2;
		var this4 = this.rawData;
		if(!this4.fixed) {
			if(12 >= this4.length) {
				this4.length = 13;
			}
			if(this4.data.length < this4.length) {
				var length3 = this4.data.length + 10;
				var data3 = new Array(length3);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
				this4.data = data3;
			}
		}
		this4.data[12] = 0.0;
		var this5 = this.rawData;
		var value3 = vup.x;
		if(!this5.fixed) {
			if(1 >= this5.length) {
				this5.length = 2;
			}
			if(this5.data.length < this5.length) {
				var length4 = this5.data.length + 10;
				var data4 = new Array(length4);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
				this5.data = data4;
			}
		}
		this5.data[1] = value3;
		var this6 = this.rawData;
		var value4 = vup.y;
		if(!this6.fixed) {
			if(5 >= this6.length) {
				this6.length = 6;
			}
			if(this6.data.length < this6.length) {
				var length5 = this6.data.length + 10;
				var data5 = new Array(length5);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data5,0,this6.data.length);
				this6.data = data5;
			}
		}
		this6.data[5] = value4;
		var this7 = this.rawData;
		var value5 = vup.z;
		if(!this7.fixed) {
			if(9 >= this7.length) {
				this7.length = 10;
			}
			if(this7.data.length < this7.length) {
				var length6 = this7.data.length + 10;
				var data6 = new Array(length6);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data6,0,this7.data.length);
				this7.data = data6;
			}
		}
		this7.data[9] = value5;
		var this8 = this.rawData;
		if(!this8.fixed) {
			if(13 >= this8.length) {
				this8.length = 14;
			}
			if(this8.data.length < this8.length) {
				var length7 = this8.data.length + 10;
				var data7 = new Array(length7);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data7,0,this8.data.length);
				this8.data = data7;
			}
		}
		this8.data[13] = 0.0;
		var this9 = this.rawData;
		var value6 = dir.x;
		if(!this9.fixed) {
			if(2 >= this9.length) {
				this9.length = 3;
			}
			if(this9.data.length < this9.length) {
				var length8 = this9.data.length + 10;
				var data8 = new Array(length8);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data8,0,this9.data.length);
				this9.data = data8;
			}
		}
		this9.data[2] = value6;
		var this10 = this.rawData;
		var value7 = dir.y;
		if(!this10.fixed) {
			if(6 >= this10.length) {
				this10.length = 7;
			}
			if(this10.data.length < this10.length) {
				var length9 = this10.data.length + 10;
				var data9 = new Array(length9);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this10.data,0,data9,0,this10.data.length);
				this10.data = data9;
			}
		}
		this10.data[6] = value7;
		var this11 = this.rawData;
		var value8 = dir.z;
		if(!this11.fixed) {
			if(10 >= this11.length) {
				this11.length = 11;
			}
			if(this11.data.length < this11.length) {
				var length10 = this11.data.length + 10;
				var data10 = new Array(length10);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data10,0,this11.data.length);
				this11.data = data10;
			}
		}
		this11.data[10] = value8;
		var this12 = this.rawData;
		if(!this12.fixed) {
			if(14 >= this12.length) {
				this12.length = 15;
			}
			if(this12.data.length < this12.length) {
				var length11 = this12.data.length + 10;
				var data11 = new Array(length11);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this12.data,0,data11,0,this12.data.length);
				this12.data = data11;
			}
		}
		this12.data[14] = 0.0;
		var this13 = this.rawData;
		var value9 = pos.x;
		if(!this13.fixed) {
			if(3 >= this13.length) {
				this13.length = 4;
			}
			if(this13.data.length < this13.length) {
				var length12 = this13.data.length + 10;
				var data12 = new Array(length12);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data12,0,this13.data.length);
				this13.data = data12;
			}
		}
		this13.data[3] = value9;
		var this14 = this.rawData;
		var value10 = pos.y;
		if(!this14.fixed) {
			if(7 >= this14.length) {
				this14.length = 8;
			}
			if(this14.data.length < this14.length) {
				var length13 = this14.data.length + 10;
				var data13 = new Array(length13);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this14.data,0,data13,0,this14.data.length);
				this14.data = data13;
			}
		}
		this14.data[7] = value10;
		var this15 = this.rawData;
		var value11 = pos.z;
		if(!this15.fixed) {
			if(11 >= this15.length) {
				this15.length = 12;
			}
			if(this15.data.length < this15.length) {
				var length14 = this15.data.length + 10;
				var data14 = new Array(length14);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data14,0,this15.data.length);
				this15.data = data14;
			}
		}
		this15.data[11] = value11;
		var this16 = this.rawData;
		if(!this16.fixed) {
			if(15 >= this16.length) {
				this16.length = 16;
			}
			if(this16.data.length < this16.length) {
				var length15 = this16.data.length + 10;
				var data15 = new Array(length15);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this16.data,0,data15,0,this16.data.length);
				this16.data = data15;
			}
		}
		this16.data[15] = 1.0;
	}
	,prepend: function(rhs) {
		var m111 = rhs.rawData.data[0];
		var m121 = rhs.rawData.data[4];
		var m131 = rhs.rawData.data[8];
		var m141 = rhs.rawData.data[12];
		var m112 = rhs.rawData.data[1];
		var m122 = rhs.rawData.data[5];
		var m132 = rhs.rawData.data[9];
		var m142 = rhs.rawData.data[13];
		var m113 = rhs.rawData.data[2];
		var m123 = rhs.rawData.data[6];
		var m133 = rhs.rawData.data[10];
		var m143 = rhs.rawData.data[14];
		var m114 = rhs.rawData.data[3];
		var m124 = rhs.rawData.data[7];
		var m134 = rhs.rawData.data[11];
		var m144 = rhs.rawData.data[15];
		var m211 = this.rawData.data[0];
		var m221 = this.rawData.data[4];
		var m231 = this.rawData.data[8];
		var m241 = this.rawData.data[12];
		var m212 = this.rawData.data[1];
		var m222 = this.rawData.data[5];
		var m232 = this.rawData.data[9];
		var m242 = this.rawData.data[13];
		var m213 = this.rawData.data[2];
		var m223 = this.rawData.data[6];
		var m233 = this.rawData.data[10];
		var m243 = this.rawData.data[14];
		var m214 = this.rawData.data[3];
		var m224 = this.rawData.data[7];
		var m234 = this.rawData.data[11];
		var m244 = this.rawData.data[15];
		var this1 = this.rawData;
		if(!this1.fixed) {
			if(0 >= this1.length) {
				this1.length = 1;
			}
			if(this1.data.length < this1.length) {
				var length = this1.data.length + 10;
				var data = new Array(length);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[0] = m111 * m211 + m112 * m221 + m113 * m231 + m114 * m241;
		var this2 = this.rawData;
		if(!this2.fixed) {
			if(1 >= this2.length) {
				this2.length = 2;
			}
			if(this2.data.length < this2.length) {
				var length1 = this2.data.length + 10;
				var data1 = new Array(length1);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
				this2.data = data1;
			}
		}
		this2.data[1] = m111 * m212 + m112 * m222 + m113 * m232 + m114 * m242;
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(2 >= this3.length) {
				this3.length = 3;
			}
			if(this3.data.length < this3.length) {
				var length2 = this3.data.length + 10;
				var data2 = new Array(length2);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
				this3.data = data2;
			}
		}
		this3.data[2] = m111 * m213 + m112 * m223 + m113 * m233 + m114 * m243;
		var this4 = this.rawData;
		if(!this4.fixed) {
			if(3 >= this4.length) {
				this4.length = 4;
			}
			if(this4.data.length < this4.length) {
				var length3 = this4.data.length + 10;
				var data3 = new Array(length3);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
				this4.data = data3;
			}
		}
		this4.data[3] = m111 * m214 + m112 * m224 + m113 * m234 + m114 * m244;
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(4 >= this5.length) {
				this5.length = 5;
			}
			if(this5.data.length < this5.length) {
				var length4 = this5.data.length + 10;
				var data4 = new Array(length4);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
				this5.data = data4;
			}
		}
		this5.data[4] = m121 * m211 + m122 * m221 + m123 * m231 + m124 * m241;
		var this6 = this.rawData;
		if(!this6.fixed) {
			if(5 >= this6.length) {
				this6.length = 6;
			}
			if(this6.data.length < this6.length) {
				var length5 = this6.data.length + 10;
				var data5 = new Array(length5);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data5,0,this6.data.length);
				this6.data = data5;
			}
		}
		this6.data[5] = m121 * m212 + m122 * m222 + m123 * m232 + m124 * m242;
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(6 >= this7.length) {
				this7.length = 7;
			}
			if(this7.data.length < this7.length) {
				var length6 = this7.data.length + 10;
				var data6 = new Array(length6);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data6,0,this7.data.length);
				this7.data = data6;
			}
		}
		this7.data[6] = m121 * m213 + m122 * m223 + m123 * m233 + m124 * m243;
		var this8 = this.rawData;
		if(!this8.fixed) {
			if(7 >= this8.length) {
				this8.length = 8;
			}
			if(this8.data.length < this8.length) {
				var length7 = this8.data.length + 10;
				var data7 = new Array(length7);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data7,0,this8.data.length);
				this8.data = data7;
			}
		}
		this8.data[7] = m121 * m214 + m122 * m224 + m123 * m234 + m124 * m244;
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(8 >= this9.length) {
				this9.length = 9;
			}
			if(this9.data.length < this9.length) {
				var length8 = this9.data.length + 10;
				var data8 = new Array(length8);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data8,0,this9.data.length);
				this9.data = data8;
			}
		}
		this9.data[8] = m131 * m211 + m132 * m221 + m133 * m231 + m134 * m241;
		var this10 = this.rawData;
		if(!this10.fixed) {
			if(9 >= this10.length) {
				this10.length = 10;
			}
			if(this10.data.length < this10.length) {
				var length9 = this10.data.length + 10;
				var data9 = new Array(length9);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this10.data,0,data9,0,this10.data.length);
				this10.data = data9;
			}
		}
		this10.data[9] = m131 * m212 + m132 * m222 + m133 * m232 + m134 * m242;
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(10 >= this11.length) {
				this11.length = 11;
			}
			if(this11.data.length < this11.length) {
				var length10 = this11.data.length + 10;
				var data10 = new Array(length10);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data10,0,this11.data.length);
				this11.data = data10;
			}
		}
		this11.data[10] = m131 * m213 + m132 * m223 + m133 * m233 + m134 * m243;
		var this12 = this.rawData;
		if(!this12.fixed) {
			if(11 >= this12.length) {
				this12.length = 12;
			}
			if(this12.data.length < this12.length) {
				var length11 = this12.data.length + 10;
				var data11 = new Array(length11);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this12.data,0,data11,0,this12.data.length);
				this12.data = data11;
			}
		}
		this12.data[11] = m131 * m214 + m132 * m224 + m133 * m234 + m134 * m244;
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(12 >= this13.length) {
				this13.length = 13;
			}
			if(this13.data.length < this13.length) {
				var length12 = this13.data.length + 10;
				var data12 = new Array(length12);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data12,0,this13.data.length);
				this13.data = data12;
			}
		}
		this13.data[12] = m141 * m211 + m142 * m221 + m143 * m231 + m144 * m241;
		var this14 = this.rawData;
		if(!this14.fixed) {
			if(13 >= this14.length) {
				this14.length = 14;
			}
			if(this14.data.length < this14.length) {
				var length13 = this14.data.length + 10;
				var data13 = new Array(length13);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this14.data,0,data13,0,this14.data.length);
				this14.data = data13;
			}
		}
		this14.data[13] = m141 * m212 + m142 * m222 + m143 * m232 + m144 * m242;
		var this15 = this.rawData;
		if(!this15.fixed) {
			if(14 >= this15.length) {
				this15.length = 15;
			}
			if(this15.data.length < this15.length) {
				var length14 = this15.data.length + 10;
				var data14 = new Array(length14);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data14,0,this15.data.length);
				this15.data = data14;
			}
		}
		this15.data[14] = m141 * m213 + m142 * m223 + m143 * m233 + m144 * m243;
		var this16 = this.rawData;
		if(!this16.fixed) {
			if(15 >= this16.length) {
				this16.length = 16;
			}
			if(this16.data.length < this16.length) {
				var length15 = this16.data.length + 10;
				var data15 = new Array(length15);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this16.data,0,data15,0,this16.data.length);
				this16.data = data15;
			}
		}
		this16.data[15] = m141 * m214 + m142 * m224 + m143 * m234 + m144 * m244;
	}
	,prependRotation: function(degrees,axis,pivotPoint) {
		var m = openfl_geom_Matrix3D.__getAxisRotation(axis.x,axis.y,axis.z,degrees);
		if(pivotPoint != null) {
			m.appendTranslation(pivotPoint.x,pivotPoint.y,pivotPoint.z);
		}
		this.prepend(m);
	}
	,prependScale: function(xScale,yScale,zScale) {
		var value = [xScale,0.0,0.0,0.0,0.0,yScale,0.0,0.0,0.0,0.0,zScale,0.0,0.0,0.0,0.0,1.0];
		var vectorData = new openfl_VectorData();
		vectorData.length = value.length;
		vectorData.fixed = true;
		var length = value.length;
		var vec = new Array(length);
		var _g1 = 0;
		var _g = value.length;
		while(_g1 < _g) {
			var i = _g1++;
			vec[i] = value[i];
		}
		vectorData.data = vec;
		this.prepend(new openfl_geom_Matrix3D(vectorData));
	}
	,prependTranslation: function(x,y,z) {
		var m = new openfl_geom_Matrix3D();
		m.set_position(new openfl_geom_Vector3D(x,y,z));
		this.prepend(m);
	}
	,recompose: function(components,orientationStyle) {
		if(components.length < 3 || components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].z == 0) {
			return false;
		}
		if(orientationStyle == null) {
			orientationStyle = 1;
		}
		this.identity();
		var scale = [];
		scale[0] = scale[1] = scale[2] = components.data[2].x;
		scale[4] = scale[5] = scale[6] = components.data[2].y;
		scale[8] = scale[9] = scale[10] = components.data[2].z;
		if(orientationStyle == null) {
			var x = components.data[1].x;
			var y = components.data[1].y;
			var z = components.data[1].z;
			var w = components.data[1].w;
			if(Type.enumEq(orientationStyle,0)) {
				x *= Math.sin(w / 2);
				y *= Math.sin(w / 2);
				z *= Math.sin(w / 2);
				w = Math.cos(w / 2);
			}
			var this1 = this.rawData;
			if(!this1.fixed) {
				if(0 >= this1.length) {
					this1.length = 1;
				}
				if(this1.data.length < this1.length) {
					var length = this1.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
					this1.data = data;
				}
			}
			this1.data[0] = (1 - 2 * y * y - 2 * z * z) * scale[0];
			var this2 = this.rawData;
			if(!this2.fixed) {
				if(1 >= this2.length) {
					this2.length = 2;
				}
				if(this2.data.length < this2.length) {
					var length1 = this2.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
					this2.data = data1;
				}
			}
			this2.data[1] = (2 * x * y + 2 * w * z) * scale[1];
			var this3 = this.rawData;
			if(!this3.fixed) {
				if(2 >= this3.length) {
					this3.length = 3;
				}
				if(this3.data.length < this3.length) {
					var length2 = this3.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
					this3.data = data2;
				}
			}
			this3.data[2] = (2 * x * z - 2 * w * y) * scale[2];
			var this4 = this.rawData;
			if(!this4.fixed) {
				if(3 >= this4.length) {
					this4.length = 4;
				}
				if(this4.data.length < this4.length) {
					var length3 = this4.data.length + 10;
					var data3 = new Array(length3);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data3,0,this4.data.length);
					this4.data = data3;
				}
			}
			this4.data[3] = 0;
			var this5 = this.rawData;
			if(!this5.fixed) {
				if(4 >= this5.length) {
					this5.length = 5;
				}
				if(this5.data.length < this5.length) {
					var length4 = this5.data.length + 10;
					var data4 = new Array(length4);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data4,0,this5.data.length);
					this5.data = data4;
				}
			}
			this5.data[4] = (2 * x * y - 2 * w * z) * scale[4];
			var this6 = this.rawData;
			if(!this6.fixed) {
				if(5 >= this6.length) {
					this6.length = 6;
				}
				if(this6.data.length < this6.length) {
					var length5 = this6.data.length + 10;
					var data5 = new Array(length5);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data5,0,this6.data.length);
					this6.data = data5;
				}
			}
			this6.data[5] = (1 - 2 * x * x - 2 * z * z) * scale[5];
			var this7 = this.rawData;
			if(!this7.fixed) {
				if(6 >= this7.length) {
					this7.length = 7;
				}
				if(this7.data.length < this7.length) {
					var length6 = this7.data.length + 10;
					var data6 = new Array(length6);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data6,0,this7.data.length);
					this7.data = data6;
				}
			}
			this7.data[6] = (2 * y * z + 2 * w * x) * scale[6];
			var this8 = this.rawData;
			if(!this8.fixed) {
				if(7 >= this8.length) {
					this8.length = 8;
				}
				if(this8.data.length < this8.length) {
					var length7 = this8.data.length + 10;
					var data7 = new Array(length7);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data7,0,this8.data.length);
					this8.data = data7;
				}
			}
			this8.data[7] = 0;
			var this9 = this.rawData;
			if(!this9.fixed) {
				if(8 >= this9.length) {
					this9.length = 9;
				}
				if(this9.data.length < this9.length) {
					var length8 = this9.data.length + 10;
					var data8 = new Array(length8);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data8,0,this9.data.length);
					this9.data = data8;
				}
			}
			this9.data[8] = (2 * x * z + 2 * w * y) * scale[8];
			var this10 = this.rawData;
			if(!this10.fixed) {
				if(9 >= this10.length) {
					this10.length = 10;
				}
				if(this10.data.length < this10.length) {
					var length9 = this10.data.length + 10;
					var data9 = new Array(length9);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this10.data,0,data9,0,this10.data.length);
					this10.data = data9;
				}
			}
			this10.data[9] = (2 * y * z - 2 * w * x) * scale[9];
			var this11 = this.rawData;
			if(!this11.fixed) {
				if(10 >= this11.length) {
					this11.length = 11;
				}
				if(this11.data.length < this11.length) {
					var length10 = this11.data.length + 10;
					var data10 = new Array(length10);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data10,0,this11.data.length);
					this11.data = data10;
				}
			}
			this11.data[10] = (1 - 2 * x * x - 2 * y * y) * scale[10];
			var this12 = this.rawData;
			if(!this12.fixed) {
				if(11 >= this12.length) {
					this12.length = 12;
				}
				if(this12.data.length < this12.length) {
					var length11 = this12.data.length + 10;
					var data11 = new Array(length11);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this12.data,0,data11,0,this12.data.length);
					this12.data = data11;
				}
			}
			this12.data[11] = 0;
			var this13 = this.rawData;
			var value = components.data[0].x;
			if(!this13.fixed) {
				if(12 >= this13.length) {
					this13.length = 13;
				}
				if(this13.data.length < this13.length) {
					var length12 = this13.data.length + 10;
					var data12 = new Array(length12);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data12,0,this13.data.length);
					this13.data = data12;
				}
			}
			this13.data[12] = value;
			var this14 = this.rawData;
			var value1 = components.data[0].y;
			if(!this14.fixed) {
				if(13 >= this14.length) {
					this14.length = 14;
				}
				if(this14.data.length < this14.length) {
					var length13 = this14.data.length + 10;
					var data13 = new Array(length13);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this14.data,0,data13,0,this14.data.length);
					this14.data = data13;
				}
			}
			this14.data[13] = value1;
			var this15 = this.rawData;
			var value2 = components.data[0].z;
			if(!this15.fixed) {
				if(14 >= this15.length) {
					this15.length = 15;
				}
				if(this15.data.length < this15.length) {
					var length14 = this15.data.length + 10;
					var data14 = new Array(length14);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this15.data,0,data14,0,this15.data.length);
					this15.data = data14;
				}
			}
			this15.data[14] = value2;
			var this16 = this.rawData;
			if(!this16.fixed) {
				if(15 >= this16.length) {
					this16.length = 16;
				}
				if(this16.data.length < this16.length) {
					var length15 = this16.data.length + 10;
					var data15 = new Array(length15);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this16.data,0,data15,0,this16.data.length);
					this16.data = data15;
				}
			}
			this16.data[15] = 1;
		} else if(orientationStyle == 1) {
			var cx = Math.cos(components.data[1].x);
			var cy = Math.cos(components.data[1].y);
			var cz = Math.cos(components.data[1].z);
			var sx = Math.sin(components.data[1].x);
			var sy = Math.sin(components.data[1].y);
			var sz = Math.sin(components.data[1].z);
			var this17 = this.rawData;
			if(!this17.fixed) {
				if(0 >= this17.length) {
					this17.length = 1;
				}
				if(this17.data.length < this17.length) {
					var length16 = this17.data.length + 10;
					var data16 = new Array(length16);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this17.data,0,data16,0,this17.data.length);
					this17.data = data16;
				}
			}
			this17.data[0] = cy * cz * scale[0];
			var this18 = this.rawData;
			if(!this18.fixed) {
				if(1 >= this18.length) {
					this18.length = 2;
				}
				if(this18.data.length < this18.length) {
					var length17 = this18.data.length + 10;
					var data17 = new Array(length17);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this18.data,0,data17,0,this18.data.length);
					this18.data = data17;
				}
			}
			this18.data[1] = cy * sz * scale[1];
			var this19 = this.rawData;
			if(!this19.fixed) {
				if(2 >= this19.length) {
					this19.length = 3;
				}
				if(this19.data.length < this19.length) {
					var length18 = this19.data.length + 10;
					var data18 = new Array(length18);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this19.data,0,data18,0,this19.data.length);
					this19.data = data18;
				}
			}
			this19.data[2] = -sy * scale[2];
			var this20 = this.rawData;
			if(!this20.fixed) {
				if(3 >= this20.length) {
					this20.length = 4;
				}
				if(this20.data.length < this20.length) {
					var length19 = this20.data.length + 10;
					var data19 = new Array(length19);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this20.data,0,data19,0,this20.data.length);
					this20.data = data19;
				}
			}
			this20.data[3] = 0;
			var this21 = this.rawData;
			if(!this21.fixed) {
				if(4 >= this21.length) {
					this21.length = 5;
				}
				if(this21.data.length < this21.length) {
					var length20 = this21.data.length + 10;
					var data20 = new Array(length20);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this21.data,0,data20,0,this21.data.length);
					this21.data = data20;
				}
			}
			this21.data[4] = (sx * sy * cz - cx * sz) * scale[4];
			var this22 = this.rawData;
			if(!this22.fixed) {
				if(5 >= this22.length) {
					this22.length = 6;
				}
				if(this22.data.length < this22.length) {
					var length21 = this22.data.length + 10;
					var data21 = new Array(length21);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this22.data,0,data21,0,this22.data.length);
					this22.data = data21;
				}
			}
			this22.data[5] = (sx * sy * sz + cx * cz) * scale[5];
			var this23 = this.rawData;
			if(!this23.fixed) {
				if(6 >= this23.length) {
					this23.length = 7;
				}
				if(this23.data.length < this23.length) {
					var length22 = this23.data.length + 10;
					var data22 = new Array(length22);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this23.data,0,data22,0,this23.data.length);
					this23.data = data22;
				}
			}
			this23.data[6] = sx * cy * scale[6];
			var this24 = this.rawData;
			if(!this24.fixed) {
				if(7 >= this24.length) {
					this24.length = 8;
				}
				if(this24.data.length < this24.length) {
					var length23 = this24.data.length + 10;
					var data23 = new Array(length23);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this24.data,0,data23,0,this24.data.length);
					this24.data = data23;
				}
			}
			this24.data[7] = 0;
			var this25 = this.rawData;
			if(!this25.fixed) {
				if(8 >= this25.length) {
					this25.length = 9;
				}
				if(this25.data.length < this25.length) {
					var length24 = this25.data.length + 10;
					var data24 = new Array(length24);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this25.data,0,data24,0,this25.data.length);
					this25.data = data24;
				}
			}
			this25.data[8] = (cx * sy * cz + sx * sz) * scale[8];
			var this26 = this.rawData;
			if(!this26.fixed) {
				if(9 >= this26.length) {
					this26.length = 10;
				}
				if(this26.data.length < this26.length) {
					var length25 = this26.data.length + 10;
					var data25 = new Array(length25);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this26.data,0,data25,0,this26.data.length);
					this26.data = data25;
				}
			}
			this26.data[9] = (cx * sy * sz - sx * cz) * scale[9];
			var this27 = this.rawData;
			if(!this27.fixed) {
				if(10 >= this27.length) {
					this27.length = 11;
				}
				if(this27.data.length < this27.length) {
					var length26 = this27.data.length + 10;
					var data26 = new Array(length26);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this27.data,0,data26,0,this27.data.length);
					this27.data = data26;
				}
			}
			this27.data[10] = cx * cy * scale[10];
			var this28 = this.rawData;
			if(!this28.fixed) {
				if(11 >= this28.length) {
					this28.length = 12;
				}
				if(this28.data.length < this28.length) {
					var length27 = this28.data.length + 10;
					var data27 = new Array(length27);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this28.data,0,data27,0,this28.data.length);
					this28.data = data27;
				}
			}
			this28.data[11] = 0;
			var this29 = this.rawData;
			var value3 = components.data[0].x;
			if(!this29.fixed) {
				if(12 >= this29.length) {
					this29.length = 13;
				}
				if(this29.data.length < this29.length) {
					var length28 = this29.data.length + 10;
					var data28 = new Array(length28);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this29.data,0,data28,0,this29.data.length);
					this29.data = data28;
				}
			}
			this29.data[12] = value3;
			var this30 = this.rawData;
			var value4 = components.data[0].y;
			if(!this30.fixed) {
				if(13 >= this30.length) {
					this30.length = 14;
				}
				if(this30.data.length < this30.length) {
					var length29 = this30.data.length + 10;
					var data29 = new Array(length29);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this30.data,0,data29,0,this30.data.length);
					this30.data = data29;
				}
			}
			this30.data[13] = value4;
			var this31 = this.rawData;
			var value5 = components.data[0].z;
			if(!this31.fixed) {
				if(14 >= this31.length) {
					this31.length = 15;
				}
				if(this31.data.length < this31.length) {
					var length30 = this31.data.length + 10;
					var data30 = new Array(length30);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this31.data,0,data30,0,this31.data.length);
					this31.data = data30;
				}
			}
			this31.data[14] = value5;
			var this32 = this.rawData;
			if(!this32.fixed) {
				if(15 >= this32.length) {
					this32.length = 16;
				}
				if(this32.data.length < this32.length) {
					var length31 = this32.data.length + 10;
					var data31 = new Array(length31);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this32.data,0,data31,0,this32.data.length);
					this32.data = data31;
				}
			}
			this32.data[15] = 1;
		} else {
			var x1 = components.data[1].x;
			var y1 = components.data[1].y;
			var z1 = components.data[1].z;
			var w1 = components.data[1].w;
			if(Type.enumEq(orientationStyle,0)) {
				x1 *= Math.sin(w1 / 2);
				y1 *= Math.sin(w1 / 2);
				z1 *= Math.sin(w1 / 2);
				w1 = Math.cos(w1 / 2);
			}
			var this33 = this.rawData;
			if(!this33.fixed) {
				if(0 >= this33.length) {
					this33.length = 1;
				}
				if(this33.data.length < this33.length) {
					var length32 = this33.data.length + 10;
					var data32 = new Array(length32);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this33.data,0,data32,0,this33.data.length);
					this33.data = data32;
				}
			}
			this33.data[0] = (1 - 2 * y1 * y1 - 2 * z1 * z1) * scale[0];
			var this34 = this.rawData;
			if(!this34.fixed) {
				if(1 >= this34.length) {
					this34.length = 2;
				}
				if(this34.data.length < this34.length) {
					var length33 = this34.data.length + 10;
					var data33 = new Array(length33);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this34.data,0,data33,0,this34.data.length);
					this34.data = data33;
				}
			}
			this34.data[1] = (2 * x1 * y1 + 2 * w1 * z1) * scale[1];
			var this35 = this.rawData;
			if(!this35.fixed) {
				if(2 >= this35.length) {
					this35.length = 3;
				}
				if(this35.data.length < this35.length) {
					var length34 = this35.data.length + 10;
					var data34 = new Array(length34);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this35.data,0,data34,0,this35.data.length);
					this35.data = data34;
				}
			}
			this35.data[2] = (2 * x1 * z1 - 2 * w1 * y1) * scale[2];
			var this36 = this.rawData;
			if(!this36.fixed) {
				if(3 >= this36.length) {
					this36.length = 4;
				}
				if(this36.data.length < this36.length) {
					var length35 = this36.data.length + 10;
					var data35 = new Array(length35);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this36.data,0,data35,0,this36.data.length);
					this36.data = data35;
				}
			}
			this36.data[3] = 0;
			var this37 = this.rawData;
			if(!this37.fixed) {
				if(4 >= this37.length) {
					this37.length = 5;
				}
				if(this37.data.length < this37.length) {
					var length36 = this37.data.length + 10;
					var data36 = new Array(length36);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this37.data,0,data36,0,this37.data.length);
					this37.data = data36;
				}
			}
			this37.data[4] = (2 * x1 * y1 - 2 * w1 * z1) * scale[4];
			var this38 = this.rawData;
			if(!this38.fixed) {
				if(5 >= this38.length) {
					this38.length = 6;
				}
				if(this38.data.length < this38.length) {
					var length37 = this38.data.length + 10;
					var data37 = new Array(length37);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this38.data,0,data37,0,this38.data.length);
					this38.data = data37;
				}
			}
			this38.data[5] = (1 - 2 * x1 * x1 - 2 * z1 * z1) * scale[5];
			var this39 = this.rawData;
			if(!this39.fixed) {
				if(6 >= this39.length) {
					this39.length = 7;
				}
				if(this39.data.length < this39.length) {
					var length38 = this39.data.length + 10;
					var data38 = new Array(length38);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this39.data,0,data38,0,this39.data.length);
					this39.data = data38;
				}
			}
			this39.data[6] = (2 * y1 * z1 + 2 * w1 * x1) * scale[6];
			var this40 = this.rawData;
			if(!this40.fixed) {
				if(7 >= this40.length) {
					this40.length = 8;
				}
				if(this40.data.length < this40.length) {
					var length39 = this40.data.length + 10;
					var data39 = new Array(length39);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this40.data,0,data39,0,this40.data.length);
					this40.data = data39;
				}
			}
			this40.data[7] = 0;
			var this41 = this.rawData;
			if(!this41.fixed) {
				if(8 >= this41.length) {
					this41.length = 9;
				}
				if(this41.data.length < this41.length) {
					var length40 = this41.data.length + 10;
					var data40 = new Array(length40);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this41.data,0,data40,0,this41.data.length);
					this41.data = data40;
				}
			}
			this41.data[8] = (2 * x1 * z1 + 2 * w1 * y1) * scale[8];
			var this42 = this.rawData;
			if(!this42.fixed) {
				if(9 >= this42.length) {
					this42.length = 10;
				}
				if(this42.data.length < this42.length) {
					var length41 = this42.data.length + 10;
					var data41 = new Array(length41);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this42.data,0,data41,0,this42.data.length);
					this42.data = data41;
				}
			}
			this42.data[9] = (2 * y1 * z1 - 2 * w1 * x1) * scale[9];
			var this43 = this.rawData;
			if(!this43.fixed) {
				if(10 >= this43.length) {
					this43.length = 11;
				}
				if(this43.data.length < this43.length) {
					var length42 = this43.data.length + 10;
					var data42 = new Array(length42);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this43.data,0,data42,0,this43.data.length);
					this43.data = data42;
				}
			}
			this43.data[10] = (1 - 2 * x1 * x1 - 2 * y1 * y1) * scale[10];
			var this44 = this.rawData;
			if(!this44.fixed) {
				if(11 >= this44.length) {
					this44.length = 12;
				}
				if(this44.data.length < this44.length) {
					var length43 = this44.data.length + 10;
					var data43 = new Array(length43);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this44.data,0,data43,0,this44.data.length);
					this44.data = data43;
				}
			}
			this44.data[11] = 0;
			var this45 = this.rawData;
			var value6 = components.data[0].x;
			if(!this45.fixed) {
				if(12 >= this45.length) {
					this45.length = 13;
				}
				if(this45.data.length < this45.length) {
					var length44 = this45.data.length + 10;
					var data44 = new Array(length44);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this45.data,0,data44,0,this45.data.length);
					this45.data = data44;
				}
			}
			this45.data[12] = value6;
			var this46 = this.rawData;
			var value7 = components.data[0].y;
			if(!this46.fixed) {
				if(13 >= this46.length) {
					this46.length = 14;
				}
				if(this46.data.length < this46.length) {
					var length45 = this46.data.length + 10;
					var data45 = new Array(length45);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this46.data,0,data45,0,this46.data.length);
					this46.data = data45;
				}
			}
			this46.data[13] = value7;
			var this47 = this.rawData;
			var value8 = components.data[0].z;
			if(!this47.fixed) {
				if(14 >= this47.length) {
					this47.length = 15;
				}
				if(this47.data.length < this47.length) {
					var length46 = this47.data.length + 10;
					var data46 = new Array(length46);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this47.data,0,data46,0,this47.data.length);
					this47.data = data46;
				}
			}
			this47.data[14] = value8;
			var this48 = this.rawData;
			if(!this48.fixed) {
				if(15 >= this48.length) {
					this48.length = 16;
				}
				if(this48.data.length < this48.length) {
					var length47 = this48.data.length + 10;
					var data47 = new Array(length47);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this48.data,0,data47,0,this48.data.length);
					this48.data = data47;
				}
			}
			this48.data[15] = 1;
		}
		if(components.data[2].x == 0) {
			var this49 = this.rawData;
			if(!this49.fixed) {
				if(0 >= this49.length) {
					this49.length = 1;
				}
				if(this49.data.length < this49.length) {
					var length48 = this49.data.length + 10;
					var data48 = new Array(length48);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this49.data,0,data48,0,this49.data.length);
					this49.data = data48;
				}
			}
			this49.data[0] = 1e-15;
		}
		if(components.data[2].y == 0) {
			var this50 = this.rawData;
			if(!this50.fixed) {
				if(5 >= this50.length) {
					this50.length = 6;
				}
				if(this50.data.length < this50.length) {
					var length49 = this50.data.length + 10;
					var data49 = new Array(length49);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this50.data,0,data49,0,this50.data.length);
					this50.data = data49;
				}
			}
			this50.data[5] = 1e-15;
		}
		if(components.data[2].z == 0) {
			var this51 = this.rawData;
			if(!this51.fixed) {
				if(10 >= this51.length) {
					this51.length = 11;
				}
				if(this51.data.length < this51.length) {
					var length50 = this51.data.length + 10;
					var data50 = new Array(length50);
					haxe_ds__$Vector_Vector_$Impl_$.blit(this51.data,0,data50,0,this51.data.length);
					this51.data = data50;
				}
			}
			this51.data[10] = 1e-15;
		}
		return !(components.data[2].x == 0 || components.data[2].y == 0 || components.data[2].y == 0);
	}
	,transformVector: function(v) {
		var x = v.x;
		var y = v.y;
		var z = v.z;
		return new openfl_geom_Vector3D(x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12],x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13],x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14],x * this.rawData.data[3] + y * this.rawData.data[7] + z * this.rawData.data[11] + this.rawData.data[15]);
	}
	,transformVectors: function(vin,vout) {
		var i = 0;
		var x;
		var y;
		var z;
		while(i + 3 <= vin.length) {
			x = vin.data[i];
			y = vin.data[i + 1];
			z = vin.data[i + 2];
			if(!vout.fixed) {
				if(i >= vout.length) {
					vout.length = i + 1;
				}
				if(vout.data.length < vout.length) {
					var length = vout.data.length + 10;
					var data = new Array(length);
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data,0,vout.data.length);
					vout.data = data;
				}
			}
			vout.data[i] = x * this.rawData.data[0] + y * this.rawData.data[4] + z * this.rawData.data[8] + this.rawData.data[12];
			var key = i + 1;
			if(!vout.fixed) {
				if(key >= vout.length) {
					vout.length = key + 1;
				}
				if(vout.data.length < vout.length) {
					var length1 = vout.data.length + 10;
					var data1 = new Array(length1);
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data1,0,vout.data.length);
					vout.data = data1;
				}
			}
			vout.data[key] = x * this.rawData.data[1] + y * this.rawData.data[5] + z * this.rawData.data[9] + this.rawData.data[13];
			var key1 = i + 2;
			if(!vout.fixed) {
				if(key1 >= vout.length) {
					vout.length = key1 + 1;
				}
				if(vout.data.length < vout.length) {
					var length2 = vout.data.length + 10;
					var data2 = new Array(length2);
					haxe_ds__$Vector_Vector_$Impl_$.blit(vout.data,0,data2,0,vout.data.length);
					vout.data = data2;
				}
			}
			vout.data[key1] = x * this.rawData.data[2] + y * this.rawData.data[6] + z * this.rawData.data[10] + this.rawData.data[14];
			i += 3;
		}
	}
	,transpose: function() {
		var this1 = this.rawData;
		var vectorData = new openfl_VectorData();
		vectorData.length = this1.length;
		vectorData.fixed = this1.fixed;
		var length = this1.length;
		vectorData.data = new Array(length);
		haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,vectorData.data,0,this1.length);
		var oRawData = vectorData;
		var this2 = this.rawData;
		if(!this2.fixed) {
			if(1 >= this2.length) {
				this2.length = 2;
			}
			if(this2.data.length < this2.length) {
				var length1 = this2.data.length + 10;
				var data = new Array(length1);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data,0,this2.data.length);
				this2.data = data;
			}
		}
		this2.data[1] = oRawData.data[4];
		var this3 = this.rawData;
		if(!this3.fixed) {
			if(2 >= this3.length) {
				this3.length = 3;
			}
			if(this3.data.length < this3.length) {
				var length2 = this3.data.length + 10;
				var data1 = new Array(length2);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data1,0,this3.data.length);
				this3.data = data1;
			}
		}
		this3.data[2] = oRawData.data[8];
		var this4 = this.rawData;
		if(!this4.fixed) {
			if(3 >= this4.length) {
				this4.length = 4;
			}
			if(this4.data.length < this4.length) {
				var length3 = this4.data.length + 10;
				var data2 = new Array(length3);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this4.data,0,data2,0,this4.data.length);
				this4.data = data2;
			}
		}
		this4.data[3] = oRawData.data[12];
		var this5 = this.rawData;
		if(!this5.fixed) {
			if(4 >= this5.length) {
				this5.length = 5;
			}
			if(this5.data.length < this5.length) {
				var length4 = this5.data.length + 10;
				var data3 = new Array(length4);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this5.data,0,data3,0,this5.data.length);
				this5.data = data3;
			}
		}
		this5.data[4] = oRawData.data[1];
		var this6 = this.rawData;
		if(!this6.fixed) {
			if(6 >= this6.length) {
				this6.length = 7;
			}
			if(this6.data.length < this6.length) {
				var length5 = this6.data.length + 10;
				var data4 = new Array(length5);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this6.data,0,data4,0,this6.data.length);
				this6.data = data4;
			}
		}
		this6.data[6] = oRawData.data[9];
		var this7 = this.rawData;
		if(!this7.fixed) {
			if(7 >= this7.length) {
				this7.length = 8;
			}
			if(this7.data.length < this7.length) {
				var length6 = this7.data.length + 10;
				var data5 = new Array(length6);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this7.data,0,data5,0,this7.data.length);
				this7.data = data5;
			}
		}
		this7.data[7] = oRawData.data[13];
		var this8 = this.rawData;
		if(!this8.fixed) {
			if(8 >= this8.length) {
				this8.length = 9;
			}
			if(this8.data.length < this8.length) {
				var length7 = this8.data.length + 10;
				var data6 = new Array(length7);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this8.data,0,data6,0,this8.data.length);
				this8.data = data6;
			}
		}
		this8.data[8] = oRawData.data[2];
		var this9 = this.rawData;
		if(!this9.fixed) {
			if(9 >= this9.length) {
				this9.length = 10;
			}
			if(this9.data.length < this9.length) {
				var length8 = this9.data.length + 10;
				var data7 = new Array(length8);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this9.data,0,data7,0,this9.data.length);
				this9.data = data7;
			}
		}
		this9.data[9] = oRawData.data[6];
		var this10 = this.rawData;
		if(!this10.fixed) {
			if(11 >= this10.length) {
				this10.length = 12;
			}
			if(this10.data.length < this10.length) {
				var length9 = this10.data.length + 10;
				var data8 = new Array(length9);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this10.data,0,data8,0,this10.data.length);
				this10.data = data8;
			}
		}
		this10.data[11] = oRawData.data[14];
		var this11 = this.rawData;
		if(!this11.fixed) {
			if(12 >= this11.length) {
				this11.length = 13;
			}
			if(this11.data.length < this11.length) {
				var length10 = this11.data.length + 10;
				var data9 = new Array(length10);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this11.data,0,data9,0,this11.data.length);
				this11.data = data9;
			}
		}
		this11.data[12] = oRawData.data[3];
		var this12 = this.rawData;
		if(!this12.fixed) {
			if(13 >= this12.length) {
				this12.length = 14;
			}
			if(this12.data.length < this12.length) {
				var length11 = this12.data.length + 10;
				var data10 = new Array(length11);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this12.data,0,data10,0,this12.data.length);
				this12.data = data10;
			}
		}
		this12.data[13] = oRawData.data[7];
		var this13 = this.rawData;
		if(!this13.fixed) {
			if(14 >= this13.length) {
				this13.length = 15;
			}
			if(this13.data.length < this13.length) {
				var length12 = this13.data.length + 10;
				var data11 = new Array(length12);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this13.data,0,data11,0,this13.data.length);
				this13.data = data11;
			}
		}
		this13.data[14] = oRawData.data[11];
	}
	,get_determinant: function() {
		return (this.rawData.data[0] * this.rawData.data[5] - this.rawData.data[4] * this.rawData.data[1]) * (this.rawData.data[10] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[11]) - (this.rawData.data[0] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[7]) + (this.rawData.data[0] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[1]) * (this.rawData.data[6] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[7]) + (this.rawData.data[4] * this.rawData.data[9] - this.rawData.data[8] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[15] - this.rawData.data[14] * this.rawData.data[3]) - (this.rawData.data[4] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[5]) * (this.rawData.data[2] * this.rawData.data[11] - this.rawData.data[10] * this.rawData.data[3]) + (this.rawData.data[8] * this.rawData.data[13] - this.rawData.data[12] * this.rawData.data[9]) * (this.rawData.data[2] * this.rawData.data[7] - this.rawData.data[6] * this.rawData.data[3]);
	}
	,get_position: function() {
		return new openfl_geom_Vector3D(this.rawData.data[12],this.rawData.data[13],this.rawData.data[14]);
	}
	,set_position: function(val) {
		var this1 = this.rawData;
		var value = val.x;
		if(!this1.fixed) {
			if(12 >= this1.length) {
				this1.length = 13;
			}
			if(this1.data.length < this1.length) {
				var length = this1.data.length + 10;
				var data = new Array(length);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this1.data,0,data,0,this1.data.length);
				this1.data = data;
			}
		}
		this1.data[12] = value;
		var this2 = this.rawData;
		var value1 = val.y;
		if(!this2.fixed) {
			if(13 >= this2.length) {
				this2.length = 14;
			}
			if(this2.data.length < this2.length) {
				var length1 = this2.data.length + 10;
				var data1 = new Array(length1);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this2.data,0,data1,0,this2.data.length);
				this2.data = data1;
			}
		}
		this2.data[13] = value1;
		var this3 = this.rawData;
		var value2 = val.z;
		if(!this3.fixed) {
			if(14 >= this3.length) {
				this3.length = 15;
			}
			if(this3.data.length < this3.length) {
				var length2 = this3.data.length + 10;
				var data2 = new Array(length2);
				haxe_ds__$Vector_Vector_$Impl_$.blit(this3.data,0,data2,0,this3.data.length);
				this3.data = data2;
			}
		}
		this3.data[14] = value2;
		return val;
	}
	,__class__: openfl_geom_Matrix3D
	,__properties__: {set_position:"set_position",get_position:"get_position",get_determinant:"get_determinant"}
};
var openfl_geom__$Orientation3D_Orientation3D_$Impl_$ = {};
$hxClasses["openfl.geom._Orientation3D.Orientation3D_Impl_"] = openfl_geom__$Orientation3D_Orientation3D_$Impl_$;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.__name__ = ["openfl","geom","_Orientation3D","Orientation3D_Impl_"];
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.fromString = function(value) {
	switch(value) {
	case "axisAngle":
		return 0;
	case "eulerAngles":
		return 1;
	case "quaternion":
		return 2;
	default:
		return null;
	}
};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "axisAngle";
	case 1:
		return "eulerAngles";
	case 2:
		return "quaternion";
	default:
		return null;
	}
};
var openfl_geom_Transform = function(displayObject) {
	this.__colorTransform = new openfl_geom_ColorTransform();
	this.concatenatedColorTransform = new openfl_geom_ColorTransform();
	this.pixelBounds = new openfl_geom_Rectangle();
	this.__displayObject = displayObject;
	this.__hasMatrix = true;
};
$hxClasses["openfl.geom.Transform"] = openfl_geom_Transform;
openfl_geom_Transform.__name__ = ["openfl","geom","Transform"];
openfl_geom_Transform.prototype = {
	concatenatedColorTransform: null
	,pixelBounds: null
	,__colorTransform: null
	,__displayObject: null
	,__hasMatrix: null
	,__hasMatrix3D: null
	,get_colorTransform: function() {
		return this.__colorTransform;
	}
	,set_colorTransform: function(value) {
		if(!this.__colorTransform.__equals(value)) {
			this.__colorTransform = value;
			if(value != null) {
				this.__displayObject.set_alpha(value.alphaMultiplier);
			}
			var _this = this.__displayObject;
			if(!_this.__renderDirty) {
				_this.__updateCachedBitmap = true;
				_this.__updateFilters = _this.get_filters() != null && _this.get_filters().length > 0;
				_this.__renderDirty = true;
				openfl_display_DisplayObject.__worldRenderDirty++;
			}
		}
		return this.__colorTransform;
	}
	,get_matrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__transform.clone();
		}
		return null;
	}
	,get_concatenatedMatrix: function() {
		if(this.__hasMatrix) {
			return this.__displayObject.__getWorldTransform().clone();
		}
		return null;
	}
	,set_matrix: function(value) {
		if(value == null) {
			this.__hasMatrix = false;
			return null;
		}
		this.__hasMatrix = true;
		this.__hasMatrix3D = false;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.d,value.c) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.copyFrom(value);
			var _this = this.__displayObject;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,get_matrix3D: function() {
		if(this.__hasMatrix3D) {
			var matrix = this.__displayObject.__transform;
			var value = [matrix.a,matrix.b,0.0,0.0,matrix.c,matrix.d,0.0,0.0,0.0,0.0,1.0,0.0,matrix.tx,matrix.ty,0.0,1.0];
			var vectorData = new openfl_VectorData();
			vectorData.length = value.length;
			vectorData.fixed = true;
			var length = value.length;
			var vec = new Array(length);
			var _g1 = 0;
			var _g = value.length;
			while(_g1 < _g) {
				var i = _g1++;
				vec[i] = value[i];
			}
			vectorData.data = vec;
			return new openfl_geom_Matrix3D(vectorData);
		}
		return null;
	}
	,set_matrix3D: function(value) {
		if(value == null) {
			this.__hasMatrix3D = false;
			return null;
		}
		this.__hasMatrix = false;
		this.__hasMatrix3D = true;
		if(this.__displayObject != null) {
			var rotation = 180 / Math.PI * Math.atan2(value.rawData.data[5],value.rawData.data[4]) - 90;
			if(rotation != this.__displayObject.__rotation) {
				this.__displayObject.__rotation = rotation;
				var radians = rotation * (Math.PI / 180);
				this.__displayObject.__rotationSine = Math.sin(radians);
				this.__displayObject.__rotationCosine = Math.cos(radians);
			}
			this.__displayObject.__transform.a = value.rawData.data[0];
			this.__displayObject.__transform.b = value.rawData.data[1];
			this.__displayObject.__transform.c = value.rawData.data[5];
			this.__displayObject.__transform.d = value.rawData.data[6];
			this.__displayObject.__transform.tx = value.rawData.data[12];
			this.__displayObject.__transform.ty = value.rawData.data[13];
			var _this = this.__displayObject;
			if(!_this.__transformDirty) {
				_this.__transformDirty = true;
				openfl_display_DisplayObject.__worldTransformDirty++;
			}
		}
		return value;
	}
	,__class__: openfl_geom_Transform
	,__properties__: {set_matrix3D:"set_matrix3D",get_matrix3D:"get_matrix3D",set_matrix:"set_matrix",get_matrix:"get_matrix",get_concatenatedMatrix:"get_concatenatedMatrix",set_colorTransform:"set_colorTransform",get_colorTransform:"get_colorTransform"}
};
var openfl_geom_Vector3D = function(x,y,z,w) {
	if(w == null) {
		w = 0;
	}
	if(z == null) {
		z = 0;
	}
	if(y == null) {
		y = 0;
	}
	if(x == null) {
		x = 0;
	}
	this.w = w;
	this.x = x;
	this.y = y;
	this.z = z;
};
$hxClasses["openfl.geom.Vector3D"] = openfl_geom_Vector3D;
openfl_geom_Vector3D.__name__ = ["openfl","geom","Vector3D"];
openfl_geom_Vector3D.__properties__ = {get_Z_AXIS:"get_Z_AXIS",get_Y_AXIS:"get_Y_AXIS",get_X_AXIS:"get_X_AXIS"}
openfl_geom_Vector3D.X_AXIS = null;
openfl_geom_Vector3D.Y_AXIS = null;
openfl_geom_Vector3D.Z_AXIS = null;
openfl_geom_Vector3D.angleBetween = function(a,b) {
	var la = a.get_length();
	var lb = b.get_length();
	var dot = a.dotProduct(b);
	if(la != 0) {
		dot /= la;
	}
	if(lb != 0) {
		dot /= lb;
	}
	return Math.acos(dot);
};
openfl_geom_Vector3D.distance = function(pt1,pt2) {
	var x = pt2.x - pt1.x;
	var y = pt2.y - pt1.y;
	var z = pt2.z - pt1.z;
	return Math.sqrt(x * x + y * y + z * z);
};
openfl_geom_Vector3D.get_X_AXIS = function() {
	return new openfl_geom_Vector3D(1,0,0);
};
openfl_geom_Vector3D.get_Y_AXIS = function() {
	return new openfl_geom_Vector3D(0,1,0);
};
openfl_geom_Vector3D.get_Z_AXIS = function() {
	return new openfl_geom_Vector3D(0,0,1);
};
openfl_geom_Vector3D.prototype = {
	length: null
	,lengthSquared: null
	,w: null
	,x: null
	,y: null
	,z: null
	,add: function(a) {
		return new openfl_geom_Vector3D(this.x + a.x,this.y + a.y,this.z + a.z);
	}
	,clone: function() {
		return new openfl_geom_Vector3D(this.x,this.y,this.z,this.w);
	}
	,copyFrom: function(sourceVector3D) {
		this.x = sourceVector3D.x;
		this.y = sourceVector3D.y;
		this.z = sourceVector3D.z;
	}
	,crossProduct: function(a) {
		return new openfl_geom_Vector3D(this.y * a.z - this.z * a.y,this.z * a.x - this.x * a.z,this.x * a.y - this.y * a.x,1);
	}
	,decrementBy: function(a) {
		this.x -= a.x;
		this.y -= a.y;
		this.z -= a.z;
	}
	,dotProduct: function(a) {
		return this.x * a.x + this.y * a.y + this.z * a.z;
	}
	,equals: function(toCompare,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(this.x == toCompare.x && this.y == toCompare.y && this.z == toCompare.z) {
			if(!(!allFour)) {
				return this.w == toCompare.w;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,incrementBy: function(a) {
		this.x += a.x;
		this.y += a.y;
		this.z += a.z;
	}
	,nearEquals: function(toCompare,tolerance,allFour) {
		if(allFour == null) {
			allFour = false;
		}
		if(Math.abs(this.x - toCompare.x) < tolerance && Math.abs(this.y - toCompare.y) < tolerance && Math.abs(this.z - toCompare.z) < tolerance) {
			if(!(!allFour)) {
				return Math.abs(this.w - toCompare.w) < tolerance;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,negate: function() {
		this.x *= -1;
		this.y *= -1;
		this.z *= -1;
	}
	,normalize: function() {
		var l = this.get_length();
		if(l != 0) {
			this.x /= l;
			this.y /= l;
			this.z /= l;
		}
		return l;
	}
	,project: function() {
		this.x /= this.w;
		this.y /= this.w;
		this.z /= this.w;
	}
	,scaleBy: function(s) {
		this.x *= s;
		this.y *= s;
		this.z *= s;
	}
	,setTo: function(xa,ya,za) {
		this.x = xa;
		this.y = ya;
		this.z = za;
	}
	,subtract: function(a) {
		return new openfl_geom_Vector3D(this.x - a.x,this.y - a.y,this.z - a.z);
	}
	,toString: function() {
		return "Vector3D(" + this.x + ", " + this.y + ", " + this.z + ")";
	}
	,get_length: function() {
		return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
	}
	,get_lengthSquared: function() {
		return this.x * this.x + this.y * this.y + this.z * this.z;
	}
	,__class__: openfl_geom_Vector3D
	,__properties__: {get_lengthSquared:"get_lengthSquared",get_length:"get_length"}
};
var openfl_media_ID3Info = function() {
};
$hxClasses["openfl.media.ID3Info"] = openfl_media_ID3Info;
openfl_media_ID3Info.__name__ = ["openfl","media","ID3Info"];
openfl_media_ID3Info.prototype = {
	album: null
	,artist: null
	,comment: null
	,genre: null
	,songName: null
	,track: null
	,year: null
	,__class__: openfl_media_ID3Info
};
var openfl_media_Sound = function(stream,context) {
	openfl_events_EventDispatcher.call(this,this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.id3 = null;
	this.isBuffering = false;
	this.url = null;
	if(stream != null) {
		this.load(stream,context);
	}
};
$hxClasses["openfl.media.Sound"] = openfl_media_Sound;
openfl_media_Sound.__name__ = ["openfl","media","Sound"];
openfl_media_Sound.fromAudioBuffer = function(buffer) {
	var sound = new openfl_media_Sound();
	sound.__buffer = buffer;
	return sound;
};
openfl_media_Sound.fromFile = function(path) {
	return openfl_media_Sound.fromAudioBuffer(lime_audio_AudioBuffer.fromFile(path));
};
openfl_media_Sound.__super__ = openfl_events_EventDispatcher;
openfl_media_Sound.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,id3: null
	,isBuffering: null
	,url: null
	,__buffer: null
	,__sound: null
	,__soundID: null
	,close: function() {
		var _this = openfl_media_Sound.__registeredSounds;
		var key = this.__soundID;
		if(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key)) {
			createjs.Sound.removeSound(this.__soundID);
		}
	}
	,load: function(stream,context) {
		this.url = stream.url;
		this.__soundID = haxe_io_Path.withoutExtension(stream.url);
		var _this = openfl_media_Sound.__registeredSounds;
		var key = this.__soundID;
		if(!(__map_reserved[key] != null?_this.existsReserved(key):_this.h.hasOwnProperty(key))) {
			var _this1 = openfl_media_Sound.__registeredSounds;
			var key1 = this.__soundID;
			if(__map_reserved[key1] != null) {
				_this1.setReserved(key1,true);
			} else {
				_this1.h[key1] = true;
			}
			createjs.Sound.addEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.addEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			createjs.Sound.registerSound(this.url,this.__soundID);
		} else {
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,loadCompressedDataFromByteArray: function(bytes,bytesLength,forcePlayAsMusic) {
		if(forcePlayAsMusic == null) {
			forcePlayAsMusic = false;
		}
		openfl_Lib.notImplemented("Sound.loadCompressedDataFromByteArray");
	}
	,loadPCMFromByteArray: function(bytes,samples,format,stereo,sampleRate) {
		if(sampleRate == null) {
			sampleRate = 44100;
		}
		if(stereo == null) {
			stereo = true;
		}
		openfl_Lib.notImplemented("Sound.loadPCMFromByteArray");
	}
	,play: function(startTime,loops,sndTransform) {
		if(loops == null) {
			loops = 0;
		}
		if(startTime == null) {
			startTime = 0.0;
		}
		if(sndTransform == null) {
			sndTransform = new openfl_media_SoundTransform(1,0);
		}
		var pan = sndTransform.pan;
		if(pan == 0) {
			pan = -0.0000001;
		}
		return new openfl_media_SoundChannel(loops > 1?createjs.Sound.play(this.__soundID,"any",0,startTime | 0,loops - 1,sndTransform.volume,pan):createjs.Sound.play(this.__soundID,"any",0,startTime | 0,0,sndTransform.volume,pan));
	}
	,get_id3: function() {
		return new openfl_media_ID3Info();
	}
	,get_length: function() {
		return 0;
	}
	,AudioBuffer_onURLLoad: function(buffer) {
		if(buffer == null) {
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		} else {
			this.__buffer = buffer;
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,SoundJS_onFileLoad: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_Event("complete"));
		}
	}
	,SoundJS_onFileError: function(event) {
		if(event.id == this.__soundID) {
			createjs.Sound.removeEventListener("fileload",$bind(this,this.SoundJS_onFileLoad));
			createjs.Sound.removeEventListener("fileerror",$bind(this,this.SoundJS_onFileError));
			this.dispatchEvent(new openfl_events_IOErrorEvent("ioError"));
		}
	}
	,__class__: openfl_media_Sound
	,__properties__: {get_length:"get_length",get_id3:"get_id3"}
});
var openfl_media_SoundChannel = function(soundInstance) {
	openfl_events_EventDispatcher.call(this,this);
	this.leftPeak = 1;
	this.rightPeak = 1;
	if(soundInstance != null) {
		this.__soundInstance = soundInstance;
		this.__soundInstance.addEventListener("complete",$bind(this,this.source_onComplete));
		this.__isValid = true;
	}
};
$hxClasses["openfl.media.SoundChannel"] = openfl_media_SoundChannel;
openfl_media_SoundChannel.__name__ = ["openfl","media","SoundChannel"];
openfl_media_SoundChannel.__super__ = openfl_events_EventDispatcher;
openfl_media_SoundChannel.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	leftPeak: null
	,rightPeak: null
	,__isValid: null
	,__source: null
	,__soundInstance: null
	,stop: function() {
		if(!this.__isValid) {
			return;
		}
		this.__soundInstance.stop();
	}
	,__dispose: function() {
		if(!this.__isValid) {
			return;
		}
		this.__soundInstance.stop();
		this.__soundInstance = null;
		this.__isValid = false;
	}
	,get_position: function() {
		if(!this.__isValid) {
			return 0;
		}
		return this.__soundInstance.getPosition();
	}
	,set_position: function(value) {
		if(!this.__isValid) {
			return 0;
		}
		this.__soundInstance.setPosition(value | 0);
		return this.__soundInstance.getPosition();
	}
	,get_soundTransform: function() {
		if(!this.__isValid) {
			return new openfl_media_SoundTransform();
		}
		return new openfl_media_SoundTransform(this.__soundInstance.getVolume(),this.__soundInstance.getPan());
	}
	,set_soundTransform: function(value) {
		if(!this.__isValid) {
			return value;
		}
		this.__soundInstance.setVolume(value.volume);
		this.__soundInstance.setPan(value.pan);
		return value;
	}
	,soundInstance_onComplete: function(_) {
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,source_onComplete: function() {
		this.__dispose();
		this.dispatchEvent(new openfl_events_Event("soundComplete"));
	}
	,__class__: openfl_media_SoundChannel
	,__properties__: {set_soundTransform:"set_soundTransform",get_soundTransform:"get_soundTransform",set_position:"set_position",get_position:"get_position"}
});
var openfl_media_SoundLoaderContext = function(bufferTime,checkPolicyFile) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	if(bufferTime == null) {
		bufferTime = 1000;
	}
	this.bufferTime = bufferTime;
	this.checkPolicyFile = checkPolicyFile;
};
$hxClasses["openfl.media.SoundLoaderContext"] = openfl_media_SoundLoaderContext;
openfl_media_SoundLoaderContext.__name__ = ["openfl","media","SoundLoaderContext"];
openfl_media_SoundLoaderContext.prototype = {
	bufferTime: null
	,checkPolicyFile: null
	,__class__: openfl_media_SoundLoaderContext
};
var openfl_media_SoundTransform = function(vol,panning) {
	if(panning == null) {
		panning = 0;
	}
	if(vol == null) {
		vol = 1;
	}
	this.volume = vol;
	this.pan = panning;
	this.leftToLeft = 0;
	this.leftToRight = 0;
	this.rightToLeft = 0;
	this.rightToRight = 0;
};
$hxClasses["openfl.media.SoundTransform"] = openfl_media_SoundTransform;
openfl_media_SoundTransform.__name__ = ["openfl","media","SoundTransform"];
openfl_media_SoundTransform.prototype = {
	leftToLeft: null
	,leftToRight: null
	,pan: null
	,rightToLeft: null
	,rightToRight: null
	,volume: null
	,clone: function() {
		return new openfl_media_SoundTransform(this.volume,this.pan);
	}
	,__class__: openfl_media_SoundTransform
};
var openfl_net_NetConnection = function() {
	openfl_events_EventDispatcher.call(this);
};
$hxClasses["openfl.net.NetConnection"] = openfl_net_NetConnection;
openfl_net_NetConnection.__name__ = ["openfl","net","NetConnection"];
openfl_net_NetConnection.__super__ = openfl_events_EventDispatcher;
openfl_net_NetConnection.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	connect: function(command,_,_1,_2,_3,_4) {
		if(command != null) {
			throw new js__$Boot_HaxeError("Error: Can only connect in \"HTTP streaming\" mode");
		}
		this.dispatchEvent(new openfl_events_NetStatusEvent("netStatus",false,true,{ code : "connectSuccess"}));
	}
	,__class__: openfl_net_NetConnection
});
var openfl_net_SharedObject = function() {
	openfl_events_EventDispatcher.call(this);
	this.client = this;
	this.objectEncoding = 3;
};
$hxClasses["openfl.net.SharedObject"] = openfl_net_SharedObject;
openfl_net_SharedObject.__name__ = ["openfl","net","SharedObject"];
openfl_net_SharedObject.__sharedObjects = null;
openfl_net_SharedObject.getLocal = function(name,localPath,secure) {
	if(secure == null) {
		secure = false;
	}
	if(localPath == null) {
		localPath = window.location.href;
	}
	if(openfl_net_SharedObject.__sharedObjects == null) {
		openfl_net_SharedObject.__sharedObjects = new haxe_ds_StringMap();
		openfl_Lib.application.onExit.add(openfl_net_SharedObject.application_onExit);
	}
	var id = localPath + "/" + name;
	var _this = openfl_net_SharedObject.__sharedObjects;
	if(!(__map_reserved[id] != null?_this.existsReserved(id):_this.h.hasOwnProperty(id))) {
		var sharedObject = new openfl_net_SharedObject();
		sharedObject.data = { };
		sharedObject.__localPath = localPath;
		sharedObject.__name = name;
		var encodedData = null;
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				encodedData = storage.getItem(localPath + ":" + name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
		if(encodedData != null && encodedData != "") {
			try {
				var unserializer = new haxe_Unserializer(encodedData);
				unserializer.setResolver({ resolveEnum : Type.resolveEnum, resolveClass : openfl_net_SharedObject.__resolveClass});
				sharedObject.data = unserializer.unserialize();
			} catch( e1 ) {
				haxe_CallStack.lastException = e1;
			}
		}
		var _this1 = openfl_net_SharedObject.__sharedObjects;
		if(__map_reserved[id] != null) {
			_this1.setReserved(id,sharedObject);
		} else {
			_this1.h[id] = sharedObject;
		}
	}
	var _this2 = openfl_net_SharedObject.__sharedObjects;
	return __map_reserved[id] != null?_this2.getReserved(id):_this2.h[id];
};
openfl_net_SharedObject.getRemote = function(name,remotePath,persistence,secure) {
	if(secure == null) {
		secure = false;
	}
	if(persistence == null) {
		persistence = false;
	}
	openfl_Lib.notImplemented("SharedObject.getRemote");
	return null;
};
openfl_net_SharedObject.__mkdir = function(directory) {
};
openfl_net_SharedObject.__resolveClass = function(name) {
	if(name != null) {
		if(StringTools.startsWith(name,"neash.")) {
			name = StringTools.replace(name,"neash.","openfl.");
		}
		if(StringTools.startsWith(name,"native.")) {
			name = StringTools.replace(name,"native.","openfl.");
		}
		if(StringTools.startsWith(name,"flash.")) {
			name = StringTools.replace(name,"flash.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._v2.")) {
			name = StringTools.replace(name,"openfl._v2.","openfl.");
		}
		if(StringTools.startsWith(name,"openfl._legacy.")) {
			name = StringTools.replace(name,"openfl._legacy.","openfl.");
		}
		return Type.resolveClass(name);
	}
	return null;
};
openfl_net_SharedObject.application_onExit = function(_) {
	var _this = openfl_net_SharedObject.__sharedObjects;
	var tmp = new haxe_ds__$StringMap_StringMapIterator(_this,_this.arrayKeys());
	while(tmp.hasNext()) tmp.next().flush();
};
openfl_net_SharedObject.__super__ = openfl_events_EventDispatcher;
openfl_net_SharedObject.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	client: null
	,data: null
	,fps: null
	,objectEncoding: null
	,__localPath: null
	,__name: null
	,clear: function() {
		this.data = { };
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
		}
	}
	,close: function() {
	}
	,connect: function(myConnection,params) {
		openfl_Lib.notImplemented("SharedObject.connect");
	}
	,flush: function(minDiskSpace) {
		if(minDiskSpace == null) {
			minDiskSpace = 0;
		}
		if(Reflect.fields(this.data).length == 0) {
			return 0;
		}
		var encodedData = haxe_Serializer.run(this.data);
		try {
			var storage = js_Browser.getLocalStorage();
			if(storage != null) {
				storage.removeItem(this.__localPath + ":" + this.__name);
				storage.setItem(this.__localPath + ":" + this.__name,encodedData);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return 1;
		}
		return 0;
	}
	,send: function($arguments) {
		openfl_Lib.notImplemented("SharedObject.send");
	}
	,setDirty: function(propertyName) {
	}
	,setProperty: function(propertyName,value) {
		if(this.data != null) {
			this.data[propertyName] = value;
		}
	}
	,get_size: function() {
		try {
			return haxe_io_Bytes.ofString(haxe_Serializer.run(this.data)).length;
		} catch( e ) {
			haxe_CallStack.lastException = e;
			return 0;
		}
	}
	,__class__: openfl_net_SharedObject
	,__properties__: {get_size:"get_size"}
});
var openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$ = {};
$hxClasses["openfl.net._SharedObjectFlushStatus.SharedObjectFlushStatus_Impl_"] = openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.__name__ = ["openfl","net","_SharedObjectFlushStatus","SharedObjectFlushStatus_Impl_"];
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.fromString = function(value) {
	switch(value) {
	case "flushed":
		return 0;
	case "pending":
		return 1;
	default:
		return null;
	}
};
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "flushed";
	case 1:
		return "pending";
	default:
		return null;
	}
};
var openfl_net_URLLoader = function(request) {
	openfl_events_EventDispatcher.call(this);
	this.bytesLoaded = 0;
	this.bytesTotal = 0;
	this.set_dataFormat(1);
	if(request != null) {
		this.load(request);
	}
};
$hxClasses["openfl.net.URLLoader"] = openfl_net_URLLoader;
openfl_net_URLLoader.__name__ = ["openfl","net","URLLoader"];
openfl_net_URLLoader.__super__ = openfl_events_EventDispatcher;
openfl_net_URLLoader.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	bytesLoaded: null
	,bytesTotal: null
	,data: null
	,dataFormat: null
	,close: function() {
	}
	,getData: function() {
		return null;
	}
	,load: function(request) {
		this.requestUrl(request.url,request.method,request.data,request.formatRequestHeaders());
	}
	,registerEvents: function(subject) {
		var self = this;
		if(typeof XMLHttpRequestProgressEvent != "undefined") {
			subject.addEventListener("progress",$bind(this,this.onProgress),false);
		}
		subject.onreadystatechange = function() {
			if(subject.readyState != 4) {
				return;
			}
			var s;
			try {
				s = subject.status;
			} catch( e ) {
				haxe_CallStack.lastException = e;
				s = null;
			}
			if(s == undefined) {
				s = null;
			}
			if(s != null) {
				self.onStatus(s);
			}
			if(s != null && s >= 200 && s < 400) {
				self.onData(subject.response);
			} else if(s == null) {
				self.onError("Failed to connect or resolve host");
			} else if(s == 12029) {
				self.onError("Failed to connect to host");
			} else if(s == 12007) {
				self.onError("Unknown host");
			} else if(s == 0) {
				self.onError("Unable to make request (may be blocked due to cross-domain permissions)");
				self.onSecurityError("Unable to make request (may be blocked due to cross-domain permissions)");
			} else {
				self.onError("Http Error #" + subject.status);
			}
		};
	}
	,requestUrl: function(url,method,data,requestHeaders) {
		var xmlHttpRequest = new XMLHttpRequest();
		this.registerEvents(xmlHttpRequest);
		var uri = "";
		if(js_Boot.__instanceof(data,openfl_utils_ByteArrayData)) {
			var data1 = data;
			var _g = this.dataFormat;
			if(_g == 0) {
				uri = js_Boot.__cast(data1 , ArrayBuffer);
			} else {
				uri = data1.readUTFBytes(data1.length);
			}
		} else if(js_Boot.__instanceof(data,openfl_net_URLVariables)) {
			var data2 = data;
			var _g1 = 0;
			var _g11 = Reflect.fields(data2);
			while(_g1 < _g11.length) {
				var p = _g11[_g1];
				++_g1;
				if(uri.length != 0) {
					uri += "&";
				}
				var tmp = encodeURIComponent(p) + "=";
				var s = Reflect.field(data2,p);
				uri += tmp + encodeURIComponent(s);
			}
		} else if(data != null) {
			uri = data.toString();
		}
		try {
			if(method == "GET" && uri != null && uri != "") {
				var question = url.split("?").length <= 1;
				xmlHttpRequest.open(method,url + (question?"?":"&") + Std.string(uri),true);
				uri = "";
			} else {
				xmlHttpRequest.open(method,url,true);
			}
		} catch( e ) {
			haxe_CallStack.lastException = e;
			if (e instanceof js__$Boot_HaxeError) e = e.val;
			this.onError(e.toString());
			return;
		}
		var _g2 = this.dataFormat;
		if(_g2 == 0) {
			xmlHttpRequest.responseType = "arraybuffer";
		}
		var _g12 = 0;
		while(_g12 < requestHeaders.length) {
			var header = requestHeaders[_g12];
			++_g12;
			xmlHttpRequest.setRequestHeader(header.name,header.value);
		}
		xmlHttpRequest.send(uri);
		this.onOpen();
		this.getData = function() {
			if(xmlHttpRequest.response != null) {
				return xmlHttpRequest.response;
			} else {
				return xmlHttpRequest.responseText;
			}
		};
	}
	,onData: function(_) {
		var content = this.getData();
		if(this.dataFormat == 0) {
			this.data = openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer(content);
		} else {
			this.data = Std.string(content);
		}
		var evt = new openfl_events_Event("complete");
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onError: function(msg) {
		var evt = new openfl_events_IOErrorEvent("ioError");
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onOpen: function() {
		var evt = new openfl_events_Event("open");
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onProgress: function(event) {
		var evt = new openfl_events_ProgressEvent("progress");
		evt.currentTarget = this;
		evt.bytesLoaded = event.loaded;
		evt.bytesTotal = event.total;
		this.dispatchEvent(evt);
	}
	,onSecurityError: function(msg) {
		var evt = new openfl_events_SecurityErrorEvent("securityError");
		evt.text = msg;
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,onStatus: function(status) {
		var evt = new openfl_events_HTTPStatusEvent("httpStatus",false,false,status);
		evt.currentTarget = this;
		this.dispatchEvent(evt);
	}
	,set_dataFormat: function(inputVal) {
		if(inputVal == 0 && !Object.prototype.hasOwnProperty.call(window,"ArrayBuffer")) {
			this.dataFormat = 1;
		} else {
			this.dataFormat = inputVal;
		}
		return this.dataFormat;
	}
	,__class__: openfl_net_URLLoader
	,__properties__: {set_dataFormat:"set_dataFormat"}
});
var openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$ = {};
$hxClasses["openfl.net._URLLoaderDataFormat.URLLoaderDataFormat_Impl_"] = openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.__name__ = ["openfl","net","_URLLoaderDataFormat","URLLoaderDataFormat_Impl_"];
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.fromString = function(value) {
	switch(value) {
	case "binary":
		return 0;
	case "text":
		return 1;
	case "variables":
		return 2;
	default:
		return null;
	}
};
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "binary";
	case 1:
		return "text";
	case 2:
		return "variables";
	default:
		return null;
	}
};
var openfl_net_URLRequest = function(inURL) {
	if(inURL != null) {
		this.url = inURL;
	}
	this.requestHeaders = [];
	this.method = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString(1);
	this.contentType = null;
};
$hxClasses["openfl.net.URLRequest"] = openfl_net_URLRequest;
openfl_net_URLRequest.__name__ = ["openfl","net","URLRequest"];
openfl_net_URLRequest.prototype = {
	contentType: null
	,data: null
	,method: null
	,requestHeaders: null
	,url: null
	,userAgent: null
	,formatRequestHeaders: function() {
		var res = this.requestHeaders;
		if(res == null) {
			res = [];
		}
		if(openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.fromString(this.method) == 1 || this.data == null) {
			return res;
		}
		if(typeof(this.data) == "string" || js_Boot.__instanceof(this.data,openfl_utils_ByteArrayData)) {
			res = res.slice();
			res.push(new openfl_net_URLRequestHeader("Content-Type",this.contentType != null?this.contentType:"application/x-www-form-urlencoded"));
		}
		return res;
	}
	,__class__: openfl_net_URLRequest
};
var openfl_net_URLRequestHeader = function(name,value) {
	if(value == null) {
		value = "";
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.value = value;
};
$hxClasses["openfl.net.URLRequestHeader"] = openfl_net_URLRequestHeader;
openfl_net_URLRequestHeader.__name__ = ["openfl","net","URLRequestHeader"];
openfl_net_URLRequestHeader.prototype = {
	name: null
	,value: null
	,__class__: openfl_net_URLRequestHeader
};
var openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$ = {};
$hxClasses["openfl.net._URLRequestMethod.URLRequestMethod_Impl_"] = openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.__name__ = ["openfl","net","_URLRequestMethod","URLRequestMethod_Impl_"];
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.fromString = function(value) {
	switch(value) {
	case "DELETE":
		return 0;
	case "GET":
		return 1;
	case "HEAD":
		return 2;
	case "OPTIONS":
		return 3;
	case "POST":
		return 4;
	case "PUT":
		return 5;
	default:
		return null;
	}
};
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "DELETE";
	case 1:
		return "GET";
	case 2:
		return "HEAD";
	case 3:
		return "OPTIONS";
	case 4:
		return "POST";
	case 5:
		return "PUT";
	default:
		return null;
	}
};
var openfl_net_URLVariables = function(source) {
	if(source != null) {
		this.decode(source);
	}
};
$hxClasses["openfl.net.URLVariables"] = openfl_net_URLVariables;
openfl_net_URLVariables.__name__ = ["openfl","net","URLVariables"];
openfl_net_URLVariables.prototype = {
	decode: function(source) {
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			Reflect.deleteField(this,f);
		}
		var fields1 = source.split(";").join("&").split("&");
		var _g1 = 0;
		while(_g1 < fields1.length) {
			var f1 = fields1[_g1];
			++_g1;
			var eq = f1.indexOf("=");
			if(eq > 0) {
				var s = HxOverrides.substr(f1,0,eq);
				var field = decodeURIComponent(s.split("+").join(" "));
				var s1 = HxOverrides.substr(f1,eq + 1,null);
				this[field] = decodeURIComponent(s1.split("+").join(" "));
			} else if(eq != 0) {
				this[decodeURIComponent(f1.split("+").join(" "))] = "";
			}
		}
	}
	,toString: function() {
		var result = [];
		var fields = Reflect.fields(this);
		var _g = 0;
		while(_g < fields.length) {
			var f = fields[_g];
			++_g;
			var tmp = encodeURIComponent(f) + "=";
			var s = Reflect.field(this,f);
			result.push(tmp + encodeURIComponent(s));
		}
		return result.join("&");
	}
	,__class__: openfl_net_URLVariables
};
var openfl_system_LoaderContext = function(checkPolicyFile,applicationDomain,securityDomain) {
	if(checkPolicyFile == null) {
		checkPolicyFile = false;
	}
	this.checkPolicyFile = checkPolicyFile;
	this.securityDomain = securityDomain;
	this.applicationDomain = applicationDomain;
	this.allowCodeImport = true;
	this.allowLoadBytesCodeExecution = true;
};
$hxClasses["openfl.system.LoaderContext"] = openfl_system_LoaderContext;
openfl_system_LoaderContext.__name__ = ["openfl","system","LoaderContext"];
openfl_system_LoaderContext.prototype = {
	allowCodeImport: null
	,allowLoadBytesCodeExecution: null
	,applicationDomain: null
	,checkPolicyFile: null
	,securityDomain: null
	,__class__: openfl_system_LoaderContext
};
var openfl_system_SecurityDomain = function() {
};
$hxClasses["openfl.system.SecurityDomain"] = openfl_system_SecurityDomain;
openfl_system_SecurityDomain.__name__ = ["openfl","system","SecurityDomain"];
openfl_system_SecurityDomain.prototype = {
	__class__: openfl_system_SecurityDomain
};
var openfl_system_System = function() { };
$hxClasses["openfl.system.System"] = openfl_system_System;
openfl_system_System.__name__ = ["openfl","system","System"];
openfl_system_System.__properties__ = {get_vmVersion:"get_vmVersion",get_totalMemory:"get_totalMemory"}
openfl_system_System.totalMemory = null;
openfl_system_System.vmVersion = null;
openfl_system_System.exit = function(code) {
	lime_system_System.exit(code);
};
openfl_system_System.gc = function() {
};
openfl_system_System.pause = function() {
	openfl_Lib.notImplemented("System.pause");
};
openfl_system_System.resume = function() {
	openfl_Lib.notImplemented("System.resume");
};
openfl_system_System.setClipboard = function(string) {
	lime_system_Clipboard.set_text(string);
};
openfl_system_System.get_totalMemory = function() {
	return (window.performance && window.performance.memory) ? window.performance.memory.usedJSHeapSize : 0;
};
openfl_system_System.get_vmVersion = function() {
	return "1.0.0";
};
var openfl_text__$AntiAliasType_AntiAliasType_$Impl_$ = {};
$hxClasses["openfl.text._AntiAliasType.AntiAliasType_Impl_"] = openfl_text__$AntiAliasType_AntiAliasType_$Impl_$;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.__name__ = ["openfl","text","_AntiAliasType","AntiAliasType_Impl_"];
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "advanced":
		return 0;
	case "normal":
		return 1;
	default:
		return null;
	}
};
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "advanced";
	case 1:
		return "normal";
	default:
		return null;
	}
};
var openfl_text__$FontStyle_FontStyle_$Impl_$ = {};
$hxClasses["openfl.text._FontStyle.FontStyle_Impl_"] = openfl_text__$FontStyle_FontStyle_$Impl_$;
openfl_text__$FontStyle_FontStyle_$Impl_$.__name__ = ["openfl","text","_FontStyle","FontStyle_Impl_"];
openfl_text__$FontStyle_FontStyle_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bold":
		return 0;
	case "boldItalic":
		return 1;
	case "italic":
		return 2;
	case "regular":
		return 3;
	default:
		return null;
	}
};
openfl_text__$FontStyle_FontStyle_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bold";
	case 1:
		return "boldItalic";
	case 2:
		return "italic";
	case 3:
		return "regular";
	default:
		return null;
	}
};
var openfl_text__$FontType_FontType_$Impl_$ = {};
$hxClasses["openfl.text._FontType.FontType_Impl_"] = openfl_text__$FontType_FontType_$Impl_$;
openfl_text__$FontType_FontType_$Impl_$.__name__ = ["openfl","text","_FontType","FontType_Impl_"];
openfl_text__$FontType_FontType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "device":
		return 0;
	case "embedded":
		return 1;
	case "embeddedCFF":
		return 2;
	default:
		return null;
	}
};
openfl_text__$FontType_FontType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "device";
	case 1:
		return "embedded";
	case 2:
		return "embeddedCFF";
	default:
		return null;
	}
};
var openfl_text__$GridFitType_GridFitType_$Impl_$ = {};
$hxClasses["openfl.text._GridFitType.GridFitType_Impl_"] = openfl_text__$GridFitType_GridFitType_$Impl_$;
openfl_text__$GridFitType_GridFitType_$Impl_$.__name__ = ["openfl","text","_GridFitType","GridFitType_Impl_"];
openfl_text__$GridFitType_GridFitType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "none":
		return 0;
	case "pixel":
		return 1;
	case "subpixel":
		return 2;
	default:
		return null;
	}
};
openfl_text__$GridFitType_GridFitType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "none";
	case 1:
		return "pixel";
	case 2:
		return "subpixel";
	default:
		return null;
	}
};
var openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldAutoSize.TextFieldAutoSize_Impl_"] = openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.__name__ = ["openfl","text","_TextFieldAutoSize","TextFieldAutoSize_Impl_"];
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "left":
		return 1;
	case "none":
		return 2;
	case "right":
		return 3;
	default:
		return null;
	}
};
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "left";
	case 2:
		return "none";
	case 3:
		return "right";
	default:
		return null;
	}
};
var openfl_text__$TextFieldType_TextFieldType_$Impl_$ = {};
$hxClasses["openfl.text._TextFieldType.TextFieldType_Impl_"] = openfl_text__$TextFieldType_TextFieldType_$Impl_$;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.__name__ = ["openfl","text","_TextFieldType","TextFieldType_Impl_"];
openfl_text__$TextFieldType_TextFieldType_$Impl_$.fromString = function(value) {
	switch(value) {
	case "dynamic":
		return 0;
	case "input":
		return 1;
	default:
		return null;
	}
};
openfl_text__$TextFieldType_TextFieldType_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "dynamic";
	case 1:
		return "input";
	default:
		return null;
	}
};
var openfl_text_TextFormat = function(font,size,color,bold,italic,underline,url,target,align,leftMargin,rightMargin,indent,leading) {
	this.font = font;
	this.size = size;
	this.color = color;
	this.bold = bold;
	this.italic = italic;
	this.underline = underline;
	this.url = url;
	this.target = target;
	this.align = align;
	this.leftMargin = leftMargin;
	this.rightMargin = rightMargin;
	this.indent = indent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextFormat"] = openfl_text_TextFormat;
openfl_text_TextFormat.__name__ = ["openfl","text","TextFormat"];
openfl_text_TextFormat.prototype = {
	align: null
	,blockIndent: null
	,bold: null
	,bullet: null
	,color: null
	,font: null
	,indent: null
	,italic: null
	,kerning: null
	,leading: null
	,leftMargin: null
	,letterSpacing: null
	,rightMargin: null
	,size: null
	,tabStops: null
	,target: null
	,underline: null
	,url: null
	,clone: function() {
		var newFormat = new openfl_text_TextFormat(this.font,this.size,this.color,this.bold,this.italic,this.underline,this.url,this.target);
		newFormat.align = this.align;
		newFormat.leftMargin = this.leftMargin;
		newFormat.rightMargin = this.rightMargin;
		newFormat.indent = this.indent;
		newFormat.leading = this.leading;
		newFormat.blockIndent = this.blockIndent;
		newFormat.bullet = this.bullet;
		newFormat.kerning = this.kerning;
		newFormat.letterSpacing = this.letterSpacing;
		newFormat.tabStops = this.tabStops;
		return newFormat;
	}
	,__merge: function(format) {
		if(format.font != null) {
			this.font = format.font;
		}
		if(format.size != null) {
			this.size = format.size;
		}
		if(format.color != null) {
			this.color = format.color;
		}
		if(format.bold != null) {
			this.bold = format.bold;
		}
		if(format.italic != null) {
			this.italic = format.italic;
		}
		if(format.underline != null) {
			this.underline = format.underline;
		}
		if(format.url != null) {
			this.url = format.url;
		}
		if(format.target != null) {
			this.target = format.target;
		}
		if(format.align != null) {
			this.align = format.align;
		}
		if(format.leftMargin != null) {
			this.leftMargin = format.leftMargin;
		}
		if(format.rightMargin != null) {
			this.rightMargin = format.rightMargin;
		}
		if(format.indent != null) {
			this.indent = format.indent;
		}
		if(format.leading != null) {
			this.leading = format.leading;
		}
		if(format.blockIndent != null) {
			this.blockIndent = format.blockIndent;
		}
		if(format.bullet != null) {
			this.bullet = format.bullet;
		}
		if(format.kerning != null) {
			this.kerning = format.kerning;
		}
		if(format.letterSpacing != null) {
			this.letterSpacing = format.letterSpacing;
		}
		if(format.tabStops != null) {
			this.tabStops = format.tabStops;
		}
	}
	,__class__: openfl_text_TextFormat
};
var openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$ = {};
$hxClasses["openfl.text._TextFormatAlign.TextFormatAlign_Impl_"] = openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.__name__ = ["openfl","text","_TextFormatAlign","TextFormatAlign_Impl_"];
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.fromString = function(value) {
	switch(value) {
	case "center":
		return 0;
	case "end":
		return 1;
	case "justify":
		return 2;
	case "left":
		return 3;
	case "right":
		return 4;
	case "start":
		return 5;
	default:
		return null;
	}
};
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "center";
	case 1:
		return "end";
	case 2:
		return "justify";
	case 3:
		return "left";
	case 4:
		return "right";
	case 5:
		return "start";
	default:
		return null;
	}
};
var openfl_text_TextLineMetrics = function(x,width,height,ascent,descent,leading) {
	this.x = x;
	this.width = width;
	this.height = height;
	this.ascent = ascent;
	this.descent = descent;
	this.leading = leading;
};
$hxClasses["openfl.text.TextLineMetrics"] = openfl_text_TextLineMetrics;
openfl_text_TextLineMetrics.__name__ = ["openfl","text","TextLineMetrics"];
openfl_text_TextLineMetrics.prototype = {
	ascent: null
	,descent: null
	,height: null
	,leading: null
	,width: null
	,x: null
	,__class__: openfl_text_TextLineMetrics
};
var openfl_ui_GameInput = function() {
	openfl_events_EventDispatcher.call(this);
	openfl_ui_GameInput.__instances.push(this);
};
$hxClasses["openfl.ui.GameInput"] = openfl_ui_GameInput;
openfl_ui_GameInput.__name__ = ["openfl","ui","GameInput"];
openfl_ui_GameInput.getDeviceAt = function(index) {
	if(index >= 0 && index < openfl_ui_GameInput.__deviceList.length) {
		return openfl_ui_GameInput.__deviceList[index];
	}
	return null;
};
openfl_ui_GameInput.__getDevice = function(gamepad) {
	if(gamepad == null) {
		return null;
	}
	if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] == null) {
		var device = new openfl_ui_GameInputDevice(lime_ui_Joystick.__getDeviceData()[gamepad.id].id,lime_ui_Joystick.__getDeviceData()[gamepad.id].id);
		openfl_ui_GameInput.__deviceList.push(device);
		openfl_ui_GameInput.__devices.set(gamepad,device);
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
	}
	return openfl_ui_GameInput.__devices.h[gamepad.__id__];
};
openfl_ui_GameInput.__onGamepadAxisMove = function(gamepad,axis,value) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__axis.h.hasOwnProperty(axis)) {
			var tmp;
			switch(axis) {
			case 0:
				tmp = "LEFT_X";
				break;
			case 1:
				tmp = "LEFT_Y";
				break;
			case 2:
				tmp = "RIGHT_X";
				break;
			case 3:
				tmp = "RIGHT_Y";
				break;
			case 4:
				tmp = "TRIGGER_LEFT";
				break;
			case 5:
				tmp = "TRIGGER_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + axis + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"AXIS_" + tmp,-1,1);
			device.__axis.h[axis] = control;
			device.__controls.push(control);
		}
		var control1 = device.__axis.h[axis];
		control1.value = value;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonDown = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var tmp;
			switch(button) {
			case 0:
				tmp = "A";
				break;
			case 1:
				tmp = "B";
				break;
			case 2:
				tmp = "X";
				break;
			case 3:
				tmp = "Y";
				break;
			case 4:
				tmp = "BACK";
				break;
			case 5:
				tmp = "GUIDE";
				break;
			case 6:
				tmp = "START";
				break;
			case 7:
				tmp = "LEFT_STICK";
				break;
			case 8:
				tmp = "RIGHT_STICK";
				break;
			case 9:
				tmp = "LEFT_SHOULDER";
				break;
			case 10:
				tmp = "RIGHT_SHOULDER";
				break;
			case 11:
				tmp = "DPAD_UP";
				break;
			case 12:
				tmp = "DPAD_DOWN";
				break;
			case 13:
				tmp = "DPAD_LEFT";
				break;
			case 14:
				tmp = "DPAD_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + button + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"BUTTON_" + tmp,0,1);
			device.__button.h[button] = control;
			device.__controls.push(control);
		}
		var control1 = device.__button.h[button];
		control1.value = 1;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadButtonUp = function(gamepad,button) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	if(device.enabled) {
		if(!device.__button.h.hasOwnProperty(button)) {
			var tmp;
			switch(button) {
			case 0:
				tmp = "A";
				break;
			case 1:
				tmp = "B";
				break;
			case 2:
				tmp = "X";
				break;
			case 3:
				tmp = "Y";
				break;
			case 4:
				tmp = "BACK";
				break;
			case 5:
				tmp = "GUIDE";
				break;
			case 6:
				tmp = "START";
				break;
			case 7:
				tmp = "LEFT_STICK";
				break;
			case 8:
				tmp = "RIGHT_STICK";
				break;
			case 9:
				tmp = "LEFT_SHOULDER";
				break;
			case 10:
				tmp = "RIGHT_SHOULDER";
				break;
			case 11:
				tmp = "DPAD_UP";
				break;
			case 12:
				tmp = "DPAD_DOWN";
				break;
			case 13:
				tmp = "DPAD_LEFT";
				break;
			case 14:
				tmp = "DPAD_RIGHT";
				break;
			default:
				tmp = "UNKNOWN (" + button + ")";
			}
			var control = new openfl_ui_GameInputControl(device,"BUTTON_" + tmp,0,1);
			device.__button.h[button] = control;
			device.__controls.push(control);
		}
		var control1 = device.__button.h[button];
		control1.value = 0;
		control1.dispatchEvent(new openfl_events_Event("change"));
	}
};
openfl_ui_GameInput.__onGamepadConnect = function(gamepad) {
	var device = openfl_ui_GameInput.__getDevice(gamepad);
	if(device == null) {
		return;
	}
	var _g = 0;
	var _g1 = openfl_ui_GameInput.__instances;
	while(_g < _g1.length) {
		var instance = _g1[_g];
		++_g;
		instance.dispatchEvent(new openfl_events_GameInputEvent("deviceAdded",null,null,device));
	}
};
openfl_ui_GameInput.__onGamepadDisconnect = function(gamepad) {
	var device = openfl_ui_GameInput.__devices.h[gamepad.__id__];
	if(device != null) {
		if(openfl_ui_GameInput.__devices.h.__keys__[gamepad.__id__] != null) {
			HxOverrides.remove(openfl_ui_GameInput.__deviceList,openfl_ui_GameInput.__devices.h[gamepad.__id__]);
			openfl_ui_GameInput.__devices.remove(gamepad);
		}
		openfl_ui_GameInput.numDevices = openfl_ui_GameInput.__deviceList.length;
		var _g = 0;
		var _g1 = openfl_ui_GameInput.__instances;
		while(_g < _g1.length) {
			var instance = _g1[_g];
			++_g;
			instance.dispatchEvent(new openfl_events_GameInputEvent("deviceRemoved",null,null,device));
		}
	}
};
openfl_ui_GameInput.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInput.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	__class__: openfl_ui_GameInput
});
var openfl_ui_GameInputControl = function(device,id,minValue,maxValue,value) {
	if(value == null) {
		value = 0;
	}
	openfl_events_EventDispatcher.call(this);
	this.device = device;
	this.id = id;
	this.minValue = minValue;
	this.maxValue = maxValue;
	this.value = value;
};
$hxClasses["openfl.ui.GameInputControl"] = openfl_ui_GameInputControl;
openfl_ui_GameInputControl.__name__ = ["openfl","ui","GameInputControl"];
openfl_ui_GameInputControl.__super__ = openfl_events_EventDispatcher;
openfl_ui_GameInputControl.prototype = $extend(openfl_events_EventDispatcher.prototype,{
	device: null
	,id: null
	,maxValue: null
	,minValue: null
	,value: null
	,__class__: openfl_ui_GameInputControl
});
var openfl_ui_GameInputDevice = function(id,name) {
	this.__controls = [];
	this.__button = new haxe_ds_IntMap();
	this.__axis = new haxe_ds_IntMap();
	this.id = id;
	this.name = name;
	var control;
	var _g = 0;
	while(_g < 6) {
		var i = _g++;
		control = new openfl_ui_GameInputControl(this,"AXIS_" + i,-1,1);
		this.__axis.h[i] = control;
		this.__controls.push(control);
	}
	var _g1 = 0;
	while(_g1 < 15) {
		var i1 = _g1++;
		control = new openfl_ui_GameInputControl(this,"BUTTON_" + i1,0,1);
		this.__button.h[i1] = control;
		this.__controls.push(control);
	}
};
$hxClasses["openfl.ui.GameInputDevice"] = openfl_ui_GameInputDevice;
openfl_ui_GameInputDevice.__name__ = ["openfl","ui","GameInputDevice"];
openfl_ui_GameInputDevice.prototype = {
	enabled: null
	,id: null
	,name: null
	,sampleInterval: null
	,__axis: null
	,__button: null
	,__controls: null
	,__gamepad: null
	,getCachedSamples: function(data,append) {
		if(append == null) {
			append = false;
		}
		return 0;
	}
	,getControlAt: function(i) {
		if(i >= 0 && i < this.__controls.length) {
			return this.__controls[i];
		}
		return null;
	}
	,startCachingSamples: function(numSamples,controls) {
	}
	,stopCachingSamples: function() {
	}
	,get_numControls: function() {
		return this.__controls.length;
	}
	,__class__: openfl_ui_GameInputDevice
	,__properties__: {get_numControls:"get_numControls"}
};
var openfl_ui_Keyboard = function() { };
$hxClasses["openfl.ui.Keyboard"] = openfl_ui_Keyboard;
openfl_ui_Keyboard.__name__ = ["openfl","ui","Keyboard"];
openfl_ui_Keyboard.capsLock = null;
openfl_ui_Keyboard.numLock = null;
openfl_ui_Keyboard.isAccessible = function() {
	return false;
};
openfl_ui_Keyboard.__convertKeyCode = function(key) {
	switch(key) {
	case 8:
		return 8;
	case 9:
		return 9;
	case 13:
		return 13;
	case 27:
		return 27;
	case 32:
		return 32;
	case 33:
		return 49;
	case 34:
		return 222;
	case 35:
		return 51;
	case 36:
		return 52;
	case 37:
		return 53;
	case 38:
		return 55;
	case 39:
		return 222;
	case 40:
		return 57;
	case 41:
		return 48;
	case 42:
		return 56;
	case 44:
		return 188;
	case 45:
		return 189;
	case 46:
		return 190;
	case 47:
		return 191;
	case 48:
		return 48;
	case 49:
		return 49;
	case 50:
		return 50;
	case 51:
		return 51;
	case 52:
		return 52;
	case 53:
		return 53;
	case 54:
		return 54;
	case 55:
		return 55;
	case 56:
		return 56;
	case 57:
		return 57;
	case 58:
		return 186;
	case 59:
		return 186;
	case 60:
		return 60;
	case 61:
		return 187;
	case 62:
		return 190;
	case 63:
		return 191;
	case 64:
		return 50;
	case 91:
		return 219;
	case 92:
		return 220;
	case 93:
		return 221;
	case 94:
		return 54;
	case 95:
		return 189;
	case 96:
		return 192;
	case 97:
		return 65;
	case 98:
		return 66;
	case 99:
		return 67;
	case 100:
		return 68;
	case 101:
		return 69;
	case 102:
		return 70;
	case 103:
		return 71;
	case 104:
		return 72;
	case 105:
		return 73;
	case 106:
		return 74;
	case 107:
		return 75;
	case 108:
		return 76;
	case 109:
		return 77;
	case 110:
		return 78;
	case 111:
		return 79;
	case 112:
		return 80;
	case 113:
		return 81;
	case 114:
		return 82;
	case 115:
		return 83;
	case 116:
		return 84;
	case 117:
		return 85;
	case 118:
		return 86;
	case 119:
		return 87;
	case 120:
		return 88;
	case 121:
		return 89;
	case 122:
		return 90;
	case 127:
		return 46;
	case 1073741881:
		return 20;
	case 1073741882:
		return 112;
	case 1073741883:
		return 113;
	case 1073741884:
		return 114;
	case 1073741885:
		return 115;
	case 1073741886:
		return 116;
	case 1073741887:
		return 117;
	case 1073741888:
		return 118;
	case 1073741889:
		return 119;
	case 1073741890:
		return 120;
	case 1073741891:
		return 121;
	case 1073741892:
		return 122;
	case 1073741893:
		return 123;
	case 1073741894:
		return 301;
	case 1073741895:
		return 145;
	case 1073741896:
		return 19;
	case 1073741897:
		return 45;
	case 1073741898:
		return 36;
	case 1073741899:
		return 33;
	case 1073741901:
		return 35;
	case 1073741902:
		return 34;
	case 1073741903:
		return 39;
	case 1073741904:
		return 37;
	case 1073741905:
		return 40;
	case 1073741906:
		return 38;
	case 1073741907:
		return 144;
	case 1073741908:
		return 111;
	case 1073741909:
		return 106;
	case 1073741910:
		return 109;
	case 1073741911:
		return 107;
	case 1073741912:
		return 108;
	case 1073741913:
		return 97;
	case 1073741914:
		return 98;
	case 1073741915:
		return 99;
	case 1073741916:
		return 100;
	case 1073741917:
		return 101;
	case 1073741918:
		return 102;
	case 1073741919:
		return 103;
	case 1073741920:
		return 104;
	case 1073741921:
		return 105;
	case 1073741922:
		return 96;
	case 1073741923:
		return 110;
	case 1073741925:
		return 302;
	case 1073741928:
		return 124;
	case 1073741929:
		return 125;
	case 1073741930:
		return 126;
	case 1073741982:
		return 13;
	case 1073742044:
		return 110;
	case 1073742048:
		return 17;
	case 1073742049:
		return 16;
	case 1073742050:
		return 18;
	case 1073742051:
		return 15;
	case 1073742052:
		return 17;
	case 1073742053:
		return 16;
	case 1073742054:
		return 18;
	case 1073742055:
		return 15;
	default:
		return key;
	}
};
openfl_ui_Keyboard.__getCharCode = function(key,shift) {
	if(shift == null) {
		shift = false;
	}
	if(!shift) {
		switch(key) {
		case 8:
			return 8;
		case 9:
			return 9;
		case 13:
			return 13;
		case 27:
			return 27;
		case 32:
			return 32;
		case 186:
			return 59;
		case 187:
			return 61;
		case 188:
			return 44;
		case 189:
			return 45;
		case 190:
			return 46;
		case 191:
			return 47;
		case 192:
			return 96;
		case 219:
			return 91;
		case 220:
			return 92;
		case 221:
			return 93;
		case 222:
			return 39;
		}
		if(key >= 48 && key <= 57) {
			return key - 48 + 48;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 97;
		}
	} else {
		switch(key) {
		case 48:
			return 41;
		case 49:
			return 33;
		case 50:
			return 64;
		case 51:
			return 35;
		case 52:
			return 36;
		case 53:
			return 37;
		case 54:
			return 94;
		case 55:
			return 38;
		case 56:
			return 42;
		case 57:
			return 40;
		case 186:
			return 58;
		case 187:
			return 43;
		case 188:
			return 60;
		case 189:
			return 95;
		case 190:
			return 62;
		case 191:
			return 63;
		case 192:
			return 126;
		case 219:
			return 123;
		case 220:
			return 124;
		case 221:
			return 125;
		case 222:
			return 34;
		}
		if(key >= 65 && key <= 90) {
			return key - 65 + 65;
		}
	}
	if(key >= 96 && key <= 105) {
		return key - 96 + 48;
	}
	switch(key) {
	case 8:
		return 8;
	case 13:
		return 13;
	case 46:
		return 127;
	case 106:
		return 42;
	case 107:
		return 43;
	case 108:
		return 44;
	case 110:
		return 45;
	case 111:
		return 46;
	}
	return 0;
};
openfl_ui_Keyboard.__getKeyLocation = function(key) {
	switch(key) {
	case 1073741908:case 1073741909:case 1073741910:case 1073741911:case 1073741912:case 1073741913:case 1073741914:case 1073741915:case 1073741916:case 1073741917:case 1073741918:case 1073741919:case 1073741920:case 1073741921:case 1073741922:case 1073741923:case 1073742044:
		return 3;
	case 1073742048:case 1073742049:case 1073742050:case 1073742051:
		return 1;
	case 1073742052:case 1073742053:case 1073742054:case 1073742055:
		return 2;
	default:
		return 0;
	}
};
var openfl_ui_Mouse = function() { };
$hxClasses["openfl.ui.Mouse"] = openfl_ui_Mouse;
openfl_ui_Mouse.__name__ = ["openfl","ui","Mouse"];
openfl_ui_Mouse.hide = function() {
	lime_ui_Mouse.hide();
};
openfl_ui_Mouse.show = function() {
	lime_ui_Mouse.show();
};
var openfl_utils__$ByteArray_ByteArray_$Impl_$ = {};
$hxClasses["openfl.utils._ByteArray.ByteArray_Impl_"] = openfl_utils__$ByteArray_ByteArray_$Impl_$;
openfl_utils__$ByteArray_ByteArray_$Impl_$.__name__ = ["openfl","utils","_ByteArray","ByteArray_Impl_"];
openfl_utils__$ByteArray_ByteArray_$Impl_$.__properties__ = {set_length:"set_length",get_length:"get_length"}
openfl_utils__$ByteArray_ByteArray_$Impl_$.defaultObjectEncoding = null;
openfl_utils__$ByteArray_ByteArray_$Impl_$._new = function(length) {
	if(length == null) {
		length = 0;
	}
	return new openfl_utils_ByteArrayData(length);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get = function(this1,index) {
	return this1.b[index];
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set = function(this1,index,value) {
	this1.b[index] = value & 255;
	return value;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromArrayBuffer = function(buffer) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(buffer));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytes = function(bytes) {
	if(js_Boot.__instanceof(bytes,openfl_utils_ByteArrayData)) {
		return bytes;
	} else {
		return openfl_utils_ByteArrayData.fromBytes(bytes);
	}
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.fromBytesData = function(bytesData) {
	return openfl_utils_ByteArrayData.fromBytes(haxe_io_Bytes.ofData(bytesData));
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toArrayBuffer = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytes = function(byteArray) {
	return byteArray;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toBytesData = function(byteArray) {
	return byteArray.b.bufferValue;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.toLimeBytes = function(byteArray) {
	return new lime_utils_Bytes(openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length(byteArray),byteArray.b.bufferValue);
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.get_length = function(this1) {
	return this1.__length;
};
openfl_utils__$ByteArray_ByteArray_$Impl_$.set_length = function(this1,value) {
	if(value > 0) {
		this1.__resize(value);
	}
	this1.__length = value;
	return value;
};
var openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$ = {};
$hxClasses["openfl.utils._CompressionAlgorithm.CompressionAlgorithm_Impl_"] = openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.__name__ = ["openfl","utils","_CompressionAlgorithm","CompressionAlgorithm_Impl_"];
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.fromString = function(value) {
	switch(value) {
	case "deflate":
		return 0;
	case "lzma":
		return 1;
	case "zlib":
		return 2;
	default:
		return null;
	}
};
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "deflate";
	case 1:
		return "lzma";
	case 2:
		return "zlib";
	default:
		return null;
	}
};
var openfl_utils__$Endian_Endian_$Impl_$ = {};
$hxClasses["openfl.utils._Endian.Endian_Impl_"] = openfl_utils__$Endian_Endian_$Impl_$;
openfl_utils__$Endian_Endian_$Impl_$.__name__ = ["openfl","utils","_Endian","Endian_Impl_"];
openfl_utils__$Endian_Endian_$Impl_$.fromString = function(value) {
	switch(value) {
	case "bigEndian":
		return 0;
	case "littleEndian":
		return 1;
	default:
		return null;
	}
};
openfl_utils__$Endian_Endian_$Impl_$.toString = function(value) {
	switch(value) {
	case 0:
		return "bigEndian";
	case 1:
		return "littleEndian";
	default:
		return null;
	}
};
var openfl_utils__$Object_Object_$Impl_$ = {};
$hxClasses["openfl.utils._Object.Object_Impl_"] = openfl_utils__$Object_Object_$Impl_$;
openfl_utils__$Object_Object_$Impl_$.__name__ = ["openfl","utils","_Object","Object_Impl_"];
openfl_utils__$Object_Object_$Impl_$._new = function() {
	var this1 = { };
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.hasOwnProperty = function(this1,name) {
	if(this1 != null) {
		return Object.prototype.hasOwnProperty.call(this1,name);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.isPrototypeOf = function(this1,theClass) {
	var c = this1 == null?null:js_Boot.getClass(this1);
	while(c != null) {
		if(c == theClass) {
			return true;
		}
		c = Type.getSuperClass(c);
	}
	return false;
};
openfl_utils__$Object_Object_$Impl_$.iterator = function(this1) {
	var fields = Reflect.fields(this1);
	if(fields == null) {
		fields = [];
	}
	return HxOverrides.iter(fields);
};
openfl_utils__$Object_Object_$Impl_$.propertyIsEnumerable = function(this1,name) {
	if(this1 != null && Object.prototype.hasOwnProperty.call(this1,name)) {
		return js_Boot.__instanceof(Reflect.field(this1,name),haxe_lang_Iterable);
	} else {
		return false;
	}
};
openfl_utils__$Object_Object_$Impl_$.toLocaleString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.toString = function(this1) {
	return Std.string(this1);
};
openfl_utils__$Object_Object_$Impl_$.valueOf = function(this1) {
	return this1;
};
openfl_utils__$Object_Object_$Impl_$.__get = function(this1,key) {
	return Reflect.field(this1,key);
};
openfl_utils__$Object_Object_$Impl_$.__set = function(this1,key,value) {
	this1[key] = value;
	return value;
};
var haxe_lang_Iterator = function() { };
$hxClasses["haxe.lang.Iterator"] = haxe_lang_Iterator;
haxe_lang_Iterator.__name__ = ["haxe","lang","Iterator"];
haxe_lang_Iterator.prototype = {
	hasNext: null
	,next: null
	,__class__: haxe_lang_Iterator
};
var haxe_lang_Iterable = function() { };
$hxClasses["haxe.lang.Iterable"] = haxe_lang_Iterable;
haxe_lang_Iterable.__name__ = ["haxe","lang","Iterable"];
haxe_lang_Iterable.prototype = {
	iterator: null
	,__class__: haxe_lang_Iterable
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
$hxClasses.Math = Math;
String.prototype.__class__ = $hxClasses.String = String;
String.__name__ = ["String"];
$hxClasses.Array = Array;
Array.__name__ = ["Array"];
Date.prototype.__class__ = $hxClasses.Date = Date;
Date.__name__ = ["Date"];
var Int = $hxClasses.Int = { __name__ : ["Int"]};
var Dynamic = $hxClasses.Dynamic = { __name__ : ["Dynamic"]};
var Float = $hxClasses.Float = Number;
Float.__name__ = ["Float"];
var Bool = $hxClasses.Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = $hxClasses.Class = { __name__ : ["Class"]};
var Enum = { };
haxe_Resource.content = [{ name : "__ASSET__:file_SpriteJson", data : "ewogICJzdHJlYW0iOiJzbmQvc3ByaXRlIiwKICAic3ByaXRlIjogewogICAgInNpbGVuY2UiOiBbCiAgICAgIDAsCiAgICAgIDEwMCwKICAgICAgdHJ1ZQogICAgXSwKICAgICJidG5DbGljayI6IFsKICAgICAgMjAwLAogICAgICA1OTcuOTM2NTA3OTM2NTA4CiAgICBdLAogICAgImRpZXMiOiBbCiAgICAgIDEyOTkuOTk5OTk5OTk5OTk5OCwKICAgICAgMjEzOS4xMzgzMjE5OTU0NjUKICAgIF0sCiAgICAibW92ZSI6IFsKICAgICAgNDM5OS45OTk5OTk5OTk5OTksCiAgICAgIDg0LjM1Mzc0MTQ5NjU5ODQ3CiAgICBdCiAgfQp9Cg"},{ name : "__ASSET__:bitmap_GameLogo", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQW9zQUFBQmpDQVlBQUFEellrclJBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBN2MybFVXSFJZVFV3NlkyOXRMbUZrYjJKbExuaHRjQUFBQUFBQVBEOTRjR0ZqYTJWMElHSmxaMmx1UFNMdnU3OGlJR2xrUFNKWE5VMHdUWEJEWldocFNIcHlaVk42VGxSamVtdGpPV1FpUHo0S1BIZzZlRzF3YldWMFlTQjRiV3h1Y3pwNFBTSmhaRzlpWlRwdWN6cHRaWFJoTHlJZ2VEcDRiWEIwYXowaVFXUnZZbVVnV0UxUUlFTnZjbVVnTlM0MkxXTXdOamNnTnprdU1UVTNOelEzTENBeU1ERTFMekF6THpNd0xUSXpPalF3T2pReUlDQWdJQ0FnSUNBaVBnb2dJQ0E4Y21SbU9sSkVSaUI0Yld4dWN6cHlaR1k5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZNREl2TWpJdGNtUm1MWE41Ym5SaGVDMXVjeU1pUGdvZ0lDQWdJQ0E4Y21SbU9rUmxjMk55YVhCMGFXOXVJSEprWmpwaFltOTFkRDBpSWdvZ0lDQWdJQ0FnSUNBZ0lDQjRiV3h1Y3pwNGJYQk5UVDBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDIxdEx5SUtJQ0FnSUNBZ0lDQWdJQ0FnZUcxc2JuTTZjM1JTWldZOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZlR0Z3THpFdU1DOXpWSGx3WlM5U1pYTnZkWEpqWlZKbFppTWlDaUFnSUNBZ0lDQWdJQ0FnSUhodGJHNXpPbk4wUlhaMFBTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM2hoY0M4eExqQXZjMVI1Y0dVdlVtVnpiM1Z5WTJWRmRtVnVkQ01pQ2lBZ0lDQWdJQ0FnSUNBZ0lIaHRiRzV6T25odGNEMGlhSFIwY0RvdkwyNXpMbUZrYjJKbExtTnZiUzk0WVhBdk1TNHdMeUlLSUNBZ0lDQWdJQ0FnSUNBZ2VHMXNibk02WkdNOUltaDBkSEE2THk5d2RYSnNMbTl5Wnk5a1l5OWxiR1Z0Wlc1MGN5OHhMakV2SWdvZ0lDQWdJQ0FnSUNBZ0lDQjRiV3h1Y3pwd2FHOTBiM05vYjNBOUltaDBkSEE2THk5dWN5NWhaRzlpWlM1amIyMHZjR2h2ZEc5emFHOXdMekV1TUM4aUNpQWdJQ0FnSUNBZ0lDQWdJSGh0Ykc1ek9uUnBabVk5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdmRHbG1aaTh4TGpBdklnb2dJQ0FnSUNBZ0lDQWdJQ0I0Yld4dWN6cGxlR2xtUFNKb2RIUndPaTh2Ym5NdVlXUnZZbVV1WTI5dEwyVjRhV1l2TVM0d0x5SStDaUFnSUNBZ0lDQWdJRHg0YlhCTlRUcFBjbWxuYVc1aGJFUnZZM1Z0Wlc1MFNVUStlRzF3TG1ScFpEbzFaR0ZoTVdSbE1TMDRaV0k0TFRKbU5HSXRPR1UzWXkwd05EZGhNVFV3WTJZMVpHWThMM2h0Y0UxTk9rOXlhV2RwYm1Gc1JHOWpkVzFsYm5SSlJENEtJQ0FnSUNBZ0lDQWdQSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUStlRzF3TG1ScFpEbzBSalkwTlRkR05ETTBPVEV4TVVVMk9URkRRVUZHT0RCQlF6RkJNakZCTUR3dmVHMXdUVTA2Ukc5amRXMWxiblJKUkQ0S0lDQWdJQ0FnSUNBZ1BIaHRjRTFOT2tsdWMzUmhibU5sU1VRK2VHMXdMbWxwWkRwaE5qVmtPVEk0T0MxaVpEQXhMV0kyTkRjdE9UWm1aUzB5T0RKaVlqQTJNMkZoT0dVOEwzaHRjRTFOT2tsdWMzUmhibU5sU1VRK0NpQWdJQ0FnSUNBZ0lEeDRiWEJOVFRwRVpYSnBkbVZrUm5KdmJTQnlaR1k2Y0dGeWMyVlVlWEJsUFNKU1pYTnZkWEpqWlNJK0NpQWdJQ0FnSUNBZ0lDQWdJRHh6ZEZKbFpqcHBibk4wWVc1alpVbEVQbmh0Y0M1cGFXUTZOak0zTXpFNVpUSXRObVEzTUMwM1pUUTJMV0kzTmpVdE5UUTJZelU1WldJM1pqazVQQzl6ZEZKbFpqcHBibk4wWVc1alpVbEVQZ29nSUNBZ0lDQWdJQ0FnSUNBOGMzUlNaV1k2Wkc5amRXMWxiblJKUkQ1aFpHOWlaVHBrYjJOcFpEcHdhRzkwYjNOb2IzQTZZelpqTjJOaU5UWXRNelE0T1MweE1XVTJMV0V5TUdRdFpUazNZbU16T1dVeU56SXlQQzl6ZEZKbFpqcGtiMk4xYldWdWRFbEVQZ29nSUNBZ0lDQWdJQ0E4TDNodGNFMU5Pa1JsY21sMlpXUkdjbTl0UGdvZ0lDQWdJQ0FnSUNBOGVHMXdUVTA2U0dsemRHOXllVDRLSUNBZ0lDQWdJQ0FnSUNBZ1BISmtaanBUWlhFK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4eVpHWTZiR2tnY21SbU9uQmhjbk5sVkhsd1pUMGlVbVZ6YjNWeVkyVWlQZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNSRmRuUTZZV04wYVc5dVBuTmhkbVZrUEM5emRFVjJkRHBoWTNScGIyNCtDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJRHh6ZEVWMmREcHBibk4wWVc1alpVbEVQbmh0Y0M1cGFXUTZNR1E0WkROa01tVXRPREJqWVMxbE5qUm1MV0k1T1RFdFltRmtPRE5sWlRZNE9UWXhQQzl6ZEVWMmREcHBibk4wWVc1alpVbEVQZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNSRmRuUTZkMmhsYmo0eU1ERTJMVEEyTFRFM1ZERTJPalF5T2pNeUt6QXpPakF3UEM5emRFVjJkRHAzYUdWdVBnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM1JGZG5RNmMyOW1kSGRoY21WQloyVnVkRDVCWkc5aVpTQlFhRzkwYjNOb2IzQWdRME1nTWpBeE5TQW9WMmx1Wkc5M2N5azhMM04wUlhaME9uTnZablIzWVhKbFFXZGxiblErQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emRFVjJkRHBqYUdGdVoyVmtQaTg4TDNOMFJYWjBPbU5vWVc1blpXUStDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZjbVJtT214cFBnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNtUm1PbXhwSUhKa1pqcHdZWEp6WlZSNWNHVTlJbEpsYzI5MWNtTmxJajRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOMFJYWjBPbUZqZEdsdmJqNXpZWFpsWkR3dmMzUkZkblE2WVdOMGFXOXVQZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNSRmRuUTZhVzV6ZEdGdVkyVkpSRDU0YlhBdWFXbGtPbUUyTldRNU1qZzRMV0prTURFdFlqWTBOeTA1Tm1abExUSTRNbUppTURZellXRTRaVHd2YzNSRmRuUTZhVzV6ZEdGdVkyVkpSRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOMFJYWjBPbmRvWlc0K01qQXhOaTB3TmkweE4xUXhOem93T1RveE1Tc3dNem93TUR3dmMzUkZkblE2ZDJobGJqNEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE4wUlhaME9uTnZablIzWVhKbFFXZGxiblErUVdSdlltVWdVR2h2ZEc5emFHOXdJRU5ESURJd01UVWdLRmRwYm1SdmQzTXBQQzl6ZEVWMmREcHpiMlowZDJGeVpVRm5aVzUwUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzUkZkblE2WTJoaGJtZGxaRDR2UEM5emRFVjJkRHBqYUdGdVoyVmtQZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQThMM0prWmpwc2FUNEtJQ0FnSUNBZ0lDQWdJQ0FnUEM5eVpHWTZVMlZ4UGdvZ0lDQWdJQ0FnSUNBOEwzaHRjRTFOT2tocGMzUnZjbmsrQ2lBZ0lDQWdJQ0FnSUR4NGJYQTZRM0psWVhSdmNsUnZiMncrUVdSdlltVWdVR2h2ZEc5emFHOXdJRU5ESURJd01UVWdLRmRwYm1SdmQzTXBQQzk0YlhBNlEzSmxZWFJ2Y2xSdmIydytDaUFnSUNBZ0lDQWdJRHg0YlhBNlEzSmxZWFJsUkdGMFpUNHlNREUyTFRBMkxURTNWREUyT2pReU9qRTRLekF6T2pBd1BDOTRiWEE2UTNKbFlYUmxSR0YwWlQ0S0lDQWdJQ0FnSUNBZ1BIaHRjRHBOYjJScFpubEVZWFJsUGpJd01UWXRNRFl0TVRkVU1UYzZNRGs2TVRFck1ETTZNREE4TDNodGNEcE5iMlJwWm5sRVlYUmxQZ29nSUNBZ0lDQWdJQ0E4ZUcxd09rMWxkR0ZrWVhSaFJHRjBaVDR5TURFMkxUQTJMVEUzVkRFM09qQTVPakV4S3pBek9qQXdQQzk0YlhBNlRXVjBZV1JoZEdGRVlYUmxQZ29nSUNBZ0lDQWdJQ0E4WkdNNlptOXliV0YwUG1sdFlXZGxMM0J1Wnp3dlpHTTZabTl5YldGMFBnb2dJQ0FnSUNBZ0lDQThjR2h2ZEc5emFHOXdPa052Ykc5eVRXOWtaVDR6UEM5d2FHOTBiM05vYjNBNlEyOXNiM0pOYjJSbFBnb2dJQ0FnSUNBZ0lDQThkR2xtWmpwUGNtbGxiblJoZEdsdmJqNHhQQzkwYVdabU9rOXlhV1Z1ZEdGMGFXOXVQZ29nSUNBZ0lDQWdJQ0E4ZEdsbVpqcFlVbVZ6YjJ4MWRHbHZiajQzTWpBd01EQXZNVEF3TURBOEwzUnBabVk2V0ZKbGMyOXNkWFJwYjI0K0NpQWdJQ0FnSUNBZ0lEeDBhV1ptT2xsU1pYTnZiSFYwYVc5dVBqY3lNREF3TUM4eE1EQXdNRHd2ZEdsbVpqcFpVbVZ6YjJ4MWRHbHZiajRLSUNBZ0lDQWdJQ0FnUEhScFptWTZVbVZ6YjJ4MWRHbHZibFZ1YVhRK01qd3ZkR2xtWmpwU1pYTnZiSFYwYVc5dVZXNXBkRDRLSUNBZ0lDQWdJQ0FnUEdWNGFXWTZRMjlzYjNKVGNHRmpaVDQyTlRVek5Ud3ZaWGhwWmpwRGIyeHZjbE53WVdObFBnb2dJQ0FnSUNBZ0lDQThaWGhwWmpwUWFYaGxiRmhFYVcxbGJuTnBiMjQrTmpVeFBDOWxlR2xtT2xCcGVHVnNXRVJwYldWdWMybHZiajRLSUNBZ0lDQWdJQ0FnUEdWNGFXWTZVR2w0Wld4WlJHbHRaVzV6YVc5dVBqazVQQzlsZUdsbU9sQnBlR1ZzV1VScGJXVnVjMmx2Ymo0S0lDQWdJQ0FnUEM5eVpHWTZSR1Z6WTNKcGNIUnBiMjQrQ2lBZ0lEd3ZjbVJtT2xKRVJqNEtQQzk0T25odGNHMWxkR0UrQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDancvZUhCaFkydGxkQ0JsYm1ROUluY2lQejV2RjRLOEFBQUFJR05JVWswQUFIb2xBQUNBZ3dBQStmOEFBSURwQUFCMU1BQUE2bUFBQURxWUFBQVhiNUpmeFVZQUFpS1hTVVJCVkhqYXJQMTV6R2JybXQ0SC9aNTVyZlZPMzFCVmV6cG5uNkhiN3NudHR0MTJQTnZFc3cwaWhnVFpSRkdJbE1nSWd3UVJJQ0ZGQWlLVUNHSUpGQ0ZrVUJBS0VvbXdSWkRUTWpaT3V1blk3cmh0OStEdTAzM2NQbjNtY2U5ZHd6ZTh3eHFlNmVhUFo5VSs1WU1SanNRbmxhcnFxNi9XdTlaNnB2dSs3dXU2YnNYNjlZbDNibTUvOGkvOStWL3lIWi9RaHNlZ0RWVWJZczVJeWFBMEtJVTJDckJBQVZsUUlraDFGS2tZVXpER0FoYWxLcElqb2d6S0dCd0tvd1RSN1Ryem5CR2xDS3BTcUdBMFJtbXMxaFFVdFFxMVpwUXhqT1BNeTd0N3Z2MzhoRXlabTQzbmNOVmp2V1ByTFAxdWovYU9Jb0lJR09PUW1paHBBUjBRclRBc1ZORmtNVmpyTUZxVFNrSm5oWllFVGtCWnBGU01xbFN0VUZXaGxrTHRMR2lEcXRMZWdkSm81eWdsb1VzaFU2amFZcFNobEVoVm9GSkVTbVlXeC9tUzhhYnk1R29BclZtV2lDNFpzS1JTcUFLcUpyeTF1TTZDQzhnc1dCZFlxSXlYTTFJTm0vMEFjV1FaRTZiYm9kV0NzUTVqUENsSGxwZ0ozdUd0b3dKVkJKVkhxbFFpQm0wTWlGQnlKbWROTEprU1I1eHg3SGQ3bEdpbWNTU1h5UDc2Q3VjN1VrelVFdEhHbzFXbVNnVGRVNnRDSVNpbEVVbVVXc0VFcWdpNzNpTzVrSlVCV1RpZnpzU1U2YlVsZEIxaTRISTVjenhITnAzbmF1OFFoRklOSWhZcUtLT3dWbEJHSVpLWlpuaDhPTEx0TGNOdVR4WW9KZFA1Z05FV0JTaUVaWnJKUmVHOFJ3QzluREVzaUJUSytHWHE1amVCUFdEcUJla0RPa2VVR0ZTd2xDSmN4a1NSeFBFMEUxTWw1MGhPa2M1VXR0dU96ZjZLbkRYelBJTE01S3hRemhOakpJNExOMCt1dVJvRzZoU3AzWmJOb0trc0xCbW04OFQ1ZEtHM2dkMStnd3VGZVZyNDZPV01zbkE0Yk1oNTR2SHhSQ25DMDlzdHZYVmsxWkV5YUNyN3dZQnE2OE82TFVWb2N6MVBnTVZvaU5XanRVV3J6SGxjZUR3ZFFTWkM1Nmpab0YwZ3o0bGxPaEZrWWRnTStOMHRPazhVMytQOUFja1RsMFVJNVFpQTJUd2htSW94b0xVaVY0K1NqREpDRVllU2lqTVZWV2NxY0JrejMvcG9Zbm44Z050bjc3Qy92cWFjUHFMcmV0ejJpaVVKd1ZtMGRaUlNFQXhXRzR4SjVBcUl4Wm9JMmlPbGtISkdCSElxeFBuSTBIZjAzcUt0WWM0TGo0OFRSbXY2UHFDMHdXaUx0d1kxbmNnNUlsV2dEeFRyS1ZFNG55ZXNnNkgzYUJkQWhIbGVVQ1lRbktha0JjSGhMQ0NnTTRncUZBc2dpQ2lRaXJlT3kxU0pVOFoxZ25XVmtpQlh4VFRQTEhIQ2FOZ01BOTRGcEJncWdxTFNEUjNIYytYdTFSMzdmV0MzOWNSVVVDSjRaM0RlOG5pYUdNZVJ6UkFRN1ptbVJQQ1czYWFEQXJVYWNva2N6eGRPbDRRb2hkSEM5ZDdqL0padmZPc2xTMXdBb2VzTTd6emJjVHhPaUNqZWVlc1dhenpnTUJaRWFsdlBnSWhHYTRXU0dkQW9iY2tsSTZJd1JpTWlVQTFhejFRY0lvWmFJOVFFcXEzRzlrdVQwNFRXQ21kb2U3RGVVZElKTFF2ZUI2b294cWt3VHBIRGZzUFFkNVNTUUFkaVNsaGowU29SVThIYURhVVdqQzU0MXlGb1JBclVpRWdsWmsyS004SE1HRzJ4L3FxTm13aUlnanBTVlFlcW5UZUNRcHNLVlpNeVZBU3JCRzBWZWJrZ0djUjNHR3N4T25DOGY0blVDN3ZkZ0RHZUttQmNRS0ZJTVNFWVNrbDBIb3dKcERRaElpamwwVVpUUkRES29DaG9MU2l0U2JHUXEwWXhjeGxIakxiMGZZZFdCWEJJcmVTY1VOb1N2RVdvWEM0anRZRFdGbVdFUGxoQWtYS2wxSFpHRyt1UVVubjFjTWFHanNQT2tuTkNST09kUXdHMVpweHhWS21VR3FrRWtJeFJiUmdWRldzOVNodHlFV3FOS0dYUVdxTVZsS3BJMVdCa1JtbUx0UXBOWVk2S1dqV1FRTFc5VmF1SU5Zb1FCcXBVSGkrSjQ4TXJPdThBemVWOFlZNExXa1BvREgzd2FMSE0yYUtOa0ZNaTVVS01rWnlGZlYrNVBuUmtjODI4RklKVmZQakJjNVk0OGV6WkRWbzVha3hzZW8zZlhHR0Q0M3crY1Q0L3Noa011MTNIK2JRUUkxeGZiL0Y5WUpraEZZczJHa1BFYXJEV29DVWp5bkk2Vjc3eHdRTXBIcm05MmZEMHlaN09lNlJhTUcyc2x2SE1SeTlPZlBUeWtYZmYydkgyVzBOYlQyZ1VRaGFOVWdxck5HalFXaU5ZbGxUYW5pcUp4Mk1tUzhVRnkzZzZFZWVaelg3RGJqdUFGQjZQRThZNm5MWGtsTmgwUGR2dERxTVVpa291Q3pGSFJCUUpPSjdQcEduR2FjMTBtUm1DWmJoK1FoZzZhazZjVGpPOU0yampLRnJSOTVqTE9adGYvWlg2K2YvRnYvdC8reGMvOTJ0ZitxSjlIU3lXS2pmOXpqNDc3QXdQcitiRFRBRmZLYVZTY2tWVXdTaERUb0oyN1FVcVpaQlNFSlV4Z0JKb0ozMkNxdEhXdGcxSUMxVUtJb0xHb0pRbWRCQmpZaTRRZ2thYkZuOVdhUWVETWhwbEZKaE1Lak5MS3J5OG54bGZqZ3p2My9Ec21VVTdRWHRCdktMcUNpVWpxbEpWeFRtTnRoNnBMV2hDV2JUUzJLTGJwcEptbHF3SVNoT2NJV21obEhZUUtxMndVa0dnNnJZZ21CZTAwK0FzUWtaVDBWcW9PYUZ0QUtzbzUwY3dIdDhaVkJFQTVxSTRucytZbXRtNnpMRDFhS1dSYmdOVTlCZ3hUdUdzQjZYSnFtM0dtRUt1Q2RjN1F2R1VvakRPa3NjWlZTLzR6UUVwSGlTaGpjYUtCdTh3VnBOWkVDeWFnbmNXY1FHVlJyVFdMREZqdE1adEFpWUtqM01sK0lyckZEVWJiR2N4V0ZDYVNzRUZReTBkMW1hV0pYRTZ6Mml2OFNIZ2JVVXJReTBGclNJNUppUVZVaW9ZdTBHcXBwWUxuVFZZM2FGVVFYVEdXa01JamkwRGZWY3czaUNpa0Z5b291bENSUnNvUmFPc1JVbEZENHB4MUR5Y1JrUmJqUFdNMDVtSFBMTGI5bXc2QndTMHMzaVhLWktScXBIUUVaUERTQ2I0QVZFamlTM3g4aEk5T2RUMmdPNGNFaGVpS0xRR1p4M09ha3FadVV5VmxOcW1hWUxCV0VFVWRBUzg2ekhXY3ZkNDV1SCtqazRaZW1keE5yRzRpTkVKclFla3REWG1uV0cvMjJETFFvb25GalV3TFFydERmdWRaMW9XSGgrUGVDTm9yVGlkUjlTbXd3OGFpNktLSWVFd0dKVE5GSlhSMmhHckpwZUNzUWFzeDlVS2FnS3g5SjFCOEZ6R2lUZ25VaHpwaDd6T05Zc1BIY0U3dGpwVCs0NWNNcFlqMHZXb2VrRjdoeFlvZFFHeGFPY1FYZkRTQW80OGoyZzNFS1VGRThFckZBcGpEYnZkQm0zZVk1a3YyREd6M1cwbzNSV2lFc1lwbEc3anJiVkJhME1wR1ZVRVpYc1l2d1AxaEw3NkFWSTFWQ3dpUjZ6SktLZVo0c3c0Vm9iTkZ0Y1BkRU5icjBwcmFpMG9wU2hhcUV3Y0x4RVhCdllpVkczUUpqRnNBdFlXSEpHYUsxVnJ1czZUcXlDU01Wb3hUaU1sZ2U4NnRLbHQvNnFndElDMUdOTlRTc2E3dHM2Y05TenBRc296MHlJSUZaVGxlSnJ3dm5DOXQ0aFlSSGRvbFlrSmRMem55U0hnaHA2Y1p0S1NzTDVqeVpwS3BwVE00OE9KeDRkSCt1MGVxWUpVMHhLWXNPZjZxaWNsUlM2UlBsaHMySE8rakFoQzN6a09WNEZYOXdWdk5VK3VQRjN3cEs2d3hFaE1NNkhyQUtoVjFqV3ZVRXEzeExKY0VBeEtGYlNhOE02d3BCWk1haTBVRkxsV2hJaFNIbU1WYmFaQ3dRSWFxeFBPYWtBakdPS2NVVEpqVkVZYlQ2a1E0MHpNdGdWcU51TkNvQzdDK1h6RzJVcm9BclZDVEprcUY0eFc3Wmx6KzdPM0JhT0ZTc0JyME5waHRRTUZTVW9MRWlWVFJFTVJqSmxib2xVRmFzWnFSVFZEQXpQU2lMSUdGd3dpSHFtWlVpdm4reGVveS9QMlhQMGVrWVN4SHNTVDAweE9rVklLMmdhc1ZtZ2xWSUZjRWtwNXJERnRmaXJJV1NocHh0cU1OaFlSSVdlTE44SzJjMHp6UWtrWjVRTE9DckVXbHF4d0xsTzFSOVBtcUhXZVlhUEpxYUlVMUZxeHVtSmRSMXdLVWhQV0c0YXVZcXpGV28rdWtWb3p0UXBHSllKeEtHT1FtakJTMEtxQ1ZISXBwQVRCRzZpVkZOc2N0ODVTcTZVQ1NpV2MwU2lWU2NXaVJGRkZBVUlwQzVkTG91ODcrcTRncHYwL1dRUFVYSVNTQzV0TllMdmQ4dkN3a0NvRWx6aGVKaDdQaXR2RGhuZWVYYUZqWmp4SHJBOFVFVXBKbEFMRzlXanJLWG1pMXBZNHpTbVRxMmFhWjVDRi9iWmpjOWhqL1VEWE96U0owK09SRDUrZnlXTHh6a09aMjFobGlDWGpMSGhqcVNWanJjVVltT2ZVempscjZMMGd4VEFNQThHRHFqT29EaVNSNDB5VndtNm5FYlVsRnVIeG5OZ05IbTBxMmhpMEN1U3BuYVBhVzFMTWxKckllYUdXakxNRzMxdHNGYXdSaXF0TTU4anpGd2xSd3ZYVk5iYzNnWm9YWWpGc1FtRG9OS1dPeEZyUVZLckFlVm9RcGNBS0R5OGVVVXRsZjdBY3g0WHptSGptNytnMk4vVEc4aUlMai9kM3ZQdk00K2tvczhlYXdyakV6OHhMMnJKQ2hBb3d0WlJQU3dHTkpzMFpOM1M4Yzd0SGEwV01EZjN6dllGU1VOYWhLWWowVktrZ2drRzNiRU1MVWl0Sk5NWW9qQUtVUWpSSWFka1VZcWxTa1pyYXhxUUVsSU5peURXU1VzSjNEbU9BbW5oeWZlRHFha0haRGNmRGtmZWVlajd6MlNjTWh3QlZnZkVnbWh3VHB0TW82NkZhMEVBcHJDa1kyUFhuYTBSeXBRZ1liMUExUW5VSUNtVUtsSVFzR2JFdDRDVUpFak9xdDJBdGJjYVg5bHpMZ3BJTVdxRDM0SHR3SG5JSE1iSk5ocHRCWTMxUHNKWE9WNVFaUUJtUURLb0hiU2taU2lvWUcxQmtzbDNRWVlmdEtqenBJVVVvRlRvTm05OEkwbEJDbE5CZWxGbVJnVXBPZ2lBNHJ4Q3hwSG5CaFE1bElNOUNycUNVNHVIa3lUbngxdE05VjRjOWdrSnFCOHA5akI0b05iZnN2WGFrMU5NTk83cWdHSG9IMnFPVWhsbUQzU0k1a3hhRnRSVWRBbW5PTExVbkRBTUtHQytQT0FNK2JORGFnQVpGZ2dwb1Q2MEpyUUR0S0JWMHJhU3FpTXVNOTRLMmxlUFpjOWh1a1N6c2hnTUp6VzdZc04vMlZMRVlCNmdaeVFtaHpkTlNBT1V4dWMzZmtjREZEaGdwSEs1NnpPYVdlSHlCbElMWkh0RE9vVlVtbFFzUHA0VTRqdFJhS0NoMk84dXcyUkY4UUdzUEpmTnM4cngxNDhoRjBYbU5UWkdiSngzZGJnTjZvRXBQa2tvdEZSY0diSHFPeElsVHVpWWRaanBYcWJYdy9HN200Sy9wdGgycFpzYkxHV2N0emlxQ3M5eGNYOUgxQXpGck5BbHJGTVlGSkJlazdpbGxSaXVGVWhibFBNcFlZa3c4M2lrdTU0b3htcFF6enRxR0lDbkQ3ZlZUWEJWUUM2NC93TEtBYnlneDBvTVprS1NRRXFrcU1JNHpmWjl4ZllCVWtZY0xOWFJVdjIySXVhcUV2a1BWektlWGw2VFVFNmVPZmh2UVY1OEdWNkF1Z0dVNXo5UWk5SnNEU0VIS2d0S0Fja2g2dHlFU2VGNDlYdGdPZ1gzL0ZHc204RnZPMy9vV0h6eE1IRzQzN0EvWG9QZEFoQnphK2xXSlVoTG05aG5iS1VQdDJSNTJrQzVBQnFzaFJncU91TXhZVmFsS2M3a2t1cjVqMkFjdXh3V1RacnJyUFVob1FZZExVQkpVQTlxQWFVamo2MGhBNW9ITCtJaTFuaEFzSDc2NE1FOEQ3NzJ6eFhjQnpBQ3lSZUxJdkNTZVhnZDg3MEdFV1BTSzVCZm1aVVpwMk8wSHRMV00wNG5iUTRmelBjNTJXSzF4dWpCc1BibDZubHdIZk5kVDZDbHhCcVB3QVo0KzgzencvRXlPQ1dwbXQzVjg5dnZlcG1TNHV6dlJENDd0NFJhcUFJVlNQQkF4T2tJOXRHZFVkVDBsT3NpeTduMUNMaGFSRFVhRFFqZEFVUnZJYzl0NzNhYjlYcGYydmFyYjUyaEE3YUFvY2w0NG5oWFRvdEZteTI2ajJXd0M4NVFKUm5OOSt3eVJoa1JvZCtaMGZHUy9EV2hsa0Jyb25DYm5DV3lIRHg1ckRhYnJBWXZVUWkySm1pMksycTZoSzVxNTdaZG1pM0ttelFubFFXdnlaRENoaDZxcE5iZm5xWVhqUTBCbXVENTRWTmlBZFVqVm9MY29WU2h4Wmw0eXpuZFlvNkJNRFZ6UVQ5ZjM1NkFhYWs3dGVkaWhWS1htQmFNTHlscVd5OGc0R3JaRHo5QjczSDRIdWtDQlpXNW90UGNLcUd3R1JTMkozU0dBZU5DMm5VR2l5TE93TERQOVlOQ2hnM0xUemc3amtIcWdsQWhTc1I3UWxwb3lVbnVNczJBN2tJbTZWR0lTbk5PZ1BNczhFWHFMNmJzV1ZVbHVvWU9TZGc1VkEvSjYzMGhjemlmNmZ1YjZzTWQ3MDg1V2F5bExZWjRuN2g5R09xOTU5dlJ0YXI2UTVvbVlvUE03RHZzTngwdkNHWVh6bHI3TEJCZTR1bjdDTWtmdUh6VEdHcmJiTFNGWTNEaWhWaEJLdU9WeUdWRUdibTg2bmx3ZENHR1B0UjdYQnphREllWktlWEdQVk12MS9zRGhFT2lIbnVQamlSd3ptd0RiamNYNWE2Z1JZejNUM0tISURMdUJtOXRiOGp4eSt6U2dnb01ZUVd3Ylo2NmhBR1lHMWZOdzN5cDdoMDJIY2JyRktxWUY0QmdGMmlKTHBDNGpVajFDYmVCVGphU3FpYk1pYmgyZmZQK0t5MUlJenRHRkFZdWh0NElFajlJVzBveElSQ3ljVGd2UFA3cWpHTTI3VDdkWW85Rlo2TDNqY0x2bDJUbHg5K0U5UzFvNEhtZjJ1eTNESUNRSlROcXdzWlZ0cjdqTWNQZDRUakdWelp2QjRyT2E4bzhzOCtSVjF1ejNHejU4ZU9Edi9OeXY0ZGFTYlJYZFNoVTFJV0lRa1ZaNnBMWklGZzBZcktFRmk2VUNnck9XRU54YS9xeFVLdE9jS1JYNm9QRk9JN2xTdFVFRVVzcFVFYXd4YUYweEdMVHRtSFBpUEY2NDNJOTg5VXVKWC83aWM0Wk5DeElWVUVWUkJKeFRhRzJwUmFHbHBRdGlLc1lIMXBNSUswSkZLT3RjcnptQ01sanZxWEZpSGhNcGcrdGJWcUZxSzdlcVZ1T21Wa0ZTSW10d3BTQ1NXK2s1QkZTcENLMU1uWmVGSXRCcmhiYUJsQVVwQzZBYXVxY1NRaVVURUtsUUJHVThVaWJtcFdEc2xyN1R1RTZUeTh3MEpyeEt1TzFMY203b2h6YUdXalM1WmtTRFZrSk8wckpNYjFpaXNNd2orODJBQzVxVUNpbER6cFZZTkVoa096aTAxdTFkaUlEV2EyWXV3RVNNaFZyYnU3RFc0cDFGbFVMRkVpdlVrbkMrSWFNcEo0eTExQnpKYWVIcDFSNmpGQzhmUjR6U3hGSklCZnJPb0pVZ1ZTRlZVV25vYytjdHVSZzZaN0U2OCtIZG1kTTVNd3dlNXdwTEVuYTlaUWlXTVFxMUNrTWZjTGFoUEZxM2pEV1htU0pnamFQV0FwS3h1UkNYTTJwenpid2tVbExzdG5kMGZ1QjRXU2pUaWUxMkE3b3lubzRzSmxCS1J0Skl5Z1cwNTJyWDhlUnF6MUtGbklVOFJjUnBsTklzeTh6anc0a1lLMjlkWGJFYkxCbWhXa2NwZ2dER2VRSUxUZ3JqOG5WS1RTQ0p4M01rVjh1bTAyQTEwOUlPdHVBVmo4Y0pKNHJyNnowMldMWmRvTlpJa3JVTWxBb2FqZlVhU3FGa3dXNEdwR1RHT1hIMzZvR1lGalo5YU9YSTRPajdRRW9abzcrRnRRNUlXTnMzT2tBcEdJa1k1eWxWNDNUQ3VKNkgwOHpkdzVuZVFkZjFtUHlBSVdQMm4wRXhVUXRNUzhhNGdGV1I1Y1BQSTlXd2YrK0hHV09tOEUzNkx1RXRnT2N5SlVvcGJEWUR0UmFNMXBTU3lFV0l4ZUZNNHFvMzlDNVFVY3k1Y3BsT0dPTXhOWEc4ektoZmVVNGZISW9HM3dvT0tZbXFoTXZqc1NXRTJsQ05ZOXNQZENvaDFyUk12Z2lYR1dLY1VBckdjYUhFek5OOXo5WFRnZnN6eURLejJ3V3EzNk1xZExaaXJHT1pNeXFPVkMxRWJWRlZhQVZtemJnc0JLZXh6bkQvY0NFdWtiNnpIQTRiMEIxR08zSnU2TDkxR2wwelVpdktkb0NRNDBMTU1NMlJXaGRTenBRc1hHMGR3MmFQMWdaQlNQT0pXUDFhNWNsWU94Q3NKOFVUR1kySWJsUU9wZm5nK1pHNyt4T2JQdkR1dTlkVVlMek1ERjNBaFFHdEZGWUo1N2xRYXFXM0dXME1KUmVVS0l6dldzbFdWNmlGSWhwdGU5SXlFYnhHMTVrbGd6RWQxaFRtR050NTRCeWxGaVF1aUZURWFoQWhaYUZXc0xxVm4rY1p0T253UVdOMFpSNG5ldTk0NitrVGd1L0lkZUhMMy9xSUQxK2VlSExWY2JOM0dHMHh1dWQwbVVsVmNYUG9HazFLZTFBMHVrMWNRQms2UDJCTmFsVzBVb2x4d2RnQjV6VTVuaEZsUVRSR0Y3VHJtQlpJMHduakhENEVTaWxyeWREZzlFSXRNTThWclN6YWdOUkN6SW91ZUxReUxNc0ZIelErN0NocFJxbDFia29qSVJnTGlDWXRFV1NoU3VIaGVDSE93dTZ3WXpOMFdPc29aVUdybHVpVkFpa250Tlk4SG1mT2w1SERma3ZmR2J4M2pSNlNGY2ZqUXM2UjYrdUFkWUZTRkVwVmlsaEVOSXJTQW54bHFUVUJCWkZXV25iR2tjdENxWUpTQm1NTXVSUktyaGhqVVZwaGRNSW9RNlhkWHkyQ1NNVWFnN0dXYVo2NGpJVXVPRFlialZidGZNdWxuZStYY1dRYUYzSVJNSW9VUjJwcHBmZ1lLNTN6REQyVW1oZ253WnFLMXBiTk1HQ3RKaGRwaUxMM0NJVzdod3RHbTBaRUVta0lIOEkyR0E2N0FXTUhRT09EWTVvbVRwZUpIQnRpTENoMm00N3JRK0F5emh4UGhiNnpoQzdndkNISGhWSUxwU2o2ZnNOdWE1aVhoc1IzWHJQRWdsQWF5RUZCYVVjdERjU3h6bEZ6SnNaRXJhM3E0VjBEcFl3MktDTm9aVUEwUzV6UXFsWFVSS0RrUkJITk5Ba3hYdWdDOU1PV2xITGJJeFlERmJiWG5vb1FsNGpXaWxyaE1rWmVmdmlTZ3VLOWR3NFloSFBNR0tmb25jZHF4OHNYSTYvdUxpVFZLcnViVURpUGlVOS82bTErNUllZUVmcWVMSm92Zi8zYncrbDh1WGtkTEdwZ1Y2czhVMm1DNnJoNnV1Y1hmdms1LytLZi84c0FoTyt5RkZuV1BGcnozYStXNjdUdnYvazllZVBQci9OdjlUMC85MC82MHQvTjFmOC92cThiTHZCUDlhWGZ1SVpaZjgvcnM1akdwbUN0Zmpkd2EvMzkvNTlmK252dWczL0N1M0xyZmRRMzNoUHJmYjMrdDl4d0V3emcxNysvSG9lMC9tNi9aMnpTZWczN3hoaTlmZzl4SFZkWmYwNEIzZnBuZVdQTTNQcjN1RjRMNEswQUd3ZXZScGhxdTI1OTQ1MnkzdU43RzhYdDN2UEJZK0xiWStWcGdKUmhMTjhkeDd4K3JnTG05ZjllVy9qMDA0NHZ2MXc0SnZuNGZWd1pzQXB5YlFESEl1M1ovSHB2cno5NytmOHhKdjgwYy9ETkw3dmU1MnNXMW84OGM3eTRGRDY4Vk56NnZzMTZ6ZWw3eHYzTmVaalhuOVByZTlYck03OGVvOWRqLzNvYzk2R1ZyUjduNzQ3VEQ5eGFycmVlYjkyTmxBSXZ4L2E4RnVoMVMxWXZwZDFuWGoranZISGQxL09nVy85OVdlZUJXNy8vK3JQbk45YkYyNTFtNHpWZlBlYTF4UGlQUDVkYXIrR0I4L3A5dGM2Wk5oZCtqcnhlNjAwMlcwY0QrUFlEakNPY2E3c2ZCenh6OFBUYWN0aDBuTWJFeStOQ1ZmQ3RzVjN6dHRmYzlvYXYzS1dQbisrLzZEN3ovKzFybzlvem5QNEpGL0FLYmoyOGloRC9LVDdnNEJRSHAvbldXUEJ2UFB2cmQvSG0zclBSclhBeFJuQzZ6ZkZKWUc4Z09KamordjkxSzVUazljRzFhczlxak9Jd1dGNGRFMjVkdUlPenZIZmI4NTJIaVZmSGpIZnRXclcwNit3N2kxVndXaXBXd3hRckQ3Rjl0bmxqWGFrMzFzTHI5YjVUTUVyN3Q2Mys3a3YzQnNiVTVvTDhGOXdyNi9mOC9kYkFKNS8yWE8wRzdrNGpYL2h3K25pTjJYWGV2ZDRiTjdUQ3kxaGhYT2VYdkRISDM5NjJkL3NZMnh4TGI0eUZCNEtCdzFaekdvVnpFcFkzeG92MWVoZWdVMjJPeE5yK1h0YzUrM29mVW04OGgxNzNCUE42bmExak5jdDM5NGZsZTg1Sy9jWTE2aHY3TUcrY2ZmSlB1YmU5UHV2aUcvdHlYWi9kZnM4NVc3OW5EYjErZitWNzlwSHZ2VTk1NHgybU4vWWQ5OGFlODNxTTNCdHpudThaYi9YRythVy81L24xRytza3JQdVRXcStYditkOWhUZnUxYjN4UFBMR21mcjZQdVkzbnZ2TlBmdDc5NVBYbjJIZjJLdnIrdjN5eHZsdHYyZE45K3Y0MXUrSmxkUWI5Ni9YZHlQZjg5ejJlOGJidkxGbnZEa08zM3UyeXh1LzFEOGhMck52UE5QM3JyMy8vci8ydS9pUkg3amwxYXVabkRMZitQcTM3RFF2SHlPTDBBQnNBNXJxREpmekdVcmhXVVBPT1d3TVJnbWxOaDZHMW8zYlZUTFU5WFpLWFVuZnIxK0NVMWlqUHlibVMxWGt0WFNMQ0FwRkZyV1NhRUdLWUMwcitWdFQxcWNWa1hZNEtZVkZZVXdsVlZtSm5PM2ZXLzBERUZuSm9rSXBndFVhZEVNMHZYVllxeG81K3ZVc1VBcWhVcXVtVnNXY2N5dTlWa1V0R3VNRktRcHJJUlVvUlJnNktBSXhDeHBCSzhWSzA4RG94dGNxRldLdUdLVnhIcHlwT0dNb3RhSjErN2xwWVMwWlN1T0pLSTFVR21RdkRTR2NvaUJLMnVDSzRyZ0lWalRiVGxISURUVlpyMUdyb0ZGb3E4bTE0YnhVeUZYUVJnak9NOCtOZ3hxQ29rcmpOWGlqRzE5RHdHa04wakllUlNXbmxwRmFwMGdKeHBnNDlJRjlaM21jSjI1c0kyZzdvNG01TnA1WWhkNGIzbis2SWRmS1Z6ODRvVzNsL1N1NEdRYXNVN3g0dkdEUVdLdFlFbmozM1Mycm92anNzeHVXVkJpT004LzJIbThibWRyYTlpeVBwOHA1RW00RGRGNnRTRVVqNVZjcC9PYmY5QzYzVjF1bXk0THRITS9lZlpkbHlTdzVjLzl3NW1rZkdBNDducC9PNkZ6WkRoMkg3WWJ6TkxPa2lBRGVhdjd1ejM2ZWIzejd5SFpvVzBpTURaRyt2ZTM0NUx1T3YvZUZPM2Fkd2RSS1FVQVpCTjJRR2E4eHFsWGQ1bExwck1XWk5ydW5xYzNadmxQTU1UWmhWbVhOK2cxWFd3MDZNWTZ0dkhkMUVNNWo0YjNiRFo5Nis0b1A3eS9zTjQyb3Z0MDJTa0V1bVJnTGh5RndpWkZwVm5SQkU3eFFpbWFhQzg2Qk5ZWlN3RnBGekJGdkxWWnJVcWs0YmRGYXNkOVk3czhqRDhlQ2R3cG5ISjk2WjgvbTRjempwWENlTW4wSHUxNVJzdVUwSnhTSzRBM1hGTGJlY2xrS29rMmJVeFJ5Z2ZzeDRReVVMRGdMKzhGUnF2RHNzQ0dXd3N2N2tYZXZkbno2clQyWFplSDU4Y0tZNFNGVlRPZDRNamljeXhSVjhFN3ozczJCTG95Y3BoWWRhd1dwRktSQzV4eXBGazVUYVFJRzNkNzdydE00MDNqQnVRb3BWN3hXVExsU0N1dzNoaTdBNlZLNVFtT01rRkxiVjRvcUlKVzNEd1BiT1JKVHF5aHBwU2hTS1ZWWWtxSklZZU1OTDA2RnF5N3cvbFBQOHVHSnpsbUVncUN3V3BGTFFhdDJSR2xUNllLQ2JFaFpvV3dsMTRxcUJtOFZjeTVZbjlIS0VFd2JwMHB0S0FhS3d6YlFkNXBYcDVsckZKdStDUkswdGhTbCtmNVA3TGc1TGN5eHN1dGM0NXBwUStjZFR3OERjNHhNYzI3aXN6R3gxRVF3QVNsQ3BURGxHWTFESzgxeFdraEYyQVpCWVVoRlVXdGx2L2NJaVJJTkdzT1VFNCtYQldjVVNobFN5blRPVWtTSXVUU3Vxb0pTMi82b3RTS1dpbGF3OFFhVU1NZktNUllHRkQvOG1YZjQ3THVSVjZlWmp4NUd4aVV5T0FOYVUwV0lPVEk0ajNXMjhleEZxQ0pjVXNZb3pYdTNHNmFZMlk4enhyUzlPcGFFeHVDTUlUakRFQUszKzhMRGRHbENUUlJMenVTYzBScXV0Y0tJWWRNWmRrUEhrZ3FQbHhtak5WcTMwOCs3eHVPMjFwS3JNQytKVW9UT2FheFJpRkpNS2E5Y1prM01CV05VTzFkUmxGeEJOOTV5a2RLcUwxU01NaGpUeEcwaWd0R09wU1JxcldqUkdLMnd0b2tuWWk0Zm4wbEdLNUpVa1BZWklvcVN5eXFpYWlodlNtMGZOYnF0STZQYis4OVM2TDJuVmlHdTNFaXRWSXNGbEdBQW96WEJXK2FZV1hKdDU1QnVlMmlqcGlubUpSTnp3YTNLR1JHMThnOGJwN1N0SVZuL3ZWVzByVFh0WGFoMlgzTXNhSzNvdmVVeUYyS3BkRmExdlZPRE5YcmxTMWE4TTFqZG5zTmJDd3FXSlRPbDNKNVJLMHB1bVU1RmNMckZCMGpsRWpPSUlqaERyUzNNczg1UUt5d3BZWXpndEdGSnJlenZiTnZydGRFcmQxS28waUtqNEExWlpLMHNWVXFXZGovUzN1Mm05NlFFcVN6VXF0REtVS1R0bDA0cnNqUW93V3FoU200Y1lqU2xOdXFiTXhwRE84TkZDcm9xbE5GazBTd3BOeGFKU05NQTVEYTIzbGxRdVhGMlJWTktKZFhLOHdzOHZmTHNkcDZVS3FvS05WZFZtMUxwNDJDeGpVL1Y1QlV2OERyeHlhY0dOMnh3VHJGTU04RzdSbUpXamVEOCtMaXdMSUt5UWxwVEY2MmtiVENWcGxpakJWY2ZaOUZWMXFoYkNHdVdwVFhFQW1hTkpaZGFNRFFVaVpYbVl0YWJOSzlSa0NvdEUxQ3JPcEhYY1dncnMxb05UclVGVXdGZEU3TEE5ZFpnblNZbWFZR1pBbXNDV1lRNWFvSUxLQm81R0wwcXBLc2w1Wm5nVEN2NzVZelN0cW5DSkNOcmJxR05hdVVnclVqSmtRdFlxMXM1WFF0V2R6aXIwS1l3ellJeGhsTGJBZVJjeThORXdEclZpT3ppeVhXaXhJcFNqcXVjMkRpTE1wWktJZWFFMFpYT09pNXpVMUFhQTVkcFFpdURNeTNQYVlvMjNiSmVjVkFGYlNvS2piT2F1Z1pDUzJ4d2czY0dJWDJzTWw1U1pwb1RiMTBIOW9NbnBvcjNCbXRCRzBXcGl0Tjg1blozNExBUDZBS25VK1k0WDNoeUNHd0hpeldLV2dKRlpVUlg5aUd3NlMxTHJLU1NVUXBTRmQ2KzJyUDFnUzk5OEpJZmZIL0xObXdvRlZMSkxESGluT1ptWjlZeWVrR2o2SUxCV00wY0M0L0htZC94bXo3QjcvNW5Qc3YxZnN1dWR6ejkwZC9COWZ2ZlQwb2pLUjZweXVMTlcrUjB4SWFLVVZ1UW5sSXZDQXNoZU1nWC90di93ditRODhPUnE1dUFTRWJoR1RyRHZuZTgrK1NXYzZ3b2FVci9PUytnRzM5M2ljS210eGlhR0dZcFF1ODZrRXdxa1BhQ0tvWE9PNVFKcENLTWk0QVVocURYb050enZWVkFva3JtUnovemhOdjlsbSsrT0hLOTYraGNDM1RtREp2Z21lSkNUcFhyWGFEaVdhSnFIRlpBcWlYWGhGRWFvMDJiQ3lJWTE5TXJ4L1BqQlcwYyt6Q1FTMlhYQjRhTjRyRExVTm9HZHJYdENENWpYbzNjSEhvNnIrbWNabU43N3VlUnk1VFlkcUZ0aUxXdzJWazBGaTJDTm9FNVpqYTlJUmpUQXJTZzJRYkhaVnB3UnZqVTB6My9sUi8vREtYQVY1OGZlWGszc1pUQ2s4T1daN2RicUUwQXRlc21MaVhqbldlMzBleTJBeThmTThFYVJEU1hlR0hyQTA1N3ByeUFLSklrdEZMa0pDaXRWcTZzUVF2a1dsQktjNGtUcFNqZU9nd0l3cTdMS0szUkZEcG5xTldTYTJIS0l6ZTd3RlhwT0UwajNqWDNBYWNhSDNTcWhad3JXbVUydmFkempxZFhQY2M1WVoxcUJIazdrR3RUaHFaVWNOb1JnZ1ZkNlBUQWtoUEg1VUpuTy9aOWh6ZUdEKzVQakhHa3R3Rm5QY3EwUXpPbGpOYWF6cGhXMmdUVVZqR0VBS2J3TUkyTVkyYWc0N052SGZqYVJ3K0FZSU5GcVhZSVBqOWZlT3Q2andtRnUvc0h2TGNNeHVPZFlvbVI2OTJlSWowbHQzMXBPd3JhT0RiZWZZd3ZHVjlSeWpLT0U3dG5qcmUyVjd4NFBER1hTZ2llOHpqejZuaG0xeldlKzNGYzhDNVFwSENlTGxoajJYY0JwVnNDdnU4Q1U0eVVxdGgyanRPY2VIazg4NG1iUGM5dXQzeTZWRTZubVZlUEY1SlVidnJBVWlNcFYzcmIwUWZIYVY0WWw4UXpOTVpxTm9Pbld5STMrNDVTQkdjTlNsZVduSkJzMkhhZVJNWG93RlBsdVZ5YVU0VTJtbEl5dGNLK0QrUlNtVk5DVk9YZDNaWjNielpVcFZoS1Frb0xVSEt1RE1HaE5CUkpURXRHc21DdHdSclQ2Q2tWSEMyNXJ5SXJkUXNxRlpGQzd4d0t6WklUU2xjMHRvbkthaE9XV08yWVMyWmNKcHd5YTlsWTRZeGxqZ2x2R2c1Y1JHR2N3UnBOTFlWVU1ockR4bnR3RWFVc2NXbGdUdkR0WjRJTnBGcW9VdWw4NEhLWnVYOFlVVm94ZElaNWFTSVphTHhRVTRTTkZUWmFTS2tnQWh2clFGV01VbXc3dzdSa0NoVXBpbW5KQk1jYW5MWmdKMmFoMTZidFdWcEFNb3MwZHdGUjBLc21RUWlBdHBXNVZuclQ2UDkrNkJrMlBiVmt4aVhUQmN0aEUraWNwd2lVWEJ1VnlMYmdLUzR0V1FsR2syb0cxUktHbUJKS3JVRzd0UDBpQk5jRVFRS3BGcVlsMFhuTG5DcExTblJlWTVURmFFMHVHV01zMXJRa3JxNEMxMmx1cFdpeFF0OFpPcTBaNHdnbDRyVG1FaXRWS3Q0VVJDbXFVWFJHRWJOUVNtYndDdVVOTVZWU1REamZ3Q2VSQmtybEtxZ2lHSzh3WGtoTGF2R1ZTS3M4S3RnT0dsVXIvZURwK3gxV0Y2YWxrbXFqTTZsMDV2cXFZN1BwZUh3NDQ0T2hHenFVMHZLUEJZc3R3Z2FxNElOak8yeDV1dDlpTjQ1YUNvUGIwUG1CV3VjVndIUzg5d1B2c050MFNDNmdiZHRjVFdGekdEQitJT2RDVFJFbHVxbWsxa2cvcDBnVktGSnhXaU1DVTVvL3pwcHFWUVNub1lJb1FTa3dtTlhtb0IxOGd1Qk0zN2gyS2xGcndkdUJYQ0k1VjZ5MkZETEd0SWkwMWhZTTNkMGRpV2trcGNMR091Ymx3djM5bWRQOWdxMFZsUXF4Wkh5djJIUWVZd014QzR0cVdWdFFGdkZ0RVZ0cjZGd0FhWk45eVdleUdBYlhFZllkVTF3WTQ5eFVXa3RpY0lwaDB5TVVWRmh3dG0yV1JyVkY3WnhuR3VPS3pGckVRRTJXTElJUHZ2SHBkY2Q1bk9pQ3hibEF6dTJ3Njd1Vjc1V0ViVGMwYnFZMWRFNDE0cXRVdk9zcFJjaXBFSHpMdUxJME1jd29HVzlhY0N1MXZXdnZZVW1GbU9EcHpjQ3VjMXlXZ2d0d2UraFlZbUdLUXBLRncrQjQrekFnR2g3R2tVb0xxbndJQ0lJM2pwaG5sRklFdDhWYlRUQUdxd3FwR0lwb09pcTd6bkozT3JFZjdNcXg4OXlmamsyaDFudFNiblc0M2l2MnhsTkZXcUJnd0NxTjNzQmYvUnVmNHovOXFWL2xVKzlkOGR0LytEMyt5SENGSEo0d3Z2b21RUXRxL0lDWHl4WVZPaXdYWERpZzNBSEpGelFMeCsyNzVBbklpdXVONDUzYkRTbUJZTm4yam1rY0djY0x2L0hkSFhmSDB0U2VkZE40Y0RVejU4STBGc1pVMlcwTlFRdFZFcWVZRWRHVTFFcUJ1OTVUVk9MR093YmZjWjR6U3kxTTg0eEpzTnQxbEd3SlFmT0pKMWQ4Ni9rSnB6V0h3YmZBc3Jlb2MwUWtzZkdPZnRjVXFWWUxlbWNZcDhTOFpLejFXR05SU3ZDbTR6SlBGS2s4MlIwK1ZyMFB3V054Rk5VeStrRnZlWEt3TEZOaEhDOTRvL0hEbG5tcUtBOWJ0MlZPQlIvZ25jMkcrOVBNM2NPTTh4clhDZGRoZ3hQSXFpSDNTc0JiWWROMXpLa3l4OFE0ejd4N3UrRTNmT0laN3h3R1RuUGs3MzNsMjB4ejVPbSt4NFE5Mno1UVMwR0tFQmR3cnVmaFB2SmtHT2lkd2lqTjFGKzRUQ05Yd3c1dEhZTXo5Q1pnazJyS1VRSmpTdXc2MnhCQ1NVaHRRWlpSZ1ZJRTczV2pSdFRHUDdyYWRKU1ZpWDJ6M1pOcW9pUlBsY0JTTDNqdnVmVURUalhCMjV3U1lnbzdyeG5zamprdE9ETmhiY0tZTGZzaElFUnU5dGNvclVFY3hpakdKVGFuQUYwUVlBaWF2bmgyd2JQVXhHSFQwVmxMa1VndW9WVTZuTWE1RnVnZ0Jvb2lwaGFrWG0wQ04vc3Q4eEtwU3RQN0srN2RTS290T2Z6MHN5dnV4NlVoMzg1eXRkMlFVdU5NSG9LakRCM250S0NOeGxtRHdiVUtpbkhVM0pBbFo1c0ppTUdRVlVJcmcxZU94OHRDWnoyU0ZTa25ycmZOTGVBMFJaTFd2SHU5WmU4RHgzbkNLTS9OZHNzc2laUzdoclNzQVZaTWhTbTFZcWJXZ3JLSzNjWXpMWm43YWVSS2UxSVdyanJIN1hEZ2tndWx3cFhwbU9OQ3dKQjFaYThkKytDYUdGcFlIVGtLTi9zTjAxSndTclZETjNkMG5jZnF4cTNXcHJMdk83WldjWnpTeWlQeldLMHhTc2k2RXF4RjJ5WjBIRUpZYlk0cXNRcEtDVVB2MEFxQ3R4aHR1ZGhFcVFxbld6Vm5TczJ5eGlsTldnTWNjYllCRGl0SzVJeEZsR1p2QWtZMVBqQWFLZ1pWR25MV1YwMW5WaXNXdlpaYVYzR3BNM3BGMkZybFRJRGdXbEJZYStOWFZuRklCdHRaV0FWd05XZWNNVXhKSTFVd0l2emc5Ny9GNGJBbmxVSVhOTm82K21HRGNwNWxXUmpIbWJBSzhaWWxFbVBDT012UTlUamJlSThwTmdzanJVcXpqRk90OG1DVWNKb2l5NXc0N0pvN2c5R0dsSE56MWpDT2xHYnVINCtjcHNMUWVicGdzTnF5SFFKRlYzN2xGMytkbDgrUGJHLzNEVEcxam0wZldsd1RDNzB6Qkt0dzN1R1VnYTBDTFNnUkhxY1pyVFNkTll4R0NNN2hqVnBkVkRSRk5ERm5MSldOQ1d6N0RxMWhteXU1dGdTbjZ5elRHRW5Kc0Jrc3hpaEtxdHhlNzdoNTV6T01VOEZvUlRjMHNWWGZEZGl3UTlCMFRwR21tZU00a2xKbG5pZjZ2bVBvUFMvdkg5YjUxQk84cFNEVXJEQ3FKWEpGU1JObTZsWmFNVDZ3MlRTSGc0ZkhtWm9ibDNFZXovaTFJdnlWcjMySDQ5Mk1VWnJ0ME94eU5BNld5TlZ1WU5nTTNOMmRFTkVNdzdBaXRtOEdpd0pWVlZMS0xmTVJUVUh3MGlCdjd4ek9LZWFwbGFJZkg0Lzg2VC81dS9qamYvaTM4cDBQNytnNlR4TEZraU83VFlmWkhyait6R2M0dlBVdThUd0NHZXN0aWdiUlZ5cFNOVGt0NUR3M2dRU1ZuQlVsYTZpWklna1U5TDdEbXNaK0VGMHd3ZU85VzRtMUxTZ3FxWldSSURidlJ4ckpXV3REbFlJQ0xwZUo1eTlmTUUwVHRTUnVOZ01wSlo1LzlJclQvWkh4OFlFdmZlazdmUGlkRjd6NjRBVmYvOFozdUgvNWdIWndjek8wb000VWxHaXNGb0pqM2RBc1N4clJTck4xZmczK01ucjFaRVRCYmhpYUFrMWJqTk1OalpTQzFlQ05RMUhSYUtwclZpS0ZES1hnbkVkVVFxbmNVTUVWSGs4cG9kQVlBNzBQNUp4STJuQ0pDeHNYbU92Y2JISUlCTzlRcWhDYzU1SnpzL1RRa0dvaXhVcmZoelorR1lKcHpJZGNHNktyZE9IbXF1UFE5ZVJjQ0VweFNRdkhNZEk1ejY2M21LV2dzRnptaURFR3FXMmpxeXZEeVNpRlFWWkxHTTFnTkRFcmF0YWtsSWxGV1BMTTk3K3pReXRZRnNFWXhiejZSclpTSFF4RHh6Z2xIc2VaM2REUmgxVlZocEJVVTdtbFdsbGk1dmw5NGRlL2RlYW4vdWEzVUUrZjh0LzY4ZDlEZkh5QldyNkpldm1QaVBVSlpmc3VqNDhqd2NPelQzNGFJeGxaN3BGd2piWWJyTkdjeDBTcHduNnpaMGt6TlNlQzY0bFoxb09na0V2RXFrWmVOMWJoYStBc0l6a21kTzZ3WHBOSTJGSklzM0FaSzR1Q29ZdDBvWlg3WDQwVGMwN2NISG9HTy9EeThjSzhDTGViUGE0cmZQM0RWNmhzY1VHUlJiamU5Y1JVc1llQng4Y1JieFdkYTZXWXkzU2hEd00zbXkyUCt0alVtVmhLS2FnMWlYQ2lLS1dWSXA0Y0RnM0JXSnFhZXN3TGc5SG9JcHluaGV0OXorTTRvMFY0ZXRqeU1KMndWdWkwNFh5WndEVEMvdFByUUttTzNvTXpFSlJqNTMzTDZGVVRBOVNpbWFVaEZwOThzdVZIM24vQ2VhbDg2YU43WHA0dU9PWG9Ca3ZuUGNiWlpxVlRCYTBOMTF2UE9DZmV1ZEk4M1hxbUpUR256TTRQWEM2Um5DTTN3NGI3K1V5cEdpV0d1cGJOdEJGTzg4UlZ2OEZyaHcrV0pUZmxjYTJhUTlmUk84UEw0NFVzTTczcnFhVjVmM3JieXNORlpheldhTDFoWEdZTW5xaWIyMEt1WUxWall6d293UmxMYnpxR3pyUFV6SklpVHc5YkRLMWNHRUlneGtKblF5dnRZY2txTWNXSlEzOU5jUXZ4VXJGS2NWa1c5cHN0SlJlbTNOYldFaE5qR3JuWmIxa1N4RkpSR29JMURhbFJZTVdoUlRpRW5tbWV1YnRNdlAvc2lybFVjaTRrbVRtT2lwM3ZpRXRrWE12RXFDWVNSQlNidmdOVnlUblQyWVlLRzVxWG8vTWFxWlhPV1phbEJlRFdHSHJ2ZVhXT0tGMTV0aHZvcmVJaWlzZXhvR3RDSzR2Umlsb0xieDAyS0sySlN5WlhZZkNHeDNFbXAwTG5BMU9KR0szeDJyRHpnVGtsTG1NaU9NTnBudGw0ejdQdEFBcE80OEk1UVRjWXZOWGt1ZEFieFp3S3Jnc29WVGxQQ3pVTHZkY0U0MWh5UVdsRkh6VFA3NC9rM0lLNVVqVkRiMGpTemhXbEMxcFhyRFNybTh1OEVMQnJTVTh6ejRsRDE3TzR5bkdjQ2Q3Z3RHbjd1bEowem4wYzBKdTF6SnBycGcrT0JjRTRoYmNPRVVHcU5Bc24zWmpySllOMmxyNXJYbnhTRzQzSUtZZllTaXlnbFdFSWxoUWJJVnl0ZEN4bjF1cFFiallxem5XckVLU3U1VklGdGJMTWljMm1veURrV2lrb05uMUFLL2pnZzFmOHFULytvL3pKZis2ZjRmNFNVWXRDOXdQSkdJd09iSFk5MklENG50dmJQYzVhSGg0ZnFkVnlPQnl3VmxpV3dqeGxyRlVNZzBKcFR5bXJYWmJLTFBQSU5DYzJteTFkNkZFb3FxUVdlNFNBczVibkg5M3g0WWVQaURSeDdHNi80M0RWY1o0bmZ1Rm5mb0gvOEgvN2YrYkxYL3lBVDN6cUxVcXFrQ3VpRllPM2JEckh2Q1NtMkdnc2cvY2ZrL29HNXh2U3E4QWJRMVZDcW0xdXg5S0l3dGJRcUZoTFl1ZzhoOTJPR0RQTDFCSXJWY0ZaaGJXV2xDdUM0Kzdod20vOXJaL2xYL21YL3hqUFg1MXhYUk8ybENWaDl4dVFBVFAwSEo3ZXNyKytRUWZQOFhFaExwVytiMHpFV0FwU1o1enI4TllqU3FGVTg4K2M1anNlamlkcUxqeDdzaU5zT2g3dUwwakt1Rm81UFQ3d25XKy9RT1pFbmlhVUZtNXZOdnlWLy9obitWdC82L040YTVzMWtxSWxDTHFOUytoNnJyWTlEOGRDVEJtMTB2enNtK1JZbzVyWG1Bc08wWTBIbDR0cS9reEtrVlA2THI4dlpiNzg5US81aGM5OWlSZDNKNncxOUpzT0h3dzJEcGo3RXcvZitJRHRiL2grbm43ZjkxTXU5MWhqcU1vUlU2U21wZkY5dkNiSHpEejdwc2hIc0taeHFuSnNaUVhKellnV0N0cGZjM2x4SkpjVHhubVVtR2IxWW4yenV0VmduRVByR1NrTE5TYVdjVUZiUXhXaHhCbnZQVXZTWE5BOGVlY1QzSHp5WFRhN1FFbVYzejlHTnQ1d3Zqdng1UzkvazgvOTNDL3h5My8zSC9JUGYvbkxITzlHRGs4NmpBT2xYeTg0S0NaUnFRUVQwTm9TY3liRmdrTG9yVWVVY05nT1RiSmZJeldDdDRHVUl6a1dTb2tZWDNEZW9xMUNwS0RFWXBVaXhsWnV0SjNHMjZaNDg2N243dkVNVnFOVVpZeVJraXVGUk9naGFNR3JRTEthU2tLcnBueWRaY1pvUjlJSkVZdjN2aG1mSzRPMVRhV2NxbUIxNHc1NjZ6bjBXMUphU0xGTm1pS2xLVmk3TFc5Zjc1am1NNWVsVUdpY25Wb2J2MVBWaURVZW84QlpLRFZpVlljb1N4ZjRXQ1p4am9uakpUZWtNZ2x6Yk9iS01XVTZDeW1sZGZOYTFmZU5xRXFSek9NOHMzY0R5aGh5clV3NWMxbWFUWklMd3BpRjUxVCs4NS81UFAvTmYvVUIzSTdUOHhPUDQ1WnUyS0FUZk9kNVpHTm1idDlLYUZNcDJyZHhWSTVSMmwzbUttdHdyMGc1dGxKL2hNMEFoNkhqMWZGTVVaVXB6UXkySitaSVpXa0hRVnpRb1NQR1FqQWUxd3RkcCtpMFlkczVsaEo1bUN1WFpVSTFjZ0ZVd3p6RHpWUFB4c1BYWGp4Z2JNY25iN1pjNHBGY0MxNFpVbHF3ZGtQZmRZak0xQXhLTEVhM29FcUZnRktHYVU0Y05sc1dJcGRwd3JzT1RGb045K0ZTTGxqYlZQNTZSY3BTcVhUS1lsQ2txRWdwNHpzWXRodkcyRE11QzUxcEt2cFNGVGxuK3JDV1JlbW9wYktzZ2h2UjRLMGpwN1p1UHZWMGFPYkJVdmlWYjl6eDRlTTluN2k1SmxpRGNncWxMZWQ1UVUwSnYzSS9neEkyMXoyTFZMYlk5YUFUc2dpSFB2Qyt1K1grZkVHcTRzcHZlVmd1YU9Vd2FMSUluWE1jd29iTE1xTlllVzVWcURSS3hiNzNUREd4NzRlV1VJbVFWMTdWNDJVaHhvS3pCbTBFWnh6WDI4QjNYdHlocldiYkJXNkhqam5HMWdCQWc1UlcxZGlFd0ZUbXhqM1RsZk55WXN0QTBjMEROcVZHOThBck5wc2RPaW5tZVNKU0NNNVN5WnpIbVNHRXhuZEdNVTBMYzQ0b0hEa2FySzM0Mmh3V3RJWDc0NldSNWt0RWRBdUtxZzJJRW1vVzNqcHN1WnNXTEEzaE9jMU4wYXAxWmQ4SE9oZTR6QXVuWlNhSncyckxHQmVjTGxnYldrSllFcVZtZWplUVZjRWE0WG9iVU1ZMDlJUG10L3JxbUhDNjh2UVFjRTV4WEpxUzFockZrakl2N3M2a1d1bThJempEZVM1VVVYU3V1U1VFWXhpOCs5aWYwRnRQVEprNVZ3NjdnZDU3N3NlRlo3dWUzL2pPaGxlN3lIZU9KNXcydkgwMU1LVUZuUlFiNzBsRk9HeTJHTlY0WnFXMnFvclJMVkNjVndQd1VncEtXVkpPT0ZOSXJRUEFxdGp2V3lXanM1em41bTNhQjhmREtaTlVaZE03RHJ1ZUtiY3lyVVZ4ZjJyMktkN1o1dnRiYU5aa1ZjaXlCbnFkeHhyZEZQbEtjTjVpcERtTHpGSkpxZElGaTlVS293cFJFbGtLcVZTcUVuclhhQmhGRlRxckVRVXhWV29wRklFNXRWSjNMVE4yUlkybEpJd0JIeHl2VGpQenc0bk9PMUpwNWMxT1BNWWFsTlY4OU9yTTE3NzBJY2N4WVVMUGRwOElBVlRXbkQvTXZLcUZoMFg0L2g5K2wzZmZmb2Z6ODFmRVVtSFpZa3pHdXFGNThDNkdNVUpKZ3ZOTm5sSktibno5R2tuSGwyU3phNzdMTmFFd1pLdHhma3RuRWxkRGJNbVZ6cWg4NHZUU2NIZFNmTjl2L3EzODYvK3J0L24zLzhLL3h5Lyt6T2Q0OHU0ek9tZXB1YW15WTZHWnVpdE5vUkxUUWxVS0pYcjFxQ3dmY3hJcmlxRnYzKytjYTN6Sm5GcGNRZ3R3QlZET1FseUlTK1MwekF4OTROQUhUbk5rWGlLblplRnIzN3puNS83ZVAwSlVLLzhxMWJpT2grc0hyb01IYnpsKzh5dElWZmduMXp6NzlQc2NldUh1K1FQSzdUR21zQ3d6bHdLSGZiL3FFeUNYeXVYOGl2UDVUQ21Wdkd5Wkh6TVAzL3dRY3F2UzlwM254Zk1IUEpidE1IQjNuSGoxOG9HWGR4ZGlFVXlXaGp4YXpSd1RseVh4OFBqSXcvMExqQUhuS2txVmo1VSsvMWl3S0xVaXRVSDEzaGlVS0thNUdWTzI3TGRaUTRCbXY5L3pOMzdtYy96RVQvMENJaFpuTFoxWGFBZTNUL1o4OWhQdjhMdC83UHQ1TDQ3TXNYRDExS01ldjBiS2luRThnU1NlM2V6SnF1UERsMmNPaDhEVnJwbFBXd3JLZXZLVUlXV3FVZFFBOXVvdGRQY1c5Ly9nbDNqMTVTK1FRMkRiOXlDd1VGRXVZS3pIZDVhcWhlNndiZnliL1laT1paYmpjM2g0Ukt3bkxqRG1Tbm5zc1ViUjlUc3l1aUZpK3l1Nnc0SGY4UWQrSjMvZ2ovOSs0bmptYzcvNHEveTF2L3pYK0UvK3lzL3k0WWN6Nzc2M3hRYlhDSmNxZit3RlZrdHFwUnJUOUxGVzAyd05CSUsyaUM0c3FXQjB4eEl6V2xtVUZhcG9hcTBFYTVpVzJzUU9yckR0UEdYVVBMOVB2SHZyQ2NZd1RaRk43L0RPTWM0TFM1bm83UWFEb0FYR0ZOY01QeUFLY20wSTdaSXkxb0picllWYVJ3U0RORll1WnVVZkZSR3NObHh2ZTJKZW1NZUU2TmJ0b0JUaGR0dno3R3JMZVZsNGZob3h4aE9NSnFiRTRCeldCdEt5VU92U2VKTFZNaTR6M2dyVFBKR0twbk9PNHhMeEhwNWVXYmE5NWR2MzUxWU82L3JWTDFLaGRjYjd4bFdabHdSS00vVE5kRGJtUW5jdDdMMWpQRi93d0dKVUU5dXNCMDVIWlJ3WFlzeTRmbUJ4bjJBMjF4aXI2RGNiaHF0S25DelA3ODVjYngwdURKeW54R0FWNHpsU0JJTFZ6UE9FcXA2NkVyNlhxWENaWno1eGM4VjVuSmhqWm5DZXVFekVrbmkyUCtDOTUvN3hFYXNOVnJIYVVWU3Vlb2Myd3J3SWMxRmM3UjNYNGpoZDJ2aE1VK2J0NndOUHJnMGZ2RG9oT0t4V1BGd1dhczJJZ2lJR3JTeWxacXdYY25SNGF4dDcxbm0wYnhZb05XdUtGR0p1bGxSRjRETFBiSHRMcmhtRnhkSUVNcUlzdFRSaU9yVmlIZXdKSE1jRnBRVW5CbDAwWGVjNFRwRTV4dFZrVnBNWGcwR3o2eXlKekQ0RWptUGgrZW1Cd1Z2MnZlT3d0K3o2bnBnejMzejUwSHpWT29NM3JuVjBzckRrVEIrNkpqNUlDVzBzeG1pMEVVUzNBMitKQzlvSFJBdktWQ3E1bVdJYno1Z0tuWEhObGtReW03Q2gxb0pUbGlTTmo2UlFUSFBpSENPRDl6elplV0lwbk9ZUnJ4MUdPVTRyWW1DTW92SFk5Y2ZJVDB5SjNhWm50d2tZN1puclRKM1BtSS8xaUFhckhjWUxTaTFjRHozZlVvOHNTNlczanNzeXMyVEJHb1gzZ1ZRbnZQRUVIWmpMdVNGM3l1SzlZa21SYmU5Yjl3d0J5VzBPN1llT1VqVkZLb1BUNU56NHFNRTc3bytQSUpxK2Q2dFZUR2tpUEJRdlR5TnYzMjY0Mm0xNE9JNEVVK2xDeHlVMkVjZnp5NFhnTlp2UW9Vc2xUak5kMzdFZkJsUXRMWkMwbWpwcmROVW9hZGxBRnp5MVpHSnNGSU5xQ3IxdCs5T2NGbTVxeisxaFlCc0x6eC9HSnNMVG11TVNpVGsxTVdPdHEralBrSTFHNWNLMHhMWXJyU0tKeG9WdkZsK3hDQklqaXNvMzc4NjhmTGp3M3JNcm5oeDZIazVUSzNrYTB6aHVxdUNjNGRuTmpyNXJISzhYOXljcWhaME5MTXVDVXdyckhGT0t2SG80TnFxT04rUTZjaG9MU2xXMm5XSFhCUTU5MThTU05Oc1laL1hLcjY4b0pmVGVNbzR6eHlraHE0QWo1U2Jrc1JveUZlMGFaOXhKVXhHbjJNUXF4clJ1UmxvcW9qVmJiNm1paUxseHU1MjJUZUdjQzdFMHIrSXFoU0lWSDB5amx0VFcvU29WUVJ0RjV6MHhsa2JiZWtNUnE2UUZIdXAxQUExc1FxTkhUV21CV1dHZDV5Zi8xaGY0NnovNUR4dGxaUnQ0OW1UUDFhN2o1bkRGKzUrODVaTy80Um1mR0FMVEY3L0sxKy92MkYxdEdlb1pkWG9GdmtPN2U4cTQ4TkhMQzExdzdEYUdxRFMyQ1NCQVdReUZXa2VLR0dKVjFDS0UwRkcxSnlLVW1uSFNlUG56T0hPYUVyVTZuS2xjeGcrNGV1ZEgrVGYrM2Y4Wi82ZC81eS95Vi8ram4yTGVYN0hwTzBLdW5PT0NjNjRKVVpvcW9ZbE9hbW52VTJ1VUVzNVQ1VHhIY2k2OGRiT2o5NTZ5SkU2NW9KWFFlOE5TaGVQcGhNS1NpakNsUkZHRlVsdnlGWnhsbkNLYnZ1UHpYL3dPUC84clgyVTdkQVRYQkU5WlI5NiszZkRPMDZmY1Bqbnc3R2JMSjk4NThFbFYrZnhYdnNqVkozZDgzdy84QU9kWFh5Zm0yTHErTEltaXRuaVRrZFNzZkpiN2x6aHIrZWEzTHJ6NDhrcys4L1pUUWpCODhkc2Y4c0hMQzZmSGlhOTkvUTZSU3FtWjV5OU81SlF4MWlBNk1TNEZyeFMydW1adFZwdFg1WGxNM0w4OFlhMUQ2N1l1LzdGZ1VXdkZPRTQ4djFNOGUzYlYzT3hGV0hLaDBySmxhMXBBVTJwaHFZWHpuSmpuaWpXWk9SVXVNOHlwOEd0ZnV2Q1Q1UVArSHovOXkvd3JmL3AzOGtkM0I5UTdQMDcxTDBtUFg2RVBHL3JEMi9TOTUrSEZFU09aTG9UR1hSd2p0aVNNYll1c2Q1NGFGMmFsOFBvSmczSjg2OFVydnZHMUZ3dzNWemg5NFdZM29LeENaTVFDdzc2SDBQSHErVVBqYTIyMjdKOXV1SDMzaG5jMmp1WCtpQ21aaDhzRjRVU3B3bGsreEdpRDZReW5pK2VrTzU3cmdiQjl3dUhKZS95VzMvdTcrS0VmKzQzOC9qLytoL20vL3djL3dkLzd5WitIYmVMSlcwOGJieTludEZOc2ZGaVY0WldVbThHTnRZMlBJelZUVlVXYlJneGZVc2I3d0xEeDVKeFJJcTB0bFc2bGdaSTF4anNPVzhkNU9wT2p3UmpOVWhKZWEySmFtRk9oRnNFR1FjUXdwZ2xyM1dvVHNIWWZrZmIvcXE3VW91bGNRRkRFTklPRlFtRkpFV2ZEaW5ZVTNyN3BpVEh4Nm5oWmlicVYvU1lRaHNERGVlUTdkMGVXWERERzRJM25kSm5wUXB0SFhiRE1LVkh5UXJDV0ZNR1pEVUptWGthODZ2akU3VFh5ZU9FeUp6N3hkTTgwUjRJeFZHUElsYldUQ216NkRsSENPRVlxQ3VjTXhFVFIwSWVlNHlXeThaNXRDSXp6dWJWbm13MjFGalk5NUFqamxLbTZaN01KeUViempqYXd2OFlvemFmZkt0eGRGRlZyVEQrZ0hBU25VVnBqYlVPT3A2V3c2emNZcFFtcXcxcU5JWE1aSy9NMk13eUdNVlpRcmRYWEx1d29wYkNrek5CMXhOaFF1TkFiVWltVUlweFR3cW5HS1MxckVML3RETTUwYlB2TXN5dlA0Nm1WaFQ5eGU4T0x4M3N1ODRMempyUmtrSVhMa2xCYUUzd0w4NDFycUlDM0hURmVjTHFpdmFjc3dxdmp5QkFzZmxYbGwxSmJpMDZ0VU01U2MwTVZoZFp1VDlPOEw0MVNZQmEydldXOGFENDZYdGh2R2psK25qT25aYVpVZ3pYQ0pnU3NEcnc2bnpqbUNhME5HKy80ek50WE9BT1BsNW12Zi9TS2VSRTBtaWViVnZJOEprdE1jTlg3aHVpbDFtN01Xclc2SG1peTBzd3BJN2tSLzYwenFLeXBCY1l4Y2RnNmh1QVk0MFNVeHBQT0piSG9STTZaaTE3UVJoSHdLNEZOc1N5RndiWE9PSE5NdUhWZGRsWWpXVEhOa2MzVmdET2VxbUhPQzJPYUVJU3FFbFdFYmREVTFNeTBEUXFyTFNuVGZGbE5SRnVQTjU2YjdZNVVaa1E2dExpbXNLMkNWNG5nRlVGNzVta2tsdHJRSnhUYTlLME5JZ2FSVEV3WmE4QWJUMGxRYXFIdkxWS2FxckdhSnI3YkRvRnBLWGpia2pTcHF2SEdhaVZZeHhLRjdVWklkVTI0UXVGbTIvSHEvb3pLaXFsRXBGU2NEamhmY1ZwUlZtKzRVbXZqWUplRzdwUW9uT2VGM1BkNFl4aVgxbUxNbXViU0lEUWh3ZU9ZeVBuQzllQzUzUWJtMGx3Q1RLbzQxWndFcXJUMnNrNVhncklNd1NGYXNkVGFIQ3FnVVpsRVZrL0J5T2tTMFJoMlE4ODRKWDd0cXgvUjk1cXNLdDQ1bGt2aU9DL2M3Qm92ZEV5WldCMDF0bkt3MWxCVmF6MXBqRVViMC9pOWtqQkc0WDNYT3J5VUdhVU51Mkhnc0F1UU0wTVN2SU1wenN3NW9kZG1FOGRwWEdrSUR1ZDBRM1RST0szWmRMNjFySnlhTTRhU1JDcVZhVW10czVVTDFGeEFWN0p1Q2I0M2JaMFlMUmdGY2Nrcmw3OFpMZWZha25qblREUGxyb1ZhV2hjanBjM3EyaUdJRVRyVGxNeHpLb2lxaUJLOHFpc1FaSmxUeGloTEh3S1h1UEJ3bmpqTkM2WEFhWXBVcWZUbm1SZlBUMHl4S1p5SDN2UGtlc09QLzlqMzhVZCsxdy93VHVoNW5pNjg5NGxiYm04NjVrdGluQ0l2N21hV1hObHNBeGhGTGdxOWNoTlJEZjAzYms5Tm1WS2JkN0NxaHM1M1dCV0pZNk92S2V2UWRvOExpWGthVVJqNjhraCs5YXZVZDM2QS8rNi8rVC9ocmZmZjV5LytoWCtmdWszc056ZElxZWlneU91ZVI5WGtuRllMcW9vMnphT3hzdzVDTTJDZWxvU1NKc2ExU2xpazRvMkRtcWxaTUxaUWNzWjdRNmQ3NGxKWmxvS3l1cEhLdEpCVDVESm5qdU1SUVZxcllJUVhINTc1Ty9NSHhFWFk5bkQ5Wk1mdit1MC95Qi85dzUrbWYyWDQrdGZ2ZWZyV0RzNm5CZ0FFeDVJTjg1U3BjeUhzQjI3ZSt6Nis4TTNFOU9IbmNWWDRmLzd0ZjhpdmZ1R2JmUDBicjNnOHBtWWJGVnVwdlhQZ1hITnY4RmJUZWMrdTkzZ1B6aHFTV0k0NnNnbUJuZC95d1h6R2RUQk9JeW1saiswSE5YQzc2ZHh2K1pmKytkLzIrN1FCSHhRdlA3em5wMzdxODJSZDBib1JtNDF1cGVCY2hlTWxjcGtxV3B2dituNVZRRmxDTU93SHpkMTk0VC81K1c5eUZSYit3RC83Vy9DSEt5VGVNK3l1VmxsOFJyUXdiQzFEMzNFWksvZVBGNVRSaE00MzNZMXVDSWZwdCtqK1haNDh2ZVl2L0svL1EvNnR2L2pUL01NdmZJTy84VGYvRVQvejk3L0kzLy9sTC9BTHYvbzFQdmZySC9HNVgzL09OMTg5Y2g1SGlBbVhabzdQWC9IaTIyZDBmOFh1clJ0VXVqUXpYelB3OHVGQ0xyQy9QdEIzbm5LZWlkUElkSHFnbDBjR08vTGk1WkVQWGx6NDdBLy9DSC95VC84eFB2bitMYi93TS8rQWp6NTZSZC8zcEZ6SkphTkVvUXlrbXNrbDQxNFRkVXRFVkRNbWJTVDZabEE5eFFWdlZPTzNLTWVTS3hYQmU0K3pmR3hIMEpzMnVZdk9MWllzelhiSW1sWmVyN1NOc0VwaWNIMHJpUWtFMDVGTFpZcnptaUcwMHB1enZ0bk9xSFkvamI3UjdGUzBVcVFDOTZmbWFEYjBudXR0ejVJWHhxV2hvY2RwUXVuS1B2U3R0WlJhTnlzcXVTaFNMbzNQWkR1VUxWaXJDS2FoU05ZRWpKTlZzYmRoMkhqdUwrZlZ6VWhqTUlUUVZJZ2lDcW1sT2ZSajBNb1E0Mm9icEpzWmJwVksxdzFNU3lLVnhrZnlxNWdxeGNUdDlZWS85Yy8vTWJUSzNIMzBWVXBPRExzcmFqeWp4anMyWHJPLzJ0TjNscW9VMVY1anhQT2Yvc1JQOHRWdjNIRzk2K2hEb09zTnpqaU94d1ZyTEYwSW5DNFhyR3RLN0NvRmF4UzU1cWFZWDVGYXBRbzNod08rMTF6bXlPTWxZVlJsRTFwYnNxcWdTQ1psd1JyTHU4OE9QSnd2dkRwT0tBZmJyaWZtUkNvWnFzSXFSVjZ0ZWpiQnQ0Tlo2OFo1bTF0bmtNdmN5dmxLSzVEVjBpaDR0SkpHS0o5YkQyZG5EWGV2anVSU1dRVHVMMDFWdmN3UkRGeVd4UEV5NG16SHVGU2tWbTQzUFV2S0hPZTVJV0JhYzFtbTFuVkhtbzJKVXBYZjhQWXRuM243Z0RidzhtSG1vN3NMMDd5ZzdWb0dXOWVCZDRaVU05N2F0YzBqZE5hQ1VWamQwS3VVQmU4MDJxb21DRUV6NTRsYUsxVTB0aGwvY1k2dHgzcm5XcS80V2x1eWV4eG5LSXJlQjJKSnpTNnFKdlpEczRtbzBxb0FXb0ZVeFJBc2QyTXpCVllxRXV2TVhFb3JMU3JUN2tXSFJ2M1FycGtXR3JBNnJHS0tCYUZnVGIvdWRhM05XVlZOZ0dhTjRUeVBsTnJXVXhIUUdFcUY0M3pCNnNZM3BMWldrNm5rWnRUdndIa0xWYWkxZGZHUjJ2aC9xZVJtN2JUYk5SdVAwZ1E2ZGhVN0NEUytZMnBvbk84MHgwdHFwUHJWQjJqVGVYcnRtTkpNRnpveWlqRlhVTFVkZHUwRlViSVFVOXZYWGlmSHRRcWx0cExlT2JZZXgxb2JPdE00aXNwbzVseVlsMHpuTFU4T1BjdmMrbG52QjQrU1Nxd0ZaeHN2VUpSdUt1TTVZVlhiNzRJM1dMOVNpbkxGaXNJWVM4NnRmN0t6aWlVTEx4NUdOdDZzbkVoRnNJYkxaZVkwVFpTcytPait4SlFYdWhDWWNtR0tpVG11TFIyMVdwUHRoaG81bzluMUhhcTJGcFdLcHBKdGxCekJlYzkyTzlBWnkyVmFtR0xyR3VXTVpUTzBjMnlKbFdvVXhtcE9ZK0tTRXNGN1NtazdjaDlzdTRaM09HL1o5SzFmOHpaNHVzNVRzbENra25JbFpVWE1pUkEwM3RsbTJWVEs2cnVwbWgxTnJhc0haMnN6V09vNmQyM3JmcEpYRk16cnhyWCsyUHBMbWdoSENVeXhrR29sVjJHS0JXUGE1K1VLSVZoQzUxckhIS3Q0Y1gvbTUzN3AyL3pkWC93QzUybm1zNTg4b0pKbnpJYlRNbkY2SEJsMkc1N2Q3aGs2elRndHErN2I0clJxSlhybDhONmh0RU5lbStsWFlVNFpoVFNhbVRSbjNYbUp4R1ZFeThJMFRtM1BTUStNNXc5SnN1SEhmLzhmNUlkKzhCbS84TGYvUHQvNjlnTnZ2WHRMY0FaZG13aW41QXdpZUtOWlVtbkc0NlZ4NVFkbld5SnRHZ2V4S0lVU0lhVkswQWFSMHFoUnRRWHZxZVRWUXNjMENsVnU0elF0QzQrWHBSbTVlMHN1Z3JKUVZXdDlHVUw3WmF6aHc1Y1R2L1Q1Ny9DNVgva0dRVnVlN2gzZDIrOXhHQW94S3JUdHNNNkNIdEMyUTRjZWQvTnAwcmRlOEkxZi93ci8zbC8rV2Y3am4vNEtYLy9PbVJ3clEyY1lOcDdPR3J4VytFRWhZb2lsSlgzQldhd3lHRk54SFhSK0lNK0pQL0pIZjRRZi9rM3ZzOHlKWlY3NGYvM05yK1N2ZlBQK0owcXR2L0l4c2lnaVRZR3pEWnhPaWJ0anBLSVpuTWM3elJRTHRTYWNGWllzelROUnMzcjFOS1d6Zk94NzJIejc5bnZMOFQ3emwvN2FML05uLzl5SGZPYkhmanY2K2lVeXZtS1pSOUxhdVdXejhTZ05mV2ZaREphVVNsTmFPbzFRY1NGZ3VvNmltOVYwaW9VTWZQRDhEQlZPanhNZnZtaFJjMXcrNHBqQWE3amF3bjd2K2N6NzcvRFAvcDdmd0k5ODMxTmVmajV5Zi84dXQ1LzVOSDErd2VOSGQ5ak5oc0U3ZkQvZzNkcFd5VGk2MWZlcG5oL1pjU2FlQ3krKzloMmVmUEozOGwvOWwvOGJmUHFIUHN2Ly9NLy9tM3p0eTY5NCsvMG43WlJEVURRaWZER2FxV1NDc1kwbnBrQ1IxN1pBR2JWYTZzUzUzWENXeEpKbmdudXRRRlRVdVhLWkpqYWJnTmFsSVNQYWs2bVVtckFhaHM0eUxjMjJ3ZG5XUWFBUHJwVVdTUmliQ1daVmZicldKemJIeUpJcnp0bEd1cmZxWTZ1ZFdwdUNmTmVIWmt0am1tditFbCtUdDBOVGZNRWFxQmw4ZGN3cE1xdUNONXBnS3pvTXJYdEFOWlJWN1gxejZGaVd3djM1d3I3cnVkNXRlSFU4TjRHQWJhSUthelZHTlRYcW5ESWVnM2VXdTlPSU5ScHJMVXZOcEpvd0tsT2x0YlhyWEF2TW05MldRdWVtRU5SYTFxQ2lZcm9iZko3UmNjS0lSam1OQ2gwRnkzUk82S0dqWmtWU0JiVDY3aUZmWmlxV2FZSFQ0OHptMEtOTVlpa3pBeHV1OXoxM2p4ZHlyZVNzRzgvVVF1K2FFbkFwbFpJS1ZsczJ2V1ZhTHEzclVCSFFqY2k4Q3p2ZXV0bHlIaWRTZEJnYkNWb1JVK1F5WmxMTmRLRmlqS2ZXeXE0TGRMYkRXRTBxaFJobnpLcmMwK3VHSkxWZ3JlQjgvdGdubGRVT3d0bG1GZEc1UU9nYVQ5bHZBb1AzSE9jVGM4MmNScWdxVUtSaVRhWFdTcTZOZzJpMXc1a200aHF6bzRnbVMyYllPUGFiRFVuQjE1NC84T28wNFp5bkN3NXJGTEZXamxQamRGclhPb2ROS2JKa2g5UE5XMDJzb29wK3cxQldjTUJZS2xrRXF4V2REWXcxY3A0V3hoalplRXVjQzk0clhPZDV2RlRtT0hPMURXZ1ZHT2RJMXkvRW9zZ3ljOWdGYXFsTVpWNHRUbDY3N1dxbXFzQVpsa3RGRDVhaWhGM3dEWEd0bGM1b2xwd3BVV0Y4NDNhT2RhSVFjY3BTVmZQQjFGSnhXbGhxeEJoUFlhSFdHYTBFWnd6T05LNzFhWnl3ek0wRFVqeERIMEFLOHp6VEJZOHhCdU9hbFZmTjBxeEorb0VsVDVUWU9rRVlwYkNpaVBPTVJYT09pY01tRUZNTDhvTTJwSkp3M2pGbWhhK1YyMjNnbzRjSm1ZUm5WenU4TWMzd1B6bEVWWjdzQnU3SEdTa1pyT0s4UkpabFlUODRpSlpwYmdGTkZVZzUwN25BbUJOZXRYNFBLUldzMDQwaW9Sck5LZFhLQi9jWDVsaDRkclZqTEluVGVZTGFQUHVHM3BOU1M3WmpycXN2cjZ3ZHVHQ2VJbU5zcXZWT0c1WTVZWXh1SlY1djJHNEdOcHVPNTQvM25LZkVPemRYM080Q01VZU9zU0hSemhpc1ZValJLR2w3Rm10WEpxMWJZTks2MERRVU92aTJIeDh2STNmSE05ZTdYVFBLVDRWQ0EweHVkd05XdzR2alRFcVpwU2JLM0d5Nmg4NHlsOFJsakd5Q0ozam92Y01ydDQ2SmJwV0pXcHVsVW1uSVlldU1CY0VWbHFrRjQxcHBySEU0NDVoaldvV2RUVWpaMnVpQ3M1YkIyZVlGdUtyQlV4YjZzSzRwcFhEVzRxMWxLVTFVMHhuRlVndExGTElXbk5acys2NEJHQktSQ3JIVzFxUWhOcjVrcTdJb2hyNWo2SVh6R1BrLy9LVmY0RmQvN1Z2OEQvNjFQOEhiOHkwdmErVlQ3MSt4OHdWbkhiazRhazBvVlVFc3htcWNFeXF2QlR5bE5TekltY3NVbVpQbStuckgxZGF0ZkdwSE1QZE0rY0lTRGROcFJEdEQzMm11KzB4Ky9IVmVac09mK0RQL0FtOS81ajMrbC8vNnY4TkhYLzgybi9xK1QxSWRsRndhWDdRMFQwWm9kai9PR2pyZkF0UmdXZ2syNVloV0RtczhwVVplUEp3STNyUnVObEthYzRBMkZDWDBvZG5hVVVDcWtGYXZ5QmpMaWd4cmpDakdXRUFFNTFvM0lXY2ROd2VQVnZEeStabC8rLy80ZC9qdlBKNzVjOS8vdzh6dkhLaVhMN0ZJajcvZXNoOFVraGIwcys5ak9pWSsvdzkra1gvN2YvK1RmUHN1OG14bm1XUGI0NnZTclpPWkNNSXF3Rms5TEhPUlJqT3lqWlpUc3FFUGxzNDNsTjMyZ2Myd1pabFQ4MnR1L1NtL2l5ejIzdjZXZi9YUC9vN2ZkL1BXTlQ1WW5uL25rYi81MC85b2JVM1hvSG05OWdsOTNibEI2OGExVTZwTnlJWStOZ05OVm5OcW95cmpXZmhEZitTMzhZTS8ra05NRDkrbXBoTnpVaXY4ckRDbXZkd2lsbHdLVWlaU210QkdFenFIUVNoaVNQb3ArLzJCdi9GWC96WS8vOHRmNCtuT01uUWFIeFNvVm83YmJqVGJvZjBLVG5HNlpINzl5NC84N0M5K2hWLzd5Z2U4OSs0dG45cDR6cFBDdnZVKzZkeVFvNnVyUFZaVmxEVW9yL0hHSVBNRlV4TFdiNGt4TWs4VGc1enBndU54MHJ6MXlYZjRnMy9vdC9DbHozMlJYL3Y4dDNqNjFsWGJGSFBMd2tKd09PZlJXbE1sWTVUQks4MFFOc3c1c1N5UjREcktLcFNwVWlrVWdyVTQzVm9ZNXRySzJKMTNkTUUxb1ZITmVHdW8wa2phempXU05sSnhLalQxWGRDbzFhY3BsN2JoV3VQb2ZVZVd6QlJ6NjlVcWRVWEVkRU41ckYyVnA4UHFYWmdSYVFmazQyVnVTdVN1U2ZQSHBXM29lbTIzYUsxaU8yeW9PclcyUk9KQUozcnJNVXF0Nm5aRldRM09QL3Z1VzhRMDh1TGhpTldCSmh3WHBPb21FaEdGZDY2VnZ0WVdWVnExZDlIVWd3RkZwWE1PWlRSR04zeTBsTFlvK3NGeE9rMGM5bHYrOUovNVUrd1BHem81dGQ3RlJzR1NLR2FIR2E0WW8vRHFia1FoSEo2K1ErZzIvTlgvNksveitQeWV0NTllc2RrTXFDcWt1U0JhQ0w2aFJWa0VveXJYM1o3VFJiZ3NNOTQ0dGwxSDc5dkdQTVo1VmNzMkkrVmNoYmkwTWV5Q1k0cE5OUE9wdDI2WmxzSkh4M3VtdEdDMGNPZ1BqSE1rMWN3bURIam5TS1dOMzY3dmNOcXNQOXVVbnBlNUdYa2JWZW1Ed2VuQVVwcE5qRGNkemhtV0ZOSGE0TFVsMXN4MjA3RUpIaXFFRllIS0twTlQ1TEJwWExQVGRHcUpoVzlXSnZ2TmhwZDNKOGE0VURFTXdmRHN4bk83NjlpRndNdlR5S3ZIdVltU3BKVytuRlVyQ3RYMmlzNzcxdjZzd21BYjc5blFmTkd5bExWaTBlYWUwYXBSVlJCcWFkWWVKUXR4Ymtyazg1eUlKVk9yYXViQnR1S2M0ZEI1UU5nR3gyN3d4SkpaeXNLejdZN0RwcWRVMklYVmFrcFpuRzdjVDYyRXE4RVRqQ0RLY05qMGFCcHZMZWZHdDV0WER6U1JwdWgzMmpHWGtWZ1MzdlNnQ3NaV0tuQjNPV0ZNUTVwZlBGNXcxbUYxS3cwUG9hTjNqaW5PR092cGZHQVRYbE5WSmlwQzczdU1jY3d4YzU0aVdtbUd6bkdaRjJyVnpVckx0bUxpSlVhTU1nMFp5czBKSXViU2xLNmwyWkJsa2FiZ0hVTGJlM05ES3NjNXM1UW1QaWlxc0F1ZTNockt5azJrRnFZVVd6dFVhK2xDUjNETjR3OXRHWUltbDRMVGZrWG9DbFkxL25haE5TdHcxckR0SFErWGhkTWMyVzhjZzNldC9hTlVkdHVCWlVtdDFhQnFwV2V0bThtNE5ab2xydUlSYmNqU1dzdGEwMnhZVGltQmhxc3VvQ21jNThoNXpqZ0xOOXNPN3d5bk1XS2NzUEZOdU9tZEk0UkFXVlhyVmNCNUE2cXQxOVlISEFiZjdxSFFLaHJlTkR1MSsrUElPTTVvVkxzWExUalhiSkdXZGYrMFduRzk2WkhhU3N1NTFMVnRYUk5lVExIUlA1YWNXMksrTk51WUpXWEdlVVpqbUhOVHZHc2xCT3RBMjJhOHJLRDN6ZHJuTlhEamJiT0NpYVcxMWhYRngrdXA4VXpWeWxOczNvRkdtZFkxcUVxam5WbEY1eTFWaE5NWW04K2dVbGhuQ0s1eElxZVltd1ZlYWRVcVdjZG5HeFJmK1BxSm4vOEhYK0l6Nzkzd0E1KzRwb2FPZnJzaHprc0xybFZ1WUZGdGJmdXNhVUV3SXFRNGtjV0NibWZuWnZBNG8wbHh3bkpwdnNXbVVaSnlOU2pSZUYyNXZ0NXhmYnZEU1NLb0M3bkNwMzd3eC9sRGYrTDM4TFV2ZnBHZi9abGZ4UThlYmR2YWVMak1GQkg2NE9qN0prU0ZTcGJHNFVUYTJuL05ETU8waWxtcUxjZ1NtaVhlSmdTc01ldjdOS2phMnVtVzFZV2xIYjhWcFJVeE5SUys4ODJFdm5rejA3aWxTbk45MkZEeXdpOSs3aU4rN1B1ZjhuMC8rcU1zSlJJdkx6RmEwSEZtVG9YWlgvUFJGMzZOLyttLzlaZjUwbmRHM244U1dpV2xyTjEwdkdxSnZOYk5EVUw0dUZsRUZ3eGRwL0JoUlJ2WFpFQ2orYUhmL0Q2ZmV2K3F0VkhXbXAvNXUxL1BYL3pxeTUvSXBmektQMWFHL25QLzB1LzhmZnRieDJad3ZIcit3Ti84NlY4alZjV2NFc1kybS9RNU5WZDRheFJhTlhXYWQwTG5GY1lvZ25XdDVLRFdDTGNxTGtuNFE3LzNCL250di9lMzhYRC9JZlA1Z1poYkZ0bDFycGtFWjJGZUN0YUZkb0NPaFhrQjd3Skc2Y1lEOEFmMmh5dis2bC81ei9qNVgvNGF0OE1LWjY2UnFtM2MzdGIrWnVYOWRKM20rdEFNTjcvNDFUTS84L2UvZ0Fud205N1pVZW53YjczSHdKSEJ0ekp3cVJWS1FveEZvaUIwWEpSaFZwYk43UUduTERLZFNIWGs1VjNtMldkK2hQL1NILzhkL01MUC9EMisrclh2Y05oM0RSTFgzMjNlb3cwWVpZbHBKcFhXbml6bFN1YzZVc250OEVHanRCQzZadkJaVjhmOXRoRVhqSEpvYlpseW9RKytjUnBMWFozeUxjWTZoRmJDcVJST1krczltMHNtWnlnbHRuSmViVWFpWGcrdE8wVnBEUkM3NEptV1pjMkNWdFFrWjd4VkZHcmpKZVd5ZW5PMWt0ZlFEODNYejFpTUFtVWhkSUdZWWp2MDE5SWlTakhPQzZuR1pwa1JtMUtyNnpVUDUweXNCa1ZURHJiM3IwZzFFYk9nUkdGWGNjNW1HREJHTXkzTno2MExoaXlwS2VLbGNUUnpFVTV6ZTlaOTMzRTZUZlI3enovM1ovOG9mVkRrODdkSU5aTEVvUDBXMWZXZ0RmRjhhaVZTVTlrL2VSdG5CLzdLLy9XdjgrRzM3OWtmRE01NXZBMjhPcDRSRlB2ZUU4dlVTamRGR0h3Z1MyNmJSNi9aYndhTzQwUmNTOHRDY3hMSTBySm1yUlY5OERpanVNeVJUejk3U3FtYWp4Nk9LTjFRaFgzZlVVVnhYRWFRcGxEVTJwTFRnbEpOT0NXbGRmb1FnY2R4YVJ5MDE2dGFHN1N4VktTVldhU1ZmWmNsRVl6RHVJcEdVTW9UU3lYWGduTXRvMFphcVdzSXJxbHBxOFpaajlVR1ZSVFhRMGV0aGVkM0M5dk84NE9mZkVibkhTOGZGNTQvUEtBUWd1N1FLMEZmMFRvV2xMVlUyYTFsNkNWVlJEZExwVXJyVDd2VVRGSEMwQVZxcmFoU21obStyZVF5Tno2c05PN0xPRVZ5VGF1YUZGQ0dwUWl4UkRSQ0xwbHBpYzN3V0xWR1c4WmFublFiNWlsekxwYzFBRlhrc3FCcVhkMllhbXV2cFExMzQ0ajNqYTRSUyt1MjVHMlBXWG1VMWphQmdXYjFIelFOUlVpcEVweW5kejJYUzFwYmlyVU8wa3EzUXpaNDNmejd0S0hyM05yRm9mWGl6YlYxbnZIYW9VUlJSS0drbGJlMHB2SHNyRVo1ZzVZMStUYVdWRnBsb0ErT2NZb1lKYUJsclJnMGxXY3VyVW5vbkZvcFBtYzRMUkVmL0ZxaVVpeHBZVW1KdmU4eFNqSG5STy84U204d0xVbDFqWFlUczJDVUFhbnRFRlFhS1ExWmtiWEJXZXZNSlNpZ2Q0Nk50enhPTTY5T0UxZER4L1Uyb0kwaGxzSmxqRml0NmIxYk94UTFkTWExMXVsVUZOYTBIdG5TWmc1WnRaN1VxZ2k1dG43YW9UTWNOZ05UTHJ3OFRTQ1ZKN3VPL2RCeG5sTGpCSzRKNlp4eXMyalRiVysxSzJxZWE2dnVsTnFDbENwQ2pzM0EyanU3K2hjMmE3ZGNTdU5xcXFhYXQ4WlFwSDRYelRPSzREd3hyYzBZYkR2TXJXM0FRb3B0ajRUbWdsRldlNXNrTGJBcXVUVlpRRlVVamI3a2RITXlhV1hhaWxEb2pFVXBUVnE3cHIzZWgzbGRMYVA1VHVvVmRWU2lFQTNHTnYvZHVncXFRRDRXYkZyYmpQUUhieEFOenVuMVhscEMxNUxBTmliN3JlWGhjZWFuLy9OL3hHSGorTEVmK1JUYlQvMFFtc2psOGNUNXN2RHcrSWcxaHYxaGkxTE5PeFlxUlhtYzcxdnZieFBwdTZiRWtkSThBMk5NUEo0S3RWUTJRUWlkeGZqV21LR1c1cURRK1VBNjMzUDM4Z1hicDUvbDkvMlgveURUNWNndi9lM1A0Vnl6emtvNTQwM3JRS1pOUStKRVlDbXRnaktFRG1kOTQvVG5pRGVXenJ0VzhhelFkeDJiUHJST1MwYldOcjZyRUs5K056UkJHdi9hbVRhZit6V3hjMDRJVG1HVWExUXlhYXB3WXpRUFV5RmU3dml2L2RmL0dMc256MWlPejVtVEVLekY3TjVsZi90cGZ1cXYvMmY4QjMvNTUzam4xamZPY2k3Tm1GOEpuYkVFcFZ2bFNna2JaK2s2aTljR2IxdlNYV0xyc21kZHU4K1h4NUhmOGRzK3l3Lzl3THZNODhRU0MzLzM1ei9Ldi83VkZ6OFJVL3FWTndRdUJveHE5ZjlxU1dtbWxFd3FxOFA1SEZFMGRXZ1ZzTWF1Z2FMQjZHWnJFck5DcmMzU2w3SzBzcG1ERS9EaTdxNTVWZGtPSTRZaGFLeXJURXRoaWEydFRpbENaelVLajdJOW51WnhkVXlaWGlsMDMwUXZySzMrT2tkVEVRdFVtdUt2VnRXSXkzWmRaQkVpbGM0S24zM1A4WGpPL08vK0x6L0hSeThmK2ZOL1J0Zy8rOTFzMy9zUjVPN0xhK3RDUlp3S3FpNkV3VUN4akRHUmltWVhCQWtkWlJHQ2pMait4SGUrK1cwKzhmNHovbzMvemYrWS85NmYvUi94MGN0WDNONWV0VU1WeldtNjBKa2VId0xhNjRaK3JFM3VXMFBoTmZQV21sd1RkUkcwYmNyTDFzMUFZK2hJcVhDNlRCekh5R0VJTE9kTEs5RmJ6NnU0ZGdySkN6ZUhIdXMwUzZ5VTFmdHBHenFXMGxUWTFLYnFFa2tzYS9sUDYrWWxxS3JDK2VaQ24xTWxPTnVDNDF4eDJuQjlPN0NraFZoR2d1OUFEREVwa2lnTUJaM2c3dTRlUVhHOTNSRXZDK05vc0RaelBKK3h5dUZLSmNtUkVBWSsvNFdYbU5vNlZHY3FTc0FZdzJiYm8wVVR0TVBabGF1RVFYSkNHMDNYTnpQYmVXbW9pbGxidllsU2JEcEhGVGhQQytkeG9oUkJLODg0em13M3pUKzBxUmM3WFBCcldXdW0yL2E4dSsyeHJuWG5xVFdoRlp3V0dPZUsxVE9FaWw5Sjc2SVV3VnRpYnBzNlduRzlkVWpkOHVwODR2NzhFbWNzemd2YU5uOUJxMENMYWZZcVBZeHBZc253cVhldVVFcnhyUmQzcmVWVU5YVE9vOFN5cEJtSDRsS2F3ckpLNWhJWGR0MkFsTUpTRTZrV2xESVVBV2VFd1R0bUVUNThFZW4xQWxKSUtiSEVTTjl0d0VHY1dtY1lqY2FxWmpmVTdSc3hPMmhQMGRMVWNGaThkMnlyNGp3dmFLdUlzZkxoM1NQdlB0MXgyRytwdFhCM3Z2QjRXY2lwT1laNmE1am15TGpNM0I0MldLdVpwdGFhUzB0dFpIN3ZXdVA3MkE1aXR5SlJtdFlGU3BYV3lXS01DMEVINmdLbjA4aGx5blJ1SVhoUG1oZnVqMmRzc0RodDZFTEgxbGdTalNQa3RPV3c4YTNObDRMZVdud0lhNWVVQ1cxaG5DZUMyVkJwWFRTa0NyMnpWREVzc3VCOTRUSXY5TFpqeVF0S0Nsb3RpR29xd3lVM1A3M0tpQlpIMEFIUnJVdnVaWjRiejZ0VXhwaTQzdTRZQnM4OEp6cmpXenBaQzlyYUZoQXVDNzBQUEp3dnhCeWIybDIxOXhUclFtZDdrclFETHFkS3JCbm5MZDRhUkpwL29rT0ljVUpVc3dDcFlqQmFzWE9lT1RiTEpJTndPYytjeGpONTc5allEZDk4ZFNKUE00ZmVBNXFzRENrVTd0WEkxV1pBNjhvbExpdFNHMEMzWkRPVjBsU3RaTVk1dHM1UHFvRUJCc09ZRzEvNnRaOXNGVGhPVFgzOG1ac2QzM29ZK2ViekkrL2M3dmgvay9XZVlaZGVkMzN1dmRyVGRudnJ2Rk0xbzJwSnRsd2tXN1psRzJOc2JEQVlFN294SEdvb2dRU1NBS0U2UUFJSkVISWdBVU1JSWFUUmNpQjBqQUZqakxzc1M3SjZtZEdNcHI5OTE2ZXNkajZzYlorUTgwblhKVjJYWnQ2WnZaOW5yZi8vOTd2djlWSEZyTzZZaTNhSncwcFp1eWlneUNWQnhtV3JORmxVOGx3eUdxN1FOQzExMDBJWFdjeG5qSEdwcFYwb2ZOR3dVZzdZM2pua21lbUNqZlUrTHo1ekF5YzNDaTd1anBuT0ZoUzVKdnBrejlBbUVTTGFMdUdQdEJHZ3hMSlZtaTY2QjRzRnU5dFQrcG5FUzhsK2swcUh2U3hMSmlIWG9uUEZpYzBOaEpKTTV3M3pPaDBFTjRZWldWYXlhRk9ETmwwV0pOYlp0T0VoRXFRZ2lQU3lsVm92cDFZZWdrakFkQVhPTzN4SVU4dVVZM2MwbmFQTUZDNmtkM0xzRW81TVJFL2RlU1JwbTlHR2tJWUJNdWtIT3dlRFFjNndsNmRoaTB4VE5DOWlPdGhvamNPbk5uNzBsQVpHVlpta0RWM2FYdFV1Z2NkRlVHZ1pXVjhwMlR0cytmRmYrVnUyeHd1KzV5ZnVKTStHNU1VQm5WMStWM3ZMQWxGd0JFUXltT2s4OVNQRURDY1RiaS9HSnVHR1JFNk1saGdhV3V2cDVacGVyNkt4bnZIaFBzRm41SGxPYXdQamd5bEtiak9WRTNySFg4NzMvS3NmNU00WDNzU3YvdFIvWm43UU1Gd1pMRGNiRWQvNnoyeDZ3cno5dEJNTzd4SXFUaUtTWkdScE1GRmFRVWp5VG0wMHJiWGtSaEI5U2xkcUxhbVVRVnRGY0IxQ1JBWjlRNjdUTzZQdFBGSTZXdWV4SW4yZmE1Zlc0aTVFUmozNDFHT1hlZTY1eTd6c05YZHhWV2ljZFloVlEyL2pLQ3Y5bkE5LytFbGFvRjhaWnJOMFVGUUtWQkNVS2pJYXBjR2JWQTRqZE9KQ2Rna2ZGS0pPV2tRdHFLb2M1eFROYkVKL1dMQitkSlhtZVUrb0cvcURBWGxlcEd6K3B3K0xMZ1lPOXljWVZlSjZHYTd6U1MwVDBzMHJScGtVZWlweCtUS2hrRVlRa1FRTWJXY1JNWUpJVlg0akpWVW04QXEyZ2NQcG5MYnJDQzdkWHFTUkxCWTFlN3NOcGxmUnI3SzArdzhCbldYSlh5cFRkdWx3YkFtNllDUnpoRFRrV3RFSHlpTGxNS1JVUzBWYXNwbkVHSmZIK2tqUUlxRXNUQUxmVnBYZ2lMTDg5bnVlSnBPQzd6NXhGSTY5Q3BmdE1kKzVUSytmVXhySnRFbTArU0pMdDMvVk5NU0ZRSTBHb0JvSWh0anUwMU9PdzEzTlRYZmN4bGQ5ODVmeDcvLzFiN0MySHRFcVk5N1U1TnFRR1Uxblc0elJGQ3JEUlpkV1VsR1Nad1l0a243UU9aLzBkMTBnMmpuQ0o3SitVUlNzci9lcCtodGMyejlrYzdUS0MyNDlqaFVLRnhXenlRRktaN2hnR2UvTmNNMkM4Y0dZaTVkMzZGcW9TazNlcjFMVjN6WExHM01MVVZPYURJZW5jWlplcHY4MzVtYXkzc3liaG1HUmJubE5GNWJvbUI0Z2FHeXpYUG1tMW54bHpISk5rbkZ0ZjUvZDdVbENIUmpZT2pGaTQrUkpNaEhZV2luSXNveEZVS3l2ckNQb3VMWTdUZFQ0WnNHMUs5ZllQWmlSQzBQZUs4aktLaldVUlNCR1FaRVZpWk9Gd3lqeG1keGNjTWs3bkVsRlVTbWNEZGpsQzFTckVtM1NZVkZMalRRUzd5ekJOWml1UldSOXBIREVhRmtzR25wRmp6ekwwQVlLblVNVWFXSXBBNzFDc21pUzMwT0p5SGcrNVhsN2pmWGVrUDN4aFBHNHBta2MyaVIvc2czcDBsSXBpQ3JTT0VHV0t3YkRJYnFFMmFKbWUvdVFTTU9SSTZzRUF0YTJCQyt3UHYyZXBEUm9uV0dFcFc0Q1hkZXdJUlJGb1JBeHBQS0RDQ3dXamlzSCt6anZ5WG9aYTBkV1VhYUh5U3VPSGw5aHRTK1k3RTlwV2t1bUJMUE8wd1dOOXBackY2OXc4ZG8rL1N4UFkyS2phVnpMZk43aWZTb2thUzNwOTNLa1VPenZOOHpiT2JPbTRjS1ZEcWtEUjlZcUNESkZEVVFraW5TWkVGSGdseThFSVNDVENjRmxKR1JDNFVuL1hTdEQ1Z0o3QjJOQ3Y0ZVZnZUVvNThUbUJqb3pDSFdDMFVhZk1pL0loRWFJd0dSUk01M1g3TzVOVWRGQjNmTDg4enZNcG5OQ1h0RTdzb0l5RWhFaVBaT0JERnlmMTdqZ0tXUFNFZ29aa0VFUVVMallwZ2tjSWoyOHZXWSs2NGpHMHZwQWE2SFZOU0Y0ZGljQkphRlhRbVlrd2RjNEY4aHpsbE1vU1RkZk1KdDZwbzFudmQvbmNCTHhVbExsYWVKUTF4M3QzcGhGMjFBV21wTW5OMW0vNFFSSE4wYXA3U3pTQ243dllNTFQ1eTZ6bUU1WUhNNjR0SGVJMUlhTkkrc0U1VlBPTHppcXFxQzJBV1VOWlo1aEVUUjJnYk1kM2R3eEdVOVpHVlZzSFZ2bHB0VWJPTEsxeXNuVklmZFp6Nnl6VENkVDl2ZW0wSFk4ZitFU1o2L3ZjZXJZTWNxaEJnYytSbHJmRVd5a1gvWlkyRFlWc0lLbjZWcUdwU0pFeUUzeUMvdEY0R0IvVHA0WmlpS2piUnJhdGlZM2lxN0lFc3FvN25obVBDWlRpbzFoajU2VzdFMFhPR3NUWmtoRU5yWldLVmVHTkczNk9RT2Uxa1owN1JqdkhqQ1pUVGgxOGlpclc4Y29lejFXVjB2bWRjZThiYmpwNkRvM1RSMmZldVk4NXkra0lzYlJ6UlZPbjlxaUM1WnJ1MU9pajZ5TUtvU1VIRXpuQ0Mxd1dMd1A5SXVDWnR3d25VeFpHL1ZZSFdwME9lTDJHMCt4c2xLbEMwMW1rRUp6ZWZ1QWc3MGQ5cS90YytIY1ZVeGhXRm5yMHk5THJQTUorU0ljL2JKRUM4SEJ2S2F6WFJxQ3hFRGRCWUpJVVJwakZESTErVUFvMUJLSjViMUtyRnFabmk5bU9URVdJVExabnlLQ0l6T0t0YTBWMWtkSDZBOVdPWHBzaFdockZwTUZqYlBrWllZUEJiTlpSejNkNWZLRmJTNGZUSmVhTzhWb3BZOWQrcldORHBRNnRlSWhveXlLRkF1UW5tR1I0bEN6dHFYcDBrcmRhRTFuUFVXcFVXM0grejd3TEY5emVaZFRKM1BLektOR09XcDFDTEdscmx1TUZpQkxoQmtob3lmNGVWTHF4alN0emcwRUwybHRRQ2pOYUZTeHR6ZG0wVWl5VEZFYUM4TWVpRDQrcE85aEVCYWxTbVI3d083WkQzQzQ4Z0xlL25WZngrYkpFL3pvZC80a1o1Kzl6T21iajVNdjRmSkdaMmh0cUlwQTE2YlYrNmNuZ3doSjF3VTZaekVtRlh5TVNPS0l6QmlLb2lERVFPc2RJdEhVeVl6RXlCVEJrREdaWWF3UCtCanBsNGJNNUxnZ2FPb201VUNEWVZaM0dOM1JhYzNPcnVQeEo4L3lpamZjdlN5TmRrUXJFRGd1UHY4Y3o1Njl5RUNCRDViQ3lGUTZ5alhCSlQ5NWtXY1VSWHFIS0NEVEFxSFN4VkpMYUt4QXlZTG9KQnJKc0tvb2l4eVVScWlTcHAzUnViVEYrcnVjeFJDWXpGdUtsUXpWdEVRRWhjbFJKQVdURHlDRUo1SU1JeUpxSXVtZzBMUkpjcDRYQnFYU2g4djdSSThmTHpvQ2p1Z0ZTdW9rVjVlQlJXM1ozWm1oaEdSanJhUW9DbHFybCs1cFR3aUd5YUtoWnhSYm0ydWdKRUtaWlFIREx6T1RpdFZldnBTbnMyVFFwUTl1MHptMFVFU1Jtck8yVTdSZGNrVHFvTmdvUEwvMXAwOXg4MDEvelRmZWNqdXFPb3JpZVd6WFlBVE01eDJMeVp6VlFjN3E2Z3BxTUNTNmdHdlRRem42QmJsVytQWTVGcWFsclcva25kLzJWVHo1OExOODlHOCt6ckZqcVRwZlpRV1JoRWtKV0p6emVDZlN5eXVtUEV3UVlGM0R0U3N6YkFzM251NXo1ejIzYytxMm05bGNLMUI0QnNhd3NqRmt0OWtGWjdqclJYY3dXY3pwYld4eTZyWWJrU0o5ZVdlTHdPSndqNzJyMXpqNzdFV2VmUHh4bnZya0UxeDQrZ3BFU1RhczBpUTJTZ1FweE53ekpWMklPTnJVbG8wU3Q4eHdLWjBRSzUxM0NVZ3RKU0ZvbXE0bVJFK1c1MWpuVWRLdzhBMmlDM1R6T2FhdnVlLzFMK1lsZDkvQmpTKzhrUk5uVG5EMStZdUUvVzJPOW9jc3VzVEIzTGp0VnRaUDNjaDBYQk9BZGpibDR2bExYRDEvam5PUG5lWGhqMytLWjUrOFF0YkxPSDVrSGEwa3pyZTBmcjU4eWFjR2FldTZwYTR0WXIyZ2x4YzAzcWF5VFo2K3NMWUxLZjZnRE1aTHZPOGdCR1RXUzhvam9Xazd3Y0grR045UGd2bW1nU2hibE02d25VSkdqZTBpalYzUU5vNFgzSHlhMTMzVzdTd1dIVGpETGUyQ3RSTkhjZEpRMXkwYnF5TzBWa3dYVTRLSC9tQ0V5RFh0ZUVLN1A4WDVHaThnb0NrTHc3VkwrNXc5OXh5ZGo0VFEwZGxVS2lOR0RnOFBHVlFGVmQ3RGgwOS9pUVhkd3JHN2U4ajZhc214NDZ2Y2R1Y052UFFWTCtiRXpUZlRHK2FNMWxmbzkxYzVlUDQ1Nm10bnNXMUlLNTdvbU1WQXFQcXNIai9OZU50eTdkSkZMcDEvbm90UFg4QlBhOW9BZGRNUVJDbys5VFBEa1ZHSkRiQXpuV09jWkUwUHFjV2NmaUc1NWVnSzF3L216T1l0Zzl3UWNVam5jQUtxUWhHYzRMRHVVRGJDc3IwYW8yQ3lQd0h2Mk5oYTRiYVgzTVRtcVZOc2JtYlk2TmdZRmF4c0RFQVp5anduVXhxUjVWUWJhNnh0M1VDZTlXbnJCaGNGNDRORDV2c0hqSGYzZWVLUkovalVSeC9obVlmT3NyQU53Nk1yWk5XUXEvdGpab3VPWG1FUVM1UkR3SkhwTkFrTEdHb2ZNTEZqVVh1Y2o5eDd6eG0ydHZxMHRXZC9OdU9GTDdrZDd3U0g4d1ZaWmlCb3h1TVo2NE9DMGNvZ3FVeFZUbFFhSDFveW9hbG5NejcwL2s5eWZhOWhkYjJrNmVaY2VYN0t5YTExWHZiR2UzblJLKzdpbGp0djVjaXhEZEE5Um9NUlJiRXNMb1MwVGpvY1Q5aTdzc081SjUvaHFVY2U1LzYvK1FSUFAzR0p0U01yYkc0TVVERTlaNnU4U29xMUdHbW1EVmV1N0xKeGRNQWIzdkk2Ym43aHpXeWQyZUttVzA3U1h6OEtaQWdSeVkyaWJ1Wk1wZzNlUzVSZGNQSGNKUjcrMlAzODVSOTlnQ2NldmNJZHQ5MkFWcHFkdzRaY2E1enE4TUhTMllSUjZSY2x2VHlqc1piR2RYU040L1RwSTd6MTdhL2tZREpsTnAzVEh3elkyTmhBcWZRTUtuUkdVSXJPdHNRUUVSNVdleFZld25nNkpYakJ4c1lhenoxNWpnOTk1Rk5KbDBoa01aNHduVFRjZXRmTnZPMXIzOG90ZDkzTXNWTkhHUjA1UmxFT09CeVBlZjc4WmFTeW5EbHpsRjV2amNPOVEzWXVYZWFweDU3aWtZOCt3ak9mZXBwaGtYSHEyQmJPdzhKNjlzYUhFQnk1MFV3V25zUGRDVE01NW82N2J1R2UxN3lNRzIrOWljSEdPcHVudGpoNmJJdjViSUozTFVWVjBuVXhBZHlqWTd3ejVvbFBQYzJIM3ZkQkh2N3dwNmg2UTBZYnE0VGdtZGNOblhXc2o0Wm9MZGdmTHpCWmhsRkp2Q0NFUjBxeHpMVW1JWURXeVFJamtiVGVFUkdNZWhuT2VjWUhVK2F6R1J0SDFybm5GUy9uenBmY3dyRWJiK0RFRFp1TWpxNHdQWmpRN0Y5QnhoWlZnMjBiWENHSmVVWi9zTUhhMFZNOC84eGx6cCsveExtbkx2RG9BMDl3NFptTDFJdUd2RitpQmhVUndVby9tYnhhRzFKMlB0TlVSVTRNYWJJVlJVMmVsY1FZSUtiRGZBWWMzUnh3OHRRV0lXd3pIeThJRkdqcHFDcUpFc25ZcHJJaFNnV1VQOFRLaUk4VmdwVFROOXBnYVZHdVJhdEFWZldSQ0JaMVRkdldxRXhTOWtZb0lST0hWVVZXVjNxMHJXYzhpMlI2U2w0L3laV0xpcGUvNFEzODIvODI0a2UvKzhkNDh0R0xuRGk5bWRDQU1rVjJNcU5vT3VoQzB1aEpsUTVjV2FiSVRVYnJrMFkxTHcxVm50aTI4ZE9tdTB3amxucGhId050bDFiclVrcGM2NWVrQ0puVzJYbWs3aEpMTW5xUGtVc0RXSzA0NkJiTWdmUFBiZU5jb0hXTzhXUk1yNytKckIzNzF3ODRQSmdoSkJTWklSSXB0V05sVk5CMGdhWU50SjFGaWhUOTZId0N6b2NZaVNoOEVJVFlZV1RFK1dicEhZY1lGYTZ4S0N4Rm5qR1pOdFIxODNjUGkwSWtTWHhYVzBxVnBSV2o4MFFsVStZaFV5ZzA4emExMG5LakUwSGVodVdoQWdxVDRLenp0b1VnS0l5a05pbWpJcFZDNnpJRm9mRVlHZW4xSzdJc295b0w2a2F3ZXpCalpaalRxeFF4UmtMclFEbTBnQmpTNm9GbHJzMERTaWpLWEpKbkNiVVFvcUt6anR3SXFpckQyNGhyTlUwbkNDNmdZb2ZLTlFKSlZYbmE3WlkvZmM5RHZQMUx6M1Bzbm5zSUswTjhNOEYxaXF6VU5LNGlxZ0pNaGdpUjBFNGdkRWd2RURKSEkraGlRVHZiSmhSYlZLTmIrS3B2K2xJZStOdUhtRGNOdmJJa0JJTUxrZGJWaVhtNERQRVdvc0E2ejd5ZXNyTmRNeHhrdlB4VnQvR2ExNytDVjMvMjNkeHcydzFNcjF4bGZtV2JYbTdZdm5hTldUMW5WUStvVzh2dXM4L2pmY3Y4d2tYR0Y3ZnAzYkRCTVBPWVlwVzhWM0hqQzAvendwZmZ5WnZ0NXpMZDIrYXgreC9tZysvNU1PLzV3d2V3Q280ZlhVVkVnUktLeHRab3FhbDBscVpnd1JLaXh4Ulpzb0cwTGNTWUR2SXlVbmN0TWFSc3BMZVJUR24yNnhtNzIxTmU4Ykl6M1BlV1YzUFA2MTdKc1p2UE1Ccmw2RXp5ek1jZW9ydDhEZXZubkJ2UGNVR3lObCt3Mk41aC90S08xYTArT3JSa3EwZTQrK1NMMFcrOG0zb1IyYnQ0bFkrOTcvMzg0VysraHd0UFh1VDRpV040N2NoVUJtSEovZlJ5MlN4TkdyUVlIRVlhckpDMFhVd0hqTHpIWWpIaDZ2VWRqSzQ0c2o2Z3lneWR6T2xFSk5vR3JRMTVyaGlWYThsSmpGdEdOSFR5dE9xUVhnWXVVSmdTSXowbVY1dzVjd29YVzA1c3JGT3FTSDdzS0d0M3ZJalFKVnlJVnA1ZTFjY1VHVDVvOXMrZFpiNXppV1kySTdTUjFsc09KalBxMW5QMTZpRVh0MmVZSWdXM2paWW9uNzZtL1NwSEtjbGdrSEtIWFdjNTNKdlFIMlo4MXVmZHcrMTMzOG5tRFVlNStaYVQzSFQ2eFArWDJlc0VGeDY5SHc3MldVd1g3TTA3Zk8yUlFqQWNacXdyV094YzRzNTdYODk5bi9zcUdxK1o3MDlvRHZkeGNUbkZFUzBpS0pSemFCT0p1a0puR1l2cGd1MmRBOHBCd2ZHdEVWdGJXL3ppdjN3My8rTS8vZ0dqVTBkd1ByVmdsVXhnNjhaYkJrWEJvTXlaMWcwWEwrNVFaaG4zZnRhTHVmZTFkM1B6QzIvaDJFMG5zTzZRN3ZvbGpKZk1KM01tYll1dFd4YWRwWjViaWdMR0I1ZTU5TXdsanQxOEM3MHNtV21HL1pLVmxYVnV2L3NGM1BPNXI2R1pIdkxNQTQvdys3LzVwOXovdHcreWExUHhxOHhWV3VVdTE4N09lNEpLYWovcFVxdmJod1NrRGQ1eGJHdkFpVnVPY3VUb09zSWVjdGZyUDV2VlV5OUFBbGxaY2VuS21PMUxWN2poV0orMUkxc2dKREZxSWdidkhHVUIzWFNmVHo3NE9QbjFiZHhCaHlrTlgvNE5iK1d0WC9vV3p0eDJJMWxlMERVTEZ2VWh1WjVnWi92VTQ1VG50TTZSRzhsb01LQi95ekZPM1hxS04zM1o1ekcrZnBVLy9vMC81UGQrN1Urb0QyY01OaFBqczhnVnM3bGw3L0llTjk5OEExLzJEVy9uRlc5K09UZmNmSVlpejdGMml2YzFzcjNPZk9ydzBiRUlIVTFqMFZMU0h3elFxMnVjdVBYMWZOWVh2SkV2K09xMzhUOSs0VGQ0M3grOGo0Mk5GVWE5aXRZMUtYOUp5bU1wbVd3MjFxY1had2d3cndNcnd4NnZ1dmRXeHMyTS9wcWh0N25GRFRmZlE2OC9KRWFZMXpWS3B0dzBJZ0hpYld2UnFrd0RnT0Faam03aHovN0hyL0luZi9RK1ZqYldhT1lMN256eEMzamQyOTdBUzE1NU8ydGJheWlUTTUvV2VEY24xblBDYkVLcFprUmFtb21nRkllTUJnTk92UHFsdk9KelhzbmthOGM4OGZFSCthMy84UC93Nk1QbmVQbExicU1xRFBzVFFlMGpsNjVjeDNoNHc1dnY1WE8rNlBXODlEVXZZVzFqbmNtc3B1c2ErcGxuY3ZVeG5qcTd6V3plME84WlJvT0MxZEVLeGVvV043MzRWdTU4MWQyODdXdS9oSSs4NTMzOHg1LytWUzZldThqeEc0NlJhWVcxa2NQWk5Ha1ZzNHdnTkRaQUw5ZkFzbGloSUY4Q3F1VnlCUytGWkxKb3FUdEwxN1NNZHcrNTVRWEgrY3B2Zmh1dmZ1Tm5jK1lGdHlPeWdBdzFRWlE4ODhrSDJEbi9FUDA4WTc0UTJBWjBCRk1hZW11T2cvR1QxSjNqcFo5MUw2OTY0eXRwbldiLzJoNlBmZkpoSHZqdy9YejRMei9LdGVkM01adHJ0SGtnTjRvQWxDTGw5K2IxNGpPRm1jcmtHR1dZdDNNeUkra0Z6UmlMVkduemw2bUt3V2lEK2R6alhFTVFCVmtPUm5yYTVwQWdSU3BtZVVsWkpneWZkd0xuRFVwSmlsd1FDZFNkQlNKbHlXZVVpbTB6WVY3UFVhckVLRVZaWk1Ub21DMm05SHFDUGdLbVQzUDk3Q0ZIenR6QXUzN3hSM2ozai8wSFB2RGVCN2o1NWkxeWt3WVJSRWxtVWpHdTdWcTY2TW1NV2phNGs2ekUycGFGbEl6S01zWDE3SkxWbVdtSWtiWnppR1hCMTRlVUJ6VmFJbHpFaGxUS2trNWkydzZwTkwweXc3bkk1SEJLWngxVnI2RFk2N2grNlJyejJaemV5aXJ0WkJzckhFNUk5c2NOV3NIS1VGSVZ5WnNPTWtsSlFrUkwrNWxOWmErcWFPT2MxanFFTkFrUkpEVktKSVNXMURrK3BOWSswU0VRS0dXcFNzaE5uczRzZjlmZ0lsZ2Q1R3l1VjhpaTRxbzZRQ3VJd2hHRC9FeW1NVE41eXNaRWw3SVNSb0dXV0c5VGt5d2tyNlpZN3VHTkVoaEFhb2tOTGVQRFBWVGp5UWQ5VkN1d25XYytYYkJvWUhKOVFweVhsRWY3WkNGWkNvcXlaT0ZhZ29Jc2VLYVRmZHF1VGVGem9IT1dsQnhZNXZ0a0N2a1dGSFJZUkJiVEtrZEs2alpwajJLTUxCYWU5VFhOWTJkbmZPaURqL0RPbDk5TFUyMWhRb3Z3Z2tFZU1NNFNmWU93SVUzL1JQSlVTaXF3YytpVlZIa2ZzWCtWcnJ2TTd2V2p2T3krZTNqWmZTL2hRKysvbi94RVFRd05XbXVDenhNS1FVZThCNmswdTFkM0NjSHhKZTk0TFcvK3lyZnkwbGU5akdGVllkMkN1dlZNcmx6aXFVODh6Vk5YeGp6KzFIbW04NW9peXhPdjBYbzJOdGE0NTY0ejNOb0dHamZEYjJxRzVqeEI5R2kwWmpjRWZPaVI5OVo1OFgydjRkN1h2NDU3My9CZWZ1NWYvVmV1WGo3ZzVNbFZXbStSTW1KRFMvUUZyZk9BcDVjYllyQTBMbjBJaXl3bkJFMk1qdWdkaXk2WlZRU0N2V3Y3UkJONHg3ZThqUy80aXJkdzV2WXpTTmR5NWV3alhEcG5tRnpib3o3L0xCOTY2QkovZS8vVHpPZXA2YnU1M3VmTjk5N09tODdjaUZzdmtlUG5ZSHFaeHFjY2x6V2I5TmJQOEk1di96YmU5Q1Z2NDMvOXl2L2dkMy85RDNGQ3M3bTVUbFNXYU1NeUk1S2x3UGdTcXR1NFpEcXhJVEtlTlVndGNGN1J1VWhuTytwNlJxYVQvVWM0U3d3UXc1eVE1MlJWNGp0MnRTZlRvRVdPZFphNlM0ekEvckNISm1kaEd4NS84aUtmZk9nNU9qcFdCbjF1UDdQSjI3N21yWlJuR3E0OCt4aTdWNjdUSCtUY2NQTk5UQ2N0ayt1N3JIclB6SG8rOU1telBQdm9SUzVmMzJQUjFCQVZkZWVRbWFJeUpUSXF0SEdVcGFGdElIaVB6aFhhUks1ZW1SR3Q0TTFmOGxsODRWZC9JYU9qbTV3N2V4WS9QMlQvdWFmSng4OVRGcEFmdTVQbnorMHd1WFNKUng2OXlwKys5MEVPRHVkb0FYVm42VlU1TDN2eHpiejFUYmN6R3ExZ1Q5K08yM3NVaWlGbWVCenRHa0lJU0pYamJBZTZoN1dlZzB2bmlTM1VqYVh4SHRWS3htSkJWMCs1Y20wYkZ5V0wxakxNSzVybzZJS0hFR21kUldqWTM1M1NPY2RyM25BM3IvbTh6K2ErTjc2Q3plTnJ1TWFCeUxuNDVIbk9QblNXeDUvYzQrbW5Mek92bXlVaUtMVjRqMjMydWZmZU83ajFqT0R3NmdXeUV6M2Mvak5FbldPdFpTZVVrRlgwMXpaNTZadGZ3MDJ2ZUJrZit1Ty80RGZmL1RzOGQzNkhFemRzRUtObXNwZ3RjNjJwUU9LQ1hjS2ExWktsNmJGNGZ1OVBIOFA2QnptNnVjTFJJejN5bFpQY2Qvd20zUGdTdS9NNTI5Zkd0TE5EcnRXRzhiVSt3OEVBclRPODEwUWs3ZW94dXNheXUxdHo0Ym1XYi9xMnorVnQvOWNYY09Mb0NnZlhMdkgwaDk0UG5TVzRRTmZPeVRZS2pwM2VvcWNEODdtbGRSS1JTMlNUTHFyN2s1YXN2OG1STTNmeHJULzR2YnpzMWZmd0UvLzRYekhabWJDNnNjYmw1eS9UNi9mNHltOTdCNS8zNVc5aHRLTFplZjQ4RC8vTmV3bk9rVVVJdEt5czlSbXREY0V1VW9tZ2JnbkNVRGNLZVNEb2RvYzR1YzZSazdmeXc3L3dMazdmY1pMLy9OUC9uZU5iQmJxWDBYVUJwVFN0UytVUDcrUHlSUTZWeVdHZytPZ0RaL253eDU5R1o1cVRwOWI1Z3JlL2xQWDFHN0dMTVhGK25hWkx6dVFzU3huaXJrdnJ6RjYxUXBFTG5Ld28rK3UwamVYcTFjaUpVd1ZmOHgxZnpkMnZ1d3VkUjdhZmZvN3I1NTRnNWhKWkI3cG15dWFwRFk1dHJXTEhCK3pzSHJKd1l5cGIwUG5JK1BMVHFLS2drMFB1ZVBVOS9ORExidU5YLzhWLzRpOS83d1BjZk50SmpxME1tTzRlY3NlTGIrRWQzL1Fsdk96ZUZ5RGJocDNubnVHWmozNHd2ZWUwWjJVMXA4ajd6Szd2c3JjM1JxNFZuT2l2TTlzL1lMSi9CUlpIOENoazd3U3YvNUl2NU02WDM4WFBmTTlQODZIM2Y1TE4wK3YwcW9KZVZ0QmFTeGNkVlpiS01yVjFaRVlRckdmUkJnWlZScFlwckUweERSY1NQbXE4dTgvUmpSN2YvcysrbHM5L3g1ZHk1TlFKNXVOdERuY2VwNXRjb3h5dU1yZDlEcDU5aE12bnQvbm93MWQ0K3BuckhFN21HS05ZSGZSWlh4MXc5NnRPYy9kZG5tZTE0T2lwRVc1V1kwYWIzUGZtbC9PNnQ5N0hWM3pERi9IQjkzeVUzLytOUCtPWnB5NXkwODNIeVl4SkdUN3ZseHpVMUNEdVpRbHZFN01NWXd5NWR1eG5wT2Zud2pOY0wvSEtVSllSdlhJVDFnNjQ5T3lqSExsaFNHRW1MT1lPTHlxVWlVaWRNb090YzZnbDFrMUtqMTZLRzZMV1JGYVdVNzBPNnh4MWs5TXZOU3JMQ0Q0ZHVJdXNsejZiS0pUdmtPMEZEdVp6VEhtUzcvalI3K0xNVGIvRlgvL0IzM0pnQXlJM1pFWmdkRWJiSnBPZGtSaytSbVoxZzlFcDI0aklFdC9TT29RRXM1UTN0VTNLbllxa3hLTlhabVJlb3pPRjh3SHZVNU42WHJjNHI1S0xYVW9hMjJIYkRxMERLMVhCcEtueHNHem5MOWhZa1poNmlEVTVBc24rM3BpNjdwQXlvblNrMzA5eGp1aVQwckhNTWpxUmtIZDFteWdPVlpHRFdGcVhTQWc5cFRLc0UwUWNaU0VTb2l2WEdOTkQ2ekdKQi85L0hCWmppQlJseHVwS2lSY21HVW1FSmN0U2xyQjJOVG9LTWxuZ0VrVVk1OENHZ0RHQnNreUJTV3NicEVqUVZLbFRPRmFRQUp2T0JiSzh3SFFpT1N0OTBodmhjd29EcTJzNTRPakNjc3BUYXBTT0ZFSGpva3hLSnBNbWlRSVFLcEJuSlZwbWRLNGpYK0kvWm9zYUZ3TlZsdEg2RGhzV0dObW5YMVlJNXJTV3Bmc1ZiSVJQUFBBNFg5azJlREdFbVFYWFVDL21aRVZGTmlwUlJoT0VSbmtKV2lHVUlZNW51RzZjV3BaV1U0a3gwVjRuTDEvQXExNy9jdDcvNS9lalZVWU1EaWtDVmE0K1U1dlhTdkQ4K1V1Y3ZubWQ3L254NytIZXQ3eUJyanZnOE1wNVpzMCsrY29wUmhzMzhUY1BYZVJuLy9Ydk0xdFMyRCtOZ1N1eVZES3FteXY4L25zZjVmV3ZPTTYzZmV2YktEZnVRblRQNHc1M2NURkRHazFmWG1keTdUTFBQUjVaditFMjN2UVZYOGp4VzA3d0wvN3BMM0gyaVcyT0hCMVFabVk1Q2JEcFJoVVUwVXNtWGMyb3FwaTJscVpybHpPRVZFUVlWSnJwb3VicTVRUHVlKzN0Zk1rM2ZURTMzSGtYZTljdjg4eERIMk0xNjNCVzA5Z2N0OWpuenoveUpML3pCMCtBZ0NNYkd0dEc3bjk0andjLzlTRTJ6cHptN1MrOW0rbGltMUFmb0hTRkNSWmZYNks3dHN1VnlSR3FyUmZ3TFQveXc1eTU0eWIrL1kvL1I2YVRDYjErRDZrTGhFOGVjKzg5VXFWMmRyQVc1d041UnRMZGRaWkJJVGkyMXVQNllSTEtaMTR2Z2NZQ0ZSZjRlZzY2SWxpUGtJa0xhWDN5OS9vSWpZc2M3ZmZRUW5Jd25URnJhbXFiUXNvdUNCNDl1OCtIUDdXUEdxN3dMWGZkeWZWclY2bjBnbDQxWXZ1WkMvaW1ZenlwK2V0UFhlYVAvK3hUWEx5MFQ2R2dQNVQwY29QU2tucTVPbmMydGU5OGNBU25LRFB6bVJ2cWxZczczSGpqRWI3NW4zd3I5N3p4VlNqUjhzd2puNks1L2l5VkVXaHB5TkgwTm0rbFpzRDA4c2Y1ci8vOS9iejNmZWVaZStqMUJDdjlaRWM1ZjJYR2c4OCt4RU1QbmVlSGY4Qnd6K2s3eWZ3KzlkVnpkT1UxOEIySVZOWnFaVUVvVHpBYXJYUGo3YmR3OFpNUDRLYjdaTU1ldTVmMzhQT016U09ieEhtTGpSTG5ZZEswYUMyWjFKNkRXYzJwSXhYbm50M21scHZXK2Zidit6cHVmdWxMS2NxTStYaWZ1TGlNcVZhb2hrZjQyQWZQOFgvL3k5L2hjQUZ6QjRVV2pNcmtEbll4MGpuNDgvYy94ZXRlZVROZjljN1A0Y1FMN2lMNGx2cHduK21pb2VsbW1PaFE4d3Rjbm00VGlwTjg3bGUrblplKzZpNSsvQi8vSzU1KytDS2J4NC9ST1VWd250eWtBTHVMZ2NJa1ZFdGpQWWV6RGhzRFhadlFFODllMk9QOWorMXg4NTFQOElhM2Z5SFR5UjVYenA1bGQ5SXc3QmxvUzZRTVpDVUVHOEVwcEFidmh6Unp5ZEhqRzN6eDEzMEJYL20xWDhEMms0OXkvb01QMDBYRnRjTUY4OE1hWXdxR280cmp0V0huaXFXNDR3aVp2VXBRUFdUbWljSFJ0ZzNUZzBONjNaeUpuREt1VG5MdkcxN1BqL3hpenJ2Ky9vL3gwTWZQY2Q5YlhzeTNmUDgzYytyME9wZk9Qc20xeDNjSmRjZTBiaEhLME9tY2djNFpYL2VJbFRVMlZubzBoenRJVXliZ05BYmhBOTNza01nQk80dnJURGJ1NG11LzR6c1JVZkdiUC9jYnJHMnRKVXlZRUZTWlNlVXNJQXVhU1ZzdkxVYVJjWnVtSEtIcGVQQjlCNXgvN2hvdnV1K3oyRHEyeW1Mdk1pYlhaQkpDWjNDdVpqYjFCSEp5MGVBc2hPb29UZHZSMUF1KzhNdnU1UnYvMmJkU2R4T2VmdXhoaHFaai85cUN5YnhGQ2tIc1BGdHJRdzczRzh6cWdJMmpHZDUyU0sxUjJRRFJkaXptYzFoTWFMdkw3RzlmWUhqOGRyNzdKLzh4SVVoKzlaZi9ncGZjUHVMYmYrQWJlZmxiWHNYMHlrWE8vdTFIV0RHQ3RpeXBXOGRzYjQ2WGdwVnFRR09HYk4yMGlsTFBVRldLck9vaFhHSXp6cWY3NkN4RGRsT2VHMTlsODhaNytMNmYreUYrK0p0K2dHZWVQcy9nV0VsZDEyUmx6cUFxV0N6cVJFbm9sYmpnYVdPeUtObk9Mem1UcVZrZXZHUC8yblh1ZmRVTCtBYy8vQjNjOWVwN1dVeDIyWDc2WS9obUI5d2NJeVd5OTBMOHhRdDg0SU9QOEo5LyswRjJwcDVCS1JqMk5JdldjZTd5bUs2QlAvK2JKL202cjdpYmQ3NXpnK25hR2tPL2o5Mit5dDdPZ0podHNuYjBCTy84cm0vZ3J2dGV5bSs5KzMvd2wzLzRVZkorajdLZlVSbE5hVFF5YVFMSWNyM01BbWNZbnc0cFdRWmxrZEh2OWJCdVRIUTF1aWpJUnllWVhCb3p2ckpEc0MzbDFwQ1ZVbUVpaVUxYlR4R3lRRWxIcG50SmR4a2l6bG1jaHlCTElNZmJNU0pHY2xOeGJET1JGNFFTT0d0Uk1yQytXcUJOb0xPT1FOSmtHai9GaGd2STdCamYvSVBmenMyMzM4Z3YvZVIvWlhJdzVhYlRXNm5zUkdLdmVodW9yZjFNaXo5S2dTTHhPWk1tejlQTE00cE1ZNXNPWngxNXJoTWxSR3JtYllOYXVzNlR0RUhpZ2ljTGtkWTFDQ21KRHJRcTJEb21tQzhjaDlQVXJnNCtjamgycUhsTkQ4dWVVeWtqbVl2UGxKbE1OT1I5ZyswYTJ0WWhNZFJ0d0dTU29vaE01dzI1TXJCc3J3dWhzSGFCVW1sYTZvTk1tVzJST2dtZmJvd0dEMTFyQ2NIL24ydm9CTnBzYWsrVUx2MUFYcEpGZzVUTFkwSk1LK0RVSUJLMExpQkVvQkE2NFI3aXNnRW5JcDFMSlAydVMxeEdHUzM0U0Y2VnlEWmpOb3RFbjVIbml0WUpvaytqWHBXVkJKa3ZlWXNOYmZRVVdZWU5ucm1yTWFiRTVNV1NkUlVCbFZaMU1rZEVTZWM4VXFTYlFHMDlMZ3FNR1JCOVFzSVVKa1BGaU1zRFFscktEQjU3NmdLN083djAxemVvODBIU1BPVjlSSkJrcFFJbGlUYWc4T0FTc2tBSWlTZE5zOGdVYllENTNoNnEyT2NGTDdtRnphMFJrOG1Nd1RCUFdqeWhrMjJCd0xWTHU5eHo3MjM4OEx0L2xGTm5Uck56NlRIcXkwOFNabnRrNjFzRUNseTc0RS9lOHlEUHplSFdEWWtOa2hBK3piR1BHQTM5dm1ReWRmdy9IN3pDY08zRC9OU2Iza2c5NjhqY25IckpBMVJGZ2VoYTFrWnpldUVzajM5OEI0YkgrZnJ2K1NwKzdnZi9Fd2Y3TTh4bVAwRklsNjFpSVJOU1E1Slc5aUY0NW8xamE2MEhFZXJhNGpyTGxlZW5mTkhYM3N2WGZmZlhZRHZQL29WUDBwTWVoV2ZSQlFablhrRTFudkR1Ly9neC91Y2ZQMEZWYWNveWxaaVFrU05ITk9ldk90NzdWdy93UmQvNDFVUTl3b2JEMUd6T1NtSW5jVjJMakJlWm5iL0tkSEFyYi82eWR6S2IxUHpzRC8wOE90TmtKc05vdVp4Mnk2U3RDdDF5dGVpb0tzRkt2NkxySEZrdk11eFhLTmxpTW9VcEpQVWlnaklRY216MHFPQlFXbEprQlVwR2NnUG9WS0txVEU3ZEJkcDJ3YlJ0Mlo3TVVTS2hNZHBhVW1VWmwrY2RWL2RxbEF3TTFvL0FkTXJ1OHpNcTZYbm00blYrNS9jZTVFTVBYME1CTng3VGxHV0dzNEkyUk5wRmpjZmp0YWJRQVoxSGhEQm9ERkU0RUhEMXVldmMrWW83K09lLzhDT2NQSDByVnk0OFNIMXdudHpOdU9YMDhZUnBpbEN1RGpHakU5VFhyL01iLyswOS9QWmZYT0Q0V283eGFSTHJRK0pNOVhxQi9zQnovN2xEZnZGWC9vSmZldDNyR1oxNExUWStoSW9XTHpPRXJwQTRGbkVGS0RuNytCUDh3ZTk5aVAyZFhVeWNNNmo2UExjOXAxOUVOdGNIUEhYMklsS253eUk0ZWxsSlA4TGNkK3hlRy9QS2UwN3gvZi8raDFnL2RRTlh6ejZGbmV6aTJ5bHlXS0dIUjVGa3ZPY3ZIK0tSUGJobHpWQ1p0TnJKTTZnakZFb1NSYUN6Z2QvNnEyZkppNHFYdittdHpNd0lLWGZKOHB6T3RYZ00xV0NJRERXTDZlUHNYNTR6T0hvalAvSnZ2NWVmL002ZjVkR25yaUtLRWluU0FkRUdSK3NzaXpZVjIxd0lkQzVCYlZ0dkUzTk5KbHZTazA5ZXdpNGNyZHJBREhZNVV2WlpHUldVSnNlWXhEeXp0a0hya3M3WCtNa0JuZzErL0JmK0djNHVlUEF2L29wNmI0LzdIejdQeHg5NmppdlhEcGt2TExQYTBSc1lYdnZTVzNqSEY3MEtlK3NkaURKUXRvZHBIVzBkRWNsb1pZMDhpL2g2RE8yQ0t6N3lrdnZ1NVJ2KzZkZnczRlBuK1pZZitDWjJMNXpsM0lmL21tYmU4Y2hUZXp6NHFRczg4Y3lsaEZVaWNHUmp5RnRlK3lJKysrZ3gzTVl4RUR0SW1hRjBXUHFYMDNRbUJJKzBOV0w2T0pPeDRrdS8rU3Q0OUdPUDhNd0RUeUY3eFJLZmtwQkFXaVdRY3hBSjhlT1dyZElvRXFCN09GQTgrdHlNWjUrOXhxMHZ1aDAzWGllNkJoYzlKc3VadExCb3AvVDdpdGExK0NBcGU1N3gzZzR2Lyt4WDg3cTNmUlo3ZTVmWU8vY0VsODd2ODZsSHp2SHdRK2ZaMzU4bEZsK0lyS3dPK1lMUHU0UFBYenZLNWd0dTQzaG9zTFpHeURTaEtzc2UwMFZnNS9DUU1wL1Q3RG9PcW93dit2b3ZZbnRubDdkKzlWdDQ5V2U5aUlzZmU0VDl5OWU0ZEhXZnYzam1FbytjMjJON2IwdzliOGp5Z2xlLy9HYSs2QXRmd2RxdGQ5SGJPRUx1citGOUlNOXpoQlE0RENJYklwcGR4UHhKcmp4dHVlbWxiK0JyLzlFN2VkZDMvaGpPZW5LdHNIVkhWM2RrdWFiMUhoVURxNzJTaWZVMDR6bFpwaE15eGpvV2RjTjRlNTgzdi8yMWZQdTcvaUZieDdlNCtzekhZSDRKRVNKS2xRaGRvVWJIR2E1czhJay8relArL1gvNkJFMkVyWFdUV0lZeVVTK1VqZ3g3Z3JwMi9QdmYraVNEbFp6dnZPY1ZLRzZsdmZvRUljeFF0bUg3eWZPY1k4aXhtMTdNai83eVQzTExuYi9PdS8vMWY4SDZuTjdXS3NFbnpxOGw0SUxGU0UzYnBmTkFabkp5clJFKytiM0xvcUtiT2J3MHJJeFdlT2hqVC9JVC8vWjMrVWZmL2lhTzY1UFk0UnJIMXlQTjRRUVFsQ1Zwa3pWdmFEMElsYU8xUVVRSFhVdXcrMHpuTTZJb1dWM3BnMi9UZi9QUWhTWEVub3pXZzVTcEZlNUZwSFZneEFHWnR3aFg4dmF2ZnljcmExdjhtM2Y5Tzg2ZnY4S3AwOGVRQ29LTCtPQ3BqQ0xUeVpZRmtubW9jZEdqZEk2S3FXQ3JWQ0sxdU9EUU1aV0FXK3Z3UHJLWU4ya0RaZ3g1RGxuNE5NWW9KemNaWGliSGJkczErT0FveTV5MWJFSGR0RXduTTJhN05WVmRrNi9NcVhvcGU5aTFNQ3lURGhIaFVEb2lSY3BodDhzU21GUnBVS1dWSWZpMEpkUTZOYzR6WXdoTElQdWl0VXpyanM1R3BnY0w1dk41V3FXTHhHcjgveDBXdFZZSXJkQkZ6ckJYVVpnTUd6cEUxQW5mc0VTY2VHZVQwSjNsYmo5S2dndFk3eUdxNUp4RXB1cDlqTW4wRVNRaGdMTUJwWHRFNWNtTGtxS2ZJYU1EcVlreFNlU1ZVZ2dzVVk1d0x0S0tpQmVhc2x4TnJWKzNQUFdIeERMTFRDTEQyNjVGU1UxWlNKcXVvZk9DMGhTVUtxTU5TVmJ2bzB1T1g1M1RlazltUER0N0UzWjNEOWc0ZVFOMTBjYzRtNmFqMWhNN2h6QUdoU0NHQkwwTndhSElFTktrOFhNQk5JSDVkTXFWUzN1c2J4N2h5T2tOemo1eGp0N1E0RjJrOW9GSVlMeC93QzEzbk9RbmZ1MG42YTBQZWZyQjl5SVdPeWduRWFwSXlLTERjNmo4Ym43bVo3K2I4TzMvZ2cvZGY1bjExZFR5VG9nWWlROWdiVUFxUllIam9jY3ZjdjM2SHYweTRtT0NwUkpTVzcycURIbHZTTHVvMmI5OGdlY2V1Yzc2MWlsZTlUbXY1azkrOHkrWDdLU0EwcHBJeEN4Wm1YWFhjVzA4NDh6R2lQeElLZzZOWngzenB1UGE1VEZmL3crK2tMLy9ROS9LaGJOUEl1ZG4yYXdDaUQ0aUNNaDY5QWNESHY3b0ovaURQM3lVemlZM3BYTWhZVkpNNHFXVkdwNTk3aEk3VjYrd2RuU0VueXFzNjdDdVpXRWx6a21HV3FQY0hEdCtoc3VYK3J6dWJaL0RYL3p4KzNqeXdhZFpYZXZUT2tlVmxTZ3RpU3BOekxUMkZDSmo3eUFaZ1FxVmcyancwZEV2TlNMUEVWcFFWWkp1ZVNraVc2VVRDZVlzcGFCMWpoQWcwOG5DWWwyZ2NWTnluYkZvUFBNNm9tVkVLVUFFbnQ5M25GblArS2YvNHV2bzJvNkxUMXpnU0svaThIREs3LzdORTl6L2lXZllQM0NjM3NpSUNtcnI2VnhDamRnUU9KeDd5bHlpWk5KdjJSakp0U0FyQzVxdTV0S0ZxOXg3MzEzOHdMdi9PYXVqVmE0Ky9sNmtQOEMxQ3QwZnNqN29JNkpObjl1c2h5bDdQUGJRMDd6M2ZSZFlLeE5XUVN1V2RvcElZeTJyL1FRelByVXVlZWhUMTNqb0l3L3p4cTk4TzE2VlJPc1JTaEc4dzRkQXBtZm8zbEY2dDl6TWtmNUgrTGwzZnd3TGJBbllYUllIRmJEYWs5eHlmSmcwY3psWTI2S2N4TThiYmppNXhvLzk4byt5Y3NOTmJELzlVVWJoZ04zSmhMcExDampUWGtPdG51SUgvdm0zY2ZuNWQvSFFJMWM1dHBIWWRsbVE1Rm9TU1czclhFdU81QjFQbjcvT1pHYnBGNXNjY29rWVBFVW02SlVWb3pKbjBuVE1aeTN6K2trdVhyN0N5UnZ2NHZQZStibmMvMzIvZ2hJQ28wZ1Q1SkFzTjFwR0lpNDloMlFDM1lvbHMweVFzRjNUOFp6RnJFWmxQZFkzVnZDK1l6eWUwOVdCTWs4dFZhVUZlUWJVQXBvZHpPb1cwOTFyVEo0N3kvbHpPL3ptNy80dEgzL3dFdGJENXFyQnhZRE9ZRHp1K05VL2ZZd0xGN2Y1bGRlK2h1SFdHYnByRHhHQ1FraUpqQkt0SkQ1MDJLQWhlSFE0eTJXbitZSjNmRGxTdER6emlZL2c5Ni96K0JONy9OYi8raWhQUEhXVlNaTTR0SU15NlZrZmZuckNCejk4aVgrN1V2RGxML3NHRnQweDdHUWJIek5rVElZdW96VGVSM3d3MEl4cGRwK2lmL045M1BNNXIrVCt2M21RMVNxdGRnZURqSVBaQWgwdHVZNUlGSEhKNkcxYzRrWjZIejdOak1aT0RzaUxDcGtWUkQ5RHFCd2ZZVGJydUw1OXdHeSt6M0JrR0ExR3hHYVBTQjlWakxoNjRSRm1lOWY1MkFlZTRvLy81Sk04YzJWR2JtRFFUN2lvRUFMWG50M2xvWC8zdDJ3YzNlU3VWNzZHbllQTHhLNU8yV1l0a1ZoY0lWbGJPMElNQ2ovYlkzTDFLZGFQdklpZi92VWZaZWZxSlo1ODcvczQzSjd4UC8vcVVUNXkvNVBNWmlHaHI1UkFtWXo5eVl4ZitwMVBjdVg1YTd6cloyNW45ZmdaaXJvbUx3M1dKakJ6bHZkUVFZSXBrR0dWTEl3NXVIYUJsOXozQ3U2OCs4VTg5Nmx6REU4ZWdiWmpVYmNJSlZMMnpqbHFhMWtwYzJ5cldhUmJGMUxBenRVZFB1OUwzc1Mzdk91ZlVEZjdYSHowcnlpcDBTb25La1dNTWxFdDVSQlhML2pEUC9ra3N3Z25OeklpRUpZWG9GenBkS0NObnFyVWxBdlA3L3plSjNqNzExem0rSTNIV2JpSXpvcGtacXNYMk9rbDlzOEgxSm1YOE0zZis2ME1SaFUvKzY3L1NBeWdqV1k2bjZkQ2pqQ3B2UzBEZW1tVFFuaWk4aXpxS2I2dGthMVBqTjltUVpGTC92clJiYzc5OE8veHJuLzYrZHgrMTJtZVB0UnNiWlRrSXFHWWtDbkxLcVZGeXdLTlI4aVlMRG5Xb2t5WitLWTZBam5DUnBBR0pTTFJTOXJHNGdSazJsRnFJRXJxeHVPOFlEWHJpSWZQc2p1UDNQZjVYOGpQMzNhYW4vNituK0xKQjU5bTQvZ1dVa3FLWlp3dVJybGN0d2NreTdPS0VNdTF1R2M2YStnNml4Y1FmWEpFZDg0bFdVU1FPRG9LbFNjakU1Rlp2Y0RISlk1SFI2SkxFWnZXVzBMVVNBbE5aNW5OR3BUU3hDSmRCRUx3TE9wMitVNVZLWVlYK2N5Qk5RSzlubUc2V0lDQUxNdUJaQS96UVN5THFoR2pLNFNCU01zb0g0S1RkRzFrZjMrR0NBS3A4aVVIZEhsRStQOWtXa3RGVUZrdzZCZjBpZ1JtOVRGWldvZ3B4K1ZjQ204MjFpSjFHbDlHRWZCTDFJU0xMVEZDcG5QTWtnTGZrZklGdmQ0UUVGZzd3K1FXSXhwc00wY0toeElXU1lzV0M3U1lJV09OakIxQzVzUllVSmFhZmkveHYwUkk2aStsMGdmRXFNUnVFMEltRnBTSTlNcU1sVjVCQ0k3RCtVR0NWeHVOVm1CeXFIS05SR0dNNEdBL2NqaVpZWlJQK0JVQjBTWFdteFBKWGhBOUNPY0lNcUUvV0NyWFlrd0NjbU1pSzhPYzBhalBhRzJGL3FCSFhTZFE3YkRza3dtTjd4Sm8vSjNmOVExc0hqM0c1Y2ZmejhHbHM4a1ZuR1VVb3hXQ0xHa1ByM1B0NG9PY3VPMG1mdmU5djhBWGZ2NEwyVDFJRmdJcElwa1VhQkdYSmZaSW9hQ2VOeHp1SHhKVUtpRmxSdUR0bkozcjE1ak1ablJCRTRvdFpHK1ZVYyt5NkJxMlRoeGpiYldrcmkyZFQvUjY3eTBoSmp4QkZ5T2pmc0hHYWg5ak5KT0ZaZEZaOXE2TitmTC82L1g4azUvNkhxNWR2c3IwMGxQSUVHaTZnc2xrUWVjYzFkb0poTWo1ME1lZjRHQUdvMkg2czRlSVVtcDUyQmNVcFdCdnYrR3BqMzJDemdicUlPbm1jL3BWenVxb0lzdVNoUWExVGlrazBoOVFEUWNjTzc3QmZHN3BRc3FxTHRvMGNTMjFRa3BEVlJRWUpSblAwbzBweXhWdDJ4QzhKV1k1WGZETDNJakhoQm9wTEVKOCtxR3MwVHBwTHBXR3RrblQxRXhwQmxtT1JKSnJ4WkZSd1VwVjBIV2VpM3VPVjc3b0NMLzducC9rMkhySnN4LytHQ3RSOHVoalYvZ1AvK1g5L00wSG5pQktUZEhUTkYzQ1h6UU9wbldrYVpQM056ZUNVaXZVa3ZJVlhjUjJIYTFkME5ZdEowNnM4MTMvOHJ2WjJOcGs1K20vd1I1ZW9mUHBrTnczbnRpMk5GT0hXOVJNRm9FUUpFK2NlNTV4QXl2REVyMEUxa05TUHczeVpHVHlFVllIRlYwTEgvNzRvNG5YbGZWUmNnbVpqaGJYTGZEVFhiTDZLWHFWNG50KzZpZDQvNS85QzI0ZWdDbmhKYWY2bkZvekhGblI5RXREMHdXOGc2NnhUSnNPRnp6YXRYemRkMzBETjd6ZzVVd3UzazgzdWNyaHpOTXZlNnlXR1RJcjhiTjlkaTgrd01tYnp2Qy8vdnlYK0xLM3Y1eEx1NGxQbHk5dncxb2xqbG5yb1Fzd25reXhka28xSEJKVlJkMUd4dk9PdmZHWThhSkJLb0dSa3IyZEdmdlhudU9wcHgvanNPdFFsYVpwYTJ3TXpEdEhheU51cVp4ekFlbzJxU09OOFJSR2tHbVFJc0c2a3dYTFlac3A3V0pHOU9BY2JPL1B1TFk3bzI0c25mTWNUaVlzeG9mNG9PbmFtdW1sUzN6d0E0L3hVei8vdTN6cXNVdHNidVNzckNoc0RPUjVXakd0alFwdVdoZDg0cEVkbm5yeWVkWTJqaEIxRG1HQmxKb29ORUk0aEN6UnBrL25KUWQ3QnpTN1Q3T3pkNTNIUHZFQVY1OTZrdC80WC9mell6L3p2L2pJdzFmSkJvYmpXemxySTQweEJtTUtUbTdtT09CLy90RURMR3BIVWEyaXBVMSs3Z2krcTNHK1EybE5WUnFnSURaVG12bVVGN3pvQlZRYlEyU0lkTjR6blN4WUszS2FOakJ0V2dJaFplK1VJVlBwVDB5ckJDRDNwT2RWWnh1NlpvRjFpZmtwUWtOcExENGF6bCt1MmRscldjdzd0cS92c1h0d1NEMjl5TUh6ei9Qdi9zMTcrQSsvK2dIYUdEaDl2TWVvbjB3Zm1Va0g5T1BIS2dMdzN2YytpbXRieUhvMGJjRG9ITzk5V3RFSjJCeVZySTlLdEI3aVpqdTQraElIaHpYZDFSMGVmdmdpMy9kdi9vamYvdVBIbVd4SEJxVm1iUzNqMVBGVjFrWWxLNE9NMCtzWjcvdm9GUjU5N0N6SGpwNGd5emZJVFVHVlp4QTE5WHpHZExyUG92Rk1HOFcxNndlTWQ2OHlHQTI1ODY3Ym1jL21TMlFPVk5XeVNCQWlJZ1FPSmd0MkQ2YXM5VExXcTRJWUpEdVhkM256MjE3SDkvek1EOUhNSnl3dWZRbzduZEI1Z3pUTEZuVU1DS2xSV2NuNXA4N3h5VTg4UTErek5CUXBwRmdlZkphbWtyaGtHNjZNREplMkxRL2QveVM5NFFCMGdSRUNKVE9pNnROWnVIcitITmVlK2dqWHJsN2l5NzdsYS9qbWYvSU85bmNQcVR0SG1SbjZlWUdTYWVDUVRHQWlXWHhDT3NBU0pWRm9GZ3RQMTlVMDlaanhlTWFSRWk0Y05IemZ2L3g5L3ZxdlA0bGV6TGkrMytLS0FiMSt4YkEzWUZoSmVqb1NmVVBUVEdoc2g5UUtrK1dVdWFEZlQrVU1KU1d5NkJGalFxTXBwY2dMaFJLV3BoRkVtVk9VUlNKbjJKWkY3YmwyOVlERGl4OW43OUtEM1B6Q0YvSXovK1ZuZU5QYlBvdkw1NjhrSktDV0JBVHp0cVAxaWVjc3BTYVhXY29uU3BpM0Zoc2l3MzZCUXVBN2x4Qm9Qa1VJeWlJalU0bFozVGxMWTIyeVY0cUVKSXRJRUFHdENoVEpnZXBkMGdGS2tZZ2V3eXc1eHBzbTlRd0dQY2h6U1l3T3FTT2RUN0VGYlNLejZZUm1FVkdpUXFzY2lTREw4alQ5akdtN04yOFgxRjFEYmhJUVBkaEFMeE9zRFN1S3BUWTQrZC9kM3owc0NnU1pFZ2dpaSttY3ZZTjlGdDZocFU0MWZwR2FnZDZGeEdDVGhpQ1NXTjBIajNVV3NmeEFKaFZkbXNwQXlpemFwcVhya2s1TklkR21vdGZ2a2VsMGVuYTJCVGVqcTJmTTU0N0dGb1NneWNRQzdYWVE5Z0RvbG5wMzhNc1Rib3pRT1lXUHlSK3NJelJOcEc0anJ1MFFVUzdYU0ExWmJpanlra3duajJTL2lwUmxST3Iwb0JkQ1VPQUlxV2lGRkJIbkF2VmlRVzBick9zUTBXRlVSQ3BBU29RWGlPVnRLaThWeGloQTBhc3FGZzEwTnRENkJRR1BSSFBMRFVmWVhNbTR0dnNZN2VFdUlScnlMS05uTEpuMkJOVURNOFJQbnVlWkI5OUhOaHJ3cnAvNEZtN2NGQ2dDZzE2R1VoRWxCVlV1eWZPVVp6UmFNK3F2MHl2N1pOS3phQnJHcmFjUkk4clJjYXFzUU5zWm13UFBUVGRrbkRqVjU0VjNIbWRsdGFEckhBcEZheE9VZUR5ZlU3dU9RaHRXaW96OStZSzlhVTNqSE52WDk3am4xYmZ5clQvMGpUeC85Z2ttWjk5UDE4MjR2dXM0UEd5WlRoWTA4d1ZCR05wNXkrT1BQWTliZnI2aWd5Z2lVZ1g2aGFaZkdOYUhPWWR6ei8wZmZwVHJEejNCcElQKzJqQ3RVcVJrMUZmMGk1STgwMlNESGlGS3RoOTZsTU9ydTh5RHArNGNuVXN3OVJnU1dWK0tCTXJlbnpRTVNrbXZORFJ1d3J6Wng0WU9SRWNNanJvTDdGM2ZadS9hUGpNbm1YY0xZdnJRcHZ6ajhuQmx2U2NyQkVXbFVDb2pvaWlOcGxDUnZlMHBzNFBJdDN6OTYvakZYLzhoeXE3aCtrTlBra1hGYi8veC9meWJkLzhGRnk3c2svVnk1bTFNR2pFa1RaZnlLTDFjb0RWa1dXUllLb3lSWkZJbStic3FrL0hEZWE1ZjNlYzFiMzBOSjIrOWlXdFBQa3pvSnJpaUlncklRc0MwSGhNREFvVnpOamxoRVZ5OVBxWUZjcVVvTW9sUWtBbk5xS2NZOXVENDZwRFRXME9jdHl5QXk1ZDJFTTRqalVKRVQ5dUNjNTR5VTRrTE50bkhYZjhrMjFlZTRMN1ArM3Q4L3ovL1JnNFcwQVhIcURKVTJxQmw0cHlHTk54R3lLU1U2dmR6dHJiNndENm1QVmdXNUNTOWxUWFdqbXlpVFFHeEI3TXI3Ri84Qkt2SHR2akpmL3VQdVBOa2h2U1JZVmxTNWRETEZZVlJGQVl5azlxUTNpNFFxa0VLbjNJMkxxSmtSaU0xOVFMMkR5MTFHMUFpbzZzdEcrdXJIRCsyZ3ZLU2xiS2lOQm1aTWlsV0VKSk9yWmZuREt1Q01qTnM5RXMyaHBveWwyUkFYaWdtNDBNT0R3NllUVDA0ejlaNm42SW8yUjgzMUFzTHJjTUVSVmIyeVVhbldSMXU4aWQvL25GKzVOLzlGWWZUanRWVkF6SFFMMlVLbTR1VXZSVWlVaFVKeVhIcDZoNlE0WU5nM2xqbWl6Yk5iNldtN1dycWRwck1HOVVLSnM5eFhjZkZLL3Y4MU0vL0tiLzZYejZHeWhWYjY0Ym9JNTFMZGhFWFBjNTdPcHZzSEJjdlQ5aStzb3VYU3hPV3RHaXRNZHFBOTBTM1NBWW9LWEZkdzNSL20yT25qN0Y2WkpQZDNTbTl3akJyV21Md2pFcURzeDdoQTZ0VndVcVZzVFdxV0IzazlNcTBzZkJBWFFmYWhTTTluZUh3WU1MMi9od1BEUHVTVW1ucXFTRGFTRGxhWjdoeGdpc1hyL05EUC9JN3ZQL0RGMWcvVnFGa1pGam1ITnNhMGV1WnBOVVRFdHM1U3VCd01tZG5kNEpTaXZsaXdzSDBFQmMxUmlVbGFwWmxySy9tcksyV1NHbVlUQzI3MTZmOHdSL2R6OCs4K3krNGVLWG0rS3BtZGMwUWhXQjNhcGxNYTBvbDZabUVkSmtBbHk5dHN6b2NvTTBRMzBueUxHYzRxREJhc2xnczJOM1pvK3NTUnpIWUJSTFlPbm1FeG5wRWlEam5hTnFPempzYTcybGR4TVhBem1UTzliMDVneXdqTEJhY1BIT1U3L3pSNzBKaTRmQXBGdU9HdXZ1MHVFQWlWWWFnd3hRNS9kVVIrOWQzT2R5WkpSWXJna3hMeWx3ektBc0daVUZaR29wY3A0bW1ValRBTTg5ZG85L2ZvRmYyOFYyTDZ5Sks1WXdHUFV4UjRWb0loODl4dUxmSDEzLzNOM0hQNjE3Q3hRdlgwRm9ueTFSSUdqL25YSnEreFJSamNGMUFHME8vWjlJbUprVHlJazl3YTJDckFtc2ovL3JuUHNCdi9kN0hrYTdsd2pNN0hCeDI1SG1MNnhxRVNtQjRwVVZDYnRHUzU0NWVyNGMySTF3b3NLN0YrNUMyYTk0QkRYa3VxY3FTR0FYVG1hVnA1cFJsc3BGNUh3alI0YjNIajU5bDUreEhxZnA5L3ZsLytBbSs3ZnUvZ2RuK21JTzlhU3AreUdSL0VpcVp1S2JObktaenROWVJZcHAyNnN4UVpKcCtrYWN0bWhkcGdTdlNZYTB5QmdWSmh4dFNsSzV0YmNLNmVVOWNrZ1Z5a3l4UFpWRlM1bjI2aGFPZXQ0eW5FNmJqS1ZtV1l6TG91cFNwYkp1YVNOSmVOck9PdG92MEJrbnZLdkNKbFIyUzVySE1jaFFhSlNSYVpqZ2ZDZDdUT1V1V0svcWpJU2JYU0dsUnhpekxSZjk3d1FYb2dtRFJwSlNKOHlud3FLUWh4SUFMTFlLY1BBdElHYkJlRUh6QXkxUVBkOUV2cDRzcCsyTjlsOWJFM2xGS01OclFOcDYyOWFpUVVSQVNXMGtIWXRjeG16cXNWK2k4ejdEWG95b0ZNWFlFbnlqNlFtWkpnYmRrcVB2bDd6b0VCL2pQckpBRUVSbkJPWXRVaWNPbktZbXhvYk1XUVJwUGU5RWhaVWFSZWNyQzRheGp2bWlYZTNwUVJxRVFpTlluaklFQ0x6cEVDTFR6Qlc1bXlZWWpqSko0MXlKTlRoUXEvVms1eThFc3VTbXRUZm9ycFNXK2l5eDg1SUgzZlpqWjVEWnV2bVdEMFlhbFd3aWErWmhNNXd4TFFidUFlUk5RZXNMNUp4NGhIT3h5eTQzSCtPVGpWNmdLd1VxVm80MW0wYlJvN2VnYVQ5YzVySjBqTU5TdVlPWVZuWVJjUlh3N1pqS2JNcDdOMFVvdzZCdFdScEt1dDRZb0M1d2JJNVZFYTVGVzgwcXhXbW9PSnczWERpMUZwc2h6UVYzWDlIb1Y3L3lIWDhYK3ZPUEtBeDlnYTFWU3JtMHgyVzg0SEUrUVBqQWNqc2lySHUyc1kzSXdvY2hoMEZOMHpyTGE3ek1vRmM0NUpuT0xVWkpNdzEvZS93VDN2T3dvSjhXTmJNODFpZ095WVlhUmdPcHdzOGgwTGxCMlFyT3p3N01YZDBBYTVyVkg5eVNGaWFqb2FCcEpoOFg3eU9vZ282bFRxYWlwVzJ6VHdtU002eHJtaldUUktnd3c5WkR0ekJncXgrb3dvbFVxODdndU5kZXpRcUJFd1h6UllKVEd1UWpPczMrcDVtVjNIK2NmL09DMzhJclh2b1J6SC9vZzNjRWhIM240SXIveW14L2srYXNMYmpobWlGR3pNKzdRVXFRSGpvb29rUTRjVmFtb1cwY3VGRnFsRmFjU09xR0FqS1NlU3l5ZW1NT05MN3FGMmY0RjJzTkxDRkZTeUFCWkpHak40Y0loZzhWb2grNVZySTdXS2JSZ3ZqTW5BTVlJaWxKUytwem9GT3NqemFqTThVZ3U3Ujh3Ynh5WmhNVzBaVkZidERFMFNKd3dCSmQwY1RZRWFsK2h1eG5HUGNLNFgvRDJyLzU3L1BkZi8xT2VmdllhSjdZcVdtOHBsaUJhSmFISWN6U1NoWFhvb3MvTytTYzQ5MFJGYVZZWURBeFNLbFFtQ2ZSUWRZMklDNHlTRktYai9OTVAwKzVjNXN5WkRjNDlzOGV4dFQ1N0UwL3RPbkluS2JURUFNSjc1b2RUckQrQ1ZMQXlVa2kxeXJDbk1XWE9MQWg4bktDa3BDcHk5S0JQLzRZQjFiQ2s3UUpTeFFUVWJUdWsxTXZ4cTZQTWNnS0tRTWRxVHpPcllkRkVCSTdaSWptYXRWRWNiTThZendLckt5dkVJTlA2V21oNlZZSFJpaFpGMmU4VGJjZGZmdUJ4SEdrMUZMeEVxb0NVQ1ZzUklzblNRUUovejRIWmJKNDJDRjRRZ3NUNkJpVlZtbnhMbTh4WlBpTlRpcW8vNU9pTk4vSlhmL0loM3Zmb0FUZXVHc29zdzRlUURvaytMQnVRSHV0VENhT0xJRnlMOWpWWi95ak56Z2hSVHdqUzRaVWlCa3VNQlZGaytOQWxoRmFzS2ZLakNKMXpiVHpqMklrTmpxd2JMdTRlY215bHo5RzFQdnZqaHJJMGVKRUtmVm9XekZxTDg1NFNHSTRxZW4zRFRKSWlFVTJLcDBRcHlBdkIyb3JBV29mM2pxSWNjT2JNTWY3bnIvMEI5NTlmOE1LdGtreEp0SUxhV25wYXNkcXIySTh6WE9jVDJEM3JPSmcyT0c5UnNXWFdSR2c4VzJ2dGNvcTNBclJNcHd1RWtLeXVqbGlZRVVZYS91cjlqN0k3ZzV0T1pzenJ3S0YxREhxd1VWU0VFRG1jMWVrQ01helkzVzN4ODRhc2tKaFNFNmZoTTc1d1JiMTA2V2t5S1NpR2Zjb3FiVld5L2dpcFV1NWY2eVVxamlSTkQrbWVsK0l2SVhKNTk1RDViTVkzZnY4M3NuSHFGTnRQZlFoTmk4a2xSZ3RDVU5Seml6WXBHdFpaaXhLV3k5ZDMyVjNBNnFwaXBjb3BNNEdQRHEwTERJTE9kZFErVUV1ZkRsakF6dlVkdXVZQUo1TFNMNGlJb3FNL3FCaFZPU0lmUUhlQU96aUxXWDhOWC9zZFg4MUhQL2dRaCtNWi9WNkoxa245WjUxSGFrVVFhYkFTUkNUUGszbW1WSUtvTW93Wk1Cb082WmVHMWprMmV3WEJSMzd0TnovSjh4ZkhmT05YM01mVlJZTlRKemk1dFU0M1BWeVNDcGFLUVZFaFpZY3hxVHphdFpZWTBnR3lLREtVa0N5YURoOFZSaWZHYzEzUHNEWmlUSllHUHNFeTdHZEkzVXRtcy9sMURwNjNtSTA3K1B2Zit3ODVkY014ZnZaZDcrYmloZXRzSGx2L3pIUE5TSUdUS2ptWG5hZW5EZFphNXZPR1hCdWlFdGc2TmFVREFlc3NaV2xRa3FRMWxsbjZIcnJVeVlDWTZERlNNUGNwdjlndkJiMHlaMjF6ayszeEZRNG1IYUpYb0UxTzAzUXNGaERzZ2t4SzhseWdESFMxeDdaUUR2dFlWK01XRm11VGI5Mm9tTnIwdHNNNVQxWDFjZFl6YnkyWnpzaUxESXZFTzRlZ28yMGFyTzJTSi92dlpCYUJDMWNQYUZYZzVqTWJiQXhLQ3BuaFpmS1pPanhLQnJTSjZRY1RndUQxMG9hWUFNNWh1Y3YzUVdOVVJBaFAzWUVOWUl4QmFaMjRkOUdtMjRkMU5EYlF0UUZWcktBelNhNHRCWWZRUnJ6S1V4TlRDUUtlenZua09pU1ZabnoweXptbHdnZEg0K3l5L0pGRzZFS1JJSmd4VFFqbjlaeGUyVU1JQnlMQk43Mkx0QzNrUlVGWmxPd2lVVTJMbG9hb0ZGSW4yMHF3Z2JaMmhLRHdTMXhBb1NUQ2FHSWdyZHpHTGRsUmhlOW1OTk1aVW9IV0dWVlc0WHlMVkMxUFhEamc2SVBQY2N2UkVSY25PWU1qT2RJc2EvWFdJZjB1WFoxV2l2djdndG4xSjNqa2tYTTgvT3crZzZySFZyOUFaWWtWSjZVbnQ3RFFEdXNzTzlzN3JHNE1xZm9iNERyYStTRyttWEF3aSt4ZU9XRGhPcmEyQnZRTFE1VkpzbDVKVklwSkhTam1Dd1o1V3IxcW5ScGxyVkRzekZwdVhzdXd6ak9iVEhuakYzME9ONzNvZHA1NDhPTTA0d09PSFRuQnFNaVo1b0ZlRWRrY0ZQUTJWaEJhcytpbWpCY2RtWUZjU1hvNlkxUmxsTG1pYVFXWmljenFta0ZmOGRqVEIvenNyLzAxUC9nZEE0YkRQdFl2TUdOTmNNdENUMTZSQllFVDhNdS84N2Q4NHRHcjNIUjhoREdSTWsvckZlczg4NjZoS2cyRHZtRldOOVJOeEZwUDI5UmtKcWVUaGlicXRCNDluT0prd0NqUHFMZVpsSW0ycFFwaCtWbFhkQTRPRHhiMGV4WGVnY29kay8wNVZXSDRyaC8rU3I3b0c3K1kwY1k2OC9HRTJPdnpTNy8wKy96Mm41NGxrM0RuNllxRmMreU1XL0lzYVNoRFRBZUJYaWs1dnBtblZmeFNlOWRZaXhHU2xTcGpXQmxDN0JEYXMrZ1UvVUdmRTZlM3lGU0x4dUdFV3FxT05lUFpuSjNkR2IxU3NyWlNrR2M1ZVpHbFVwZHJNWUFXZ2xGUkVJSmlZMjFJdnhRY2podm1pd1VxQ0tvODUycFljRGpyYU5zNXZtMll6eFpJSXlCNE9wZCs3d2lETkVOa3REUUh1Mnlkdm9WN1gzTUhEejU2TFZsOGNvM1JtanhUSUVFZ3NUN1F4Y0NGcTNzODhNQTVicnY5T0djWEZpMENvd0tLUXVKa0gyVmJFQzFXRlV4M1cvejRDZll2WDJWODJESWM1ZlI2R21LUC9TbDRsZnphaDdNRlNrcnlJa3VaMVJDb1NvTTBQYUtiWWVzNW9EaTZXVEdkWlZoYmsrY3BEelJyUExWTmlsQ3QwaHBUTHA4TFVvTEpETUo2akVvMm1oRFNCRkFDd1FjR3d3THJHaWFUQ1VIbUZHVkRWU3F5cktMTUExNTBoR0RZM2o4Z0M4L1RMd2JrbWFZbm9WY21sV0hTOUNWZG01YVNmcUZwbldQV1FBWnBTc3VDeFh4Q29SeDVWaEtpd05rYUtUSlFodG5CUGpFY01senRJNlJrVUNuS1pSRGRoZlJyOUFxTjl4NGxGYmt4SE01bldCOFpaQW43SVpWWlh2UXRNa1pDM1dLekhwNEM3eVFxdE9RaUlrUkJGRGw1SmhrTU1qb0hyYldzRGtxR1ZVSHJBMXRyQTVUUmJFOFc5RXNGTVdVOXM4d1FRMkJQMVdTbHd2bVd5YVJEUlVHdmw5RzFIWWVURnFFRlJhOVBxQzNXcDJlM2tqbkhqdzQ1SXRJelhRckZ2TzB3U3RBMERWTEJ4ckJLNWJ1UXZsKzJzOVQxbEtJWDZPVWxzMW1IRDVwSXljSGhncTViRU1PQ3Frd1RyL1hWQk9mUGM2aUJ2WWxudFErOVVoTmlBbVNYcFNGNGo5U0dSZHN4eXFBcXdmcVdFRktwb0ZsNHNzeWdpd3d6YjRsU29ncUR0NUc2c2RUTmd0VlJpY2cwZTRjemptNE1VU1o1M2cxcDZoWmk2aEI0NE5LVlhWNzI2dHU1NTNOZXlmaktzK2h3Q0wwZW94aFFJbVhNRHcrbldEdm55R3FPMWhYVDZaeHp6eitQQndhRklzOEVtVmFwRUpobHlCaVpOd0Zzb05DYXVyRmt3TUhlakwyZEtUWW1MckhXUFRwS1JBeGtPaERFbkVVam9OMG1YbnlLdTEvekVqNy83MzBXZi9nYmY4VndXTkhaZEFES1RZNVVrczVacE5CRW42STFTdWxFQjVDS3lYUkd2V2pTd0NWSVJJejBTc1hKb3dWLytzR3pQSC9wZ08vL1IyOWk1V1NmQzlkYVRxME5rSzdHKzhEU0RadWtCTjJNRUJNTFYyaUpWZ0ZuSlQ0WVd1dXA2em5EdnNCa1BiekxVTklqWmJJTWFhTkFGWFErVUdZQklReWhQbVR5L0NlWkhkN01XNzd5SGF5Zk9NN1BmdTlQYytYU2RYcnJhK1JLRTMzQ2EyVTZ0YjhKSUlWS0Z6bVQvcDJNNlptcFpmSnFXK2RwUWt4RUVaV1VmNTBYWkNibFVUdmJrZXVNS3M4SnJVSUxTWlpsOUtvZTFXQkE3bGNvVm9aSXFkamJteXdWalJtbVZQUUtnN09CZVROajBCOVF1eG9DVkhuSk5DendCQ3FUVUVKTjdkRW13OGVBRFg3cElLOVROdDFIWWt3aUFvOEdFc3Y0N3g0V3BXRDNZSTR1QWpjZUg2RmlUUDhqRzhsMW5qeTNXaWNkdkxJRVV2Tk1JQWt4b3FVbWhvNndERm1HS0ZCQ3B3OFlvRVNrS0ExU2dsdDB5R3FBTGdkSWxYYnNhNk1DWW92dEhCMTUrbkQ1aUZSMldUaGdtWFZMN1IwREtKbWhaVTZJcEFhU1NyKzJGQUlid0lWQXJ0Skp1WE9TUEZORUxLMFRxUTJrUEYzck9iS3BPWDVzaE5LR1hxOUVoQUthT1hYWEVaQVUvUXlsRXl4V0IwMHhLRkZTb0ZWTStybEJnV2dYYURXa1dObGs5NmtIMkx1Nmk4NEZ6aWV3WnhTZXBndTRBSC8yMTArek1TcjQ0dGU5RUg5ZHNXZm43TXdhK3VhQTRTQ1pSSlNNSEJ2MmVleXBhL3phYjkxUFV6ZWN2bUdOb0QwaEJrd3dxQmdaVHh1dVR5TEgxaVZsTVdRNDdET1pIaUlXQzdMbzhIbUpDWjVCVmREV0JtS0d6UHFZYWtBTXlTOGJscCtCemlic3pIVGVRRkQwcW9LRGFVTVFnWU5KVFZTU2w3ejZSYlNMTVN1eXdSM1pRaWpGZUR4bnZwZ3p5aFVpeXdteFM2NW9sZUM4VFF0YUJWWjZPYVhKbDU1WXpiQ2ZPSjdHd3JITndFT2ZPdUFILy9Ydjg1clgzTXBMN3pqQlNwblJkaFlsRkYwY2MrN3NOZjcyWTgvd3lKUFhxZm9xVFJXSzFQQmJOQTZwSkZ0ckk2U0EzY21NYVcxcHU0UkpzbTFIVldoYUN0cTZZNlh3TkpWajBncjZ2UlVLcFFqV29YeGFZOGRsYTFCR3lKWGh5R3JKZk41eTd0bGRYblQzQnYvNHg3NlRWNzdoRFJ6dVA4L2g3bld3bHUvNHpsL2hJNDllNWZSQUlvMWt0cENRYVp5M2xFczhpSklSb3hTOU1wV1BsQlRJekNGaWdlMHN2Vkt4TWlqVEMxWW9USUI1M1pLckFHMUxWQ3QwQ256WHNvZ0trenVVdEt5dFZaaGNnakY0NjRrK0JhZUYwbFRKZTRRV09VYzJLb3JNY0hWdnpIamVZcVJndFJvZ2Rjc3dYNkJWQ282NEFORkhWSmFhNndTUEVqYjVmVldPaUJFdFd5S0xwT2NDVnFxTUV5dnJYSjlNa1hJWjQ3Q1d4Z2IyNmhxVTRkZisyNGVKd0Z2ZmRCZEJDaTd0VDlFS2ROaEQ5d3VVMFFpaktmRHM3czc1VDcvK2NTNWRIblA4NkFnZkFtV2hLTm9jSHh5ejZaejlQYy94azVKOG1GYjJuWTM0dXFNTER1Y2EraXQ5cWlLak44b3h4akU5YkVGQzJ3U2NEY3ZzWVVKUlpWbUdRaWJvdjVRcHYyc2RaWmJNS0wweUVza29kRTFta2pYSytmVFA2RDBLa1NDOU1lVWRMMS92Q0xHanJoMlZXaEM2Tk1IUkprMGJqRktNcWdvZkFxTit3bHBVV1VidExNRmI5ckEwblFVQzg3cEc1b0ZlcmlBNGhNZ1FWSWlZUHZkTjY2Z2JDN1NvWExGU1FHWVVSRWVtQkZXbWtjclFLMHRHL1lwcVg3SjlNS0hNQkhsbWlORmpsMHJBZ0VTU0lYekFDWU50WnlrUFhpL1FSYUJZdndubjNQS2RBRTNuYVdySDZjMFZMdTlOdWJRelhrWnJGT05KUzJZa3VWSzBOaXc1YitCdGw5Ym9UY3RLcVlnZUZyTVdMUlVpcGt4WG5oWDBlaVZTU2F5YmdyRHA4eW1YZ0djdFdlMlhaRkl5cmx1a0Y1eGFIekJwT29MdDBLVkNpSXdpTDhsTmcxN0pNS2FrYVN5SGg0Zk1HOC9tV282UUdjN21sTkxnbldkUlJ6UlFsS2tRdERySUNWSFNkbW5hVjVZWlFrcGEyOUpZY0NJbTdWNk1IRTVuYUoxampHRzZDTXpxaHBWUmo5WFZGUTUzeDRpUUptMnVxL0Z0UkZTQ3BrdUlPcU1WVGRzaVlreHJRQlR6Ull1M2xqZjl2VGRTRFEzbkhuZ1kyVFhvc3FDdUc0elVhT05SU3RDMVMvOXphL0VIY3hhSHM3VFZNd2FKb0Y4VTZiTmkyK1JtTDNOeUZiSE80WDA2REJnZEdQUUxndTNUVEF5KzZVQ21UZVBFdG5nUkVUcVYzK1o3RjdCSGovUFdMM2tqSC8zTEIzQXVnRlFVZWJxUVdKZWM5TEJVL0tLVEtqSnFaR3pJc3JScVhkU1dBR2dqYUd6QWFNbU5Sd3VlUEwvUDkvN1lIL0w5My9lNXZQejJFeng3NExqNWprMHFOMmRlZTVDcDJCR0NTQnJnUWhDQ1R2N3hrTXh0enRiTGprR1Y3RzFhWW5LTkNFdGFneklnSWlJMCtMWkRGVDJjTUlodVRqeDhqTXZuUFM5KzlhdjU4Vi81UVg3NmUzK2FqMy9zTEdkdVBKWENjTXZMbVBQSldwZm5CcUVVMDZaR3lVZ1E0VFBxWENsbDhzaDNscXJJbHk3d0ZpbkE2RFJGZHk2QnU2TUE1eTFONXlGQ25odjZ3d3lUOVZEREVjWEtrSTNOVmZJTWhtVkZyaFJkRjRnaTB1L25XTzl3blNQUFV0Rm8wTmRwVU9jNlloQmtoVW9NWXU4UU11SHdVdEkwb3FSajBVRWJDZ2FsU3dnbXFmN3VZVEdFeU9xd3g5cktDT0UxenFaTW5sbEs0WVVVRkRyU1dZdnIwZy9rUlljV0NlejRHWTJNczBqbGw4MGNqZFlOT2VtRTdWMkhiVnZhT2xLczlKYUZreWExZVZ5TjFnb25NMndUSUFxNkVNbXpTS1o4YW1vcmlWWjZxZWVDWEd1MDBEamYwYnFPd2hoa3pQRjRRa3g4T0Fsb0phaktnaGc2cGpPTFVKQkhoVzBEMGNPeEU4Y1lESHZzN0Z5Z3RWTUs2YUVZRUpVbjJnVytiakRTVVdXTGxFOTBDMFJSRVdPNm5RZ1gwaC80Y0pWK3FmbjRvMCt6c3o5bDBFdHJpOWJhZEt1U2tsSGZjSG5YOHZPLzhSQ2ZldXdhbi92YTJ6aHlmTWlzQ1V3SmhDN0RTTU9WN1RtUFBmY1lmL3JYei9EODFSa250aEs3TEM0OHJuYlFCVWJyQmZlOCtnNCtmMnVOTThjSDNITEhCbG04VGplZUFEck5YSzBnK282angwZjB2Y0VvUWVjQ0I0Y2RzN3FtYnJwUFg5QndzVXMzYTVYY3gwZHl4L0dSWWx3NzJrWEhTMTUrRzY5K3c5MTA0K3VzVkFxWHJiSm9GOHpyRmxyUDlxTGp3cVVGWjg0RTFrL04wa3NtcGx4WldacjBRTXdDODdxbHRaRWl6eGhXUGZhbmM0U0luRHlhY2VuU2hGLzdiNS9nNU9aREZJV2hzeEZrQWhQdmppT1ZnYzBOdFd6WFIrYXR3L21rUEZvZEZKaFNzeityYWFQSFpBSWJVOU83UDZ3UXZxRSszQ05LaWRVQm1RbjYxbk53YlpjMnp6bXlPVUpuSlQ2MGFCa0pYYVR6S1h4KzVjSU9KaE44OHo5K08xLzFENytFbzBlT2MvbnBqMUh2WDJSdzRpNkdtOGY0cG05NEU4LzgwLzlHdElGZVAyZDMzSERpU01uV01FTnJRYTRGdVRIMGVoblRac1prWmxucFY0a2lnQ1hQRklNcUp6TVoxblVFSWlaTFdLcnJCNGRjUHZjc3Q3NzRGbkNheGVFaFRTMFlDVUcvWHpMVWhtZ3RkZXRvWkNRUDZmYWRjalJnTW9kU2tjNDZ4ck9hdzBtZE1qUkY0cVBXVTQvMzBDc1VRaXFVcVZCRlNSUUsyeVhiZ2pZNTVCb1JFZ2ROQmppNGZJbG1lNGV0RVF3S3pVb2xzU0dudFI0bDViTHRGOGhWVHBkSER1ZVduLzNsRDNIL1I4L3hwamZkd1kyM0gwT0lRTjQxWkVFUm91ZGdmNXZISHIzRW43em5VUzVjbkhMaStJRE9nN09lMmVHY2F6dUhySzJQdU8zT0czbmRtMWQ0d1l1MnlFdE5QZDVGdUpvZ3dIbUhVQm9STkxIdHFOc1dyM0w2S3dOcXBlaDhNbEgwY2xCQ0pLeUgwWFNkVzA0cmJDclZGS2tSclRRSXg1S1ZsaDdtTzl2WHlJdklzV01qR20rd0ZNenFpTmFwcExDb0xhRnBXS2tFVzBkSDFJMUl4aGNOaGM3bzV3VlZsbUdEbzkvTHlaU2tianRLa1hGcXMrTHE1VGxLNm5Temo1ck9PblRib3BVRXBXbnRIRUpnTUJnUnZXVStQY0M1S1FxQkVZbE5xYldrbCtlVXVVa1dMaG1KM3RLdmNqby9vTE1TSVNMV1J0ckcwVFF1RlJNeWpXNHRaV2JRUllHMWFSSWFQRVFYQ0w3RE9ZZTFrRW1ZZDVhNGdFRS9aMis4d1BtR0tqY1lyWmsyRFM0ejJDNFNmRUJLVXFGRnBSaVNzeDB1S2dJS25VbWtMTWhDNGpacUpaSFIwM1dleGNMU3BhdzkvY0l3Nmhka1FnS2UzQlFKOGRVMjVEcWpYeGlDempCRkpNUVdLUXpJTENIWlFxUlhHVUNRNVJXNUVjVGFzcjgvcHRjZjB1OFpJakFzTkwyOElBWkJMeE5zOVFlRW1Bb0swU3NxbzlBYTZ0cFRtSndpMCtudlJxU0xpRVl6cUhwa3h0QTFsaGdqQWsvb0xPQngwVk8zbml4enkxYXRnQkRRZVk1V09xMnpyZWZrVGNkNDhiMTNNZC9iU3dPMWNrQmQxNFNnd1JpNkVEQkZtZDZ4V0NTT2xWRkpwZElnUlFoQm1SbUlIdWM4RW9HMUNlWmNsZ1phaUYzaUNGYVpwT29GcG9mZGtxb3I2Wm9XSVRYRWpCQThTcVdNdkhBTkI5dFh1TzJ1V3poeHl6RSs5Y0RUSER1MmhZeXdiSVNDY0hUZUlUVWc0N0lVWnJHZFpVc0Y4a0l1aHp4cE9rWU1ORFlna0J4Wk5ld2NOdnpBRC84UmYvOGQ5L0xXdjNjM1R6NWh1Zm5tSXd5R2h2SEJJVkU2Wkt5SURsQXQ4eWJocFVZRFNXWTBLeUxENkFwbGVrd25NM3pRS0M4UXdYMm04MkNrUmVlU0VBemUyWFNvTkQyMHNEQjVoc3RQSGFENkovaSsvL3RIK1g5KytiZjRnOS82Qy9LVm5INi9oMGg4SFd5WHRpcUlKUDFBU0lUMEtBbXQ5d2puY1Q0eEMwTklxRFNkR1pTUWlKQ3l0bVdaNFdNcUR5ZWhCTFJkUi9CZHlyazNIbE5JVnNvK0cyc2pTZ014dEFqUng3YXBmTnVyZXJUZE5KM1BYTVJHaThrVllrbHk4QVFRamx3WHhNNGpCUFFxZzRpQ3VtNkpqV1Z5ZlpmV1I0cEtNQnIyTWVyL09DekdHRGw1ZElXVEo5YUllY0ZzcWNCU1NxWE1RWURHT293V05IVk1XQVdScFY4OE9rS3dnRUhKTExrUjZlaDhtdXgwd0h6UlVEY3RSWmxqMUFBakxLRmJvSFZDZVRqdkNkNmhoVU1KbjRUYnppUHpBbThUY0ZsVnk0TnRYQUtxbzhNRHVTNUFwTUIzaDAzRkJKbkd2Y2hBbmlseXFUZ2NCNlRJbHJvZUNOS3ltTU9SclMxcXB6aDg3Z0w1L0FvTEVTZ0hxL1Q3SzdoQzBIVVJGek5DMXhCVlJVN0FlSk1lbXNJVFZFbVFmWFJ2bmZyaVdmN21MKy9ueWdIY2RpcmhZc284WXpadkVralV3N0JTRENKODdKRnJmUHlSYTJTNVpIMjFJTTlGQW4yMmd0MzlsbkViNkJ2QnNCSmN1ZTdRT0c0OW9ybjN0WGR5OTJ0ZnlKa2IxdGpzbDZ3YXhieVpFcVZuZkRERCtVZyswTGl1Uzc5bk9uUTVZS1FNaTNuTC90NlVrMGNTdnFaem51a01ObGNoSzVLdnVzd01GbWl0SU5NWk1kWjBUY1BkOTcySWt5ZVBjWEg3WEdyUk9VRnNGWm4zaFBtY1ptNkpMakEvbURPZExTZ0s2QTh6aElUWlBPWDhzbFV3TXRKR2orMlN2cTFwWTZMaVM4L0tLRWMyS1hJdzJhK3hIcFNFTEJPY09aNFJBNFNZYnRKR1MwSVVsSG5Cb0RSTVppMTJzc0FvUlNZa2MrK1NnVVZxc2tLQTh5bm5weVUyYUtyb2lkRXhENDZGOWN4aWliSTVMQ3lEUWZLZDdnSFBQcjNMbTk1OE85LzZBKy9nWmE5NUZiUDlYUzU4K00vb21na1Rtek9aUDhwMGVzaVgvdjIzYy9MR0xYN29ILzRpWnkvWHJLd3FqUGFzOUEyVFJVY1VFZEFJSEpxQzNDUy9xcEVGclYyUW1Rd3BaSHFvUkVudzZjR1ZaWXE5S1R6MjhjZDV6ZXRmU24vekdQTkppK2tGTW0waHFuUWpuemVvcUhDWkpQZ09xU0xyNnhXRERGYXJBVHBMem1PNW5NQjNya1U2dDJ6aCtaU1RLa3hhRTgwY3ZtMElSVWFVQWFuVG9kSzNIU0k0aGlzVkt1dHorZXhEWE5rWms1c0NGeVJDUlRaR0ZkY1AwMFVoUkhDeElRYUZkWkZCTDZjcVBYLzc4RlVlZVB3YVcwY3FvbEpvWURRb3FMdU83ZXRqOXNlUkxCZXNybVdjdXppbEwrRDBRSFBtUlRmd3BydmZ4T21UbXhBOUs4UEFjTldRWlpyUVRlbnFscGt6ZE02aE5SUTJVbHVYN0EyNXh3aUh6aU9EUWlCMWhvZGwwOWZqZkNDRWhNbXh3U05zUUJMcGxSYm5CTTRwK0RTTFZFanFaa0ZySGFhTlNDUUhCL3ZNTThGZ3RVSjJIdDIxMUc2R3FYb01SeVdOcmJIQjBWZ1Ewbk5rSlNmVE9kTzZUbHJHeHRQWWxrRlI0RnpIREJBcWJWVjZWWWJ3aG9pbWFWdXNXOUEyTTRRUVpFV0ZNZWtnNW15SFZPbkZueGVTWHBGUjZJTFJvTUM2aU8wYUZ0WmhkRUd1RmNZNHlxekMrWTdGWW9Hempzem85Rndua3Z1MG9qYW1RNjV2RXJvT3V4Z3pMM0tzNytoOGVxa1ZlV0E2YnpneTZER3NjbXpuY0NFVjJRcmRZN3pvZ0Vqbnd4THRvbEd5SUVyTm91MHdtYUtvMGdRdjB4RXRKVEZDMjh5UmphVlg5UUdCa2JBMktPbGxxZEJpbzBmTFFKVnJpcUxQem5pQkZOQTBIV1hWbzIwYjJqQlBpSXZsZ1ZLSXRQWTJSdE8xRHQ4RmZBQmpjNGE1eGhRSlB5S2lTcE03clNpejlMMGQ5QXJtalU2b20yVnBUMGtCd3VLYUJmMUNnMG1rREcxQTJramJnUTJXdGwwZ1ZJR3pMVW9HaEJMSm1CVVQwZ2FsTU5yZ0hRVFhVYmVXNnp0ajdybjFCZlFHR2MzaElRYUZFbzVCMWNkakVralpKVy94Y0hVVjF6VVUvVlVHQTAzVExwYUhSVkptbGZTNWxVSVFuYU5ySFdXbUU5VUVLT1h5KytyaVoxUjNTa2ZVc3Y4dlRPcVl4clloYUEzQ0VPb3gxZFlLSzF1YlRDZVBjbndydGVOOWhJREF5SnhjUTZFTnpvRlhsaEF0NDZsalBwOWpyU1hUTUt3S2RLYVJBcFFLV084SVFYTjhYVk8zbG4vekd4L253dlloMy9uTnIrZktzNHFWRXh1c0RVdGltNWpDclpNWTBtY21rbkU0U2ZudDBiQkNDb1czQ3dvVGNGb2hsVUxJRE9FRnRwdERscUdWcG5NTnRrdjZXSzBpalFjZEpXWGNvL0dSdFZOMzhnTS8vMFBjY09NSmZ2NWYvUXF1N1RoNjVBUmVlQW90RVZFbU5tUmhtTTA3NnNZdE5ZR0IxbHJLSXRsdHJIWEpUaE82bE9razVTdUZTR1duNEQzWmtudnNRc3I1S2ltSlM5dktaRnhUTHl4S2dmVTJSVTBLa1N4bTNpRkY0ajZHNkxIT2tlVVZsZzRaTmNFSFJNaFl0QUZCK3E0TEdWR1VTQm9DT1VaSDdPS1FMdWEwTHYzNi96L09vaEtDR05MQno0a1VVbFZhTGx0T2lYVm9pR255SWhSNVhpV1dZckRFa0NVSHRBeUo5UlFTR3NVSGdWMGVSb3NpbzZ3U2pES0ZyaFhPUldSTXhoYm4wdHJBbE9tbFpJZ1FMRUVJdk5lNExxM1hJTEViMDN3NXRRY1RMODBRdkNCVGlVYzJyOXRscTFUaXZVT2JnQkxnZmFUMURVcEpwSUw3N25zSkpzc0l6WUlZUGEwUTVMYkZ1QTV2QTU1c1NXRFBzRm1GTDNycDlpMG1xTGFEMWxHY2ZBRjcyenM4OFo2LzRNLys1bGtXTGN3V0VhTTdyRy93WGxDM3lTdHRwS0x1UEwzSzBMaEEwM291WGxrc3MwT0pQNWhMS0FXTWJhU3o4UElYcmZPV3Q3Nk16Ly9pK3poK2NwM0Z0UjBXVjY4ajVnZmMvK3dPSDNuNE9iNnNQTWJwRzBkRUFuSHVrRUlRbElLUUU3ekN0Z3V1YjQvSmpHUmxsQk9uaWNjWUkvU0tQQVdGZzZCcmZIcHBTc25tc0dDOG1IRTRnOEhxaUJCbnpDZUhSQ2tJMFpJWEdTSjQ5bnlnWEIreE1lclJ0SE11UEhlZTQ2ZFBNZHBZcFZsc0U0TkZSa09tZThUWWtmazI0WmVFWkZqbXpOdU9XWk5FNjBaR2xKWmtRaEt0b0RDSlYrZENRTWJFbUJReE1pZ0srcVZCeU1paVcrSi9Ra0JJaFZGcDZ1RGNsTVo3ZktpaG05TzFMY0VIdWdqV09RYTlWVFpYTTF4YjQxdUJreFlSVzZSWjQrS0Jad2o4czUvOE1yN3VIMzRwV1o1eDhabFA0bllQY0FkNzJLd0hIY3dPOWpuY3ZzeTFuUU0rNTR0ZnhTK01ETi8renAvaDJwNmpQS2xaSHcySWNzNTgwUktCMmNLUjZaeThaMmh0UjJZaVd1UTAxdEoxSnVWOWxjYmI1SC8yVVJBRmZQZ1RGM2picDU2a2Q4TnAxazRlWWJaOWpkaDExRllRUllOemx1Z0Z3UXZjZkl6V0FabjFPSnlSV0hoUmttV0N5U0lkUXJJSU1RaU1rV3l0NUp3Tk00cCt4ZXA2eGZ6S0FYWXl4b2NlUWtoeUkwRVpta1dOVmhtWURIdHdpWWMvOGl3ZmVlZ3FvMzVCaUI0blZWcmxkaEVoRXA0aldJbVJrQ2xCQ01sMXZMbVM0d09NSnkyTHhqUHJJcG1jb0JXVWVYcFk3N1dSY05oeDN5dFA4dm1mLzBvKys4MnZZdlBvRU5mTW1PNXZFOXFXcDU2K3pudisrQ3hmL2sybk9IM21PS3BhcGRtZlU5Y0xpa0xnckVhR0ZveEJ4QUhOb2lZZkJIcDVqbTg2Wm5VQzc1cGNZNzFGUzRVeEdwU2xheTJ1RlpSNURzclNCQWRDa1J2SWpTSXJEVzNkWWh1UDdXcG1reW1yYXlXaHN5a3JyU0xXSjZCOTE5WFkyT0I4Z0FCYUNseHNVQkdrOXJTZFk3YndXTzlaNzJYTWxwOFZheGVBcEN3TDJ1bUN0cWtUYmtWV1pKbEVpa2dRbmhnOGcwSDFHYTJxTm1DVVpGZ09rWGpxcGt1a0NtbHczaUdOcFBBU1p6M2VDNm9pNWZiR2FEb2JrTUlqTWtYakdvS1R5RHdqdEMxTk0wTm1QYXE0bW13dEpoVXlPdHVodEtLMm5ySXdTVnNaUTFxalpabzFYYkEvcWRNaFRJS1BsaGdzV3BkcDJpY2dLMHNJamxqUFV3eERTbUtJWk1vQkU2enYwRHBOc0VPSUJCZHdlT3BsOXF6emdxMWhqNlp0bU5ZdHViZEUxOUlKZ2VzQ1V0ZElsVjdxVW1lbzJOSFZMV0UrcDZnZzZ3WHlyQ0RFeUVqQ2FpOURhMG1JbmtpR3lSVjFhOG1FZ0N4bEpsMEVLUnpCelpqT1p2ajVtR3E0bXRycTFqRmZlSnh0VU1haWZFM1diOGp6SlJLRkZJMFNFcUlRb0EyNUZEUk5TOXQ1cEpUTTU1WmpwN2ZvOXpObWx3OXAyeHJsa3h6RCswVnE1bmFPVER1S0ltRzhSR2xCSkdPU0VGRGxCaVZTcEtZTGFUcHNsRURKU05jNVhFaUl0MCtqelRyYkVSekVxTEErb2xTRWFQR0xpREFHSndLZGE4aTdHdm9iWk5wd3h5MUgrRE1WaVNKU1Zubkt2WG9nazFSWkQ2SmtPcW1SUFVmd2tXYmhPZGh2YUZ1Wi9rNGs5TXFjRUFMS2VPb1dXaHVvVzBkbUpGdVY1UGYvOG1ucWVjYy8rTVkzc2ovZTUvcldPbmZjdEltMEN6S1YwL24wOHhhNTVzcTFPWWNIaDl4d2JNalcxanBTRzdSSUIvTlVNbFE0Q1lLYzFnWG9VbE00QnBHS0o4R1NaeFdGS1duckNhSjludjN6TmQzUlcvbWE3LzVXanQ1NGxCLy9Kei9MeFF2UGMvS0dvOGdzVHdPc2tOQ0NCOU1hNzFLVXFGL21SRkoyWHFuVUMvRGVVUllWeWtpNnJzUFpRT3NTNjBXb2dMVWU1eUE2UzlYTGlZY09TNHZxcHhMUS91R016a0ZWTFVGcndoQ0pORGF4cmZ0NTJ2aTJyc0dGQmtFYStDR1QvYzZIaG1FMXdBV1BkeDFTVzF4d1dEb0dtME5jN0ppUFc5cW1XeGFMLy9mRDR2SjI0MlQ2OENza1NnaUlsaENXSU53QTg5YWhsTWNvalhVMXdVdGlUTHcyTFdRYWhYdUhrbWtpU1V3cldLblNqUUVDMFRiWVlNbU14Z1dEaXptNUlBMUpvOEdSK0hiS3c2SnVLVE9CempOOGNNdGJrc1F0NitlbEdkQjBEdHMxVk1XUU5uVEVHTWxrUVo0N1BKRzZhVkVxVWhVNS95OVoveDIzYTFyWDU4TEhXYTU2bDZldU5tdE5ZMmFZWVlBQmhnNktnQmlFS0lvVllrelJhTXBPVVJOVDNrU1RuY1M4cjBtTVptZWJzdFZFamVaTnNHUy9paEVVUlVIcE16Qk1MNnZYcHo5M3VkcFo5eC9uRGVZMS93K2ZtY1c2N3VzNno5L3YrejBPWXlQQnBaZkx6czFqSG56WmFkN3o3VjlQNXdaY2Q0U1JrYTMxRFlSUXpLeEI1d1daTEJCWVpGYWsxcldabzRzS2x4Y0l1NkRjdUoyWWJiTC85Ty96Z1E4K3d0TlhqamsxMWluWWJ3T1pWRlI1VHFnRnN6RFE5d0hyMGcrenJoUzZsa1NmckN4ZDU5aHRvUUJlZXY4NmIzM0hRN3pxOWZmeDZ0ZmV6MzBQbk9INnM1ZDQrc01mUi9RRHQ0NDdQdkhZTmY3djMzNk8yU3p3dGQ5MlNERmFROXFFTXFFdXNjc093b0FzYTZKMWJLM1ZxRnl6WExaMGpVRkVzY0xEQkJCUVp0bVhieEpGa1Z5U2lZOEZWWkVSZkJLcmV6K2dsTUtyZ2xuSVdYaWRIaXJUc2podWljdGJUTFkydWVmdWJUNWJQY3YyMW9nOEtnYmIwWFFPTFhQV1J4WEJEMm1LN0dOcTVibEFWYVptZHV3RFZpUVdtTE1TNjZISUExV1pVV1dTaytzRklzTE8wY0RhTktjcVBmMGc4UUpDNkZtYWppQ1NIcXBaTGduZGt2MjVZV2tIUnBPY2RaMFJWVVpkRlVqdnNkYXNidW1DMmZLSTE3N2hISC8vSDM0TER6MjR4WTBMbHhDdVpYN2pPbm8wSVJ0dGduVmtaV1FTU2c2T0J2cmR5MXgrcXVRTmIzOE4vL0VEUDhnUGZzOVBNTjl2T2JNMVRRZmJva3J3NW9VbnFFUWJxTXNhNzNxVVNCTURoQ2VFakR4TEhtV1B3bGpMNXJya0U0L3U4VjkvOVJIKy9Qc1V4MFZGWFkwSjBSUGFIcVNsaXpGTnRLUW1OT25EZk0rTGIwZkpsQmxWQW1hTGxxTmx3aitOeThSQ2kwaGNVRWdQOTk1M085RFREVWZFSXNNMkE1MTFqR3BGbmhlTXh1dkV2T1Q2K1p2bytTRy84SUZIMkc4aTI5c1JGeUs3aHcxbk5rY1VaY1pSMDFBVW1yclNpQ2pwUFZodlZyZi91SnJTU2FhWkpEY3AwM3N3UkdvYmVNV0xwM3oxdTE3Tlc5N3hTdDd3NWxjeTJUakZwUmVlNVBwam42VVFjUFd3NFhPZnVjei8vUnRQY092bW5ELzVyVjlIWHQxSm5wZmtxc0ZGZ1lvYTZ3VU1EdWNGMHJmZ0hXVUlxTXdSUk1CNmFNekFSQmZrU3VHRW9jZzBTb3hwdzREVG5vQUdINU1vWUdWT0NGSXlub3dScm1QZTkvUkJJYlVpU3NsZ0Fwa1d1QmlSV1VIWENZNW5jd0ppbGQyQ2pJTGVDR3dZNkFlWEd1ZElwcU1LNHlLOWNjbDhKU1RRTXp0cUVHNGdTSWNVRWlrTlNoY1EwMW8xMTJ0WXA5amZQMkt4YUZOQkI0R01obHhsTEh0RFhxZFZOQU5vRVZCUzBRK1MzbGdFZ1JpZ2F6dWNIUmhOYXNRUVFFY1VHaEVGWG1kSW5iRTJyZG5jSENlTGhJa3A0eHNrYU1uZ0hMN3phQ0U0Ym0wcUd3a1lGWnF1MEtoV0lpTklIRkk2Yk52UUxodUtJaWZMZGJvdzV3cUh3Q1hwRjFvR3ZPc1loZ0hqSWNpWTRodkc0YU5rUGpqMkZpMXJwV084UHVKdzJkTU9rYzQ0TnRhZzFJckZibUtuT3RkakI0dFNGaDlUUHM3bmdyd1VWS1dsNnc3eGd5VXZFK2FyVWhsU3AyeWQ4NEZoc0F3Q1JsWEZKRUNXSFNWN2xHMFQ3RnRtdEcyZ2EyY29tY0RrQW9OV09YaytSY29jU0FRUFl5elR0UWxWbVpQbEdWS21Kck9VVUJVS0cwU0trZFFGZFYzaG5WbmxBak9DRzlCNVFTU2tkd2FCM3ZTNHdXRzdPVUxjUmxGa2xGbktJQ3VsVXpQZjlHakFPaEtodzRmVkFjT25nNitNbUdHZTNwYzRoQ2pUOXo4NmhQQW9YUk1DaE9VQzR3dmF3UkVaTUw2bmQ5QWFSeTBWTXZnVUx4UFFtUUZqSEVQWDBOS2hWR1Q3eElqUktLM3RPeXNvTTArdVJQSTk5d0ZOT3RSSm9MZUJzc2k0YXdJZi9lUWxMbC81WmI3bnozMEZEMnJGOHpMajdObE54bXJnOE1na3ZBNldLcmNjZXNmUjBaTHBLS09hMUY5R05pbGxxWW9CSVFyS2Nrdy90QndjdCtTWlozT3RJZ3JCc3V1d3d3SWxrcmJZV1FYOWtuajBOSHZDOHZaditBWk9uTnppSC8vQWozTGh1V3ZjYzk5ZElGTEhvMmtOdWZwU3BHSUZWNGlTcnU5QjlrREsyV3F0UWNnMEFJditqNmErUXVCOXdOaVVxYlRHMFBiZ080M3FIRVhacHhLUFN3TVBMU09aRm5SRFR3ZzVSWjdPV2lGSWlCbjkwRktvMVBZdXRFU3BoTXpwYllkUWlkWWlWdVFLYnlPMjc3RSswSlBXNE43NS94V2RJMldhNmtoU2ZrS29tSDZzUXBBcnpXRFR6YmV1Q3BRV21NR3RyQ2dycCtCcVhDMWx0b3JVTzhRS0hoMWpnQmhYVFVLUGtBa01HWVZONDlNdmplZEZuelJ6V2xDaXNjYWtBMWNWMGRscUJ4VEJBaUVtcTBna0ltVk9OL1FnQXIyejJHZ1JQdTNuZGE3Smk0d1FBc0VaaUJLSlpuWU1mLzM5ZjVMVGQ5ekpwZWNlUVd0UGtEWENnM0VEU0oxeWtkS2hnRHl2UUdrc0xyR2poZ2E5Zm9adWNoZUxKNzdJOWVjdThNamoxNWdXa0k4RVJTR29pNXhTcHpWQXBpVWlTd3d3S1NUT0JiU09lQmM0V25ybUh1NmNTdjdVTno3QTEzL0xWL0xXZDc2SzdlMFNNMTl5TU8vNTFLLzlOc1h4TVFkN0RiLytzWXY4NFdldmNPUEE0WUI3Tm5PMlQ0NVFJUjI4dlBSRTUxa3M1dFJaanJEQUVCRE9ZanBEdTk1UmpYTHFTcWQ4UTRSU1NJZ3U1WnQwZ2ZPQlplOHA4NUxlekdqN0RpVWNPaVFqanl3eUlvcllENVFoSXAybFczaEUwRGdqc1ZidzhNUDM4ajgrOEFtNnpxSktnV2tNMWdtQ05zU1l6QnhacHBpT0pTWTRLanpFOUhkVjVaNGlGd3dtb1dhaWpLeVBTMDZ0VFRGK1lIQUpscHRsbnFORnc3TFg1TnFUNjQ0c3k4bFVoZ0J5bmFUMzBRVnlyVG01Tm1aU1ZVekxpdGd2c1V1TGloS1psVVNnT1d6UUc0WWYrSUYzMHR4YzhNaXYvU2F1S0xuclpmZFNWd1hkYkU1Y1BTZGluTmg4MjJ1YkRIaVc1Njl5VldwZTlaVXY1ZC8vOGcveDE3N2p4M2o2cVd1ODVJSGI2WTBoMHdYRE1IRGNOb3hpaWNvZHhucHluZkpkUWtTUVBpa0FlNDlING1KQXlaeHg3ZmpBQjcvQWJhY0ZyMzNOblpoeWsxZ3FDaUZRQWJSSXVLY2hsM1MrWVg2NHp4dmY5akx1dUt0bS8yREppZkVhTWlwT3JDZkFmblRwRmgraTV1aW9aZnVFNHEzdmZDWHRjczdpK0lDaGo3Q0MwU3RaRUozaitIQk96QTlSOFloLzk1OC96ZWNldmM3ZHB5cHlxY2wxZ1RHZWdHQjlyV0Izc2FCYzhkMTZrOVJtdnRUNFZjVEZoMER3c0Q5enpGeGtLNE52ZmRlTGVmYzN2bzYzdi9OVjNISEhOcVkxSEI0c2VQenpqNkQ2QTJhN0RiLy9pV3Q4NVBlZTQrcTFPWjJIMDV0SlhkWTNSeXdPOWlpVllEUmRTd3hPbnk0MFFraDBURUJ0YXd5ZFNlK1N1RUpCOUlNaFJRRUZ3ZHVFMlJLS1BCTU1ObTA1SnJvaVpJTEFuR1dmblBOS0E0MGp4Mk5iZzVGUWJlWDRJUkJEenFRdTBLUVBweENDVWFYSk11aGRJTFNPYVYzaW5hSVpCazZzamRrY2wrd2NMZkhCVWdBNms4QUNIK2JwWTZJcm9rKzhXMnNER0l0UUFUY0VWSlRFeFFKalBUclRTWUFRTFZwcGNwMnNSQWxxTG1tWExURksxdGZHQk5XejZCdlczQWFaaWlnaEUzZFdDbkloRVVxbkFIN3c0Rk5aVVVxZjhDVWhsUmZxb3FEckhUWTZvaGRVWlVHUlpSek5Cc1FrS1VPMWxKUjVBcDRMclNnTFFTWXRnKzBKQ0JBUnY3SlNSZnlYbUJlQVJDcVZEQjBSbkpVVW1VSkxPR29ISm5uR3dkSlFhc1hnSFY1RXBFd1g0S09qZ2JYS01MUXpkSlpoUGN6YmdWd1o2aXJsL0Z6MDdCOTZiTjFRakIyOTlWZ0Rqb0RGTVZJNVJaWmcrcG5PeWJJVmtzV0dkQmdUQ2FjU3ZjUjBEcVh0U29FSFdxZklWbEZJckxXMGZkb0EyRERnWmNyK2hoQlN6RXFrb1lFUDZaMm9ZbHJiRC9NRmRwaC8rWUpGVEg4K0tVbTRKeEhRU2pNTUxVb0l4cU1DblFYQTR4ME0xbE5sT2gwTWhFcXNRZ1NLSk0xUVN1SkNpbUJZNThqemRIRG85Z3dDUjlRbE1RUHRGWDV2Z1pNT1VWVEVXdE9ibGhzMzl0amQ3MEJBeExKc0UwamFCYmY2ODZaMTUvYjJHbTV3SEMxNnRtN2JZR05yUWw3c0lvQXkweFNacEhlcCtLVkxFajlVd0xKUGsvcmdKWGVlcWJsOGZjYVAvdXNQODMxLzhlMTg5VnRxTGkxYXRtK3IyQnpsZUM5d0hqWTJTc29zSTRTSTk0SzJNNFNZcHVoS1NwUUNIMHVhZGtHdUkrT1JwdWtHanB1R1hKY2M3YzJwS3lqTHBMZ1ZDS0lVdUtIRjdqN05rOWV1Y2ZkREwrYi8vTUNQOFNNLzhDLzU3RWNmWS92c0ZrcG5JS0hNRXFhTEtJZytNUGl3Nm5CRXRJb0VJV2k2QWV2U2tFYWlJS1JTc1pBaVhXUnlxSW9TYXlKUmE1VHdtS1psKzg0SnAwNnVFMExpT0VNR0JKVFExRVdPcDZjZE5JU0FqeDFsWHFGVmxveFAxdEcwRGtKR1Z1cjAzK2dsWFcrd1EwK2U1ZWlpQmhxY2IvRE9zQ0xuL00rWnhjUUxHZ2FESnAxVXBZU29aUEorUm9jVWxreUJFaXJWdjdVZ2hnVHRKWXAwQUl3RGlKUVRDMUY4dVJFa2hjSjVnYk1PS1dLNmhTTldwOXllYUEwdWp1aWRwekFEU2t1RTF1Umx3ZEQyaEpEK2ZjU0VLQkNyZFlhTFBablFLSlZqZlFxbGc4UkhnYkdCSXIwekdVeUhqd3FWNVZRVlBQUEVEdC80clcvZy9kL3pQbloycnlMY0R0TzZ3b3N5QVM2MXBLd0s5T3F3S0VTRzdSMUNPdklzUTNwTGVXcWJvM2FkNXBFdllBNnY4cE0vLzRkY3ZkVnlhanNqeHNRMHk3VENwaE0xU2loT1RkZnhJVENiOVF6QnNYZHNtYlh3eWhkdjhMWHZlUlhmOE8xdjRxSFgzQTk0OWkvZDRNS1RlMVFiSlRkdjNDVGMydWYzbnQ3anAzL3BjWjY1M2pQVnNEM1ZMRHFIRlo3QmVad1RESzFuaUIzRnlPUHNnQzFxYkFoZmJtUG53S1RJa2JWRXluUVFDeUdGdElWYTNYaUl0RzJQandHbDArcHRjWHpNY2paTHpsZG55VW1CN1h6b0dOYzVNYzhKeHkwNmVFemZZMmZIdk9KMTkzTFhYV2U0OE1JdDRxbUlpZ29sU2RhR3NKcGFZaEZTTWE0a21aS1lJWkgrcFZMVVpjN0J2Q0dUR2JrU2pLc1JRa1prU00vUXNHclBIYmFHU2FIWm10WXMrbzdCeGhWaUkwM05kYVpSTm1la0pWV3RLWVZDMklnZFBLSDNVSlFFSFpGOXdDMld5RFZCYytPSXcyZHU4aHQvY0kxN2JwK3d2VGFtR1UvSVBmUnh3VWhDeU92RWNoT2FNaFNZWmMvdUY1NUQyTWk5RHozQVAvbTMzODNmL2Q3L3dJM3IrOGlpWkxZd2FCMHA4aXlaV3J4QmloU1VINHhnY0dDQ0plS295NHlxckdpSGdSaGFUbTRvdW43Z1gvejd6L0Z0NzFueXA5NzdHcnJPc1hmY00xMWJZMnM2UWtZUVF0TWR6RGkrZnBtN1gvNEFmK3E3MzhFLy9mdS94aDJuREVXcDB0UVpNTkZSaEp6ZWVLNWZQdVE3LzlMYmVQVlhQTWpPVStkcDJzalNHbklwV2FzcmhublBZdGt5bVdxYXZaNy82K2MveDY5LytCSjNuaGdoUkNSdFZ3MWxVWEd3SERnNXJWbXZhN3JlRWtYQWhjaW8wQW5pN3lXOVZlenNMem5zSTNlY3lQaXU5NzZhci8rbXIrUk5iM2taUlpWejlZWExmT2EzUHMxb2JjTGgwUkd5bS9QYzg4ZjgxSC84Tkk4OGQ4U0ppV1p0dTBZdUJwU015Q3doWUlMcnlFWWxxcWpwNXoxKzJZQ0tGR05GWHRjVTJZUnlza1huMDhaamxFSGZXM3dXVTF1VURJUW5VNHJvZFpvWWlZVEpNTjdUZTB0ZVFLbFdFUmtMQkVVMTBqVE80UTBJSDlFK1FoalFWbE9QYXRZbkphMXhCQy9KY3RJS09aSTBZTjdnQTB4SEpUNGFwSWlVZVFHMEdOdEFUQ1lLYjJ6Q0prSDZnT1ErNVQyMXByTkhWSlJzclUyWTFBWE9PYUpVSUZSYUVhdU13VGkwRkJTWlluRHBvbFlvUVNDanJrdTBjc1JoaGNsV25pZ2tvUWtZblE1TjNuWkk0MWk1WHRPaFVmSGxRNy9XbW9pbkxsTGhjVnJsS2JzV0F6R2tLUll4RllSRThJbXpLelBLVENYalMrZUpjVUNwUUs2TFJMOElKYTBSSUdCdFZDTmpndVF2dW9HTnVtUmFnZytSdTA1dE1pbHpqaFpMTWlrcGk0enB1TVlNZ3JrMVdPK1lIUi9pZWt2TU0wUmVZRVBFbUFHM2VnOUo2Nm5MakdLY3A4SkU4UFNoaGNHajVTZ2hab3hoTUE3VFcrYWRZZEdtUVl0M01rMFUrNVo2bFBpWk1Wb0VGVkZvK3E1RmFiMmFuZ295bmRoL3prZXNUd2VJd1JqOENsUFNkQWtESjdTaVh5eXhUVTlSS0RxZElOSXhCb0x0Q2Q0VGZDUU1DWEJPb1RET3BITGhDbGRUNUJtSWdQSHBkeGlDb013bFdmYWxqV0Z5ZWd1UjBEWmFCcUpQR1h1VlozZ1Z5VUpFZEJZVEZMMVNLWDlPb0pvcW9qZTQzaUpJRG1JaHdiaUlRRlBrTlNwYkltU2txbXM2UDZkWmVyS1o0YVFuZmN0RldLM1ZRWXVFcWFxTExBa3VRbExFZGk2QjVMVVUzSGE2NXVpNDQwZCs3TGZZMlpuemJkL3lCbmF1OThnN0oyeFZqdVdpWi9BRmErdEpDckpvUGMxaFMvU1c2VlJUYVkyTWl0bDhuOW04WlhOemc0MnRkZlJTMG5VTmh3ZExaa2RMY2pWQ2VVQjRsUENnSEhrMXBtOEdtbHRQODhXREc3ejBEVy9qeDMveFIvbUovOWUvNXVkLyt0YzVlWHFUeVhTRUZnSkhJSHBQSmpOaXRGaG5LVEtaNG5KQ0pZQjRDSlI1amtDbWdack1VRnJTRGhibllSZ0dzbHd3SGhmMEM0VTNBMUZrK0poTWNsSW9CaE1JTVZFQ2h0VVpxTW9TTmNiRkFxazBMampjNEZaUThReVpKYk5OOEVsQVlWeGswVHA2TytENllYVjJ5VkU2bVlIKy93NkxyUEFpeGtlRU4rQUNNcVlwUUl3V0U1TERWa1pKdjNJN0tpbVJJaUYxV0UwT2xkSklGWERlRUwxSURtVU1Lc3RUSGtRVXFSQmkwME0vQkVHZUtaUVl5RFBJOGpHdWlZUytoMVZUc2E0ME1RWVdpNDcxYnZpeXM4ekhrRzZkUWllWHEwd3QyUyt0MFdXVm8wWEUyUldxUXBjb0hibDBhWWRYdi9sRi9NTWYvOXZvb3NEZWZJN1l6Y25MbXVBRDBRWlVyaG5YS2VUdG84UkZSekFPbWdYajdSUG83YnU0ZXIzaitMa25VT2FZZi9HZi9vRGZmMktQcyt0Wnl2Sm9nWklLN3p4WkprR3BoUFdSR2NaYWl0S3lkN1hqOWpNWlAvdzlmNEwzL1lXdlpmM2tGdTN1TGhjLzlVWG10dzRZbW83dE8wNXp0TGZnMG1ldjhJR1BQTTJ2ZmV3bWhZWnpHK2xGNDJNNjdQbmc4YWFqbEFIbjBrcEI5WUg1WVFJeW0yYU82VDArNmtUeHp5VW1ybVRtR2RSNW5rdzIwVE8wRGkwbFNvbkVnaG9jWHNEelQxNmtueTJJUk56UW8zdWY2UDZad3VZRnQvYjJhVnVIa3BwYWVVNk9CUGMrZURkdmZkZkRQUGNUSDZUSTlVcjNsNUZIMG1yTEJ3U2U2S0NRR1ZVcDA2cFpqVEhlVWVTSzBYWkpaN3IwN3cwOTBzT2tLQW5lWVFKc1RUZklsR0hlTlN2SHIwVEtRSlVYYUMxcDJnRVJQSXVqT1pjdjdESGR0R3hOeGt5cUdwZmw0RHgyM2hHclNEQ1NqZkhBZWxuem1TZjIrQS8vL3FOODVJa1pkMjhVbEpubTdqczJXRDkzamt3RTVyTVc1VHdoUXJXbUdHWU5lanpHMlk1blAvbEZEbmIyZWZGclg4Sy8rTG52NThmLzNzL3c2T2V1VWxZanhwT1N1dFlZbXo0T1NvSXhqbmF3SUFLalBLT3VGT084cE1neVJJd2NpSTVtNkZjSGdNRFAvcGRuZU9hNUk5N3o3cGR6OTdreHVXbll2OUV4WDg0NGVmY1pxbUxFOGRXYlpKTVJmK2x2Zmp1NWd0Lzh3S2RwNXhHUG95eHlqSTNNRG82SVV2QVhmK0RyK0w1LzlKMHNqaHVPcmwxQjlRSFZlNnc5Wk5qWUpIWTlpLzFiZk9HUmdWLzRsYWQ0N3VxU3U4OVVaRW9Rb2tTUk5nMjFodDROZEZveXJUUzlNU2dsaVM2U1NZMTBsc0U1OW04MTNIMXV3bC8vOWpmd0o5N3pTaDUrL2YyNDFuTDEyUXZNYnh5d2YvTTZweCs0bDB6QThmTVgrSTJQWE9FM1BuS0J2YzV4OTZrS0tRU0wxbENWbXJyVUhOellaV2RhMFM0TjBqcVFpK1J1alJtMnMwUWRNSEZPcml2T1RGdzZKTGswcVJJeXBzT1Awc2dWTnpiTE01UlhMQWRCbVN0Q2xGZ1RhWHRMWjJIUldJNzJaaFFpdzhWSXBnUnJSWVpGMGhtUDlray82a204UHhVOUdaR2hTeWlvdWlnU1YwL2xGRm1rTHBQYThVc1NBa2ZFQXpvS1FtK1pId1cwY0dRcUVJWEM5RDFLRk1nc1IyQlpIMjBRVk1iUXpqamFQNmJ2VWlHVklGR1pSS0xvaldFV0xadXFwc3dWczg2eTdEdHlGY2w4ajhUZ1pjUWJqM0tKVXp0SXc5Q2szM1RLdEFla1QyVzdHTkpIcXUwTnBjNFJ5bUdzQlFva2dkNVlOc1k1ODhWQVl5MVNTZ2FicGtXNTFNUWhZSWNCblN0aTFKaXVSMWM1V1Y2dURvdXc3QmZvd1NLd09ET3NvazFncmFmdExabk9rREl3clFzYW15RGx6cVpTWTY0bG83SkFSOE1Sa21BZGZUOVF5Z2dpSVk0aUFTRURaUUZyYXhXVG9tQ3NWYm9ncko1ckYxS0xXR21aREdlOXdaT3NKd1l3clVINW5sd3JGajV5TkV0VHpLb3NHWVllVUdReVRVc0Y2WDFkaXNUUmczUndGSUxFMlZXSzNxWnRuQXVSS0RTWHJ0eWtXUndoVlU3YkdDVHBnZzFwR2lsMVR2QVdFY0IyanJacENjYW13dGFYYUNlSWxiNHZJbFhDUTZrSXpybFVYUE1CNXlITGMzS3RNTXM1L1dBVHMzam0wNFF1ZzZoU3Ezbm9lNDRidzR0UG5HQ3pWdXhjdjhteTk4em1QZU1xcDhvVEtXUndNZlVYZkdBd0JvbGxWSUhXS2J0THpOQksweGhIWnl4MW9mQXgwSnFJRklJcVY4aEp3YXhMNzhvUTBpSG94TmFJdzFuUHYvdUZUM0hweGhGLzlTKzlFOXUwN0xpS3RmVXQxTEpEWlFtako3cTRJaHZVNUdXT0NSRm5OU2hCVVVtazBvbElFUU9tYVprdERZTVh0SjFqMmZhTXgyazFIV1ZGaUFwalBOYVZLSHZJNGNYSHllOTdEVC80TDMrSU15ODZ4Ny85MGYvRTBGazJ0dGJvaHlIMUlncUZscElpRXdRaGNTSGliRElpNVJsa1VxMmM0SjRRTFRFSXBOUW9rVFlkZWFIeEM0T3V5blF4Ykk3b2U1T2lmVkxndlFXUjhzdVowaXZEazBKSlNYQXg1WXhGanRZRm96cWQ2UVliNmJ1MEdkWVoxSFZHVVZaRW1WU01BazlkbHhSNWp1Q1BIeGFCSUNSbGpOUlI0MzN5UXFlTVlQSkVTeEhTaUZTb0JHNE02YkNoUmNJVmZhbEpLR1dDWkFmU2owREJTcjFqeUhVQXFRbmxtRzQrWnptZk1SMXI4bkdSd3UrdW95Z3pqTldFMEVJTVNKR0tNdDc1bFc5U3JuSUF5VENERVBqZ1ZpTjJoU0lqQU1ZYkhJRkNsdFE1Tk1zbFZ5NHZlZk5YMzhmLy9wUC9pR3A5eXEyTGorSm5OMVpLbmtEd2puNkliTlVhTVFpTyt5VWhPTVlTMXRacmh1cEYzTmgzM0hyaTg2d3owSGNOUC9iVHY4K0hQbjJkRTdWQ3BwNHd1Y3JKWkptMFVsb3hXTXRnSW1VdTZBYkg0ZTZTYi9tV1YvQzNmdmk5bkhyeFBTeXVYK2V4WC9zaUI1ZjMwVHE5aURiT25TRk14bHo4M2MvdzcvN0w1L25JTTBlY0dRdUtYQk5pT3F6SDFVMjkxSUtKc2lqYjRYcFBubFYwUTQ4SWxzSUsyb1hIZEk1TUJteE02c2JNaXkramJZbzhyWjVzQ0F3Mk1xa2wzdnRrRmdpUm9PREdDN2R3aXdYMXFLQzd0bzhvYzZ5MkRIaUc0eG5yb3dveXhkQVl2SkFjM2xxd2QzV2ZyMzNYUy9tbFgvaDlqZzhNNVZUQUVKbVdLZlRyUTFySjV4cENTRHdvRlgyYXlEcEx4RElabFZURkNCY3NnL0hFb0JtTW9OUUNsS0VkR3RiSEZZdGVzajl2dUcxclFsM20zRGc0cGhrQ0ovT2MySFlVbVdWNllwMUtDSXkzZENFZytqVDZ4d2JFWUpCWlRqQXo3TEhtUC96SHovQ1JKMmJjczZVNU9CcjRaei8xR0QvNFoxN01WNTBlVVc2ZDV1YXNvN3MyWS91MkRRaVN2S3JRUkd6MGllQy9OK2Y2MDlkNTBZTzM4WGYrK1hmd3ovL09ML0xzNDdmSWkzTFZQclcwMWpPcVNzWkZ4cm5KQ0NWU2VOMVl6MzdUVXVpQmJvZ3JORlZBQU9PUklwT0NUenk2dzJQUDduSC9uVk5lLzhxemZQVlhQOGliL3NScm1keDJPNTBOWEg3aVdjNy93ZWVaMzMwNzczckhTMWhUbHFjZXVjYmhjWXNRQ2Ztd3ZuNktONzM5RmJ6K0sxL0JqV2RlNE5vVHo5TXNqbGdiVjV4U0hsL203QjBlODRsUFhlWERIMzJLNXk4WWpJRFRXem5JMUJwZXIzS2t6TWpMQkxER1NScGoyWnBXTEZxTDlZRXlUK2lnYmxBc2orWjh5M3RmeWcvKzhEZHgyOHRld3ZHdGZaNzkxT2VaWHovRUNJWHZJdXZySnpsOTE1M2NldVJSZnZtL1Bza3ZmdkltNXpZVnQ0MEtnaGNwSTYyVEM3aDNudVA5am9POUpkWUtkSWlnQWpJSGxFSzJqcmhuR1FyUFVzeW9pcHF5cnNoRldnRnByU2gxVHVjNlJsbVJEclV5bFhJYUUrbDlwQkNwWWE2bFhyM25JcmxJUExmajQyTmNxRG14dllFamNqeHJzQWJHUlVtbUluMXdlSmNqclVNclNhYXoxZTgzRlplbWRVbkEwRmhMSVRYSWxBTk1IYjZJY0JGN3RNUnJpZFFRQmtOY3BtbVpyQWI4WUxCQk1UbzVScnFJY1pJb29ldE40cERtR3U4am82cE1vb0lBZFo2eEdFeENaR1FLMzNjSUR4NEh6aEVIalkyV0dBeFM2L1FSNlR4eFVIUnRoMWwwaEpEZUhVb3FmSXdFNzdEQjBsdURpc2w1bnVsME9kMmZ0WXpMQXFVbEpnRE9wU0QvME5FZXQ0eTNOcW5HT2syb2pXU3dCcXpCTDViazB3bllBYnhINmxRT0twU21OWlpvSE9lMkp4d3ZHbXhjYmF5VUJCUStXSEpsY1gxZ3ZuQ3MxUldaN2ZDOXg4UUZVbXVFQjYzU2hDdkRJYTFEeEVDVVlKeGdVcStoTTRzUWtTQlRqbHZLak1GN1d0TWtKQm9CWVFaRXNOZ2hzcGdQVERjeWduYk1ad3VzenhoUEprZzZCQkhmSDRPenJJOXFpanBwNFVSVWxHVUpRakNZZnJXTkUyU0Y0b1huOTNqKzgwOXkrNE12WWVnZEtxWURiSWc5eGFpaUZCcWxiY0tuT0UycEN5cGRKTXRJSUZsYnhNb0xpMGNxbVM1SnE2S3BGQkx2RTdWa3NqRkJaaFZkYjNDSGM0b2VWRm5TNVpybDRCQkhNN3dXUk91UWhhU2FqRmpjdU1HdGEvc0lEVkVHc2p3ajAra1MxaGxQMTMvcGJCQW82b0tOalNscVBFWHBQRG1jZmFETXZwU2ZoaXBUVkVWSk4xaVUxS3lOTlZJdG1iY0RMcVNZM0pjb0VWc2JrZy8rN3JQY3VIYkkzLzZiZjVJNzdqdk56VVhKWFhjbU1VWGJHUUtlOFRoblVtZEVWVEtZaUxlRzhhaGtYQXRja0hnYmFSZEhHQk00ZS9vRTN2ZEVuMjQyTmdieVhJSklhMzFqSGJySUtiVEFMM2JZUC84SXpmYTl2UDh2djQ5VHB5ZjhxMy93VTl5NnZzZjJtVzJpVHhlTjhDV09vVWlyY1JzY0JKMHlvc0pTcUFJcEJYWklRenNoY3VvY3BQQUpMajk0aEcwcHhwdElLUWpPSXlRb2xhUU9aVjZRNXhJaE5IWndkRjFMbFZkSkFaZ1ZqSW94eGc3MFpxRFFGUktIaXdtaEkyV0tDUXFaQU9KUktmYU9PcVJLQmEvL1pRMGRSS3I1eXhDeEtrUGtHaTBqODZIRCtDTDkwR1ZhT2ZnNHJISi95VHhpUldxSUNhR0lYaUljWkZsTzFKWjJNQ3MzY0JvSnl4aVRWVUZBTmE3UjFSVG5MTFBEQXpJWkdHMnZJWVlHYVFWQlN2cTJKMHFvUmhYMXFDVFBOU0xHdElZV0NoK1NuL3BMdUF0RmFzTWlKU29HZ2hNMFhjZTFLOGRzYjlkOC93OTlDKy8veTMrR21JM1l2ZndjeTV2UDRWMmtIRzBnQkdRNmhkZVhDNDl0RERJUGpEZW1lS0c1dG94Y2Zmb2E1bmdQSFRvK2VlbVluL3Vsei9IRjgwdTJTa1dtMHlxczBKSmNaMGlWUGdaRXVWclZTMmJ6QlczVDgvZiszamZ5cDcvL25TeHZIdkhJTDMyVTV1Q0FvOE9HWUFJYko5YlJxd3IrUmxud3dkKzd3RWVlT2VMT0RiVnFTRWEwQktuU210VUhVQ29qc3dJL1FOdGF0QXJNN0pLUUswUlZFSTliTWlkQVJleGd3WG15S0pBSjRrOXZIVXBvaE16SXNyaTY3VWlXdldNWVVzRDQrcTBGMXgrL3lza0hibWVIVzdUR29ZekhLMmhqNE1SNGk2MWxoN0dPcHBmY09MOUx5RFJ2ZU12OWZQZWZmUlAvK0o5K21IUFZpUEhLZXFQejFIWWNuRU5ra2M1WnpGeXlWcFhvM0xNOXJTaXk5REtOWG5MVUhHS3NZMUxuT0N5Tmg3VnNSTmYzN0E4Tlcyc1ZObXFVaEZuVDBybUJRcWNiOVpuTkVYMW1PRlQ3aktzU2dxU2ZMZE1rVWlwazM1RkpqODRIRHZkUDB3NkNRblJVNmJ6QnVUTUZGNjRQL0wvLzQ3T1kxdkhPdDBFOW5XSm1CamR2VXV4aEVNaVZrM1Jqc2tuYkx6bCs3R2tHcytDMkI4N3hGMy93UGZ6WTMvOGxMbHc5NE5UcENVSUsxa1laazdKRVMwR1daY3c2UTlmMEtWS2hQV1UrSWxPUzlTb1ZWRHJqYVhwREVKS1RKeFRPZWg1NTZwaVBQM0hNci83V3M3enE0WHQ0OXp0Zncrc2Z2b1BGNVIzaXdTNmRYM0xZOXR5L2tmT0c5NytlYnRaaVhLU29jdGEzYWx6VGNldlJ6K0VpVkNHOXNLOWNPZVNGSy9zODhmd09qenk5ei9sYkEwckF5WTJNT3RmMDF0RVBua3dGeG9VbXl6SmFFOGhIaXFySVFRWXlxY2x6eFd6V1UrVGdyV0E1WC9JWHYrY3IrYjUvOEY1OEZIenhnNy9IOG1oT3JOTWFSZ3dhcFVzMmJ6dkwxcVRtWjM3cldmN2JKMjl5OTRtTWNWa3lHSmRjOU1EV05LMjVnKzA1dXpubTdLbDFqaS9EZk43Z1lrSUNsZU9Da2E3eEljTTJnYWdDUlM0cENXUXlrQmVRcTR4Y1p0aVlEQnlWeW5EUjB2YVJHSE9zRzFiKzd2UmVLVFBZSEpWc1RXcDI5NVlFRTNHdG9lOU1BbFVMbmNwOHJzY2hxT1NFM0FXRzFRdStkd05tS0JsVnFabWM2MlJYeVVRcWVXREJ1UTRITUxRSTZhblhKOWpsSExPWVlmcUFEaG15aThRODRsMnl2aFJSYzJaempYTmJJNVJNTUY4aEk5YjM1Q3IvTWgvUE9jTnNNS3QzcDBpdFl3dmVlSHhyVUlORGVadVVieVlpUlNEV2tzRTRocmxsUGd1czdlNVJpWFNSVHpsSWNGNlI2eklKREhwSFdXVFlFSm1XT1oxeExIcXpZZzFDNkEyMFMyeDBaRlBONEFlR3prTnYwR0dSa0M4eEFaT0ROZENuelVPbVVwYk5TOGhFNHBMR0dEbGFkTW5KVzJTTWk0SWoyYU5sWXNZeVdHUmpDVldPMG9xZ2Nqd2VaOUkvZ3c4SUM5NmtxYWRZdmJjOW5oQThNdVM0R0RIT29FUnFhOFlZRTNwSWdGNU5oc3pRSUZ4a3JhNlFPdGt3Z3RkNEcrZ1dIUUxEWkRJaFg3SG9qcGN0NXlZVlcyczExZ1o2bXlESmRaVWpZdUJvMlRHdU0yN3VEbnp1UTQveDBFdnZaZXZrU1M0OGV4N3ZQWVVFTTNqQ0pKRFpkSlVjWW5xUG96T21SVHEwSlVTU3dBVHdVaUJqUkVSQmJ3SlJwUGRibnEyWXhCSVFBVGtQQ0ZuU3RqMk5zQlJxaEk2T29DTEtnWjA1VHIvb0pKc1R5Zi80dGMvei9LVVo0N3FreWlzS0xYSE9wcXkxTGlpS3BNRU5zU05ic1QrbFRHVlhhd2VNYzZ5ckhCa0YzcVhoUVFES01qbThoMkdnVWdyS25NNEhSSWgwUk1LUW5xWGJUNVE4OC93ZWYrTnYvU0ovODI5OERXLytpdnU1ZU5Hd3NUVUI2OU1sSTh2b2gwQ0lMV1daZ3hMNHdhYThvQ3JvdW9HMkM2eE5NOWJXTklNcGFGckI0YXhqWkZvbWt3b1E5RTJQNlh2cVFsSG1OVTZBYUEveE41NWdNVC9OVzk3enRadzhlNFlmL2NGL3piTlBYR1BqekRZeEpLbUJqQmt5cE1aenBsS2h5YS9lVTE2aytKeVNHVUlJZWlOcGVnaEJzVmcySEJ3ZXcrNGhwclRjZTlzcm1LeFBWN0J2UVpacmRCYngwU0JpMmxUVnBTTFFReFJJU3FKd2xJVk9HQ2Z2a05KUUtFbW1OTVladkk5WU16QXNPMnhuT0R6dWNHYUJNU2JsdXYvNFpGRkprZnpPTHVKN2czSHB3MUhuRXFYQ1N2bmxDSGlDdCtSWm1aelBMdjB3dEV4ZXlCakZIMDM3VnZITEtGSlEyUVZCUDNqd0MzUXhVSlZqWWwzU3hFMXMxekEvV2xLNzlLTVpsRVlJVFo2bDI1L09rNk1Xa1ZZME1RaENHUENrL2IyU21oZ2s4N1pCQmtHelRNM2oyMjZiOEEzdi93cSs1YzkrSGE5NHcyczVtdlVjWG5rY2pxOVF4UncxR1JPaUErbFFTaEZ5eFpEbGlGcURVK3pjWExKNzZ4amZkcXdYbWdzN1N6NzQwYWY1N1krOWdJdHd4M2FHdHduK25DbkpxTWdvc3BUTFVWbUdDellaQjVUaStLamgrNy8vSGZ6cDczODNWejcxQkovK3lGUGdKT1ZhamhFQ25RdTZlWStlVEZuZkhvTWQrT0t6K3hRa3VudmJwMm12emdTWlNvQmZTT1AyTk5ZM1dETVF4Mk15VlVEbmlNYVFTVWtzMC9wQlNJbGN1VWV6VEJGU2dvQWlUMmdUc0VsL3BuS3lycWNKUFhtZThjeU5sby8venVOODUvMjNVVzJ2Y1hSK2gzRmQ0MGNaUXdzbU5vdzJNa2JUZFlwalN6czdZbm5qR3Z1M1R2RVgvdnA3K016bkx2Q2hEei9Qd3crT2lTUllhRzhOMFVVTXNEWWVvYUtrS2lNYmRjbitvbWNwTGNSQTF3bHNzSlNad3ZhV1B2YVVaY0dpN1pGU0UySnlXQ3N2MkQ5cWlUZ3FWVkxtanNGMlpNSnczTU16VDl6aXpJbDF6bXhQMGxJb1JzWjVpWFVlRjIzaVZ3MEJtUy9RT2wxeDJpSGlnbWN5VWh3MG5uL3hYNTZqSlBMMk45N1BvaElzWGFTOWRZVEljcFNBOWVrWU9zL09yV04wclluUDd0QWRHZXBUTlgvaGI3MlRYL2kvUHNibDh6YzVlWHFOMmNMUURBNXJMYnJyVVpsR1M0a1Fnb2pDV3A4QzBUS3lWcFZFT1dEY1FLNUZRZ1ZGd1JDZ0VMQXhLZGxhcS9HSGU5ejR3ejFDaU93UG5pZHU3bkxsMmo1cm80d0hYOVNEOWVuU29YTVdqL1lJMTNKc0hGZjJHdmFQT21aSExVOWVQT0xLZ1dVakZ6aVpidnViWTdYQ3dhVGxWcUVFNHp4alVwZGtoU2JPSFQ0a0lIYm5Xbnd3Q1l2VVdhejM3TzRkODcxLy9rMzgyYi84Si9qODU4NXorWW1MK0daZ2JXdEN6UWFxa05nNG9BbGtsYUkvV1BMeHoxN0drdEJPV2lxNmFOQktzalVxcVFwTjN4dnlJdVBVOW9SSnBaa2Z0bHk1ZVFRcWNxTEtXU3RHRk9zbGJiUjAvWUFPRWprb3h1TUNLUW82QXk1NE1nMHFsaXk2bGhCN3FySkdTTStvMGppZjRoSlNGd2g4eWdBWlQzdXd3Q3d0UW10TWdOWjVkR3NveGlVcUUvaCtRQWVCOEVrU0VFeUxFZ0d4S2lyNFlLanpFdU1Vem10R2hVNEdFNVV5ZEFIUXNvQjV3L0h1UG9wSXFSVWlCSENlYUJVejB4T0dOR1gzelFBWUNwbXdMSFZaVUpZSjNwMkxuTUU0WWt6Ymc5NEhuQS8wWm1BdEY5UmFFVzNQc096U1lZTkE2QUxFUU1na3NnR0JJcThEWlNISlFzQWJnMVF5Z2JhalN2eGFINmtLc0RHOXE4ZUZRc1RBdE1vNWJIcU1DZW5BRnlOMmlLbXR1VnpRTER1R0RpWlZjcUlINDRtWnhJdUFHUXpSdWk4ekRhV1E5TWF4VnFZaHh1R2lwU3d6eWtMVG0vQmx2RWNJRUp5blVJR1JBSHdxQ29RaFl0cEFQcGJnSWl3OW9VNjV5U3hFdkUwNXhIR3BHZFdDNEtGckhUWWtLMVd1Sk1HbjVaeVdJRnhxczZJeWlxcEVoa0MwSHBuWFZOcVJLNGZ3bnQ0SnZCUDRQaENzeHdiUHJlTWxaWkd6UFMzSnJPSmczdUtkWTIxVWsrY1pkWVNvZWo3eDZCVys5Z3RQc0hiUC9WUzZvaHRhc2l3bkZ4SFhEQVNYZ1pJc2x3dG0rMGZjM3Axa2JXdVVDcVVoNEVQQ3l5RUVoWllFQjhZRjlHb2xuY24wRHBsV09aZ2xYZGZTcVlneUFibE1tS2RDU0tEQ1NvaFRxTTl1Yy9UMEpUN3lvY2U1ZW1TNDcvWXhBa0hYOXhSRmhoa0NuZWxYQlI1SERHWmxSYkpJbjREUXFSRXNRQ2lxTW1Pd1F6cU1FMWNEcU1qQ0c2SVNsREpIMlpENkFKbE9BeUxyVVZKdzd1eUVtN3NMZnVULzh6LzQzdTl1K0laM1BjeXRwV0d5V2JCV3JYeklJYTFBdytyNDQrSXFKcllpVGdSUlVZNG1CRlVTbEVQcW5xd0VkTUFHdlZJVkNzWnJncndlSS9zQm9SeE9mR202ZkpPZGk1NzdIMzRsLy9JLy8xUCsxZC81UC9ub2J6M0srcGtOeWxLbktFSVU1Q0k5bjBJSXJGRm9JVkJDNEpSQ0tSQWhrR2VTTEVzbHMwREVMQllzRndOU1RuQkRnNVEyYWNlUkVDUnQxeU1FNUhrNmZ5azBnK3ZST2ljS1N6K29OTDBWSW1WZWtUanZzVDd4UW4wSUszU1FZendXbkRveDV0S0ZmWnJXZkRuMjkrWERvcFFDa2FVZlBJUEZtSURRR1lXSTVKa0VJallNQ0NISVJJR1RFUjhGaFl5TU1rMUVFb2hJR2ZFeFFVNUQxRjllUTJ1VnAzWlc5TWdpUTh1azVscTZKWkpqSWhtNnFwQnF3bksySUpvT1hYcnlJaWQ0eDJCY0NvUUQrd3VQQVc1ZWE5aWNwaDlzaUNrMldWY0ZXeWNtak5ZbTNIWFBHUjU0NkE1ZTgrYUh1ZnZCZTBGcmRxNWRvTisvU3VobUNDL0p5aEZoc0JCN3FxMXRqZzlicmx5ZmsyZU9RK3VJeGlGaWp6ZU9wMTY0eFdjL2Y1R1BmL1lxQjAxZ3M1Wk1wTUoxS2NlaHM0aktBcU1xZmZCN0V5aUZKRVFMRW5iM2pubnIyeDdnei82TjkzTHRDK2Y1NGhjdWswOXJ4bVZCMndmNnc1NjFjUXJMaDhKaGhXVjUxREdiRDJtVkh4TmVSMHBCWFNyV3lpd2Q4T0tjWUQwaFNCb1RLTmRHNkJDeHJTRkhFTG9GUGtxaVZHaXA4Y2JTZFMzUnBiOHpZc0lyVkhtSmp4N3JJaTdBV3BVeEtpdmF3VE40aDNHUmp6eHlpYmMvOWdMcmQ1NmlyWE1XcmFGdEJ2WjI5NW1lVmhTaVFLeFB5ZXFTS296cFpuT2UrZVJ6UFB5T1YvT2pQL3hOWEhyKzMvUFlVenZjZTljNnVsS3NyK1dNTmtjc09vdVc2ZERhTzh0UjF6RzRWRUx3d1VITXFMT1MyYnhCNjRLMXJSRUgreTJJeU9iYW1JeVNvK09lUW1WMHcwQ2VLNnFzSkRESGV6ZytiZ2pPSVlObTBUaENuTkgwQTJjMmF0YXJIRDNLT1d3OHM3Ym5URjB3bldiNG1KSkJRZ2o2SG95RE83WXkrdDd4ejMvcEJSYUQ1T1gzbnlTZTJFcXhpOTJXMGRxSVhobUV0aFJqQ1NKamNYTkJkN0JBM01xNDczVjM4MzEvNTAveTR6L3kvK1BwNTNieFpLelZrYUtVSUdMS3QwbU55Z0xlUmVLWENrYXlRaXJCUUljVUZXM3Z1SFZna0I2KzdpMTM4UDV2ZXpOdmZzdExHVzFNNlo1N2pnLzg1OS9sLy91Skd4ek5CdlpuQTRzK3NEYUcyemJPTXlreXRJQlpQM0E4TjhnOFkrY3dQV05lZ05hQ09wZWMyOGpZbXBZTXh0UDN5VVlnVk9Cd0dTZzFiS3huRkpsS3BRK3BLY1lhRjhBTVBYbVcwUm5QdEZCc1RHck9YOTdqbGErNm5lLzQzbmR6OGNZZW4vbmtGeWdSbkRsN2l0RjRsTXAxczU0b0RDSDBXTHRrNTFiRDhYRkx2UkpDcEpWbllIczZabXVTTVdzSGNxWHB1cDZtN3hQZ1hHazJSaU9LdW1CYVpvQmllZGppRzBPMzZEQm00TmJXQWZYR0dWUXA4VzZWMDNVT2dpZFhPVjNuTWJablZHcWtjTWdZaVRMbG1yeDNST0ZRSXBDTGpGRXU4Tk9TckM1UlNtRnRzb0hZd1dQNndMZ3VjYjNIdUFBK3JFTHNDU0UwbGhXWnptajZOSEZzaGc2R1NKRVY2RHdkUm9JUU9ESnNuOHBrdnN5STFxR0xraWdGemZFU1p6MHl6M0dIT1YwN3NHeFcyYjFnR1l3ajB6bFNwamJ1OFpDeWJHV21xUXZKcEtqUUN0cWhoem5RZWhvUk9MWTkxYmlnMURGQmhMdVVXOWFGSnM4anhmb21iUkFZNjNFRTlwdWVTYVV4Ym1EWnBvOTU4Q1FGWVNZcDg0enRjYzMxWVlHTnBLYXpsQXlIQTkxQmp4S3ArQ0dFeEFlTkd4eEJESGlsZ0xRMmpUTHhRa1ZJQjdicEtHZlJEblNEUld1VnN1c3FOWTRUY1NNTkVheFd1QUJ5NlJNNXczb0VIaDBrYXVGd1Z1QXpoeDg2dkZVb29SaVY0TDJtSHlCR2s5N3ZRdEFhajFVa2RtK01LM1I1Z09BSVE4UkZRVDdLWWQ0Ump0UEZSa21GY3dIVERIUkxROXN2Y1AwU0VTUFdCanBqMkp0NU1xbllISS9TNWRnTTZiOTljRlFGZk9yWmZUN3l1MC94TmVzbFc2ZW43SndmY05HVGsyT09HNklieUNjVldpcjJEdmNKdzFsa2xURzQxWUVpeGxUMEE0ejFhWW9YUFpMa0JKKzFDOFpqdU9QMEdrYzNqcmk1TnlNWVMxbGtHQk9oaTZ4Vkk4cXl4aDYzYkwvb0ZQNzRtTTk4NGtsKy80bGJyRTlWZW01bE9vUmtQazJ4RjgxQTM2Y1lqVklaMXZXMGc2WE1PNlN3aVN1c0VrVGF4b0RVQ2htVFl6bUtRTnNQYUtGVG05d0hDcTNvcmNNN3g2ak1NRnBpdmFjZGtyV202dzAvOFI5K244dVhkdm1lNzNnVHk2SEVuOXJnOVBZWXV4SlhERVl4REF2cVBFZWdjTTVRMXdWbFdlR2pJZzRoMFNsR2x0b0ZJaWtUYXZvbFVrYTB6Z2krUjVnT2xDUm15ZW9qb29UMm1EM2ZjT3ErVi9OUC90TVA4NVAvOENmNWxaLzdiVmlmVUt5UFdQYVdYRUd0azdlNnlESkNJSmw4ZEVDRXNFTHV0WlFaWkVveEdTbjh5WFZFZDB5NVVWTlhGUVNOaUFubkZFTmNsYVlTRXNrRmlSTitaYU9TS2JxSHBCOWFvZ2lVV1ltekh1Y0NlWmJrRmtZTXJLMVZrR1VNTHJLNU1hRzdUYUN6WndqaGo2RnpDQkR3K013VFZJN0lNekloY0VIVHJOWXJNZWJwVkNvc1FrandBUnNDVXFZVGE0d0JoQ0JiblpxOWN3emVZQ0UxdGVqd2RraTRBaWVKTGtBdWNDajZ4cENwbG5wOVJQTFlaRWhwTUYxaVMrbFM0cDFudHBqenpyZmV3MVRNT1hWaWt6TEwyVml2R1k5THNyV2E2ZG9hZDk1NWdoTzNuV1pqZTUyc0xsa3NGeHhjdjQ1dDV0aDJGN2RzeU5TWWJEekMyQ1ZSS2NxdGV3ajFsQ3dzT1hXbll1SU5WMTY0eVRNWGJ2SGsrUjArODhVclBQbjhNVjJBRTdYZ3pJWk9JM3ZBZFpFOEY0enFnbktGcUJBQzFrYWFlbFJ3Y095UmFNWlZ4amUrOTdVd1NKNzhnMHZNRGczbjd0Z2lpNEhRRzA2dHI1TUpqd3lDMkFXNjQ0R3o5NTdoSzk1OEgwLyt5bVBJNkppTXN2U2lyQXVtb3duN3h3dDI5K0hobDI2d3RsYlRISFQweHkxWm5yTmNPb284d3h1TGpDbkU3WUlrWnBHdTdjbFBUTW55SE9mQitFQTNSRlFtaVNKai8yaUpWb3IxMFppamhjRzdqdE1iaWo5ODVvZ1AvUHBqL09sdmVDV2J0NTlnNzhJQll0NVFqOGJKRERFUGhNVkFYdGRJclJsdG5XQnh0T0NMSDMyTTE3M2xBWDdxMy81NS91V1BmWWpISHJ1Q3JXdktTYzY4N1ZsMkE2VVdkRU9ncUhOMGxvcFN1ZFpZcCtpYzUvejVQVjUwenhiZjg5M3ZZRU4yZlBCRFQvRGNyWjZtblNPaVJvb1NVUWpPYksxeHVCaVlkdzFONXppNVdhZG0vdUM0ZlhzTmxTbm0zdEYyRGN1OHhXc3dSckIvc0NTNG5sd0cxcWRqdE15b0JXeE5OYnZIQStNaTJUUlFnbjRJL1BNUFBNdjN2MWZ6VmE4cWFNWVZZU3pwbGlaTk9lb2NhY0ROTytwQzAvcEljM25CQlM2eGZzODIzL2JuMzhwLys0OS95Qk5QWEVKUHBzU1lDaHQ1THRGSTRnRDFLSU9vSVdTVWVRYlNwUnljaEN2WERuanBpemI1dTMvejYzajNlOThBenZISTQ1ZHhOdzk0NHBOUDhmZC85aW1jaEpPYkdlT1JaREpSR0N2WU9UYjRkY2lrb1BPT1lxd1poc2pKellKUmtiRTBqdUFEZFpZbWwvT21CeUdvcW95QWc1QW1PMVV1OE5FUmxDQkdqL2FSYUZQN3NxNHpmTEFNYldDZUdaUlVnT2ZidnVXTnlLTGcvQmV2b2FOZzgrUW05WGlTSE10dFE5dllsRmwxbHViZ2lIdGZlcFkzdk80dS91QzVRNXp6NUZuQnVLNDVlM0pDMDNVY3p4dHU3UmhlOXZJelREZkg5RzJQanA1Um5qT3BTZ29OaTk0d0xIdGNDR1JhMFpsQUZ6b1FrcUlvcUVvU29Ec3RQcGpXR1hXUnMrZ3R4bjZKRnl1UVBsQmxHVE5yVnFzeXpXUjdBMy9VY0hnMFVNbUN0bWt4VWFCeVFRbVVkYzFCMnhJSHdWMHppMUI1K3Y4aXFyVEIrWEwrMGF3QzdTdTdqNFJTU1NvQjBRZTBEcFRUQXJOL2pBNEpsSnpsQXQ4bmRadVdrWmdGVEFHTHRzRjR4eERBR3NkNlZhT0V3cm9VQmxKQ2doWjRBZGhBb1RVeGVvNW1jN0p4aG5ZZTM3a0UvRldhSUR4V0NqQ09MSkxLZ2xZaGhFV0tOQlNvQ2trbUZES0FpSko1YXlteVFGM2tHQmNJd1pQbkdTYzNhbTRkTHpBR01JWmdHcXl3V0J1cHNraFdKTWQyM3dOZUlsM3lmTE5tRWJsSGlPU1ZRY0J0VzJOR3VlYlNiSVpBSkZCNVNJWWdHZUJZOTFnNzRGMFBQcVltdHJlUUNieTBNQVQ4WVVCbE9VRjY3SkErMHQ1MnlKZ21zSU1OSEM4Nk5pY2xWYVZZdHBaaEJWeWYxRlV5U0ltRVFiSkRSN1FkNXJEQjlab29QTXA3WXBzdWUxSnBhcTNJWXNvTld1OHdOckkyMFVpZ2FRMUN3a1FrMm9oQ2tNdjBvUitWR2JQNXdDLzgzZ1ZlOHVBV1oxNTBGN2ZkZTVyOWl6czRZOGpXWklvU3RBSGZKYTZjajRJN1Q2NnhNVW80SEVxSlhkbFpoQWhvVk9LZEJvY05oaUU0UWxDc2JWVWN6VnBtdldFczVXcFRBTUlZZXNBT2tja2QyMlRhWVM3ZDRwZC83M211N0RUY2ZucWN0bFZLb3pLRlhWMVdZdkFVQmFzTmxxUHRXdHJCRU11ZXhmd0lZNWRwSTRuREdFZTlZcjlhNjJpc29iTTl1U29vaGFUVUNhRVVWVVJaa2c4NVJrSnd4T2p3UWFJenpkcWE1RmMrL0RSWHJ4L3lWNy9yTFp4VGtZdXpZMDZmSE9OOVR6UDBIQjAzMU9XQ3VzN1FLcWVTVS96ZzZZZUdzczRKdGlMR0ZvRkhxWm9ZT3F5emFGM2lqY0VQbG1JSUJCbUpLa2VFaE1ZSjN0RWRYT0tXOTZ5ZGZRbmYvUS8rRWlmUG51Sm5mK0lEN042eUZKT0twZldFUEIwRWxSSklBc1Bnc2RHbk1vdVY5RjFEdTRSRjIxRVdrbm82b2xXQldpdFVwdkRHcmF4Nmhxekl5SVNpNlpaa09xY3NGSjFwMHpaV1NtS0FMSTlwaytBU0VVRnJqUXdXWXdaaVVMam9WaFlwMk5rWjJKaDZwcmtubUlSVStsOTBmMUlrajdJeEE3WnZjYzRpSk9SNW5wcDMzcTN3TkNtckVwVk9BblZua1VJZ3BVaUVleTFTRzFpcFZCdG53UHVVNWZMTzRqcExWbWxrOUdBc3FCeWl4SHZGOG5oSmJIdnlzdUxJcEl6azJyZ0VheGhtaDl3Y0F0LzBIZS9ndS83cU45RTJBOVpZOGlLOStLWEs2YjJoYTN0aTU3aDY2UkxkMFNHVjhzaW1vVGNETm9JV09VRXEvTklRaHdXY1BvdGFPNE5yRzI3dXozbnVtUjJlZi9vQ24vM0R4M25pNlYzMnV0V0l2aFJzYUlYUWY0UWJVaXFTMTdBeEdiRTJVaWlSdkpCeDFYSWxXaklKbWF4UWxXSnRiY3lOODljNE9qaWlEd08zZHFET01vd3p5Qno2THVBN1Fld054eUd3Zm1hVGYvQlh2b0xGOVp0ODhvbGRUTFNvREZvWElFaTJUMjd6dGplOWlBZHZIMkZqeCs1dXkvNzFBOGFiNndTVkVVT2tYelVRbGJCWUgyRUk2Q0FaYjJ4Z2ZjSWY1U3FKelUySVNiYWVrekluWVVDS2hIRnhNVkJvejgvLzNnVWVQTGZHUXc5RnBwc2pjaW5ZdTNhVDVhSW5uMDZ3T0hJYkdXeEE1SXJwZE1KeWY4Rm5QL01jTDMzd0xEL3lmN3lmLy80TGY4aXYvdktqUFBia01VcERWUmVjMnBqZ1EwL2JkSXpLSERONEZ2T2VydXM1c2I3R2QvNjVOL0t1ZDd5TVRUTnc2ZmtkbHNZeVczUzQ0REc5b1NwUysrL09NNmN4T0c3c2Rla2gxNHFpS0ppN0piT3VaYXBxeWlqSnM0TEdXTm9iUit6c0I2NGV6SG5wM1J1WWZzbnNPRDNQMHhyS1hIRDNxWkttOXl5NmlCQ1N0WkhFR01kUGYraHBFSUczdmVJY2ZuT2RSZUc1dXIvZ2RyWEYwSHFpYzFSYVk2S2tuRmJjdkxURDlkMGpUdDUxbHUvODdyZndzei9WODVrdjNPTHNxV2s2TEFqb2UwY2xTL0k4b3gxYWJCY290TURocUlzUlIvdjdmTjA3SCtTSGZ2Q2JPZnV5MjNueVUwL3k3R2Rlb0R5OXdVdGZkWTZmZStLQUdmRFFiVmxDcElUa2ZsK3ZCVW9VTktZblZ4cWl4anFMQzFEbENoTU16a2N5SmRGWlRoS0VnZlVSRjF6YUdMZ2tweDlYRmFmV2NncXRLTE9LS0NUR054QmhhU3kxa295TGxQV1NFZGFxZ3EzMW5JUGRQY0pzU1IwTHpJSG4rT2lBc3NoQmFNSWc2ZnFPYUEyNk9HRDk3Q1ovL2Z2ZWdSc2NILy85NTlCRFlDdlBPZHlaWXdLOCtQNjdlTjgzbnVZMTkyK1FsWklibDNZeEM0UDNjSFRjVUdRcDBLdlJXSmNZckNYcGtHVUdoM2VzT0p3YVp5S0xaaUQ2d01uMU1WVXhZdFlzTVM2OXdKMjFaTGttTDRvRWZ0QVptRUIzdk9DZ2RjVE1NQXdETWlzUVNKWXhVQWpIMGZFQ3BUTTZFVmliMWt4SFkySThwc2dFMXR2VWJQV09MTThZNVNYT081ckJZVlk0RE84TitBWjZnemNDS25Da0hGTlpaWXduTmRFSFROT2hSRVk1R1ZHTUNpb3RTWjhoVDdjNlZGYVpRaWlvVldxcU9pRldkcDRNRlNTREN6amx5REpIc1ZiZ1RaOFFIVExwNGF3WCtLNmpYVFowWGNyU2hnaldSVTV1RlltRVlEVkVpM0NSdkFRbjAySGplREV3SG1lTVNwM1FPVnBncmNVUERsVkhuTFhFSTBHTXlmeVMxeFV4YU95OFk5ZzJMSTRPd0hwRVpGWHFrOHc3UzFWV2VCR0lRM29uZDBPaVpWUmxobEFLWXlXaHRYUnp3MmhMSTYxbHZuZU10WkY2YTBRdEJhRTFETjJBN3hiNHpTMk1TODk5bVd0eXlRcXNuWEtNZWpYOUZDRVNoVUNLVkk2SkJCZ0MzZjRNZWFJQ0VhalhhNVIwdUxsQmlocWhKRW9yb2l6UVpVRmRKenlNWFhuS3BWSzAvWUExamxGUklCVnNyZFZvSmVnSHg2UFBIUEdMdi9ROGYvTjlOZUxrRkZGcHVzTW1LWE45d0NtQjhBSTNIN2h3WVpmYmI5L2l0bE5UK3NFeHFRc0dIM0Voc0Zaa1NKSVJ5emliN0RGQk1CMWxuTDV0RTk5MmxMMmdHaFhrUVZEbkdjdE8wUFNSYy9ldEk3d2xYanZrTno1eGdkLzYzRlcyMXpJSWtVeElZdkFnVldMMU9va2NCOXFtUnluRmN0R3d2M3VJR2d3YlFpR0VUSWRWNyttSGhFQ3kzaU5YWEZublBMbVdUT3FTcGpjWWt5UVdVa3EwZ0xKU1pFb3k2SVFBV25ZdVpYK1Y1TVJtd2FlZjJPSEdqMzZRZi9qMzM4V3JYbjBualkyc3I2MGoyV2RHcE9zRmswbE9VWXl4UTdOQ3JiblUwdGNaQ2tjVW5oZ2JRbkQ0dU1xMG9oRlNZb1hCbVJhVUo4OXlySGRKVHlrRmZ2OFN0cHRSbm40eDMvUVh2NDJUZDJ6ekl6LzRiem5jT2VMMDJWTVlaN0hlSW14RE1Pa1pVNWxPWkFVUldadE04WEtCTlIyejR6MjZlUXRSSXB4S3FEc0diQUFWd0FXWHNza2hrTXMwZVJjeDJXT3Npd21MYUN4Rm5wTTV4YkpiSXBSWVRTWVZOaG9JNEFjb01vM0cwN1U5Zy9XNDRBZ3gvbkhkbjBnamFTZVJQaUJjV3Y4NUlmQlJvVVVnWWdoSVJISURvRVdhdEpSVmhnK3BPVnNXcVFFdFpKb2NoaGhXSE5FZUlSMGhPTHBadS9wblFMaUVZNGc0Z3ZFNEtURTlhRHZRUjhlb0xCS2NkUEFNMTYrUm40dmN2Tmx6dExlUFZCa3hLbFMrTWxUNEhtY2N3bG1HWlVPN1hDQ1BHNnlGcURMaUtDZVRJSUpJclVJbE1HMk83QjFaSGxEZWMrM0M4L3ptZi84b24vckVKZlliNkw4VTdwUlE1bW42NEZlS1BDOFRFYjNNRktNeTNhQ2RpMGlwY1Q0OVhEWTZWRlFNd2JHN2FEbi81QlVtcjVBY2UwOW5IT2llZWx3Zzg0eW1HWEF1QVVxTnNsdy92OFBuUHZ3WXIzM2RYZnlIbi9wcmZPcUxWM25obVd0a1dZYk9KSnZUa2hPampHb1l1SEwrQmpjdTdqUGEzS0FlbGFnUVdCek5LY1lsT3M5cEJrdmJHeVpWaFRPV3hlR0MwN2JuOXMweEgzWndjNy9selBhSVY5NTdpb05aeDhGTUlxTWtlTWVrMURqdldmU2VVK3NsdDQ1NmZ2eURUL04zaTV4VFo5YlJvd25WcUdMZVdteWVwZHRMcnNoSGRmcmhHSU1XOE55akYzanVxYXU4Nld0ZXh2dSsrNjI4OHRVdjV2ZC83ekdlZnZJbU4yL05tQzA2T3RQVERZNW80YzdiTnBuY1ZmREsxOTdINjE5M0gydmFzLy9zVlo2NmRzRFAvTTR6ZlByWkhjNXQxNVI1VGxGbkt6QThMUHNsVytNUmkwV1BDNmtSV2tvQkxyTG9PNnFSWW4wOFpYQVM2UTNGR0hhT2p4bVhKZHYxRk85aFdGaXdnZDVDbmFkVjZ0WGRCYVgybEptZ0h3UmFDQmFENVNkKzlXbXFYUE9xVjJwQ2xtRGRzWGNzbHg1blBhTG9rRktnUnpuTlFXVG4yWDJHZWVUZWgrN2svZC8xRHNKUC93NmZmdlFtVzFzbFZkQm9LVkQxS3Yvcm9hZ3pJb0xqWThQdTRZdzN2UHdNLytTZnZZL0RuVU0rK05NZlpwaTErT1hBK3UwbkdLOVBlT2dscHdCNDVwcmx4QWkwemxBU2VtTWdRak5FWEI0bzVSK1pBb3dCSlgzS3k2bUFXSUg1ZlJSRUc0Z1IxaWNKNVZNWEFpRUVhNk9hem5wdUhNK1pqa29tWlU2cEM2N1BITjZDTGhTZDkwUWJ5SlRtd3VQWE9IbmJhZkt5WW1nc2ZUc1FxcVIxbE00UmU0dkVRYTI1Y2VPSS9kOTZuRmU4K1Q1KzVGOThPNDk4NGpJM3J1NGhSR1NJa3UxeHlYYXQyQzRFTnkvZjRyblB2TUQweEVtaWxlU1paR0V0WGR0VFNrbGVUN0JXcFpXc1VBZ3ZLQ3U0NDh5RVgyMmh1THJISGFlM2VPUExYOFMxM1QwT2x6MUZwbEJaWkJnQ3MvbUF6Z3BjbDhwMkc5TXhra0JZWVp5czlTd1dEWG1lRTJXa2tCazNEL2Zab0dhckt2SFdzV2dhdGpkTDZpb2hrNHE4d2poRG1aWFVvenJCVUlLbE1RT0x6aENpeGdQTGVZUHBWODFvRlhBeFVvOXJsck9HdGpFb21XUDZBZGYzekc4ZWtpR1pUdGNKTWNWV3ZQVW9GRVdSMXJ4bVNKZDJnc0NHWkxlU0trZGttdGoyZE1GamhjUDNrYzVGOGdnVG9WRlZscEFYbmFOZExCamNCbHNiay9TTzg1N1dlUEpDTW9vSk1aV3JpTTRrd2daS25kRmF5KzdoRXFKR3FwUVREU1QzYmloejhtMk5EQkxmQmZ6Q0VWeGcxalJFR1RHMm93MkNyUlByRkRxcEZwZTlZNzRZS0FwTm5pbWNFK0FsdytEb2c4VWFqOUpabW13Nmc0K08rWDZMVy9ZczVpMnRqbXdxalhBSzF3eEU0Wmt2bGt6ZEZQS1M5VkhOcEM3d3pxVVNweGVNcTR4Q2ExeElIbXpyUENwQ1dhWS9VOWNQMkg0Zzh4bzlLZEZXVWVRMWJzUGdOWFMzUE5iRDBBZEdvNXA2V21CYUE3bW1MQ1hJSkpxb0p4V0xaY2VzNjVsT0prZ3BHZGNGWnpjRHYvS0hGNmtuaXUvOTFwZFMrUW9qVkxvZ2tkckdLbGNjTGxyYytXdTg5R1gzOHNCTGJ1ZmpIMytPa3hzVEZHbnpKMlBBUm9FaFJSNXlvYmh3Y01URHJ6bkhuWGVlNXRMVFZ5bVVTQmdwNDdFdW9JcUs5Wk1qaHZtY2NkL3gwYzlmNFNkLzlRdUpHcEJKdkRjTVhsTkloWklCNzFWNk5vSmY2U00xT3N0d0poSjk0azFXWmZKelN5a1JJbjFjbGRDclRMUmpOS3BXQi9FMERUVSswQThwbWhSRkFsdm5tVUxxREJjQ2d4MHdMdUJXUHV4VFd6azdCeDEvKzRkL2c3L3lYVy9oblY5NUwxY09GMnllbUxLMUlabk5la3pyeVZraVZFeGRDeDl3aXg2MVBTSElFYjQ3SnJvQkx6WFdnQW9EZVZWQzlBVHZ3UW84bHM1YWlyTEN5OVRpMWtyUkx4YkE4MkFkYjMvdnU3ajk3blA4NlBmOUJGLzQvQlZPMzdHTmtoSkVqcGVPYWxRUVlzUWFueHpSUGlBMWxFVUZqQWx4bDVDQlQyQlRBa21sT1M0ck1xVndyazh0WlRKc1NKTnhINkMzQS8zZ3FhcEFrVTNKODVJZ0hFcmw5Q2FTWitrOVQ1UzROakNkRkd4dFR0bmRPMkxScDAyWCtsK2czRVFHYTFPUU84K0lJcUtVU215ODZBaFJJS1ZLdHdjUk1ONFNDU2lSYVBwMWtSTTg1TDdBV0UrTWFVVE15aXNZaEtBZkZwamVJRUlnZGdhRUlncE5EQ0daQ25KSjF3d01MaUJsVE9OcjZjRTdmSWdVMHpGcjIxdGMrZnlUWEwxeWhYb3lRY2pFTm5PbVEyTVR6TGJVa0N1S1RGT3VqVkZCcFZ1MmQvVE9JbldHc1MzQkowYVZXN1RzWEhxT3RaTW5lZStmL1JPODk4KzhnZmJZOHR5VFYvbk1wNTduZHovNk9KLzd4SGx1ekJLY2RpdUR6ZldrS3FxMFpsSmxqSW9TRndJMnVIU0NEeGxLQnNBU1ZNcUxDQXpQUC9FQzk1d1o4OUJMem5GbHB5VUVTNmxHTklzRzZUVGpNbU9rRlcxVTZMV0tpeGQzV1hTV0Y3L3NibDcvMmhmeHhqYzh3UHp3Z09iV1ByZXU3TlBmT09iWld3cysrTmtMdkhHMzVldS83cFZzYm0zdy9LVTlmSEFNQTRRNGdGY01QckN4WVhFK3NudDF4dVpkeC95VjcvdHFwaWRyMm9PR2w5NjJ5YXRmdk1ZbkhyL0JSejY3aEJncGk0eU50WXJPQkdhTkk4czEyMnNGajExdStKRmZmcHkvL2Q2WGNmK2RrbkVPVm1yS3lRaE1ST2FKQm5aMHZDQUxqdDQ0amhhR2JtZk81Mzc5U1o0N1UzSGJQZHQ4Ky90ZlN3aHdlR1BCallNbVRZVzlvQmlQdWZ2c0ZwdW50Z2krNDhvVEY3ajZ3azMyWmkyLzhMSG4rY3h6aDV4ZXp3bGVRMGpQYVZ4aElwckdRWkdoWmNZd2dNcHpNaHZvNXoyYld4dkVUSEo5M21CdFM2VTAzaFdJM0hEUG5XUEtyRVF0TXZTNHhHZ0JIcmJIVTJ5d1RNb2NMUnhMWTlMTEtrWTJKem16cGVISGZ1VngvamVoK0pZLytXcmFjY0hsSzNQYVlVQXI4TExnY05rU0R4cWF4aEZVeHQ3T2d1clptOXovdXR2NUczL2pIZnpjVC84aEgvbllCY3JiSmhSYUp2V2w5WXlLZ2x6bkdPdnBiTTlrWGZHKzczZ3p3LzZNWC9xRmp5TmN3ZjMzbk1TVm5zc3YzR1RyOXBOOCs5ZS9qbUFqdi9xaEw3Q3plNGoza2pMTHNNNmtVbGdtSUZpS3NtU3NSdXdkTGZIT001bnF4R01EQ2dRQmo5WUY1YWhJSDhKMllCazc1R1JDbGdsYTYzSEIwOW5JR3BMdGNVRnZIRnBwQkVralo0T25NWmJHZWE1ZjJHRjI0VHBaT2NiYlkwWmpoYTR5WWg1cCs1QTBra3FnZ3FBcUtvNHV6WGwwOFRqelY1L2ovb2Z2NG1Xdk84ZDhiODdlOVdQYW5XUDgvcEluRHBmOHhpTTNlZmllaHEvNjJuV1laQnplbWxPTlNxWmxCVEhTTGx0OFNBZXVQRWo4eklJVmZPOTN2UTJGNE9LMWZWNzk0dE84NldVbitkMVBPMzc5NDVkWUg5ZHBzcFFGakltTXloRkZGbW03am1VM0I3MUdPUzJ3SnJLdXN2UmhkSmFSbGd4KzVaanZERnJLZEJnL0dGQjNDTWdTQmFiS1M1d09lQ0lCU1Z5dENFTWd0WTlGOG9SdGpBdWEzaEJONVBqWVVKcU1zakFzZWsrR1kxd0pqaGN0ZWZUZ0k0Y0hoNnhua1ZQclkxQ2c4NVFQSDF4RVNrV2VhNHozekpvZWJ5T0hSeTFyR3lVYlp5Y2NYdHlqM2V2Wk8rNlpIdy9VMHhGYjYyV1MxR2VLTEFNckFyYTNWQVdNMXF0aytGR0JSV000dFRZaUV5MHlpNVJGVGpNTTVEcWp6SE9zOEN4Tk1sT1V1WVlpWTNHd1pMSGJwR3J6V0ZDY0tza25rbTUvUWJOMHhEeWdkVElxbFY0eldoOGhsTUI3VDlOWk1pMXhQaUNjWUZSVTlNTkE3OU0zcWUwTmQ1MVlveFNXNDc1QkJNZk9RUThpVXBZNWEwSWdHODlzTVVNWEdoOEdidXdjc1hGMnl1bU5paWRYU0xLKzh4UlpnUlFLSlNONXBXajZoSkJ6SzIxZU5hblozZXM0dXRWVFpHUGtVbUNPQnc3c2dQU2Vvc2dwVDFia1dhQTlQT0I0ZHpQcDM0WTBCU3J5cE1idEI0TVRIbXNWZ1hRcHlaU2s3UU5Dd0tqVTlMWGpaMzd6QlZ5QTczN1hBK1RPTUdpZERzWlcwTXdHNWtjTm1Td29YdVg0K3ZjOHhNYys5aXk3aHcyM25SemgvYW9nS1FVbENpRWxCN01XR1NQdmZkZHJRR1kwUndORVRkTUgxdGR6aERlWWRvYmRIL0J0dzY4OWNwRmYvTzNuTU02enRWYWlwQ0pYa1NKTDYxQmprbFVHb1JpR3dMSUxPRCtRNTRHVEo2WXNydTdqdkNEWEZVcGxlRy9KVlprS0c0S1Z1aTRWTHpJdGNEYmxmS1ZNd3lrZlBZT3pLS2RTU1ZQRDVyUkNTY0VCUGExTitYb2ZJMmRPbERSTHp6LzlWNy9OazQ5ZjVQM2YvQXBtaHczclcydU1Lc25Cd1F4amNpWmI2L1RkZ2t4bVpQVWs1UzB5QmJGTW16Y0x1UlFvNTNIekRoTlNCbE5vQ0I0V2cwUDNucWF4dEczUHhuYkZxSWJaYkEvVHpPaU9Geno0cWxmd2IzN3BmK2NmZmY5UDhwdi8vVlBjZnVjWnlqcDUxYVhNazBzNkpoMWZJQlZXbmJjVWxhSlRpdWhkeWkySGdFUlRsY25ON2swZ1JJSEs1SXBVNDlONUp6b3luYmlhVlZZU1E4Q0xBYVVoWWlneVFTWUxwTlI0NzVCYUpuZTBWTmdBM2RLUnE1SXN5NER1Zno0c0NvSjFETzBTTHpRUlFWa1U2U1VXTFRGYXFtSk1pTkRiampMN0k0SjRqQkpyRXpkTVNmbGw3MlVVNHN1dHZ1Q2g3ZHEwOTY5TEhJRmdERm1WL2gyaXN3VGx5YnhMelYwUDNYN1BrVmxTbFNYYmF5UFdienVCSG8zcEZrdU9idTdoclVlTGxMZE1kZnlVc1FoZGk1WmdpNUlyeGpPRXlQcmFpS29xV2R0YXc3YzllN2NPVVZsR0ZrdU9Gd3RtTDF6Z3RqdHZJOXg1Qmwwb1J0dmJ2UDZ0citYMWIzMGQ3L3NMTnpqLzlCV2VmMnFIVDM3OGkzenE0MDl6L2NyQTFvWmdmWDJVMkdFdW9KU25xalNDdE1LTVVlR0RRYXVJSHlKN2M4OUhuOXpsdnJ0dWNQTFVhU2JLYzlSWXJzK1BLUlMwYlVQZmFjUm9taEFGT1l5ek1ZY0hSM3pxdDJkYy91d1VsWHQ4MTJIYWx2Mm01L2xyU3o3OCthczhkclVqOC9EU2MyTnNOa0puRWRzTHh1TVJ4cmNKNTdKZWNIemthSllPOWc0b1J6bDN2dndzMy9uMXIrRHFrNWRSMXZQeEwxN21ZMS9jWTBpamlaU0p5QklHcU1qemRNTlFraGVmMFR4N2RjRVAvK0tqL1BWMzM4ZnBreE9PZHhwR2E0YWpHTmphWEVjVjJaZU5EbFlJeW1sYWVSM1BCcDY5ZEl2aTBTdWN2WDJiVTJmV3VQM2NGaSsrNXpUZU9OWTIxcEV5Y3ZHWjYxeCs0aXJoNklqbDBIRit0K0cvL2U1enZIQ3JaWE5OMGJ1RWtwRXl2UUFyclhCQmNMVHNzTTdobkdjSThLWTMzczE0WTh4aTFtRTdUL0FLWVNBWGlvRGtZTmJSdEtrODlNVFJkVXdoZWYyOUovbmF0ei9FNDErOHdlVzlPZXVUZEF2MkJEYXlDVlU1c09oNm1pWXdIV3YyamgzLzVwZSt5RHZlK2hKZS9wTGJ1YlovQ2J0Y0VLeWs4Wkt1c2NRUWNDSlNUUlJWVUJ6Y21ISHhzNDY3WDNLS3YvUy92WlVIN2ovSEJ6LzhGTXRtU2E2aDl4a3lBeWtkeDYzaCtxMkdiMzdQZ3p6MHlydjUvRWVlWmpucm1KeW9XZlJKSGgrTTVmem5Yc0RkZDQ1disvYXY0dXZmK3hxdVh0aWxXeHIwcUVRWWd4TU91MEpZVlNFNXhHZGRqNnJYMk1wem9uZjB3U0N6RE84RFhkUGgrbzdqNDQ3RllKbnR0enovd2k0b3lkNU9Rek5MN3VzODArdzBOazErQktoY0ptNnBBK3MxdllWUG56L2t3UXMza1BVYWE2ZkgxQ09KQ3ByNTRjRFZneU9NZy9WaWhJNlJrQTNVVzRwbTN2SHNaeTl5NitsYmFWM1RXOXEyeFFUSnBiMlczL25NZVQ3OXdnejlEc0hySHJwSnBYd0M5RHVISXlPVGdrSkZqSS8wdzVLcXlEamU3M2ptRHkveWtsZmN6bC85TTIvbDRsUG5HZGNGbjMzMk1wOThmSTl4VlRBdU5WcG9yQXprcFVWR0N5Rm5iNzVrYng1NCt4dnVZVU9PT05wdGFBMm9JZ0dXWjYxTEdXU2YwZmVKQitsOXhNd0g4cUxnSzcvaVFYN3pJODl4Y054eGFtdU1kU2t2VjVRWnVjNEpVZUs4NE9iQk1mZmRQdVlyMy9naWRxOGZjSGl6b1hFU1B3ek1WNjFtUmFCeExRaEpXZVhNOTFvT3J1enowb2R2NTVVUDM4RUhmK3NKaW51MldhOGxuVWtRNEM5cDNpSUNhNU1QK3B1LzhXRk9uNTV3NFZOWGlFMkN3YmM2VWdxSk1vNmw4NGlsUkFsSE53dzBmYzZpTWJ6MmRYY3pyai9COVoyTzA5dUNlWmNqVmxFazYwUmEyMlVwTXhlREFBUVhiaHp5OHZ0T2M4ZTlXMXk4Y0kxaDJUSnZBOTJOZ0h4QmN1TE1HcHNiSzBDM1VBZ0gzWTVoNThJdTl6MTRsZ2Nmdkl0SHYzQ1oxejU0bHJ6TVVyRXhRb2lDb3RBc2g1YStpeHpNT3I3OVQ5M0haRjN5K01kMm1SODVOclpxZXRzakNOUlp4bUFEaTdsQlJvTlo5R3dXR1ptRUY5OTNncC81YjQreHVkbHgrL2FFV1R1a2dvMlRORitxU2tmQnpaMEZENy9xTnQ3K3JsZHg2ZUkrK3plUEdWVUZFMW5pbkdQUnBROXNoYWE3MkRDK1ErSnNwRGxjY04vTHp2THlsOTdCLy9qdzQ5eDJhc0tzOTNSRDJvSmtnbVRzc0JFVlVnUmwzenA4ak5TbFJnakJ6My80QmM3Zm1QUCt0OS9EL2VjMm1MVURyZlZJTFppY0dCRUd3ODFyaDd6NTdTL2pIL3pRd0wvL3lkOWxaM2RKUGNvVHprMEkyczdTTlFZWjRXLy93THQ1Ly91K2tpODhlcEg5aTN2VTQ1TEdHWnBGY2lsdlZZS2R2V00rOER2UDhPdWZ1c0xtSk9QRWVvMzF5YUExcW5MR1JVWWh3Y1lNS1JVNlV3UWZFV0xHc3UrQXdIU1UwdzROb2V1UTJzTnFLQ1ZsMmk0YUIzbWh5WXVjdllQMEhSL1hlVklNNHpEZVlieEo1eE10Y003aXJXQTZIakVlUlNTU1dkOXp1T2pKZFdwNlYzWE9TYTM0cjcvOUF1ZHZ6UGllYjNzMWRSMlI1VHI1cU9MVzdvejV3akJkVStUckdiNkxxTDdENGZFTEQ1a21TQ0FYNk5FVUdUS1VjK1NGSWtaTFA1L2pteVdMd2RLM1pnV2FMOEdudjBzZkd2cmR4K2piR1hlLytqNSs2Ti8rQlRaUDVQenFMMzZLNlZyR2FEU2k2enhacnBKdU5DYWptZ2QwcHBBc2lNSUJlZUk3eFFaamwwaWhVbE02OUNuSzR5TEdHc3BNRVZVZ0N3VkMyYlRwdEdDOXBjaExSTXh3dnFmTWlwVWVNVEZTRjIzUFlqRWpxc2hVYTRaY1kyUDg4a1Y3VlRWanE4cXlWMzdITjd6a0s4cXg1bWdSMk50ZDhOVGpsM0UramE1QkU0VkFDSWRHcmx5RE1qV3MxQXBGSFZmNUR1bnh3V0pkWkRsWTl1YWVON3p1ZGg1KzQ3MGNYTHBKV0ZpQ0VJaHhSVGFxQ1g3QU81ZllXaEprbml3bzdieG4vOUN5YkMxMUZkbTRZNXZwUnNuLzhXOCt4SS8vdTAveHpNVURmdTh6Vi9uRUY2N3orYWR2OGVrbmJ2RG8wenRjdkhyRTFkMEZSMDJQR3pxSzRDbWlaemxic24rNHhPV2F0ZkU2cGpVczJ4Ym5BcG1GSW5pT2IrNXo3ZG5yeUZuTFluZVB3OTFkQ0pZNzd6L0xhOTc0Y3I3NjNTL2pIZTk4aUplOS9Cek5iTTZWRjNid0ZsUWhFbll6cHVtQTFucEZ5OWVnMGppK0h6eFBYbXpZMjJ1NDUvUWFZeFhTQWRFbUtyMjFzR3c3RnNaUkZTV0ZURXF0cHU5d2ZjdG1KdkJOdzdYRG50OTU0aXEvK2Vtci9PNWpPN1NENWRSRWNPTzQ0Y1JXelFOM2pPak1nQ29VbVFvc3VnRWJCdzV1TGJsMnN5T0lkR3VlN2N4NTRRc1h1UHJNZFhaMjUvek9ZOWY0clVldmNiUzBLSm5ZVzk0bkVHbVJhMFpsenJ4ZElnUVVSY0pyN000c2o1N2ZZMjR0cDlZclhucjNCcklNeEV6UURCMWRQOUIzaVVxL2FBZUd3V09Db2RRWlRlK1lIL2ZNZHhkY1BuL0lqZk03UFBYMFJaNTk2Z1lINTYvUjdlK1I2Y2kxMll4Zi8vUkZQdkRSRjVnUGxsR2RQbmxTZ0JDZVRFdkdSVUdXWi9nUUdLekgyRWlXUzE3N2tpM2UrcEt6WEg3K0ZwY3U3WEo4TkNQYUFUd01ScWNiL3VJWWpLSE9DbzZQbDh5WGMrYUhTNmFGb0YwdXVMWTdoeUNSU2pJWktjWmxjc1VLSGJITzBxK2cyY1pHem80Q0krbVl6VHQyRHc3cFRYTFdscGtITHppWXpSbXAxS2hlZEF2YW81YWRXOGQweHZLaUUyTTJjc2x5TUVnbG1EVkpCeldkMXJTZDRmeTFsbnZPVG5uVi9hZlkyVGxLQWZseGdRNk9lanhtUEttWnpSb085cGRjdm5BTk0waE9iMjl6MjdsTnBrWEJXaTNaMko0d3JVcldwaVViaFdDeU5lYlV1Yk9jMmQ1a1FtQTZ6cG1lbnJCNVpzVG0xam9udHRkWlh4OXozNHRPOHByWDNzSExINzZQVjl4L2hvZnVXV096RUpSckU2enpYTHg2eE1Vanc3bTF4UDhhb2dPcGNONXp2QnhBQkM3Y1hMQnowSExmNlhWRW5uQWRpK09PbzltQ1d3Y05iZ2hNbENUTEFrUHNRVHJXaTRKU0ttUmpHSTQ3NXAzamhadExQdmlwaS96bVp5OHk3eXpySTgyRm5UbW42b0k3MWd0Njc0bGVjSFE4bzI5YVFIRHJhTWF3OGxhUHNraHpjTWlOYXpmbzlvODVQdXo1ZzgvZjRnTy84d3g3czQ0NkwxYjVxVURBa1JlcDdHQ01JTXNFNzM3ZDdYelZLKzdrc1NldWNmSGFMajRrSE1peTY5bWZIYU9qU0ZZZ1oyajdIalAwWUIzbm43L09SRUVsQTBmempoQVYrTGhpMjRsa2RuQ0JQTXM0czFuem5yZTloTEdHcHgrN3pPV2RJeGI5a3I1ZDRHM0FEUVBLREF4OVQxQ0NVaW5tODViNTRaSmgxbkN5U3VZYTR6eWREVWd0cUFzTnE1ZC9STEUyelhuM1Y5N0htMTU1TytjZnY4Yk5Td2NKZHpPVmFCMkpnNlh2QitiV1VtUUtPM1JjUFpoeGNEQmpmbU9mTTZWbW5Fc1d6WURGTU5pSWx0bnE4QllaRjNtaWFGaEhQemdFa1hNYk5lOTV5MTJNOEZ4NTRnYnRjVWRyREh2SFMyYnpCVTIzb1BjOVFrV1creTEwUFVIQThjRWNzV2c1TWRMMHl4N2pVb3RZcnJKWDFybjBubk5RVlFWdmVQbHB2dUtWZDNEMW1Xc2NYTjRuaElEcFc0Nk9sa1RyYVpjOVI3T09vYk9FTmpDZkQ3UkhMZTFCaS9DQjdVbkdiR21SUW1Hc3d6cFBYV2lNRGVuakN0eHoyNVEvOC9VUHNWbG9Manh5a2VYeGdvakh1Wjc1c3FIdkRMbUVvYmNFMGVCZFI3OW5hQTRYOVBPR2MydkZhdW9OR28xUWtnTEZvaDg0Nmp1Y1QxTjVMNkRTQ1F0a2ZVQXJRWkVyWHJneDU1bkxNOHBjY3R1NlRreFlIeWxVWUhFMHNITTVFUjllK2NxenZQcFZwOUZLTVhRcFF6OHVGSk8xaWdjZU9NMTNmOWNiK1pxdnZwOW5Ici9HWTU5NEJqTTBWQ1Zrd2xPS3dPS281OUZuOXZuUEgzbUtUenh4aXhQVG5PbTRTSWNhSDlnWWxVd3F6V0F0dVZab0pUSE8wSmdlclhLNmZzbDRmY1Ezdi84dG1PV014ZDRCZVZVeU9iUEY5ZXU3L05vdmZZcXFVSlM1U2hkODYwRDhrWlFoenpKRUZCZ1hXUFE5emtaR2VjR295bEkvSUVKdzhYODZxM2lxWEZEbU9ZUDN4Q2dRUk1hVjRya3JjNTU2OWhZdnZmOEVaN2ZMRkRrS21zUDlKY3EyNUJvOGdaako5TDhMQ2tZMXNraC9QNUVVejVMQ1kvdVdZYlVKVlNvZDdNR0JpblRHc2x3YUJKSnFQTUlSbVIzdHMzLzVDaW9UdlBXOUQ1TVY4TW5mZllab0ZlVzRTdm5wVE9PQ3B6VWRCNGNEZDkyenhidS8rWFc0b3lXSGwyOUNMdGkrNHhUUFBYZVozL2kxejFBWEZYV2RFejIwblVXSmdxb29VSmxDUkVVTXFTaFZaS0JWUVhBU0tUSzhoMll3U0pXaFZ4MkxaVHZ3NXRmY2t6WlZyYVVWa1U4L3V1UE9YOTc3dFg0WUh2OGpLSGNNQktuUVZZMWJMdWlibnFHMytCVjROVVJOaUJuQmlpOHJ2bUlZRUVxc09IOEpyd01oalpXenBJdnJUT0lzS2lTbTh4d2VkK2l1WXoxZlE3Y0R3VWFrekVGSlRCandNVkxrT1NyemlIRkI3UlFFejh3a1ZkTXBIVGc0NnJscG9IbnFZQVhWL0ZLYk93VlFYUUFUSVJPd3ZaRngrK2tKOTc1b2kxZTkrQ1QzbkNsWnRBdmluV2M1Y2M4cHlwc0hMUFliNmpOYmFCblpPenpHR1VOL05LZlpPd1F0cWZLTXhRdlgwZHRycUxyZ3p2dnU1djZIWHNYWGYrdXIrZVR2UE02di90ekgrSU9QWDJEejVJU3l6dEV5TlVWWFJHNmFwbWZSSndiZHFKQjg1dndCN2tPUDhuVnZ1SWY3em15ekxpWEx4Wks2VWxSVnVwWGwzcE9wU09ZZEI0TmowWFo4YnJmbDBmTzdQSGx0eHZVRGc1S0pCVmJtcVlTeE43UDgvRzgvVDE0cnpwMGNNeEdLWWJhZ0dSeHVnR211bUp3VGFEd1pnc0VGMnM1emN6N3dzUzljNDRuTHM5U2NyZEpMMGE0RThNWjc3bHlmTW1zTkxrUzBTbzN2T2hmVTJ4azJCRDd5eUMyZWVHSE90Y09ldTgvVUZGV2VKT2hkdzZ3ZkNESGhQNXh3SUNRaldUTE9rbWtpTXBBcHo2bnREY1FzRW0zTGNxbTVzai9qeVd2bitkUVRPeHpOUFhVbG1WU0t0a3NIcytsRW9IVWcxd3FwVW5oN2NJWTN2ZndrZDV4Y1gvbGtTdzUzanNneXlmb1lUcXpYNU9Sb3JWZzZ3ZEsybkQyWmNXYjlKQjdCQTZjbWRNNXhzSHNFUmM2M3Z2MWxmUFZyQm5wck9aeTEvT2JIcjVEbERSc2JJeXFURTN6THd3K2U0TFV2UHAyUVNTSHc2T2N2Y1ByMEZyZXRKN1hTeVdsSjhEbTlIQkN1UUVpWWUzQWF0dGR5VHArWjBDNGI5dmVXbkR0VmNQTGtpMUUrNTdoWjhObW5kOWs5YmpEZXNMVWh1YlhmOE5RWEx1QkZST2M1dFNyUndpUThUQlI0SWFnR3g4N2hBZk85bHN2ankrUnloRzhHM05BejJJQ3VZRkpwOXRvT0ZUSnlDbHgwaUpCZWJ1Vm1qcEllN1JTTlZYU0RaOVkzYksvbGpEWUtiQi9ZR05lODZXdGV3VGVjMithNVo4N3pleDk1bHQvK3hIVjJqZzdabUpZWTc0azI0cHhCcTBCbllhM08rSzNQM0dCM1p2aHo3MzhWcDljS1pEN2dVRHd3SGVORkpHRFkyQ2haM2hySWhoeFpPaHJqdUhxcjQ2a2JNeDYvZk1ERkd6T0VUQ2FiWW9WV09WejAvT3RmZTVMM3ZPbHVYdnZnTnBzamlSS0NaUmU0ZE9NVzR5cHk5dVFKVENnWTU1SFdHMlpIanFjdTdQT3BwMjd5OUtVNVBqZ21ZODJzN1ppT0NzbzhFSUltT25qank4NXc5Nm1URkRsczE1cjltd2UwQnM1TkMyU3VLWDNBV0l0Ym0xSnJqVUtBRmpTOVpRZ1JaM3NPenQ5aU1xNzVocmZjejl0ZmZTOFhkL2E0dmpmbjZZc0xGc3VCaytzVmIzdlZiYWhNY0dKcmduT0dSeDk5anZXcTRJN3RnandycWJLTVBOZllBTkU3bEV4RmtaRXdqTFlxWm91T20xKzh3cm5UNi95MWIzMFZ6OTg0cHVrOHo5MDQ0S2xMQnhRcTQyMnZQTWQ5Wnpib2xlTzI3U250M294KzFuQzZ6aElmVHdUR0p3cjhSbzUzZ2VnQ3lsdENycGhNTjFqT0c5ek9nc1BPOHZhWG4rYWhPemM1NkEySFM4dW52bkFGdmZKVjk0TmwwUmtldUgyRE56OTRoa0xENWxyR1lEeDd6eDB3VmhLbUZYZXNWOHliSlR1ekJhZFBUT2tiaU01eis1a3hZeDJ4WG5KNHRPRFc4WUlYYlZaODMvdGV5NldkWTR3VGZQYnBXengxTVVWdVhuMy9hUjUrOFducVVjNnBqVEhOckdkNVBHTlNlZW9pZmVTM3lnbFpyakNEeFJSUWxVbnh1T3dyRnN1V3ZRdDdSSzM0MXE5NkdRZXpKYzlmdWtYVGVTN3V0T3pPT3M1dFZiempOYmNqcE9DdTdUSE9PcTQ5Y3BHeGdxMDd4a0Q2NXNub1FjT0pqWUx4S0NlYlNwYkhEajNPT1poMzdEeDFpVE1ueC96Z2Q3eUpLenRISEM1N0xseWI4NFhuZGlpekVveEZ5a2laU2F3VldGSW1QbGwvUkJJRmxEWDdzNDRmKytYSGVmRE9LYSs0K3pRdnZYT1RlMDdrbkJ4SjVvc0ZPNDhlc2J3eFpybys1bTJ2T3NNRFd5WGRZaUFJUVZFWG5EaTlnWWlPUC9pTlIraG1QZU5jTWhyWERLM2wrazdMRjYvdTg5bm5kcmg4YThFb2w1emRyb2t4dGN0RGlFektqTHBjRlZxeXRObnpOcUNWWnZDV3pnekVtQ0dDUTZsSVZXWXJERmhOUDFobWl5V0Q5ZmlneVRKTmNJWlpNeUFIajFSSmZWcGswUFFEelJCd05tM3RFQkloVS95b0tDTXhDSVpGQnpGU2x3VWg1alN0STRaa09SRktwbWRxcTJCdmI4ay8rbWUveFYvK2M2L25IVjk1TjRySTVwa3BRMmU1ZWF0bmUyeUpXUTVaVFNGemhMZTR2a2tIamRpZ2VvdFFDbDhWNkpnS1FNWnFqdHFlM2VPV3liUm1Nc3FaTDFvNkU5alNPWk5Da1dXZWJuL0J6dU1YNmJ6bjYvN1VXem14dmNIUC9zU0gyTjg1Wm1ON1NoK1N4akZUR1huRzZwTGpNRTFENnl3bGdpeXZLY3AwZEhQT0paVnFtU0dNSlJBSXd1R2RRV2hOSVF0d2prd3JwRllzWFkreEVSSFNCc0RIaGxLbnhuU2hjb295QjUxaGlnTGxCYU42akpMNmowTzVJMEtYQ0pWVFowazI3NE1rU29GQUpuK21BcnNpMnhjNnNYMmNWNFNvc0NhbGI1UktMU3N0Y3JTVWxJV2x4S3owZklxcXFsQ3VKWXNXdjdCNEJ0UjRpcFFTRlVtbjRkNWlCMHNlSmR0ckN0OWFjajFDa1lIVWJFNExKTEM1bVlEZE1nSlNKR0orQk84RnhrWUNnZG5jY25CNHlCODhkY2l2Nk9kNStJRU52dVl0ZC9KUW5DRVhkM0Qyd2JzWlpRVTdsL2FwUmdYanFpUlgwQk9JV1o1MFBVMkFab2s0YkNtemtuQ3JKNnlWVExhbmZPMjNmUlZ2ZXN0RC9PclBmNVJmK05tUHM1dzNuRDIzUWQ4Yllpekl0RWRGUlF3UklSM2pVaUl6eVJNdkhQSDhwYy94MEl1MnVQMzBPaWZIQlpPcVlPNE00M0pFTUVmTXVvYWplY3NMMTFzdVhsOXcyQTY0Q0pOU3NEVk5HYjNrMzB5ajY2clU3QjQ1L3ZIUFBNNmRKMHZ1T2JuR2ZXZEgxS09jd1F2V1J6bDVGNWt2REllTGdWdEhIWmQybDF6YmIvQStzalpPb2ZyR0JHSklMNnNORGVPaVFFcFBpQU5uMXFiWUNKNkJXR1VjekMyZGdWR3AyRDN1K004ZmVvSHBTSER1Uk0xOWQyNnp1YVlaRlpKUmxuTnFld0taeFF4UTUxTVVDVzlodkVmbGpoZDJaMXk2TWVmZ29PT0pDd2M4YzYxQkFkT3hZRzJjWE5qUnd5aVhVQ2dtdFdSVWpCamx5WUFSUTRKVTd4ME5EUGFJdlZuTDBjSWx5MFNoR0FaUGpKQjl5Y21aNVJ3Y0x4alhCVlc1ejZJYnFET0pKMDBTSklycHVHUnJrbE1VR2NjTGgxaVJBSnJsZ0hlUXlaekRROHZqRjQ0WVRLRHRMY0VIaW13UHFXVlNNb2JycWZVcVlMRG15NjdOR09HTG1XSTZQYUpkOWlpbGNjRXd5WE8ySm1OMEZxbkttbEVQamZYVVpjR3pGL2Y1N0dOWGVQamUwMVJLOGNMTkE4cE1JYjFDNkhUaG0xbWQrSHdxY0xpenBDZ1NUTGd1SlRQVFkyZWVFRXVzQ1hSZFI1VkhHdE5UcTlUeW80OHNEaTArTkhTNVpUbjMrTlp6L2tKZ05CRThjTnNtelY3TC9xM3UvMkh2VDhPdFc5ZTZQdkQzOUdPTU9lZHEzMmIzM2VrN09JZHo0SEFBZ1NNZ0lDSktSQTFHc1RTVWxwWVZMYStVZmNxZ0thdktKZ2thTDhXRVJFM0toa1NNaUtBWUc3cER6em1jYnUreisrYmRiNythMll3eG5yNCtQSE52SUpMVWwxeFZmcWoxWlYzdnRkWmM3NXlqZSs3bnZ2Ly8zNS91eW4yZWZNVHllMzd2citiOVgzaUR2L1pmL2hBaFZSU1N6VHkzdkhpaHlUbWdsZURoQndaKytwbDd2UDZkUDhMNzNuR0ZCNjcyUEhGNnpISFhZcXA4eWp4OWM4T05zeld1ZHR4WmIvbjBLL2U1ZCtFeHB1R3FGbDNUSUJ2VjRPVlNWRmFENVhLTWZQYy9mWm9mK1lVbDczdnFoR3VuVGZ6dDUwSXRsdWRldlVDcGpwZnYzZUdsVzJzMm04eG5YN3RBU3poYVNYYVRZamNLNkJzMVlLa1cxS0xZam9rYmQ3YWtMRG03M0xXdUlKSmNLcDNSVEtsUVUwWlNrYnBsMWFkYWtGUUtGV2U3UFpnNG8rUjlwTG5COGFKSGtkbkdrVlJtVW9sc28rVFZ1eU83MlROKytqYWx3T2dqUmpUMm43V2FBb3hoeGhuREhGcnVmSWdCbFNwMUQzTlhXdEk1eTdLeldDVllHc1g1NVl5UmhsNFp6aTVtbnN2bnZIUys1WHozUERsVlpJRVVDOVVvNXBDYUtha1R1S1ZDSjBHWUNobkpNQ2gyNDB5TWtxSFhTSnBUK0hCbDBhWjFTSTBHWnhWbjJ4MjVSTFpqNE1WYld6Wis1dlg3TytaUUVMSVpWWHhxeDB5SXpNWEZqRFgzY0VZd2poRnBMY2VIbGs0WUxrWVBJbUdsb3VzY0o0Yzl5ODR3KzR5ekZoL2diRDN5d211WCtKbzQzNDM0V1hLK0dVazVvS1ZxWmttdDhha2lTZ3QrS0FWU0NGVFJuTXFqRDVRS1AvS1pPL1MyOFVhTk1oamRjb3J2N3p6UDNMaGdtaU0vL0hPdnNwa1NzZEljMUtXZ1pKdTZGVkZJTVdHVTR2Q2tSeXZGZE9reDFuQXhUaWd0dUhyY05oWTFKMXh2dUxmeHhOTHdLTTRZVXM1SUplaHRpOUZkT0l0UG1iRFBTRzVzUHNIZ09qNzMycFpQdmZnNXJoNDVucmg2d0NOWEZqejU4TURwaVNYZWtheGYzZWY5TGkybkJ6MzN0b1ZwbTNuNXN6ZVpVMkRPbFNJRk94ODUyM2hldkhYSloxNDY1L1o1UUFnNFdSa0cyK0psbmJNWTFSS1grazR6TEN5aTBzNURURWl0OXBHM1BXcy9zcHM4T1hVUVo1U3M1TnBNUHIzUnJQb0JLS3kzTTRmTG5vT0ZhOGFyVVBaOFRjMDRCVHJiWVJSTVBoRHlQckV0WlVwcTNFTnRGSjAxR0NQeE1iSVpQVUxEYWpDa0xJbXB0SHRTd3ZGeHgvMEx6NS81emgvamxWZk8rYmJmL0I1RTBVeDlUNmtHUDgzTndyOWVVNXpEZW8zUWtpQXFLaGRpS3N3MW82c2daMDhuTkYwL3NEeXlyQ2VITlliclJ4MU9WYzR2WnU3ZjIzRjgwTkZMVFQ1YU1OKzVwSHo4SmFaSFQvaVNYL04rbm5yN1kveWxQL0gvNG1kKzZpVWVmZUlxMWdwMGJWdytweTIyU29vMEdOdGppb0Vha2JWeHAyT09UQ215a0F1MDJCR3JSNG9qY20xd2Y2MEZjeTVRTkRXMlZKMHFtblJnMVN0U0tjM0FyTnBJUFJOSnFrSHduVkM0enIyWnYvZUx4YUtRMUNtZ3RwSGp4WktqNDhVZWxsa3d4aEp5SU5ZWmJRMjdLVk56aTRCTHVaSkMySThFSlZQSVZGRW9NcEJMZzlScURkTThzbDdmUStRWjZRdkNBY3FRa2FpNE41N01IaVVOUVNhZ1JROGEweEZNK3pCT0dDaU5jcTcySDJFZlpvQXh0Uldxdm1WZU9ndTVTTXhDWW8zZ0t1M20rb2xQbmZNem56bm5LejUweExkK05GT214Qk5mK0c2VzY1bk43UXY2azBQdXo0SGlOL1RHTWVaRVNaWGxvaVBueEozTCs5alhiNU8xd3gzMTNIbjJDbys4NndsKzV4LzVWajc4a1hmeDUvNmovNDVubnIzTkU0OWYzMGNqQ3BhckFaVEhtTUo2bHhCQ2NMcHFwb1ZQUEgrZm4zbm1ma05wRkVrSWhkN1JBdWNWN0NhWUUyZ0V5MTZodFdoVzlvWnZiMDd6ZlpTaXFIRFVON2ZlUzdkblhyZzE4eE9mZzk0S1VtMnQ1cHdyU3Jkak5ubHdGZ2FuTVYxcjFmdFlLUkZVclhTbU12bkM4ZEFBMVk5ZlArQjRWM2o1N2dWYm55bFo0bU1qeG1zdFdRNFNweFJaSkQ3ejZvN25idTNvTFhUV2NMU3dkRTZUaWtiREhzNmFDYjZsQyt4Q3drK1ZUZDVmam05Y29nS21xYkcwY29iY1pWWUxTU2tKb2lXWHlLVlBsRkpSRlM2bWlhZGZ2aUFsMkVTWTYxNWk5QVo4L3MyRTFGLzhFci9rNTJyL1BmK1NmeDhJV0xnR3JMNStvbkJ1d2JqTGhCS3hxdks1bHk3NGtXZk8vNDIvOWNiL3Q4ZVkvaHRmVnNBZzRMTDg0bXVjZ0JQVE5ySEdDQjQ0WHVDMFlETkZwaW54OG5uaXIzM2ZNL3p1cjBwY3YzYklVQ1ZIZHVBaUtXN2V2YzFLd09rangzZ2x1SE4vNW1ndzlMM20xcjF6N3RSRUNvbzBlZnc2MEZuRHZjczFnL1AweXlWWkdUWVhHOFk3QmFIYlluQm50K2JoQjQrNFBxejQwVSsraHRFSERUT1NBODg4Zjg3T1p4NTc2SlQzZnlqemhWLzhLTHU3WDhSMy9hMmZaQk1Dc1daSzg2ZXg5YWwxL3BYQVNyaDdQdk45SDN1TkNuUnZibGZiOFc0NUpEREk5ck5kQWFkQWs1aXphR3RJYlpteldyYkpVOG90MmN0SWVPNjFMYi93NnBiYVZENE5FN0wvcnZmbllxYjVOcHlHSkdDOUtZeGpPMHQrcG1GYW9pQ1dRSWlHNy8reGk0YkRFbkF4dC9jWDNueU10dmYrSzExYjBNNm5rWERtSWU3ZncwTEI2V0hINldGUHlWdGt0YnkyR1huNnVXZUpLVEdGd2lhMjMvK1ZyaDN4Uzc3L1NqOEh1Tm9wanZ1Ry9kRkdjKzNJY2pkbGZ2WnpyekxPaVRrSkx1SWJnS1JmZnQvOTBudEc3Tjl6L1NYSHNmeVM2L3RBdEluTzRjcHdmS2h3V25HNldPS1F6QUYrL25PMytCYy8rekp6Z292VVBoUDdaSy95S3h5dlgzYVBBQXNCdTlwK1Q5RHVtWVdDZzRYajVLamxySVBnSjM3aGtuLzZFNjlnSE95Mk1GYVkvaGYrN2h1ZjUzL3QvKzZBSTBjcmhLdmdzRGRzZmVZVHo5N0Jhc0g5eThSNXFyL3NXSFFDT2dPZGtSUXBXOFJqZVNOT3IrbjZ0ejZoaEdCcE5WY1BCb3lSR050NG5rMkVtWEJPb1lSQW00Wks4VGx4dk9vWWZXUXpSYll4b0JWVUZGUlk5UWE2UWtxRlQ3eDBuNTk2OWk3R05IbkM5YU9PcXl1SHRhM2pLNURNS1dPbFpFeVIwVWVtT1hHeEMyeW54Qnd5VXNMcG9lT2hLeDB4MW1aNDFXMGRWb0JWaXNGMVZKMWI3QnhOQ3BCS3hlcldXVlM1YlZKVEJTa3NSalNNaTU4eVNtMEo0eGJ5aE5XS1hETHJjVVpyaDlHYU1VeUF3dWZLT0VkT1ZJZFNsYTVUcUNUSUtaTlI1Tng0anIxczc2a1dDQ0dqdGFTVEV0TTVwdEM4QVZacmZJcE1VK1JnWWNpNTh0My84RFBjdWJQaEQzLzdsOU83R1lSaXVMcGtGSVY4ZjJLdUhtTEJLb3NvbFJ3VGNmK1o4aGhBUTdJS2tRT3JUdkxJbFdNdXR6dm05UlpaSlF2bklKVUc2eDhFZWR6Q0hEbTdkMEc5dU05NGI4UGJ2L0RkL0tmL3pmK0J2L2dmL1gzKzJmZC9paXNQREVqVkdLdzFWNndDcXgzYVIrdytIbENVNWhrUmUxcDl6UzFjUU96WGVZcEdac3NZdHZUV1VVckcrNFNTRXFrMFBuaTB0QmpiY3VwckxSUlIyTTJKaTRzZFlUY3g1OHJsK294YTA3K0p6aWtVZkp6cFJJY0lrY1JFRXZwTmJrL2V4eTJKb3FoN2hrOHV2NWo4cktUQXlhWmxsTEpTaWtTSWdEWlFRMFNuaks2UzlabHZEc09ESG1JbTY0Z3ZBaGtqemxXSW9nRjZqSVdRV3RTVFZjUVlJS2MzczZGYm03YXhEclZzMFRpNDVpck1HWEpwSFRkUyszMHBGZGVPQlNsbWZ2Q25Mcmh4KzVQOHNXOFJIQzRzcCs5N0c5NEg1bm1tMXNUZ09sWkRqeXpObGFwRVJXaEZtaXQ2NklnQjdyOSttNHVibDZUMUR1YkhlZGNYUHNWZitNN2Z5Ui84L1grVFQzN3FOWjU0eXlrZ3FFbVNZaUg2cHFWS05LaXpVSW9yaDRiMW1CaEQ0eUYyVnJlYlRUZXdhdWNxaTBIc0JlM3Q0WllLKzRLNUZlSlNRUzFOSzRrRVVSUUhDNEdSdFBOUUt6VlhrQUl0M3ppMmdvVnIxV1pMU1drQjdaMlc1TnE2eER1ZmVQQmt5V3BwbVh6R0JNRjZudGw1VDBHd0doemJPVEtHMUF4SlNkQVpoVkVWcHd1RGF6djM3WmpJT1RKNldHL2hZQkE4OGVRQzUvb0dyUzJaMWJIajJ0R0FEeG1oRkVaSy9CaElKRkpxSnFyVklYUldzWElhclF4T1c1UXBiSDFzWFd0bk9iKzhaRDBscEZTVVhEQkdNb2ZNT0dlZ29vUnFNT0ZLUXpaSlRlOGtTbVpLM09NK2xDR01GV1VGcVRTbzlHcG9uVndoS3dlTEhsVUZ1VWFxRkR3MVpVS0cyWHVDenhpbEVjcHlzZk1vV1JsTUUyTFhXckRXNElZRm0xMkRNbDFkOWRRU3ViZWVxQ2ljVkRnclNEV3pHSllNVm9Nc2pQTk1qdkRZSExtL21mblV2WkdyajUvd2diYyt6clhqUTg2OTU1UFBCSTU3eldLNTRPN2FJN28xdGwvaHRPR0JrME51M2Q5Z2pVVDJqbDZMZG4zM0FpMGtoNmNIYmNQbklvY1ZhcFZ0WVRtWDlNcHhkTjN4RlVjUE00MjBSYTEySEZ6WmN0bzdlaUc0OGZ4dHJoNTBmUERkVC9GVkg5M3htZWR2VW1YQ2g0RFRtamxtZkJSWXJkb0RPMFNjYlk3MWVXNVFZRm1hU1cwTWdjNWFycDAwZDNVdWd0NVpadDhXdGs0cHFtaS9kOWc3ckd0bW5PQjM5SXRtWkR1N1dEUHZqVDhWeU5IVGFZbnRPbXJKMUwwRFdZaDJieGlsTU00eSt4bEY0WGpWc3hoNmR2UElkb3c4OFJiTE9BVzAxTGkrYVRHbk1aSnJSbXNEVlJKbWozTU80eFE1QldJV0NLRlk5aG1CWUQyMmRySkFvbVdoRzB4TDY2bEhhQ1daWStCaU43WHVuR3BkUksxYWhxOHpwaTBNQlFxcDZjZEw0K09oRkxYRTlneWdtVDFLS1JncVdjSnVsMWdNaXNWQ1liVGtFYUhZVFJrZkMxWkx0SlQ0WEJGS2trTWlsOWpTUTJKdDduWXBHWHFGTWEzTGtGS1QySVNhVVZMUzJ6MHpWelo2eFdvNDJPY3l3L1djV2MrZU9XZHlFVnlzUjJJcURKMXJ6eUpSS0ZUbVdGREkxdUdna25MRkdzM1Iwakg1d0JReU9UYWVvWkFDaldUUmExQVZhb2MxSFFMQlpoNXhwbSttb2hDeFdwSnFvWGVPbkN2YnNaa0J0SlNjNzNhTWM2SjNCcTBiSTdEcldzTFY3R016OVJtRmxnNGpGYmtLSHU0MTJyUjFaWnJhbUIxYUozV2VFcS9jT0FjRnpwaVdOaElTU3NrbTVTck5tV3Bqd0VsSmlZVnRpaHhieDJZWFdDM3N2cGdNQ05PeHNBWXB3TWRFb1dLMHdCYUJEcUoxOWtRN1RpRlZwQlFOaUswa3poV21rTWlwVGRwdW5JKzhlbStIMWswYVZ2YlNQcU9hTVRPWHVwKzJTRHFyNkl4QWFkVTA2NlZnOXFZTDhVWXNYVWxvYVZqMkZxUkFTZEhNZjJHR0dFbWhZanU5djQ0ZHZkR3RicWdha3pJMVJLWWE4WE5ndDk2eUdRT0hnMFVoQ0Q2Mzg2TUVKV1Y4amxRcUlXVnl5RWdsNmJSdVNWOHhVMnFsMDdLdEY3a1Z2YlZLbHIybFV5ME9VRXBCTG9KY1dwS1NjeHFwQkRsVkh0U1ZIL2p4VjdseitjLzRvNy8zVi9IWTFaNndqYXhPRGpnbmtxVWthb20vdDBVNGlUbXlLTnV6dW94Y2hoRy9TUVFaV1J6MDJNNWliYUxYZ21tdTFJV2hONkJTaTZxTjV5UDViR2EyQW5IVU1VNkIrdUl0YnZRZGIvbUM5L0FmL3BsdjVkcjE3K2R2Zi9lL0p1NDdzTnZ0aG5GemdjZ0JJU1NoQ2dnWmtRdXBnT3NzaTg0U3MwZTJNcDcxT0dHMFJtdkYwaTRwUkVMMFNPR29JcEZyd3FobUxCNzlCTFJyb3RMa2hTa0txcWlFZVdLOTNoQlQvcFdoM01aSmtpZ2tXYW43SVVOTW5wSnJDN3lQQ1dmMC9nUkdwR3k5bUpRTE5UZW1vaENpMGNtQlNTaDJNMWhwZU9MNkErUzduanZ4Rm9SQ1h4U2xTb2lGVWdReFZtVDEyRzZnRmtnaFUzT0E1RWx6YWpxVDIrZHNMM2M0WUhCTlQ5VlpnOVYxMzhuTFdOc3lHTjlJT0ZBQ3hGNTBIUk1ZSTNueWl1U1psM2Y4K2IvL0Mvd1JNaDk1NkJvUGYvNlRQUE5qbnlUNUhjUHBWWVJTMURHUlVzVktTODZKVlhkSXJ5MnBScGFMUTFZQ2RyZlgzUGpNTFhKUVhIdmlMZnpuZi8zMzhQdS8vYS95M0l2M2VmREJ3NmJEMUpyVWRjd3BrRUlyWWpaelpab0tNVXJtQkZZVlFxN1VMRGh5QXA4cU1iV0NMalk1S0owQnQyL0ZtQ3BBQ293UWRFNHdsa3p3ZFMrVUI2MWI5MUVpOXpxVFZtQkxJUkdVNWlZQzVGNCtVQUdyUkF1ZTE0cVRWYzhUMTFmY3Z0aHhkKzFiakpxQnpuWHM1a2lwZ1NzSGpzMVVpUVhHS0FncElVTEd5UGJnRjZvZ0NzUWdXSFl3am9rUHYvczZmL1UvL1RhMmVTWmNiS0d6WkYrZ2gvSG02eHljUG9vYkpOWFBaQlFoTmNDN0hDUWlaeHdPck1MSEFNWVNwNG04WGFOT2pwQnBaajBYNGdhT09zM2l1R2ZLa2VJeldocEtqb2hjWU5FeG5lK1lmY0ZKeGVKMFFJYUlFQnAxZWtDNHVJWFFIU29iVWt4NERYMEIzUm5tbkVnN2oxbFlldWNJSVJOVHhsOWVVSlJpR0E0WVZoM3pac2RVRE1QU292eWFrQlB6ZHFMclRnbGgzU0s2VG82d2V6RjFEckV4UUoxRDVFS1ZGU0UwT0lzc21ScG5aQUdLWUVzbGpBRXJOSHJoZUVJZTh1QkRDemE1Z2phOHF3cUVVcVNsUVphQzZTM1QvVFhqUEdPUExFNEppdFRJV0Z1V2JTMWsyeUQ0NHhpUVNlRUdoUmFadEF2b294VjlwOWl0UitZc3NLWmpDRE5GRzRxQ25DSTVnVGVPMy9ydEgwYVV5bnFNM0x1NHBMT1poVFBVUGNMSzJKWWFJdHpRc3BCeklsSEpsenVXaTFQS1NsUGpEbEtsS0lWU0drUmpESmJRdEpTMU4xeHNMbGwwUFVPL0lPeG01RzVOUFR4a2loNURSbW5OdE4xUllxSlRvQmNXMnkwSXVRR1doYytVMk1hUmNTN1FXWlJJcUdySW9wRGZ3SFhNelpBVmVrUE9pVjQ0NkIxbDNKSlRnTVdBaTdJWmFQeU1QbllnRFNJV1lvekVuQ2d4TTVaSVp6V0RNOGlhaWJWUWM4dWNwU2F5bjVITEhxY2tKWG1VZFpRc0NSNlVLWlJjME4wQ1FrQlFLZnQ0VEdVMTByZU5vWjhueG1uR0RBNHBORmtyYktuRWNXYU5ZdWdVVWtSS2FZZ09iWnJXYlBhSjdlUWhCNnd1cENLNGRYdERLWldUM3RJdEROMXl5Y0phdkMvc1lzS3BWampXa2prNldvRXl4TzBHdjAxY0NrT3RXdzRQbGpqYklXdkZoNHIzbVJKbStvVkR5RUxOT3lxV2NmUklKVml2WjZ4U1BQclFOYVFXUkF3NUpTN1hXeTR1bWxOVFNjR3E3emhZclNpMXJTR2RrU0FUMm5UTmxKY1RLVVNvbVg0NFFFbW9RcEpqWnIwZGlhVXlPTU5tdDhiN3lHcXhvT3VnS3dxeG05bjZSQjVzaS9YREVJcGtUcDdGb05CS0U2UEM2b294dGNtZlJPRW5mdVI1L3ZTZi9YNlVVUmhaU0dJZkMxaWFIS0VDSVRXNVRLWTJ5Yyt1T2EyMWdEc1hpWk5WeDhJcG5IeUQ3cEdaVTBaTHljNG5mTXgwUnJXSlhpMW9RSWxNbFpXU0lZWDlsRVVJdEpXVVVoQzBWSlFXajEwUnFwbFNTeWtJSmJHOUl0ZVcxQ0dsMkd2UzViNm9yRmlqVUVJaVZNRzZ6RUYvMEZpYVdwRktadllScWlDbFpqYjBvVERGUkV5Rm1CUE9OV2JqdE4zaGxFSXROZEVIYXN4WTFUZkRwSUhqUlkvUVRmZlk2UTdiQ3liZitNMVZSVktxTGRuSWFXcXByTWU5cEtkV2ZFck4zVjhMdzlEa0VkdXB4VjRhSlhGMkg3OXJOS052NXlDa1RLNlNCNjkwL055bjcvSjcvdmcvNHYveWJSL2thejc4Sk5PZEN3NnVYa0dOTTNXY0NWVlR4NEF1QlJhU0dDcHB6Tnk2ZFliUWttdlRBVVlKN0VxeFduWmszVkZkaG5zaklVTWlJeThuSkFxcE5VT29HTmVUeWF4ZnVzVXZuSzE1N0gxdjVRLytxZC9DRTQrZjhrZi8yUGR3SjhCMnUrUHM5aTNHT3hPWGx4UDIrSUMwbTVtM3pSQ3NHcUdiS1UxWTVSQlNzTnZmWjhqTXdncnVielpvZWpvakNLWHhPSHNqdU54TmxKSnhwcU9JZ2tmU2ljVENGZFpCWW5kZ2hHWnZodjZsNkJ5b3FhSVRWQzJwVlZObytaNUdhWVRKZXdXT0pKVFF1bzFDdkZsb1Zscm85eHRBeWVBMWllYTQ4UldNTkN5Y1lkbDNIQjJzV2tmTFY3UTFrR09MRVpRQ0lUUXhOSENzRkFJNXVIMFNRU1ZNbm5FenRhNmlhdVBWM3JuV1R0V1ZTa1pORVlTQ1dsbTR4dVJxY1hZS3VTZlkxOXFxNk1ldUdYNytsUjEvL1FlZjRhbW5IdVR4ajM2QTQwZXVjZWRubm1PMkhxWHltMkRtcXRwRGRBb0YyenVTanpnQnBqZUVXcm45OGsybXpab0VQUFRrZGY3Y24vbG12dTEzL1EzT3ppZE9UNXJoNDlqMENIM0JlanZSbTQ1VUUyTW9IQTRTR1ZyQnJFb2I2Y1RXazhRYVFhb1ZsUVJWUTk4TGhqMjJhTkNHYlJha1diQVlOTlNBaUptZ0NyRldURzVRWldqQTBWSXJGeE9zTEhSYVVHbkZ0SkhzTzVTdDgzUFlkNXd1ZXc0R3kvTzNMdGlNRTh2ZW9XU2xNNGFqVGphNEx4Vm5LN1ZZcWxSMEpyYVI4azdUdTRpemxSanJQcVdnRlpLaGdOWWRydTg0djNlWDJuWDAyclVjVURGemNWRndhc3RpdVNRZEhpSEdpSkVCRXdOc0piRVdnbk1Oa1NRa3BVVElvWTNJRXRTaUNDa2doTUlvQTduZ2JFK3RnYWxraUpWT0czS3NaS3RaT2NHeVNqQUs1U3hWbVJaSG1adGJWOXNPUDIwcG82ZDJEcFVWVm9EU0lLcGx1d2xOTTZZdFdxOHd6bENNYm9IeFdpT2tRVmVvd3FJUGx0UXEyTmFBekpWd3NTSGtnQjJPRytoMXpnaWprVTZoc3FCNDMrUWhzd2NwVWM1UngwaEVzRENLV3JhdHdOU0NTMjJvcXNYRlNaSElRaUdjcGNoS0xKVTZKMHdCYVVCSmliS09sQk5KUzB3Q25VVDczWGxtNHlNeWV0WlRZYkZRTEJZZHdXY1lJMlpsVWI1QVRjU0ZRZTBTU1NxcWtsQXpxWGhtcjNHMlEvVUNGeXd4ZUZLVkZKK1lhbUdnYTBrQmRhWTBLd2lpVnVUU2tQd1cxcEk1ek9Rb3NGZVd5REpScEVaVmk3WUdZU1ZTUzA2V0ExVnJzZ0NSQ3hPR3NKdkkwNGp1TEtKYUxBMy9ZSllMUkMzRWVVYm9IbFgwZnRRT1dVRW5OVFVGOG40RFpaUkNpTnk2S1lzbGVZcW9FS0NUcEsxSFZvSFFybTNFQ2tSUlVRY1d1d3VVdVNCWEhUWHRVQkswV2xCcHJsNVNSZVRVem5Nb3FLcEFWRVJ2ME1hZ2FrWDZoQmNTUHhWRVRtaHA4U0V3N21aV3FzY0tSZlFlNFJTSVRQQVpKUlZLT1lMb3FDWWh0RVlZaXdOaWdGQVUxa1I4bkFnaGc1UXNGNHMycmFpVldBWHJ6Y2pnS3F2bGdqUk91TjVpckdWcEZMMDBWR2VJVlNKandRcUpzWTQ1VHV4Mlc3clZnc0ZaOVBJNmw3ZWVCZWx4aDB0a0xHMU1yQ1M5MU5obFQvUUNwd00rRjFLMVNHWHB1dFNTbUdKakFDWVJDVk5HcWpaU3pMVlFwY0JZU2U4c3ZUVU5naTRNT1ZVU0JTa1VRcldKZ3BRV1pRUWh6cVRnUVZ1S3NoVHBLYUpnckdaWURkamVjdlBtZlRiVGhGT09tQVZ4MFZFV2JaUXFSSXRXbStkQTEydU1FUWhVeTBtWERUU2RTMENJREtYSkxycE9vZllhK2xDYnhrVEwxbmc1R0J5YjJUTk9ucE5WMy9MRVUrYmdxR2N6QnRhN3dPQUdIamhlTUU2UnRjK3RhTXl0SXkyRm91c01pOEV4ejVGU0tuT0l6REVSUkVWSVNhR2dvTG0yYXl1dUJhMnpTWVVxQkhQTTlGYmpyR1QwOFpmSkVMU1VhTDN2OGdyQndqcXNWRWhWY0oya041WlNXckZhYXN0cHpzcUFMQ2dVdlhNVVVTa3hrM0loMWNRY0E1Zm5FeHBGSEJQOWFxREVTdmFaWVlDdU01ak9JbVNGNkp1MnJqcVUzcE1tQWsyWGJrVHJuTmZDTUZoa2xZUmNpQ0dUY3l2SVMyb2J5NTF2Y2phZkd0QmJBRXRua0FqR21MQktVa1I3emJVVHg5MXp6eC83S3ovSjYzZDIvTWF2ZUVzcnVKWURTbHFVcWlTalNValMzUjF6Z1JoaWU5K0RvcWlBNmpSWVFaYTE5V0Z1ZStZcDR4Vm9GTkk0TEswVFc1UmlrSnJOUEJIbWl0R1JHNTk0a2JSTGZPTnYraElXQTN6TDcvb2VOck5FUzhQZDgzdThmT01lM1pGRjFjcGdPN1FDN3pPaWE5R2FWUlRtNERHNko4eWVjYk1oR0lIUkJsVUZJU2F5YUxyYTdUUWlWYVYzUXl2eWxTYVZ0dDZZS3BHK2trdlRTZXA5UTFEL1VvMUdwUklScUZ3b3NWMzRQbVZVMzBaOEtjWTMyOUdJMXFIYXN5T3BKVkdROU5hUnk4d1VHMkhUNlFiNWxScEtEY3pSMDdzbTNoMTNBUmN6aUxaN1VLSXkrelpiMThiUWQ0NDZKb1F3OUVPSHRSMEhEMXpuNEdDSnlNMW1mcmh5MU53YzAxVVluRm95aHBFUU13ZkRnTEdKWFFpY25VV1VhclJ5c2NmOHhGeDQvRlR6dzUrNjVHLy93MC95SjkvMUdOY2VPZUc1anl0MmwxdVdCd3RLbHFTUzZUc0xTYlBkYm9sVlVhcWdNNDd0bEFocEJpVzU4ZnBkakhOMDduSGU4cEYzOFh0Ly85Znc1Ly84OTNONjFIYWlDTVhDV2JUUVdBSythRjYvbXhpS3hLcUkxRzBFazNNN2RtMUUxSFNqNDl4aWpJNTdoVkc2algrY3hGVkJOWEMwN05DcDBrblFRZU5reENtTlZKV1FJeUUxVmRXcTBuWkFVb0FzR0dteDJxQmxwYk1Lb1JXMVpqcW5tSDFoczgzMFhZOUVFRUxFNzIzNG5WRlVhVGxkR3VZdTR3Vms3L2RHR1VVdW5wZ1RHeTl3bldLUWlkME9GaHEyYWVLVmw1NW1PSHFZN1hhbU56T0gzWllycHc5akg0NkljSmREZGNDd1dIQm4renhDS1pZbjE2Qm1vR1BhM2lOVVdGMS9GTklPbHBKaVQ2bkNVbExCNzg1QXdPRDZGbXNuTFdMV3pQdVVJQzBWS2N3Y1hWbHdJQjFTU1VKcGVhbWlONFFzNmRJeFRpVHNTbks0T3FaNFQxV0NWQW9IdHR0M3F4V3pWNVRZWWJ1ZUVDTUxwNUNManQyOFpTeXc2Q3pDejlCckZzYVJIN2pHS0NIZFhaT3ZYc01jYUV6YVVtS0d2a05vMDF6Si9ZQWNXdFFYS1JQMnNQeFlFcm96QkIrSnJwa0VsbnBBbmZaZ0JTb0gvSGFrU0lNNnRDMEVmczZZYWNZOGZzeEpEdVE1WUljT3JSVWlORWkrTUlhb0JYNm5lZVN3aldidm4rMXdLODN5Nm9LeWl5eVFpSk1GMjd0YmR1Yzd1cXRITEk1Z08zbDhoTVZKajZpSldDVmFWRTZONWFIajYyeDNNOFpJbkJCc1F3QXN2VkVnQ3JJemRCUnlUTXh6UXBuSVpFQjRpZFdPN2xEUkswV1JCb3JHSkUyaHhkTHBZWVZjSFpOVG9tckJyQWVTbjlCMTBaeVpDbVN3TUFmMHFzUFNVMU1reVV6VmhoZzI2QWxVdDBBNVE2bVJPV2RVa1ppdUk0dEtqZ1ZaS3ZXa1E4ZU1HbnJTVVlIZ0FZRklzclZGeUJSZHlLZUhtUHNUb3E5d2RFVHlNeUlYbkRna1dFVXFnVjRwUktxazNGeWFpVWlJRVRyRDdDUHpaYUJiU054Z0VOV3djZ05yNzhueEhyMHBYRDFaUWpZVTFVRVdoQklvMFpQOFNIZHE2TzExaEJRTjBKc0Y0MXl3UW5HNHNreTJjdlAxTmVQV3c5Qng3VkNpeUZ3YUMybGc2QXREcDZFS0RsZUhESjFqNFRSVzl4U2g4Q1ZqaG9RMGtLM2llTFRrT05BdGRPczhxWTZGZjVDTDlYM0Vha252TWlrbnF1ZzRXUzJvQW5McUViR3dDUmxsZW5vbjhMNWk3TUQxNndvdEU4VlBsSmc1T21obUhXc0dGcmFnT3NPVjB5WGFPRW9JZXcyZElpVW9zbTJFeEtKcjU0WkVLUWZrQWxMdjJaSTd5WlZISHNCWWlaQUNLUXl1UkpLY09lZ3M4VHdobDB2c2dZT2FDTDRTZ3VmS29XTllMaHBXeFNlY004eXBjT3ZXSmJzeGNuUjZRRzh0cTA2MXZHSGIzcE9RYlZTc1JKdlk5RlkxWGJpUkdDMVJVbkE1Wmpwck9WbDJYRzVuaHI1TmJvNVdIU2pCNjNjM1dLMVJXakJvaVpTTlc3eHdsakVHZEpFYzJoNW9qWnBwMzEwTXViWWllNDkwazFMc3BUU3RZN1FjTENIbE56T2RVeTFZMHlRUVFnZ0cyemE5VXNEeHNrTUMyeFFJUkFacmtWbzFwSmpUVkZIUlFsTktJY2FFVUczdFQ2YkJ3cTNVbUN5WXBrU2NJOHNsR05GMDlrMnUxdFlkVVFXaU5oNXZMWkJpeTAxM3lsTEszSmpGdFJCU29qTUdyUVMxSVRXb01uSFFkOHcrWXBSa2NNM0EwUURWTFFWR0NjbHFjUFRGTXZySStYYTNqM05VWER2dDJFNkp2L0QzUDhWenI1N3hmL3ptOTlObGoxNWR3WmJNdEoyUXpsRTdLR09iT2h3ZUw4aWxjcm5kTVk2Wm82UWhicWxwUjNHR1RFV2VlOFJ4MTNCdHU0Z1Zta3hGVmNIcXlqRXlnbEtGOHp2bjNIN2xEcSsvK2lBZi92TDM4M2UrUy9EalAvNENSVHBXUnl1T1ZwZU5hNTFTMDFvSDJNMlYrU0J5N0FaQ0dKSEM3SVhIQ1lGdThnTGRPdEZDU0ZMS3BDTGFKbGEzbEw0UW0vbTJpb0RHSUxQRFdZbGZoajM3VWY2YlkraVVJclVrZkdrbjVJMC9hSlJvNGs2YS9sYVdsdVpTU2lXSnVPOWFhWXdVbEZ5UlF0TlowZEpNakVRQVBtYUtVaUJhTkZBUnRDUUpKUkRDa0ZMQUtFdlZBbVVMS1dZMm9lQlVSb3ZTcXZVNGt2eVdtQkxLZ05HR25ESkdsemJQVHdKcVFVdUI2VHVrckVqVm5HWEhCNEpPVzdZK3RpQnpJY256UHNiSndULzQyRXQ4NWIvOExCLzVqVi9FbFlkT1diOXlUcGdxVlZVNlVaZzNPNWJ1a0RrRjRwanBUYy9kN1piQk5iTDZkaHV3cnVmMnM3ZkoyU1BNZS9tbVgvK2wvTmkvK2h5ZitNeXJYTCsyQkZGWk9NWFNHY2F4Y0Rwb3hKWDlHRmcwNWxPcXNiVk5CU2pSTkN1bHBxWWpRZTZQWnhPa1NxbVFTSVRPQ0JFeHNuWElxc3dZcGJDaUJkb1BERXh4eHNpMkk0NXZwRGxvaFRNV0l5Vkt0THpWT1Jla1ZtZ050OVpybkd2amlrQkJWZE4ySVF2RDRhSm5NODVZSTFrc2VzNjJJMU9TTFBvT29SVGpKSERXY0tGbWRuNUNLSENIUFRudnlOT1dLaTFTR2c2MTUxT2ZlWVYvL1hQUGMvWEJXL2lMQzNhelp4aHV0eWlpem5CeHVjRzVWUnQ3bFliMHlYNWllZndzUmt0S0tpQUZ0VlNrRU9RWThDbWd0TWJxamtwRjdtK1NTaVdsUks2Wllka2hpOXhubzdZZFpzMkFVcVRneVRsaWpFVnFTWXdKYTIxN2JhbTQzcmJFbUFLNlZyU1F6Q0hnOWcvUisvZnZnZFVvN2NpVFo3R3c2Q0tRdWlNUTJWNnVzZDNRaFBBaWtVWEw4blhHNE1jZDA1eEFDWndiVUVvelowOWJBaE5WQ2JiYmlZcEc1VlpVMmE2TlZuTklKREpDU2t4dnFEbVRRMENpTUtzRDhtNmk1Qm5RcUNMUUVtU25xUkxta3BFVmJCR2tWTmlNTThwSStvVkZXa1VNaFNMQWh3Ynp0WjJqN3cxbGpzUmFzTDJDMmdKQktRS2pMYklxNXRtam5XcDZLWm9jb28yK0pkSm9iS2tJSXhqMzczT1hJaW5PSEhSTksxWmt5N1pHYTJRUnFKQklWa0lDZXpCQUtmanRqT2dWS2U2N3lpaWlqNGhTa1NVekhEaWtIWWpiUkNZaGJjTjB6TnU1bldPamtFYTI3bDlwNDM5UlNvczNUUkdoS2tJWk5JWXFFaW0zVkJVaFdoRWltbkdUTEdVcndLVUUzU0Z6SnNZWmJSeW9wZ0d6MnBMOGhKUUc1eFM3RVBDakJ5UnpLbmdmR0RyQm9yT2dESjNyeUNtem02ZW1vOU10Z3o1aDBTaVVUS3hEWUx2YjBUdkJZQStvV3FKMXBtU0J6eEV4UjZ5eWVDZTRQQjhaMXhQRHN1UGtvQ1BIeUl5R21sdmlVRWprc3Q4a0NvSHNOS3BxVk15d2w4ZlV1ZUNjYUlWWWhTSXpLSUdWbHBvcTU1dEFOVzNhTU04TlpMMFk5a1djbEhqdjJmbkl3WEpBeThvMEJaYkxCY1lxdkkvczFoT2FpbHNZS3JLdFBhRWdqTnF2TGVDbndITG9Ha1ZnOGhRbEczaGN5QlpiS1FvMVZrSVVZQ3FhUkl3QzZ4eFcwYkxPYzJVZVI0U3FHR2RJNXdGdEhHYnBpQVJ5YUVra1N1OXpvS3NnK2tTa2NuTGsrTEtQUEk3dE5NNEpUZzRHcmg3MHFNSFFtY1lsdGtaUmlpRGwwb0lpWXVKNFlkR3JnUmdyUldTNjFRQTVjM1cxNUdqUkUxSm1QVFZLeE1JWkhqbGRjblk1azZob0k4aEpJR1ViR1p1aTBaM0M2SWF2aTZtdzZDdXpUOHlwZGNaTHFXM0NWZ3BGdEtMUjZkWncwRkt3dEMwdVQwcUJsTTB4MWxuTmdUTkFaWXlScWlwYWFlWmRhczJqemhGQ0pLWk15cG1ZSzFJMkxUMnlZcFRHcDR6UmRlOTY3ams1NkxnWGRzeHpNNzB0K281dWFFYVRsQXZlVC9TdVErc1dMNXRTSXdsMFRoTjhJaFp3U2lNS3lOcm9GbEdWdmVhdU5HMStFVmlyeVB1Q3FJaEtaeXpHS0ZKcXRpMWpKSlQyMldNdWpENlRjbXdaOW9QQ0tjSDNmdXgxN2w1NmZ0ZXZlenVQUFRqUlAzaVZhdytkTXE1bjRqWmlSTUdlYU9JVThWT0dHWHhLWUpyWFlLeTVvWDJ5UUd0TmlabVlNMm1LVENtenVMcHN6OGxZQ0x1QUVvTEZ3UkpLNWVLNWV6d25IVi94MFEveTdnKzlGeitPeUkzblVIZDAxU0RqeFBiaWpGQWFEcTlrdGRmWVNoWmRUNGlwRmFxcDBybUJVZ00rZVRybk1LVTUvblduOFNHU2tzY29SeXdaaWFiRXB1ZlBTaUlrN1JpVzhzdUxSYmxQVzhteHRwR2tia1dLMVFZaEJLbEdqQkhVb2lteHR2RWZJUFlKTFVJVXRGYVVHaEM1SmJtRVhCbDlhU05WbVZHbFV1ZUtIMXUzTXNYRUZOdHUwQXltamM1aWM0bE9ZYUpLalVjemhrZ1Zpa3FIUk84RHNKdjd5dGlHN2tGSXBLck1ZWVlDeTE0VG1abW5qSktHbzVVaEY4K0JORmd0Q0NXUmk4S1BtZVdndUgyZStaNGYrZ3p2K3FLbmVQamFFYTkvN2hhVDhDd1dCdzNaSXpSbnUwdGlDaHdNeDVSYWlPTklaS0FXUmFjTlNSUTJSWEw1NlR2MFYyL3dqcmMveHRkOTdRZjUyVSs5dEYvQUpGTWF5Y0Jpc05pb2lUVkJTbWpaRVVzQm9TazFJNmdZYlNnMTRMUWpWOEZ1akJ3TWpsUUtWSW5Wa2p2bkkzMDBIQjlVVW03Q1Zha2l6bFFVanBBRFErOFlmT09NeFRJamhVUmljRWF3N0RVbFowb1ZvRUNsU3E4NnBsbFNpcUczWUhSbHpwbTdtNGoyaVN2Vm9ZUUVrZG5OTXcrZkhyTWVSNnhTV0F0U1pOVENOZmNSaGM1WVRvOFdoT3c1VzI4NVhSMnpjZ3VtOFpLSFQxWjg4cG5iL0dkLzU3UEFaMytaMC9KWGNuOVcvdTMrRXY4ZkhLci8zM29QLzdZZnAvLy8xLy92dnZaWVd1ci95clh5djlYOTltL0QvZkMveFpmOEpXU0ROOXpqMXc4c0gvblFiK2ZLbFVVTGxSQ0NLOGZMZGx5bFFPaW0zZStjWTU1RGsybXRPaVkvY1dBN2FxNXM1K2JrOXJFNW1VK1BsdHkrMkdDVkljWE03WEhIbGRYQTFhT0J1NXVKbEZxQmE0MUVDamgwcmJzMmx6WXg2UXpFMGdxMFVESTV0WkUwUWpESFNLcUMxYktIVW9naHRtWks1NmkxRWxOaU4zcEt6VGlscVFLMFZuUlVKaDlKcWlBRmUyOUFJVkh4S1pOclprNEpKY0VKVFU2RnVYcUVOQlJSU1RXd0hYZkk0aEd5c0w3WXNUeDFGRUxEbW1tTlZBcWxMRUxvTnRvdXBXMUFhZjRJcEtDM2psVGJHTGZ2TzBKc0tWMnhlSG90c1hLL05xclcvQ3BWN3Evdk5xbkxKYUdGUUltOSsxeTRmY2N4TW9kV3NOYmFDQWx2dmRiekU1KzV6OU12L1RTLzY5ZTlqVi8vcXpYRFlxQzZKZXU3WjR5N0xTWkxUQkU0b1RoWjlKUmEwVmFTU2tVa2lmSVpRaWFyUGJzbFp2UkNVWlFrajU2YW03WlFhSWMwbWh3OGk2T0JXM2ZPZWVXWkZ6QVN1cE5qemw2L3krN2VwbTJRdk9EZTFuTjMwMUsrbEd6bTR5bk1ETjFBclFVdG9FcE50UVdoY3dOeFM0bVBnWndyZzdVWTBhUjR5bmJFbUZwZFJTYnBpTktRcDl5bUhWVWlxdmczeDlBQzAzcjVXV0JFMHdMbTJyUUMxbGdLR1poeHhySUxpVm8xVWlpMGJQYXFHQXFWM0poVlJid0prOUNBMHBJY0N0N1A3SHhBSjRVdkZkVzFNZXQyeXBScFJLWk1FS0o5QUoyb1dsTkNaT2ozT2pPZnlERVRDK1NTRVZWQmJmb0tWR1hCQXU4OUpUZHNUYVpTYTZMNHBnMFp0R1BaS2FZOTJWM0s1bEpjT1BqWno5M2kxb3VYUFB5T2grZ2ZjS3pQZHNUMWpETVphUzNyc09Wd1dKRnIyLzA3c3lBbHhad0RXam5XdTVHRmRRaHRPSHYxUG1jUEhQRzI5enpDSXc5ZjVkNzlMUTlkT1FDaFNENkFHZ2dsSUJGb3V5QlYzemhxdVZKU3hTbUY3U1hXSEtLRjV2V0xkUk55MjBaNGQ5WWlSTUVhVFpWTmoyZ1FLS25iQ0NyN1BUeTlrT0tJVlJhS1JDaE5aelc1SkFSeWYrTzNIWmVxR21zTnVTVEdPV0dOSk1hQWtacE85U3k2Z0NSQnpralRkaDVqcXR4YnI3bDUzMU45Ump2UDhhRkNTMG1wa3VQakpYN085TVpSbVRucUZjT2dRRW1taXpWK3NlTDAyb3JyRGpDYVZNUWUvTjArVThpdG0rMEVQTGd5YkhLaWxrSklFaWRnTUlXdHp5Z0pWMDg3cmwxZGNlV0JRNTU0NEpnclM0dldHcEJVYmVpdEpjeUpuREkrem56bTFYdGNYQVR1M2J2Z3BWZnVzOXZCNldrYkRZVWs5NUdORFpkaXRTSFg4cVpETUtSSTd4UmwzMTBVQW5JdUxYWlNDY0tjQ1NsemZOangxTU5YaWI1UVpVYkt3aHdLUm5la1dMbDEvM0tmSXJTUFlqTUNwVE1Wd1RTWE54bHJPVGNad3k3UTNMeTFwVGxRS2dlOXdkbEMzRXMvckJSVTJWNFhTeUhHdHBBb3RVK0FFQWFqRGJGRUtNMEE1a3RCQ2ttS0NhWEFLRVBJZ1Z4YTU5L0lncENac3gwWUlYQUczdkhVTlJCdDVMWHNGOHd4Y3JFZXVYWXlNUHVFTnByMU5uTGp4Z1hXdGc1QUZRMFBKUVZJdVM4bmhDREU1c3A4dzZsZUtvajlDS3gzQW1jbE9aYW15WktDbkVXN0I1M0ZDRW5NaVNuR05vWVVMVnZiYXNVY1lMUDFkQTRlZS9DSVJ4NjV4c21Wbm9kWGp1V3FZemhja0hhZUtnVlo2Y1pMVEluenpjakw5N2FjbjQyODhOSmRYbnhsaDFGd2RDelJXbEdMUm9qWTdrSGRrM01UOCtmYWR1TlNObWFsckJVbEZTa250SmF0US9ybUV0WTZNQ2tscGdDcFpHck5MWWNZU1V3dCtlUnc0WGowa1NPR2c1N0hIam5taWFzclRHZlJUbE5UUWxuVFdLNGg0YjNuNWZ0YjdweVAzTHQ1enJQUDMyR3pTUXdMdzNMVjNvZFRGaWswYzA0b2xkcDBRcll1dEtLNVlzYzVNY2VNTmdLbk5IUEtiS2VJVm9MVGc1NFlXOUxHUTFkV0xKZUdtTnYxbzQxRUsxRFNjZWZza2x2M3g3YW0xTnc2WExVMExhK0FRcVRiRjAwaE45MlVFcVhoZElyQXg1Wmxia3c3YmltM2F3TWFZSG16U1ZncmVQdGJqbm53b1dPdVh6bmk3WStlWW84Y3BVUnFhcmltV2cwb2ljcVoyN2N1ZVBibE04N3ZiM254eGZ1OGZ0K3pjSUtqSTljV1Q5SFlxS20yVG1DSXJVdmZXWTBQR1dNRUJUZzduM2pxd1NXcFNPYXBtWmh5cVp3ZUxyaWM1bVlncTJDZFJXdUo2RTI3TG12bU1nU1U2NUJLc1JwNkVHRG1RTXdaWnd4SHc4RE4reGRvSlpEQUsvZldYRGtZNkszaWJOc2tXK2dtQTR1NWtLVkFLb21VTFFHRmtuRmFZWldobE13Y0VwMVM5RTRSVThFcWllb01kVC9CNmdlRDA0YmRIQmkwUk95N2oxSnBkdU84ZDZZMzlFaGpWWUwzb1QxcnJLRUlqZEVhbitZMkVWT1NHQXZPU1dwU2hDQ0lDYkp2Mm5rck1nclI1Q05wUmdtSkR3R2hsa2d0a05VZ2xhWFVDUzJiSmxncjFick9LU05xZy8yclBaQS9Cb1ZVQnR0WllpNXNkaE5hS01vYlVZSklwalNUUzJMbytqMnJOT0dVYkRLZUhyUVE1TnpRTVZNcGRMbnk0TEhqN3FYbkwvOFBuMld6OW56clJ6UG04SmpGMERPUE0vUGxETklnZFNIVzNEcUlxWkI4YU1lNEtKS3ZGSmRiaEdtb1pBMTFEbXcyTTlVYXJGdXc2Z3pCejFnakVLNUREcjVoNEc1ZUlHL3Uybk1lVFpvOVNCaERZYk5yaG1SSjY0NDYxWnBCVmJScHFoYVNSQ0RtQnVzeStnMmQ2WWhTQXFrMVZoaGlhcHBhWnpRampjaFJ5VWdmeUtFRmFDRCtaOFZpcm9VeVQ0amFFWDFrM3ZsV3BVdTVGK0VtaEFDbEJWcHBGcW9uVXdsem9oU0IxUVpKSVJYWmlvLzlSV09WUkFNaVNWSUloRlR3VXlMMkZXVTFXU1JpYUN3cVdTUnpUQ1JsbUFxWVVEQTFVV3BtdTlzUnQxdnlwbU0zSlFLUVVtYWVBOHZlVWtwaERGUFRPZldtT1lKbmlWVWRPVWZtRkZxYnRkYjlBbW5vVEdrUEpSV0lWbkhqZnViNUc3ZjR3TmQ4UGcvZkQ1emRlQWFwQ2tJVTF2R01rOVV4Um5kc2RqdEtoRVFrcHduZEdhcFNpSkxKZmtlcGt0czNJcWRQbkhMbHlqSHZmdXVqL0lObmY1TFRJNGVRa3Q1MTFDcEpLV0drUWh1TExnMDA2blBFR0kzYU81SzFzcFFhV0RuTkxncDhiUGdiSlF0Q2FtcVdCTUNIaWtCUlJVTHBTb3B3T1c3cG5XdWpPRjJKTW1Ha1JWU0JrcXAxUjFQR1dZMldqVkhsYzBUdTJ3MENnVE9Xa0FzcGVtSUtXQVZEUDdEcWU1YXA0OWJsT2RIUGRGM2wzalpBYnBxZFVPY1dzYlE4WnM2Q2FaeVJWbkE0REFpcHVIUGpWV1MzUW5TR0VqSVBud0IyNE9YN0FTMEt2V3VmUDZWV3pLYmNGdGNycTQ1QzVmNG1VMU9pSXZpYWo3eUZMLytpSjNqYmt3OXk5WUVCYlF5bENNSTRFbmN6eDZ0RGNKWnRtRkhDVW1TbVgxcituYW9aNTVsWG4zMmVPNXZNeS9jU1AvNnZmNEU3OXllT0Y2My9ZcTBtNVFaSzkybkVxaDZ0ZTliek9TVWxocjV2SGZVRUtlYm1lak5nRHdYclRlS3hoNjd3Zi90VDM0SU9pV21jaWVNV2hFYjJqZ2NlUHVZLyt5OS9sTy85dmgvandkTUZNUXFVRnZneW9xWGl5dUNZNGtpcGNISnlRQzRWN3lOYWFaenAyUGpBTktkMjdpaW9uQmg2Q3pYak9zbkJ5cEZyWmJmempYZFkyODB2WlZ0RU9yVkVDOFhHajlROWVpT2xUQ2tGWnkxbjIwcW5MYzRwU2tuMHh1QjA0T0ppNU5kKzZkdjRrMy9rMS9QU1MzZXh2ZUxKdHp6Q3ovNzQwM3p5RXkveW9ROC93ZXBnd2VIeHdQbnREYi92ajN3dmMwNGNyVHJ1WFVaT2w2M2d2ck1ObkN3Vmc5WXQ4U09NYUF4WktTWWZVS0tsYXhnbDBGS2luR1M1Y05RcXViZmVJb2VCM2xna0NaOFZjelRVV2xoMEZ1OTNwQ0I0NTVOWGVjZTdUbmovQjU3Z3JkZE91SDdsbUhSZzhIY3VpTHNaNnpRR3dad0thSXNTbXNGSlVCQzBwSXllczgzRU02L2U1OGMrOWh3LytwUFBrVUxoNFFjY1d2VnN4N1pvQ1FtbG1HYXlvQ0pxVzhDZzRXWGVRS2hZTFp2MmF3NkVsRmd0bWg1NENwR1FmTU8rQk1naDgvYTNQOGpuZitBSjN2YU9oN2h5MUdFRW1JV2hMd0tUUUswNlpCSEVsQUNGUnBGVkprcUI3bnZDdU9IRzdYTSsrOHdkZnVKSG51WFRuMzJWZzFYUDhYSUJzaktuekRqUHpERmdkYVhySFU0MmlaRVdjUFdnYTdHZVFoSkRaRHNrUmovVEc4SFZ3eFd2M1RqbjMvbjZ6K2UzLzdZdjRmWGJsMnd2TjhTWWNGcng0RnNlWkxmMS9NRS8vTi94NHF1WG5CeTRmWEJDS3dyN3psSkZ4R3BETFlJUW0zUkc2WllZdFJrOVZJTlRHcVVFYzQ2TnFSY3o2NHVadHo1eHdxLyt5bmZ6MW5jOHhPT1BuM0o0M0pOU1JWYUJ0QW81ejh4K0lrbUJrejFadHhHcHpKWGlOR0ZYdUhublBrOS8rbVYrK2lkdjhKTS8vVEttVXp4OGJkRmN3NlhsOHVaVVNha2h0VWlacWdwS0t3NlY0cEhqSmFLMFR0SmlzSlE0TTN2UDBYSmd0NXVaVTBiYUFqSGpVNE01eTVKSlNSQkN3aXJGbk51R1NDcUZzNGJMM1lndW1ab0tQcmROMHBYRE5wcDJRakk0UTZpRnJsTkk0R0lYcWJrbHFjU1N5YVVnUk12bGJxSkpnUlNpNlJHVmFuS1NrcEVaK3M2MmptOUtMUVRER0pJMStPREpLYkpRYXUrTUJtY2JVaVZUOEdWdXpRUmhjRzZmdktJRWhZNlFNbHBXbHNzRklUVERoVllLcFJVK0ZYTEoxS3E1dUxmai91V085VGdSY21CbHVvYVZxbUIwVzZmMTBKRnpiYzhDQllOMVRaUHBHM1pMMFJpcHE2RnJKcUFxeUxVZ1JNV1loaHlMSVpGcUc3dUxmZk5JbDRhZzBsYWhwTVNxaE9wYktSUnpKTlVLc2czR3JodzZRa2o4alI5OGdUdnJ5Qi80OWU4RmExbXVlblJaRXRjUlpSeHgyckhiallTTlFuY0tyQ0xXNWdwWEFtSVJ6SFBpM3NWTXFvVXNNNGRvbGwzaGN0N1F5VXF0SGZPRnh5VEZzdS9JVkh5T2RNcFNjMEVaQlZTT0I4SFJ3aEZ6ODQ5SWxUQ3EyOWRjbGxvenFiWW92NXBBeVlMU2xaQVNDN2NneEFsRVFLdUJ5UWVNYmthNVNtNXBNYm1RYzREUWVOcHZrRVIva2JPSW9DcUlJcUpWczdyNG1qRlUzc2dpVUVJaHBDWlhnVlVHcFNJempuRksrRGp1aXh4TFRaRmFjOU5xMUV3V1RRdW1hM3V3elNHd3NCWlJIUmViR1NNVVdpbzhtYTRmRUNHZ1JkTVVsQnlncU5aWkFSQUZSY0h1SFl0U3RWMnFrSXFoWHpiRVJreWtrcHBXRFlXMWpyeXRLTDEzVzlGU05zSmNmeEVYb0dFSHZQajZQVlpJdElDaUZOMndZZzVydHR0eityb2syWmFETFpVbXAwaFJndG1QSENwRjczcm0wWE81M2NGWjVjbmJnZjZxNHkxUG5kQVpDQ0ZTS1hTMlI0b21JaGRDa09PTU5RTWh6Uml0NlUzSDZBT2JYYUl6RzRiZTBEdkQ1ZGcwS3daSjhBV3BLMHBWaUpsZGFydHZxd1c2RnF3dzNKc1RJZnNHYktYdElISnV6bE9Fb3RKMlZMSkN6cFZjb0thSU1LWTV6dllQR2dVTnlpb0ZvUlJldWJ1ajB6UFhUM3VPRmgySXlnT0hrZ083QksxeHRpZDRTMGd6OXpZYmRydklRVzk1NFBpRTVMZms0bEhEaXVQREIxQm9lcTBZbk1KTHpjcG1EanJIWlM2TlNTYWJEa2RSdUhwa09ENGNlTzFzNHQ2bDUzMVBEbnpyVjcrTnozdmY0MXgvNUpReUpXNjhjRWIxQlNrbDFSZ09UbGZNV2tLZThmTkV5SjZiOSs2eVd3ZktuRkZXOE9EcE1SOTQxM1crOHZvaFgvZmhKL25lZi95VGZQOFBQYzNocXQvclhoUkZaSXkyTEFlSGo0Rmw1N0I2b0ZaSlRnMG5oZXZZYlNiQ0ZCbE91emJlejNDNTNsSzJNNWVYQ1ZFVlRrRzgySEY0ZWtnbFlZVG0rSGlnRnRrWWR4eGhoS1hVeWk0WVlwd3BaZUpnc2FJc3lsNnJxSEVpWTA0R1lrbFlZN2wzNWdrK1lremJXWHBmMEtxeTdOdURKS2EyT1FpbDBqbEZwelZXS2JRMXBGcXgwbEVvakQ0Z3BXRFpMZEVTbGtObE80TXhIWStlYXE0ZUNMNzJhOS9KNnkvZDVONk5TOXkxSXo3K3ZUK0drWXAxMVB6b0R6L0hFMCtkNG5yRHU5OTZoYS80VlUvd2ZULzBOQXZYTVRwSjV4cEF0c3VhVmFjWnJHUXFrWk51b0RNZFd6L1JtZGJScERSOWJtOE4xaGlzRlZ4ZTdsZzZSVDkwSUNPU2ptVnUvTVpRTS9NVU9WZ3UrUzIvOWtOODhlYy9RbmZpU0FIT2I1N3o5SzB6MW5OaG13ckhLOHRERHh5ekhEcW05YVlCdUhlSktlVFdaYVdObFk1Nnc1ZC93Vk44OVZlK2owOTgvR1grOXQvNVVWNTU1UjZMMHhXcnE0dUdneW1KV3VNK3M5eWlsV0tPYyt0T0ExMDE1T3JSV21GMXp4d3pTclZ6RUZMa1lGQ2szSE41T2ZMNTczaU1yLythOS9LdTkxNkZvcmh4ZjgzTlY4NFl0NUdqaGVEd2VLQWZGcXlrUlBTT2k1M0haSWsvbnpqYmJKdjRmN1hnY0dsNDRHamdiZC93ZWZ5NnIva0EvOU0vL3pSLzkrLzlNTFhDc3JjY0lKaHN4OFYyaE5xeW02VnB1dDYrZHl6Nk5pck1NWE82V21EZHpPQXRvVTRvTlhPOE1FaFRtSHptNHI1bnUwM2tFQkMxTUhHVGc1TWxCNGNHYzd2U09kT2VtOVlTYXd0dVVGS3k4eE5HT1pRU0pDb3BaV3JKbUwwTGVtRjBlMTJCOVRaZ0VQeU9iL2tRWC9VMTcrS1JCMDdaWFhydTNkNXg5K1Z6OG01Q3VzTGgxUlc5N3RtVmpOQ0c1RWEyNStlY1gwYlVESFk1WUp6aDZwSGxuZC93QVg3RE4zMHhQL1lUTC9IMy90YVBjdmZ1bXBPckM5UytXNFlSbEZ3b3VlSkVJZTkxaTI2bE9EcFlZanVGRmdxcE9qS2F5KzJNc1k3RnNtc1VnMW9iQnpPMWtYQ1ZBaTAxQllFMWtuV0krN1FTTUZxeUdTT0RVWndlTGJpM25zZ0ZyRlFNUmxGS3hnQSt5NFptb21CMVpnNFpueks5YVN4SUtSc3FEVW9yRm1oVGp3eG8wN1NLcVJRdWQ1NUNaZWtNbSsyTTY5djRkck9kU2JWcEJudG5FVWkyVThCcWhUR1NjVmRJc1dBMHpGTkc1NHcyaWtYWG9hYlFzdEpyUTlOMHJxTjNJemtIeHJRalRJWHpPWExRVlhRdUpGLzN2T1pDTGFVVi9DUjhERGpYSVVUR2FrM2ZPNVNTbUNLSnVsMFR0VFN0dUVMZ1ZETjZLU0U0UERpZ3BrS0tFYWNiQnFoS2hjOGpJUVhTdnJPdkVRalYwcGVLYXNTV29aYzQyeEZ6cFZJSXNaazlIKzRsLy9qSFgrWHU1Y3p2L25YdjV0R0hTdE5BVzQyZk1xSzA0alFCZWM0VW56RjdBODQ0WnRiVGpMS0M1ZFdPUVVsNkM4UGhpamhXenM1bkNvVko3NXFzcnhhSzB0eTVPTWRveTJJUW9DckRvVVZvb0ZyNm9TR0hVZzFZczhRb1E4MlZSRVRLc2pjcEdZUnA1dU9RUXRQWTE4cVVRQmNZdWtwbkRhVlVmRXlrM0tSbFZocXNXeUhHSFRISE55VXB2d3lkVTFKRlI5RkdWcldOcDZoMWY3MHJxSXFTSTduT3hDdzRHRHFzS3N5eVFaRWxraGhuUUtLa29jaUtNNEsraDByaTR2NEZNbm1NcWZnQTNvODQxYUw2cXRBWTFkclIwYmR4bmRhSzNWd1pwMmsvMWpFVUJNNUNaOEVaeTdBL0lTRzNFWlVVVFR5Ym9taFptcVpGdmVtZGFTeW8ydHhmbmJGUUE2cG9ZbTNkS3drODk5S1c4WHlMcEdWVSt4eTR2NzVrdVRqbGJMN1BrYm9Lc2lYU0RNWVF4MENzME8wZkpIMDNzQXVSTUVXbTlRN3Z0eno4NENIR0dxWUora0dUYXdHYUlGWFFERUVwTjllYWtaSlVBclZLUW9vb0JUa1BTQk9wTWhKOVkrYVZVRWdrZXEwdzJvTEpUTjQzRkVoc2lCUm5YWE4vMWtMd21ZWHVNY3FnTkZRUm0vQzdDa0tvSUJ0T0EybkpwYUlFalZXVzI4Mm1SS0hYelIwM2w0alBtZEZIVm9Qa2ZKdzVYaXhaZHBxejhRSlZXM3RjUzRjbWNyQ285SVBrOXZtVzNibm43Vys5enRVcmorS25IZEUzNGZZY01uWklkS2J5MktuaGZHN2p3N0Y1VjRoQ05CNWU5bnoybFMwZmVQS0VQL3c3M3NueHdZcWYvdm1YMlAzSTB6ejYwQWxYSGozbGtVZU9lYy9qSjJ4cXo1M3pIWmZiUzI2dk55eXE0UFQ2TVc4L2VaQThlYzV1ZWNwWU1PYUFaNTk5RFo1NW5pZmY4akMvNDFzK1RIK3c1Qi8rdzU5amFkdllSU1pKbGJVVlhOR2pKYXo2SGg4Rll5am9Ec1RlYWIreVBUbjRwcWZKbXZYbEJzYkNiamN6TEFabVg2aFNrV3BoR2pkY3pwSHMyN1V4eFl6VmxzNDVOdHV4RmV1eXlSTmlUQmdMVk1FOHpqaHJnTlJneGRweHNGUnM4c2pSOFFwUkZKZTdtZGxubElqa1ZLbENJbFJETGczV0VsTmk0eE5XVzZ5Uk9OMnl1bk8xaEpBNEhnUkZnQmFhWlNjeEZNNHVaOTc3N29kNDhPRlRicjU0bDBEbEV4OTdnVG1NZlBURDcrS2hvd1BPZDRtdTA4emJpVzN0K0UyLytTTTgrK2w3aEZKNDZzR2VYRnRzMSttZ2NLWnZlYWhab0twbG5GcU9xWEdTcFhQa0lwaENBMnBMcGJoN3NhRXpnbXVIUi9nWWlFaHlsc1Fhc0JhMjV6TVBQM2lGMy9QdHY1cDNQSHpJSzgvZjVwVWJGdzJhbkFXbENONzZ6Z2U0djk2MEJDSnJ1SG56RGl1bDZKYU9xMWQ2RG8zajN0bk0zYk1kdFVydTNwdTRkL0VLdzdMbjNZOWU0ODkreDcvTGQvd24vejJmZnVaVm5uemlLbG80WnQrU0ZKVFFTTnZRTE9IOEYyRzNTb0txRGVja1pkTXNDMG9MR0tnQ0t4VHJpeDBmL2NwMzhiLzdIUitsN0NKM2I1d3pYczZNYVNhRnlNT1BQc1E3MzNXTmJVN3NkcEd6eXkzM2J0MW51ZWc0WEMxNTZNcFZIdFRYK093enIxTXVQVWxVN282ZVY1Njd4K0hwSWIvcFd6L0MxWWRXL0ZmL3hUOUhKa0huTExKdllRdVZ6QndEcGtwUWhrbTBlRUluSlZWWGRpbGduVWJLak02V09VeGNUaFBuNngxeHUyTytleDh2Rkc2dzRBUFQ1QkZyd1c0TWFOMmk5c1o1YXAzYnpoRkRKQ2VCd2lCenBlODFrMCtra0JBU0JtT2J4SWJXWFJ1M2dUSW52djNmL3lLKyt0ZCtnTE5YZG56MnAxNGd5SW8wbHFvTGo3L25PbGRQRDNqOTNwcmQrY2htaWxTUnlZY0MwWFc4ODlwVnBqbHg2NVZ6dHB0THdyVGl6cXRiK2lQTGwzM3A0M3orZXgvZ0wvNzVmOFpuUHZzYUR6OTBES1VnaWlUR2lEVWFvdzAxSmxLdENOT2kxSHdzaEdrR0l6RDc1K1A5emNnRFYxWWNERDNicVMzU1VnbzYxOUpZNWhCSnFUREhobk5CVm5LcFhLd25odDVSakdKd2t0NDBXUHAyOUZnajZWV1RsWlFDY3l3TVd1QzBSS3NtbVlrcDQwTkNLL2ttQ0Z6bzFuUXhwUkp6eHZ1SWxRTFpXU2FmQ0RFeENra1JtcEFLcVRieUFsVVFRNmF6amNtNFRZRlNGYWY5SVN0WHVjd2pzVlpTalF4QXB5MVNnbldHVWlVaGVtSnUzYXBVQzhhMDlMVTZCbXBPSUh0TVZUaGF3bGNJbFNsNEJJMFNVRVZGQTduT2FHbW9xVExIUU01NWJ5cHJJUm1pVkh5TXpMR1FhMlRvdW1ad0RETzVKb1RRTEl6WlkzTTBzMC80REtvV1ZCWU10cWVnbU9mSU5NMHMreWEvdTdlWjBDbFJkU0dWTnJKKytHckh4ejU5bDF2blA4ZnYvdnAzOGdWdlBVYmJBZEYxekp2Q3RFdllsZUh3UU9MWGdjdHRaRDE1cEtrbzA5QjBDOXVJSGZmdVRzaXpFYVZiWTZpWndDUkRieEZHZ2diYk96cHJTV25FQ011MExzUzRJUWtKK28wMXVxS1VhVFdhVUpRNk04ZUNVUmFSRTBaTHBweVlZOElaUXlrUlFVS3BqbEk4cFlnOUtrempWTi9xdGxpUVFWSlNKcGIweTFLUGZnazdSMUFEakNRbTMzUUZVaWhFYWVrdVd1WjlKNjdoVzNLVnpObGp0RVVKdzV3bVFzMVFDcHFJRUEzc1dYS0xFeFJXbzJVbFNvSFBJMFpvUWxKSUE3SkV3cHlaU3NVNHplVnVRd2lPd1hSNFdTZzU0M2RiZGx0RjJ0YzF1U1JpcWlBc2M4aVVraEZrdE5SWWFTbTBCM0tNbVNwemM3UkpTMHdUV2hXY1ZjZ3NXbFVkVzdmeS9zV09PK3VSZzJWSGJ4UXYzbnlOQjQ2TzZQdUJ5ekZ6c2QwMHdXY3V1S1dtUHhBWUw5bU1ubFFEeGhpa1ZPVHN1VGcvcCt5T01VYVJWVE96REVJVFEwWDNHaTNVdm1WdTJjMWJtcGw1UVM0Slp4bzhWY2cyb3FrMUVpYlkra0MzMEt3T2VqWlRvSXFFbEkyOFQzWDRtRUNDeGJDeVRXdFpET3k4SjhTWmNUTTNQYWhvMmluWFcvcmVObmU3REcxOFVSVEl5dUEwaTc1bk82Zm1qSld0bzR5VFpLR2dpQVpFRDZrNTkyd2I0MlVLYXQvaEpUZUpRcG9LNCtRUnJqMUlwdk1MMERDdUwvY0pIUWJud0UrU1YrNk1TS25iemJBZkhTaXRVQmsrK2V5YXR6NXl5Si8rYmUvbHh1MkpUMy9xWmFaZzJJMlc4N3ZuZk5RcXVpUERYL2s3ei9FLy9mUkx2UGJhUGF3bzNGMEhuQkdjTEN4WHJ4M3l0Vi8xYm43Yk4zMll1eS9mNFpYWDEvUmRqeFlkdDI1Y01xYkFOLzdHTDJEMEUvLzBCei9ENFdrejZ6aHJDWG1pTjB0cVNheDNZeHNyYXZDaE5JaDhMUXdyalo4cnRTcHlhUzdDSkFYT1ZWTDJqT1BFMEMzSTBXTmRqMjVRTkhMT2hPaXBCQkJ0RVU4cE5ZaXFHMXJ4UG9HV2lTQWlZREZSWXBScUM1bzI5SU5ERzBzTWU0aCtqb1FpRWFwU2NxSlhEYWR6TWU0d1VxQ2xJZGRNeVlFUUpOYTE3TjFhRXlHVXBuRmJ1ZVlhcDFDRjVFdSs4bDI4OU9uWGVlbTI1OFhibHp5NmN2eUdyLzhnWWQ0eXpZVmhxRWpaWG52N3hidTgvOHZld2ZzKytCai8rQWQranV2eUFLYzZGRTNUdXZOTlVOOXIyOHhlQXJUY2Q4Skw0eUFpSlZXbzVsZ1VoY1d3NEhJWDJjeTdQZVM2bytpMkVEeHc3WmovNEE5OUxWY1Blajd6aWRmd1lXWTRYakI1T0Q0ZWVPcGRUL0kvL01ESCtkN3Yremx1M3Q1U2M3c3VuZE1vcFRpOXN1UkxQdTlSdnZuWHZwK24zdmtnenoxOUc5YzdZcGdaTjU2Zit2a1hlY2Y3bitUYi8vZGZ3NS81MDkvREs2K2ZjZVhnQ0NWRmt5QklDS0dTYytzaVRuT2JjS0NhWklHNmgydExSZHJIcUxuT2N1djJKVi8rSlUveSszL1BsM0g3NW82N3Q4NXhTcEtSTExzRkgzcmZGZTdGeW5kKzk3L201ejd4Q3ZmdnJSazNubEF5eTk2aXJPREp4Ni94MVYvNUhqNzYxZTlnZCtPTThjS1QwV3pHSGFMZjhYT2ZmSjR2KytyMzhNcnp0L2tIZi8rbmVQQ2hVMUFhcFNYM0xrZjZUcUt0WlR0R1VpNUVGR05xbWN5ZEd4QlZOdXR6TUlnSU9YdGlUR3lUWjVNanM1K1Fhc0NrVEMrWHVINkpFaDJ3eG5XYU9jTE83ekJxMVZ6eEZSYk9rVUxDaHlhSHNhcWdUSFBOVTV1VGQ1NFRhWmY1OXQvNXBYelZSOS9KczUrK1JkaEZNSzFqMUIzM3ZPOUREL09KVDk3Z3YvaHZQc2JQL3NJcnpOdUpHREl4VmJSUm1ON3hnZmM4d0wvMzI3NklwOTcvRUM5LzRqWGswREZ2Um02OWVvZUxlMmU4KzR2Znp1Lzd3MS9Ibi8zajM4TjZFeGtXQmdzSUpONG5uTlNVMHFZdHV4d290VER1SnF4MExTMnJWQmFkbzBvNHU1enBuYVl6a3AyUElCdFJwRzBVSE40WC9CVHBqRWJJaXQ2NzhLRXlob2lvdW9HeFUwTElKaitwV2lHa290TVZXVE1wQ25ZNzN6YUxPYlAxbnB3THE5V1MxZUdBVnMwNFVrV2w1a0lwalQvWUNTaTVzQmc2YkpDY1g0NzBuV1hZRjZlemJRV0ROUmFwelQ2aHhlS0VSTmVLdFpvdU5SMmNFS0pOVldyckRrb3BFVVdpaEtJM2hqRVVVcEpVYVJEV2tNV09rZ1NxYUxKU1NOZGh0RWFKaWtTaXRDVDRqRkN0TTZxVVk1b0N1ODBPSVFWT1c3UUNLOXRVWkNxZVNrVnAwMkRuR2FaNWc1UWFiVHRLekJqUk9xa1dRemRZYnE5SGhESUlyZGhPcmJzcUJReTJkVEloODhEQmlqTTFzcDBoRmNrNEphUW9YRHMyUFAvNmhqLzlYLzgwLy82dmZTdmY4cXZlaWx3NXJGNnluanozTHRac2R4cnZmWk92YlNlMEZOU3FtS2JNY2htd1ZuUC9Zb3RXRXV0R2xvTmx1ZXJJUlRCWXgyNmV1SE1lS0ZLeHNvWHNSK0ljdVp3elY2OGNJTTkzbURraEZZalNXS0NWMUthRkJVUnRoWC9KSGw4YXByQzVtdHQ5ZlRDc2tCSlNhVFZhTFlWYUUxcTFhY2N1WktZd2tzY1JVY3FiTnJkZjVvWldVcEpJRFRpNVIrQlVCSVZFU1ptNm40Zkwwa1pXOHpTUml0amI5ak8xS3B5cCt3dW50cEZYeXRRQ0pWWUcwYk1iRlMvZkdEazk3am0rNHJCR2NYNloyWTRCSHhQS1NhcXY3RGFaNGdxMVJIS1dwS0x4TVdGUkdObHlFME5zRDBwS2JRSnYycTZ2TFVRUnJSdHFKU2RGcGptOGhDejRYSkhGNG5vUXM4Y3A4QXFHRGpaVFlIdC9aSEY0eEt1djM2Wk8wSjJ1dUR3L3AxUk5ESkZZSWtaYkxqYUp1cDU1OE5vUnlremNQd3ZVM0xBelNrcVViQzZvbkZyMDFNSW9qR3JjUmlVVk1YbUVBRzBTaTE2MVJVYk1iZmRZQzg1S0RBSmZ0b2pjSWFnTS9VQ3BsWHRuTzZSU0NBRnpUdVNncWJtTkVYeEo1Q2lBVmtDYzN4c1pkNUVuSDdXODlmUGVRaFI2anpZcGpKYzdidCs0emMwYjl6R0xucE9qQXlMTmNaZXA3R0pvMnNvOWU2c0tRTFQzbmxWRC9oeDBQWnM1b1JhYXhXQUpTRlN0R0ZVWjU4QVlXc3pqbFlPT3U5c2RtM2xpczExanJjV3VIS1NBbEQzT0RDejdMWnV4Y0hjVE9Samcyb0VpWnNubHRuTGpMSEI0cVBoRDMvWTJOaVh5cWMrc1dSMXBlbDFSUzgyVHB3ZVlHdmd0ZitMN2Vmcm1TQStjTEZ2K3RVYVFTK1htL1psUHZ6cnpnejk3bTEvNDVPdjhxZi9nYXpqYUJ1NnZBMWtrTHRjYk9tTzVmUFdTMy9TMTcrZUZaODk1OWZhR3FnTUhiaUJQaG5YWTRJeGozQWFHUVZPTEljMkZXak1JR0gwa0Y5RTBKUldzcWtndFNFb3hqaTBsUmhoRlZaWXNOVVRCbUFyQmIzRkdVb29rK0hZalN5bHd0c2NhM1VZSVUySU1DV1VrTVVXa3RGUUNnM0hrM0VaNU9iVzRObFFtbDR4UHNGb3BWdjJLTkZlMnN5ZFJVRktBYk5leWt4M0t5TFliVDRWT0dXWUZkODREeXJia2hQc1hXOTcvZVEvenF6N3lCRC81bzgvd3NSLy9ISXVqRlYvNDBYZXlXR3ErL3dlZjVRcys5QlNEayt6dWppaW5pR05nZXo3eWthOThELy95WHo3ZE9HQUlVaFg0bkZDeWFYVlRCbWxhSG00dW1WaWIxa2pVbGtSVVJXSDJtY05oaFZZU1QyeUxtV29MbnlpQ2NidmhtLy9kTCtmYTFSVlBmK3g1akpJY0hxNjRYSTlFTGJqMnhBUDh1Zi84Qi9uT3Yvc0pCSEN0QjdPZmJNd3hvM0xpNmM5NVB2YXArL3pEZi80cHZ2UC84ZS94NUZ0T2VlVnp0L0M1NEFhRHJmREtaMjd3b2E5NEJ4LzY0cmZ3UGQvN2t4ejJDMXpYTm9sU1NtTEthQ1BwdTJhMktTUnFWVmpkUHBzZlc2clNuQkpDU1V5SkhCNWJ2dW1iUDhUbHJjRFpTK2QwblVaclMxU2VwOTcrQUdjeDhPMS82Ry95TXk5dVdDakJVUytRdWlLeTRET3ZqeXdNdlBqcWkzenZ2MzZSMy9Kam4rVlAvTUZmUTVqZzlvMExjQnFkSmZsaTRyVmJaM3o0Szk3QkQvK0xUM094bVZGT1VXdUwxaXNsTndhZmx1U2NPZHR1UUZTdTdybTIwelJqdENYRmhCUVNvdzFUaXJ4ODh6YVh1OERLRGRRb0VjWTBuVmtzbkI0dXVYdnJQdXZMSFZWb1l2Wk1wVVgvYlhZVFRkUWpTTEhTZFFhMG9PU01NcHFjS2tKV2J0M2E4dFZmOVE2KzZtdmZ3OHVmdmNlOFM0UVNzQWlTcUR6eTFESGY5LzJmNG8vK3NYL0VaWUtUQlZpN1R5RUI1bDNBbjgvOHpaY3YrU2MvOUF4LzR5Ly9aajd5Z1NmNTNDZGZKOWRNcWxDMTRjVlB2c3A3UC9KMnZ2WWIzOC9mL3E5K2hPT0Q0LzE0V09PbjBMcDJSdE5MMFVaK3FSQmpZZWxjYXhDazlHYmhvVVF6UVZJMHE4NHlwVUtJYmVFdDVOYkZwd0c4MDY0bGtQUzJSZVNsa3ZHNXNYUHJabVpLZWUvbXJSd3ZIT2ViSFdkbjl6bGNMWGpiT3g3ajRPb3hzNDg0WTBncGN2T1YxN241OGkwMkdVNnVudUE2UzZvVldTdW55NDRxWUp3RFZqYVhzZEtDbURPeDZBWjNMcFZaRkl4UkxlNDJnWkxOK0RERm1TdzB1UlRJaVZYWGsxTHJ2cVhjakRHZDNYZUVqV1h5RTBvMk9QWjhNYkhiUkc1ZGVreTNRODRKblFTcFJDUXRzN2hXeVRqdjJyTUo2STFsY0h0L1JHeDRzNzd2NktRaGhrU25PNlJ1ek9RcUlyVzJoREVwVzhwVVVZMzVHRk5sbkR5ZGdmVXVjbmpRbUxVbE5RMnFVUHNvd3lxcE5lTk1ZVFcwQlBISlo3ektsTm80alk5ZTZUbmJ6SHpYUDNtT3pWVDRqVi84SkVkWFZqejAxQkc3NXhMM3ppK1lVOElKamE2R2VXNmpZVVZoc3gycFZSQkNJYnZDbGF1SFBIcjlsRkpoM0NaMlV5Wm5oNHFaOVR3UzlZaXptbzB2VEx1QXUyYW9RcEJyOHpWSW04a3hvRzF6TzZkU01LcHRyS2MwYzZBY1Ztc29ucGdpdWFyMjNLMFZwd2Q4OG9CQkN4ampIZEk0VVgwQnpENWdZMHRJNFpjWGk2VlVhczcwV2tGdGd2Tks2eVJXS1JGU1FjM1VTb3VNaVg1dlNVOHR1RWkxRG1GTjBQZUszU1lUcG9KbzVtcGk4SlROU0EwVnJWcWl4M3BkMEJRbW43QkdzRHEwbENyd1UycWRIcTBZVTZQalN5UFF0cVc1cEJRcDBFU3NlMWRocWdIMkZtK2Z5MTRUMk5BdFZqdWNOb1FRcURLMXlEdFZpTGsyN0U1VkdBMWEwYUNYUHJEZXJybFk3empzRmx6Nk5aZHpaSjUySEIwc2NReGtSQU9MajVsN0l0SWZLb3BRNUJyUlJSRWkrTnp5TVBNWVcvdmJSVkkxU0FQSXBvc0tQb0lDWFF0S21OYWRVcWxsV2tiTjBjR1NNRytZZDRIT1ZGTHhwTmdodENiSGdoR3RHelRHdlhnWVE2RWdWUnNaNXUzSVI3N3NiWHpGTjN3RjczanYyN2oyeUJGSkNKVHM2YnNsWWJmbDdxMDcvT3lQZkp6LzhlLzhNMTU1NlRiWEh6cEZHY0Y2NTBsbHhpaEYzeldFRWhXc2hCZ2IyM0lNaVpSYWRGQm5EU1VYeG5GcURNd1ltK2pXU0E2NkZiWXJISlRDbFlNbFhiL0Mrd2toRFRGbk52Tkl0K2dSVXJKYU9QeWNXSWpNd21aNk0zRFVKMTYrdmVPM2Y5M244KzUzSHZHelAzK2ZkMy9CZzl5L2Y4N3VmdWJLcXZMQjkzWDh5Yi8zT1o2K09YSmdGWThkTzY2ZWR1eTJFMUpWWE9lWTVzRERVblAvWXVLLy9vRm5lT3F4cTN6Yk4zMFJ6MzNzRTNTZDQ2QWY2SlhDWDNnZWUraVFMLzN3Vy9pZWYvUkorazR4cDZtMTcyTmtqaDVqRFZZNFRLOHBmVnRBWWd3b29hZzZVa3RCbU9aQXAwUlNhRDlERmFqTlNGU0xvUGphWWdOTHBsYURWVDB4enVUcVdmUjljNUdtakhNOUYzNW1qSlVUcDdHRFpwNDlJUVNzZHNRMGswSWlxUlkyTDJXbEh5eE1tWGxLbUJLUkluRzR0RkF0RlVrcUhwRXIyekMyaDB4SkdPRncyaUpFNE9TNGRYMUptZG5QZk5FSEg2ZHNBNnVsNFl1LzhEcFhEazU0NEtUamZKcjVpOS85TS96Zkh6L2w2NzcwSFh6ODlSZFluSzZ3dWZMYWM3ZDR6eGUrblMvNDRGUDg4STkrbW9jZk9tUndIVFdsSnNJV2pjOWFvMENoeURVaFJldlN4UmdwVVlCb282dzVOSTdpY21rWi9Vek5iZm9SY3VMYWxSUGUrNVpIdUxpeG9lOGR4Z2pXMngyYnlmT2hyM2dYUC9CanovS2RmL2NUUEhwb3VIN1VVVWgwMmpXNWl0NUhYcDRXMWo3eWlWY1NmK212L0F1KzZ5LzhWcFF6MkNJWVZqMUdUS1IxUkFqQkE0OWR4MnJOc2plSTJxTFpqTm03cGFzZ3B6YkMwNlluK2t5WUk5SlUrcTVqOWdHcEpkWVlOdWRidnZ4WHZaVkhIcmpDQzUrNWd6SzU2YzJNWWJFeXlFUEhkL3pwNytmakwyNTQvMk1ycUpXRGxlVmcwYlBkQmc0dkk0aEMzMVhPMWhOLzk1OC96NGUrNEZtKzdpTnY0OFVYSnhaSEJ3Z0ZNaVEyTDkrbHYzNklPem5rM2t2MzBMVDg3R1h2TU5JU2MycmpYL0dMckJnQlZGa2IyeTdHNWxpVkxadDNuak8xcUtiUk9qQTRxOGt4b2pxSFZQdk91SExjdXh4eFhZZFJobExySHJmVzR1OWFabjNyTW11cHFMRkFpQXhEeDI3eUhCNXBQdnBsYitIVno5M2kxczBMMURBMDA0ak12TzFEVC9DWlQ5M2dEL3lILzRpaEUzendpVVBNUGxpQXFra2xOYTFnRlR5UUk1OTdiZVE3L3BNZjVMdi82bTlCbWNwOGtUREd2ZWtXdlhmam5NLy92SWY0dmtQTDdGdHVkQXFlNWVESXBURDVRQlNWY1lyMG5XVG9OTDJwbE5SUWNydGR3UFNLWmUrUW9ybDNxOGljSEM1SVhXSTlqbEFGdmRHTVBpQlFXTlBZcGJ5WlY5K1lmYXZlMG5XYTlXV2t0NHBsWnptN2Q0WmFXTDdodDM0dEgvclNEL0dXZDcrVjFkRXhpRXJKbFp3QzI4dExYbno2ZVg3MEIzK1VmL1ZESDBOcngvVnJweGlsaVRHM3RDR3BHbDFBd01GcVlOcDVRb2pOU0NZa1JsV3NWbnRHY3V1QXprVnd0cHRSSXVPY1FVclI4bzJCcnJjZ0VqRUhZbFV0REFIQmNoaXdaa09La2F3MHE2TWxoOHVPVENiVkhidnhqT0FGeXlOTlp5VmFTS3p0RUtJRmFMd1JqMmlFcFloRTMydTBscVJheVEzVGpGQ1M3VDY2YnRFMXlGSE5nc2pjVURLMExQQmFDejVVVW95a0RLS1lOOUZSOVUyc2xDQWltWExCS3MxaUg2MWJxaWFrZG95cGxlT0ZKZVhDMy8yWEwvRGl6UTMvcDI5K0g0OHRMVTgrMUhOYkNaNTkrWUp0elFpUmlDazFubVhma2NmRWEvZTNuRnhaOFBDREE2dGxNeDV1MW9sNWlzak9zZEtPM2VhU1hocTBraTNhVVJoVUovQXhnOC9FNUpsRDV2QmdhSFZYYVVhd21HZDg5QWdoV1JpSGtRMFpoSlFJcVRHMUFjcHpyc3hsYW9aZmFFWmI1ZllwY2pQQ1FuV1NXcHNiL1grbVdXeDZyRndFUmpXM2JhM05JZVdNeHFjMkNwWlM0RlBlZCs0S1dsaENVUGdFU210eURlVFlZTjZ1bHpTV0JBME9QSG15ajhoU2tUbXoyUlpLRmhoYjBWUXVONFZhQkF1clVWWVNmRUJidUhwdHdmYitSRnpQZUIvYkFST3R1R3ZrZDAzT0dhMHJuYkxOdmFiWjcvTFVYb2dib1RaQVo2cVpXQ0lsL1dKVVlka2pXbExLYktZdHFreTR6bkc1alNnYldDMFhDSmtZNTRsZUh4Q0xSOHJNY3VpWlkyUjN1K1UwQjJaa3R5QUUzNXlyd2pETmtWcGdQVVpXUFN3WGRzK0liRGdSWXl0a1MwNU42eWR4NkM0emo0RjdaeE51MFdPTko4eUJIRnYyNW1yUlk1WTlsNWVYekpOSEdvblNUVGdkSTl4NmZjTkJyL2w5My9HdGZQMXYvZ2FPSG5pWWNkeHdkdWNHTWN4a1ZSRTVnQ2k4L1FQdjVnTmYraUYrOVcvNFZYejNYL3BiL01CLy82T2NYai9ZdzIwYlRxS2tpbEtnUkNVa3lGVWhxbUszeThqOStiMTU5NEtUeFpMeElvSkxIQXdkajE4OVlETmRVa0tnSk1WbVRDMXFxQ3EwWFZDRkF0WEcxeUVFU3BSMEM4dUREeG5pZGtabnlYRGdjQjMwNXBEUGYvdERrQmVjSENqbVhNZ1hpY3RONEQyUEQvejQwNi96VDM3OEZpZUQ1ckRYWE15VmsxUjU2UHBCMDE2VXpNTDJDR1Z4U0dyYzhLOCs5aHhmLzlGM2NmM0tLVFcwMUlKNW5QQTFNd2ZKNGRIQWJqcm55dkVWdHZPRWxKVk9hN1p6d1BVTnZlRERoRElhaVVKcFNObWppdGhIS2paaVFJNkY2QU5GTitsQmlRV2RORFUwOTNUWFMrWUx4UndqTEVCb0RVR1Fja1RKU3N5U011Y210SGVTRkZ1bm9EbTJGVG1tL1kydm1YekJXUm9jdnl0UU16RmJZaTNJbXRFVXREU2tKRkRWb0lXa3FrektrcEFWUlhseXlpQWtUaFpLOUZ5dUkxL3cvc2Y0d2k5NmdwZGV2SU1JaFErKzkyMlVWTGp5K0FrLytMMGY1d0w0K01kZjU5ZC8zWHN4cXc2bVFMYXFaYi83SFIvODRLUDh5My94Q2FSVWhOd2MyMlh2Nk51bVJBeUpvMFZIcnBXRGJrVXRoY0UyTThnNFJUcFRxYnF5OVh0QXVXeW1ycW9xVWtvZWUrUTZCN0xqWXJ0Rm1zSm1Gem4zRTlkUER6bFpMbmp1Yy9jWWdFY2U2TGt5TExuWXRmSG9RcmZSZkttQ1hCWElpWGRjM2ZINjYzY3BRdkRGWC81T0xzNjNZR3JiQUV5QnErOTRBUDNQUGtuSnplVjhzZDFuUUpjRzZFNitGU2lkVVh1emdjS25HWTNDZHEzNGp1T0VrUUpsTkE5Zk8yWjc3d3hkRTc1b2RqbWdOaU1uUndmY3Vybm0rUmR2ODVhcmlnZVBEdHZTcGlKSGZjK0I2M244Z1RiNm5uemcrdEdLTzNkZjU0V1h6bm5QSDNnYjVxVG4zdDFMaEt3Y0h5MVpXb1U3Nk5xWXFpYVczWkpRS2d2WCtMVWxsamF5MHdwVklKUzQxNndMcE5CTTgwanZOR3FmbXVHMDVwR1RRL3lkeEJ6bkZxczNSWWJqSHFrS0tmZ1dONm1oa0ZpWWhqZVpmU2JseHVuVHVrR2xjeFZFWHhBVlpNMkVOSE4ydHVVakgzbVNvOU1WTHp4ekMyVjFnMXNMaWU3Z3luSEgvL043UDhVRXZPZkJCVXZuR2w0c3QwNGJPRUpNKzQxUjVLRFhmUExaTmYvalAva1V2K0hYZkQ3cWJrUjMrK1NYcWpnL203bitsaXRjZi9pVUY1NjdoVG85YUZuUFZpSXk3T2JBdkVmeTVKU3BlVVFWUjgyV21rWExVMUI3dUhXdFNGV3BVckR6aWVzTFM2Zmc1bnFMTkJvSGJLZUFscFdGazN1YUNGUWtjOHpjWmNRNVErY1VDNlU0djNtWHovdXlMK0JiLytDMzhmQlRqK0NESklmRStuSkV5a29JSTdWbVRxOWY0OXJqYitWTHZ2YkwrZWdQL3poLy9UditCaSsvOEJxUFB2VVFKYWJtU0xlR2xKcjd4V2pEQ09SUVNMcGduTU9hZ3FpWk1UV0Q2anpQTEllTzFkRUI0NjZOYWpVVlgwSFpsa1FrcTZER1Nwd1RzVGI1aGJFS0tUdFNLa3hqTXhWcW83RE9vZXVTbW1veitlbEYwOVNseE5BcGpOT0V1UlU1cVJZMjJ3MU9hem8xVUZJendFZ1VOVmN1dHkweXp6bEJSbEJ6TS9NcDB5SmJRMjBHTktzMXNWUjhLWWo5WkVXYnVrZkh3WmhtcUFVclRRdXJVQm9oL0I2blZObjV5T3p6UGxPNlpXaGZQNUo4N0xOM09mdGJQOE1mK01iM2NPVndZRkNHcHg1YThjcXRTMEMzS05yYW9QNm1OMGc5a1VOZ0hCZXNMN2RjUFhYNEVGQlVaS3pzNW9xZkUxU0Zkb1lZSXVObXB0YUlNNmNVSlJoOUpNYUdrVExTTnBacFRrZ2xrS0pEeXFaZHJibnNVVG1DU2tUTDFoVVdwV2VLT3hDU1Rqdm11TVBIUXFiaHRlSTBvd1FjSFIwMnZlazAvM0tEeStXODQzSnJHZm8yOHN4VmtGTkdxclIzMERheHR0WUtJMnpUV1ZSRkZxVVpZWkpxdTJyUnVqaHpUb1Fwa3lPa1hOak1nVG0xV0tjWUFxa1dscXVXQyt3bjJPdzhtOWx6c094UXRUQTR3OEl0ZWU2NUhUTE9mTjY3UUJXTEZoS2pXelpucGVKRHl6U01PWkJMcHVzY01RVnF6WmpPNFdjUFVuTnc0Q2dScHJFZzFYNDhLUjBwQjlaamE3WDJmU09mejZOSDR2QjFaamUyU01LVUsxS0JkREN0QTZvVW5KYU5SVVRUNk8xODA3RXNuZWI2VVVjYUV5KzlkazRxMEFzQktwR3pSSlRtNUs0bWtHSm02Q1JlSkFRQ0l4VElqdVF5RitlSlBpUVdSNUlrTkRGVkRrVEJCNDhRRFdjMExGWWdFdXQ1UWtySitZMGRmYWY0aTkvMWYrWkx2K0VidVgzN0RqZWUvd1ZNV1pNMmExTFdXQzBSSmtLRzgzREplWGVWSzQ4K3lYZjh0VC9GUXcvK05mN2J2L2E5TEU2T2tRcXNVdFRheGlnNVo1UnFNVWF4bEphZG1oUEhxeVYzTHpkSVhUZzk2VkM2M1hCaGpteTNnVklGbFpFcFZCUjlZODRsVHg0RHBNTFF1MzNJZTBUS2luV1pFaDNiWFVBUE8yb29QUExFZFI1NDdKUnlFWWloOHV4THIvUFV0UVhIWDNqQzI5Kzk0aC85dHg4SEtnOGVhcTZkSHVDVFJwUzJXOWJTTVlVWmhLUUUwRnB3OVZoejgvWTlmR2Q1M3djZlpYMnJkVC9pTk9NVlBQNldxL3o4QzNmMllmYUpUdmVFTXBOS0lOZEt6cTNiR25PaWlwYW9VeEdrQ011Rll4YzNUYTZ4MitGblFVRXh6anQ2MTFoZm9ub3VKbyt2VFNBZXl3UTVZWndoVTlCS0VmS01xZ0tqRjh6VGlGQ0ZnK1VLV1N1N01TSjF4U2oyM0xySzBMZDhZZU1VUmcrTXV3a2pLNTIxeEJpYXp0Z0xLQTJKb0dTbWFFMmh4V0V0bmFQbXdwd21uRFdrdVNYNG5LMjN2T2U5SDlndk1rM1hHc2JBNnJCbmt5di85SjgvVFEvODJFKyt3TE12M09YNnc0ZXNYMXN6endIakZLKy9mTVo3M3ZVUTczenJBOXk3OEF4TGgrc2RmZzVJSkoweDdLWWRvWnJtS0N6UVNVT1NBa2pONlprS2VoOHJOVTFOLzVWeVJEckpPSHRtWnFxdVNDSHh1OFRaeFpiRHcxVXpjVzFtcnZXQ3F3T2NMaXpCNzdERzRxVGRPNm9WdGJUciszRFIweG5OK2Riemw3L3JuN0pjTGRsTkl6VTEzaXdTMU4vN1NWNTQ3aDZucDBmTUlUZjlyMnRqMXVBOUFvM1ZqaW1sUFE2bWtRU3NjUGc0RWxPbWhFSzNoS0RBZFFPWDA0NHNKYlpmVUZMclZQcTVjbm9xdVg2b2VYVXJXZlNTVENWRmk1OFR4Z2ptcVNHa0ZrNlRrdUt0ank1NSt1bm4rVlAvOGQ4bkZkanVBcnRwNXVSd2diS1M2aE8zNzV4aE9rWGN1MUNwZ3N0ZGM3RmEyMUpDY2hOQW9VMXpwVk9icnNzb1JRd2VueEl5MDl5cXF5WkwwaFdxYVJ2MFVtQVhJcFRtaHZiSlkyeVBTSUx0Rk1pbEVsSzd6bWNmVzVGRjA2ZHEwWkF5emdqZS9lNUhFY3FpdFdVaEJVSlZxcGFjUEhqQ3ozLzZkWDdxWjEva3ZROHZXUTRTWndXU3htaXRJblBRTHhCU3NCMG5ZaklzWGMvVHJMbDVmOGY3dnZTZERBZXZrV3NFbzRrZWhwWGhnWWV2bzdSanM1czV2bmFJUWpHSDFOSnNsR2hteXd4SWcwK1ZGQ0pXdDR6MlllaFFybUczYW1scFlrNDNrOHo5WGVYS2dXTlpEUE9jOTluTit6QUxJZkFoVVFyRWxKbENKSmZDSTZlSHVHUE5NOCsrekpkLzQ1ZnlCLzdNSHlHckZhKy8vQmxzWGJmSjNIb0VacFpMMXd3MHQyOXlJUjVrT0x6T1I3LyttM2piMjU3aWozLzcvNVZYWHJqSkk0OCswTFRBZ0xXR0VBTTF4cjNFcUpKcnBoT1ZJZ1FoWkpTQXF1dWIzTk1RRTFJMURxeVBpVmd6Vm5XRU5KTnpadFUxOU5EcjU1ZElKVGt3dW9FNGFzWG16RzRYMll3VGZXY29tOVJHb0xZWlowYy9JNnFpTXdwWllZejc0cVpHckpVY0xBWXV0enVHcmtYVStwaVFWVE9IaU5hYVliQXRIMXFBMXExWTMvcklvc3V3NTZBMkNiUWlWOGt1TkF5WnFxSVp6YktrN29VUndRZUthdEJ2TFJXcnpvR29LS1VSYzlnM3p4cnE1K3FSNFlXYmEvN2p2LzN6L01ZdmU1SjNQclpDYU1ueHNtUDIrZi9OMW45RzI1YWQ1M25nTStNS081eDRjK1VJRkFJTGhVZ0FCRUdBSUFoUUpCZ1ZxVHhhdGtKTExTcmFrbHFXYkxsTnQ0YkdzR1Rab2dKbFVZbFdaSkFJa1FKQUVqa1hxZ3BWUU9XcW05TkpPNnd3WS8rWUczQTMxVC93RC9mV3ZlZnV2ZGFjMy9lK3owT0tpZG9ZWkFLVk14ZDJpeG9TM3lESnJJOUdsa1BQem15Q0FZWXU0aDBnRTQzU0VFc1piZXdUNjlYSTJIc1l5cnMvUjcrNTZDWjhjRlJWeTd5ZEVQM0Fzdk9FRkRGUzAyb0RxcUNQU290NnhCaEZaV3E4OS9SdVFPWnZaVWNWNDRubnhBWDZkZi8vcncyZEVZREtnaEF5Q1kzUkZTa25SSllGMUNneVVsaWt5cVFrOEVrZ1JjblhsWnhDSnNUTm1MTzhEaEViK0s1ekFkY05yTHVPazM2a2twRkpLMGt4MDNXbHFWTXJ5ZEo1Vmt1b0p3WWxZWFh6aEc0ZHVlUE1ER3NWUXovZ1hLQ3VpN1l1QjQ4MmlvcU5JbWhEd2s4NUVZSkFEQTZaTlZJclZxc1JrVXN6R3hRcGFxS0EyZFN3SGlRaHdPbTlLWk8yNHZsYnQrajdrVWxsU0NLeEhnWkdMN0JXSWxqUzFCS1pxNUpIOUFXdTNZMGo2OTZobE1iS2xub3lvVnN2ZWU3RnEvUU96dTRYOEcwUVlIVkdab2tXaXBnaTNSQUlNUmIwVGRQZ1hNWUl6WHhiMGE4N2pvOGpRNHBZcTNIZlVndnRKTnJHWWtRbVMwMlREZDNhMHpTU3YvSS8vMWU4L1lQZngrV0xMN0c2K1Eza2NJSnE1b3lkcDE4dm9HMW9waVc4TE1aRHRJTDFnU1J0bmVPUC9iVS93OWhIL3VVLy9pV2EzUm1DVkZ5Z1NiSUpINVJHcnV1eGpTU216S3hWekNjMVBtZW1VODNSY3VDb1c2S05wZThFeGhnbWMvdHRmRkJ3dnRUV2pTWEd4TXAxS0NOUkttTVZrRFR0SkZQWEpTTjErM2pGTzg0OXlIeTJ6NnNYWCtiOHFTbm5UcitXMUkzME9oRDJ6ckRzQmZmTzRlNHpHaTFqUVh2a0d1L1dDR25RWWtJZmxsaXJxSVNpR3dVaENyNzR1Vyt5dkhlUGsrT2VkbExqaHhHZkZkZVBscno4d25XbWJWdkEyMW1WSEdyV1RDcVBsTEZjZmt4NVNLV3NHYm9TaDBpNmNMYTBFbGhqV2E3V3JFT2trcnBnbjFLbXFodVMxRlFWcEJSQVpZSXZFeWxKQVgvSFlNa0t0RW8wcldGcnE4RzVoQ0F3bnlqNklhTnlDV3RudDBabGk5V0s1V3BBbWtDM1NOUjFoWlRsd1pmSWpFTkNVcVpGcXRWa3BYRGR5THdweXM1RmlBZ01FOVdpSmdQSHk0Rjc3dDNqOU5rcFgvcjhpN2grcEo3VU5Ncnkrb2RPOGZtdlhlYnhyMTNpTys2ZjhjTExTejc3aFZmNFBULzJHTGRldVVVbEM2ZnY4T3FTMTd4NWozZTk5eUgrL3M5K21ydmFmY1krMEh1SFZucGpZQkprRkNsRStqUVNhMHQwa2VnRnBsTGxvcEtMc2xLcFdOU1RSbUdOb1JzY040K1daQ1BKUGpNTWNHWnJsN3FTck9MSXhZczMrYUh2ZXhOZmZ1SWl6ejUzbGZ2dVBJY1JaWjBhZzZUM1BWSW9hcWt4VXBPdFI2bkVQLzkzWDJNeGxHZmtwblpEMlB6dnZyMkdCKzZjRTNNdUxVWkE1b3BPYU1oZ1ZIbngrQ0JST2pPUnhjRXVOVlM1UWswMXBsWXNyaSs0ZG5UTVkvVnBEbzlXVEhjOHJXekpuY1AzYTNRejV3LytudmZ3MC8rdmovTGlwUU11bko3VFZoVk5wVm1QUGNGRmtKa1FERXBxVG0zWHZIanRrTi80aDUrbkZkQks2T1AvWlI2eHdHdnZuNk5ydzhHaW83V0syMkZrOUlLMnRzUmN3TlBHV2tJWUdGellGSEk4eGhxMDFKaGFNS2sxdHFwWW5Bd3NEazlJSWpNRVI0MmlOWE5pcVN3Z1JHWldOL2hWS05Nc0ZKVlIxTmFBRUlWTEtSV3p4cUFFck1hK29MdHl5OW45UGM2ZjNXWmNEYlN5WUd4TVpaQW81bnRiUFB1RkcvaHU0T0VMNTFHbXZJOHFTY0dHaUFLQlQ1c00vUmpLZ2ZUVW5tRngxUE81WDMrYXc1TVRjQWtoSzRLQXlncWVmK1lHeHlkcmRtWlRoSXQwYnFTcUxGbVVLYmdSNVIxWlY1YTIzZ1dwaWFNbnU0QkxFUnMzNzlSSUlSa2tFRG14R0FmV3R3ZmFXckUvcTdsNmUxa2F6RXJnUThHME5OWXlONHE5ZWVIaCtneUhsMi95Nkx1L2d6L3kxLzhVZlJUMEI4K3hMYStVNW1nMlZLeFFLakV4RGNQZ0lIZHNOUmxjNVBLbGp0MEw5L0NYL3BjL3gzLzNSLzhHMTI4ZU10K2FsWGVORmZpWUVVclNXa3RQZVkrcG5QRTU0b0hnUnFRV3pPMkUxVGlVUzZpVkxMb3lpYklZYWxteERsMHBybGdOMFRPcExNS1VndWJnQTNQVnNOVlkxb2RydXM3VHR5TTNENjZ5T0Z3VXZxeGlZMjZKK0Y2Z1JNYUl3dHBOT1RGcldrTHd4SlNKR3pPTDJzUWN0bWV6elJvNWwzUEk1Z3d6eGtpS2dhNGJrYUo4SDMxSWFLMEwxa1pLck5RTUlaQTNLc0cxQzJRQmpaUzRFSEhSWXlSb29aaldMWTBOYkRjVko1MmpHd2JHRUpGSmNucTc0V2c1OE04KzlnM2UvWWJ6dk8yaDAreHV3YlRWM0Zwa2RBZ0VLMWozSS9QSmxMcHRTQ1NjY3l6N3lIb01oYWRjVzlhRDQzQ3hSaHNCWXJxaEtVZ3FVekdNanNYQkdwbUxLbFFJQ0RGU213cWlSRVNKY3oxQ0NLd3hxQmhCcEZMQWpMa1VmU2trbUF5TXp0RzVucWFhNHNlQkxFRWFTMVZyNURnUWZDb1J4UCtmTm5RdWg1ZVVGZU1RQ040RG5rcVhYR0JJSlorb1VRUlhQbUJhYVZJS0tKV0pVWUFFcVRKK1RDaWxTdDRqT1NZMUJaWmRUZEJTTWZScjJxMGFVc1hKWWl4Znd1UWhGVFpSaklMOStaelJPUTZYcTBKR3o0TG9BbjdzLzY4Ymdnb2dNcFdwa0VqV0VacXFKcEx3TGlOeWNhMUs1YWxyemRoQkNvbG1ybWp0aEg1dzlOMGFMZXZTSHE1NzdydXd3M3pXRnQ5aTc1blBUTW5XREs2c2VJTmd0UnFaVnBiZEhjaVZvbDk2VnAxbmRiSkNDb25WbG1tcjJkdWVjdW42YlY2NGRCdWpvYktHT0FyRzVEQzJacjEyYUNOb1c4TmlPWkp5bWZDRUZKRktJeWtOTmF1bXJQdWVKa1lhSXhGYWtuM0NqeGtqTTFwRlpOYk02NWJESzFmNS9YLzhSM24vVDN5WUo1OTRpbG0rZ25RcmhLd0t3c0ZhdG14eDd2cVVVZFlpdE9iNDhEcDlmd1c5ZFMvK2pudjVBMy91RC9QcWl5L3orSmVmeDJGTDVWN0lrc1Vpb1ZSaCtQbmttRFFOL1RpeUhrWkdEMjVpR1VMR09haEZadEpveHNGQnJnbXByQVNpODBRQnBwa2lqVVpHTmdZRGlWV1dJQkpHT3JLV0RGS1RrbVJuZHd2eWlKT0NSbFlJWDZaSGNtWTRQTzVaTHRkY09GMVRtUW1rVFBCcnJLelF4aUJRa0NDcUVnS1hTbUlyU1IwRmYvTnZmd0xJK0NTb2JXWUlsRlZYZ05ON0ZYdHR4WHJoT0hXNnBldkwrbjNXYW53dUJ4WkJKTVFTMHBjSjJsbk5lcjBtcDR6em5uNGNVY0xRS3NFUVJ6cVhhWlRCRDQ2cEViUk5RK2VMV1dZeW05QTBGY1BRVXlsRGtncXBJaUVHMXV1QjJoUVR5OFRXbkN3anpnV3FMVVBYajZYWkhCUGRobHVteU9ncUluUlBYVTNJcVZ5b2N1M1FTcUNscFhNalpFOUswSG0zMFpJTEVJRSs5UXcrY0hDMDRpTS84RVlldkhlWFY1NDlwSE9lbDY0ZWNmcjBGbHJldzBkLzlXbXlnTDFweThGczVGT2ZmNG5mOFlPUHNoeEhLaEhadGpOV2pGeC84UVp2ZWZSZWZ2bkMwNndIUjJVZ3g0U1FhY01UbTlJWVRmYWVrOTV6WmxyalhVRElNZ2tKTVJWelVJYldhbFN0a1VyalkyVFMxcnp5d2hHM0Q5ZmNkV2JDOGNFeFZhMm9tcFpidDQ2NTRVZmVlT2NaL3RKUGZaaC85Vysvd05lZnZzN0IwWkoyV2hlTFNDb3NVV0ZLMkQ4bFRhVTE1MDQxbk5yWVYwcWpVQUlHcXpPTkxhdGJKUVZhQ0NwVnNwTkdhL294NG54WjV4b05UVldWcUUvMGpHT0FITEZWVWJJdFJzK1hIMytaUC9CamIyR3hHRmdkTFZFb2RDN1JsbHVYRnJ6OXNZZjQ2Mys1NGhkKzZTczg4Y3hGcEZLYzJkMW16Sjd0eGhLQXdTVnFFOGxaY25abnd2YWtPSW1ObGh0L2J0NjRtUlB6cGk0NElnckhyeHM5UmdvcUpRbTVIS0tWekNpaFNha01FcXhXU0ZFZzBFSnBVZ1NYSlhLaStSYU5iWEhVTTlHR013SU1ZWU5ROFdoYVd0UHcwbzBWNTNlcVVxZ0I3QWJ4RWpjWk5DMTFXZnVKaE9zNnpNNmN5ZTZjdkJoSVdaRlZjU0FuUE5OcHhiV2JhMGpRVk9WemtIS2hialNpckl4SFBENFZzMDVyaTk3dHZqdDIrZHBUbC9uSTcvNEhUQ3VGTWdVRUxMTGFyQ2d6OTkrOXh4Mm5ad3hkS08xZnEwc3BSQ3VrVUt6OWlCWVpuY3VCTkNCeHpoWGNISm5SSjFBS1MwU2tUTTZaNkJOUlpCYnJOUmQyRkx2em1zWHRFZWNDazlxeTB6Yk1hZ09xWkJnUDF3TlhYN25PcWQwSnYvK24vaUJTR201ZGVvcDRmQVdEWjc1L25pdzBxZ3FBWm93RmZxMzFOamxGMHVvU1daOXdhZW01L3cxdjVDZi85Ty9qZi95cHY4bDhOa1VyUlFvQmtpUkpNRVlnb3l3bFV5R0lJcElRYUZPUkNFU1pRV2JXZlkvVkVpTXJzb3BvWVlvZjJrV0dNVElPaC9qb21iVXRkVld6WEJjelRjNlpiamtXbzFxSTNEdzQ1RmEzVFpDQWlBdytzSldudEJaOEdHanRGbUpUdURWaVNrb1JuMkZyMXBBU2pJTXJuK3UwdWZSS1RVd0RTRWtNTUFaSGx1VkEzL2U1dUpldFJxbk1YZ3FZVklwdDhWdnlFRUU1TklvSXVkamV0Q3dvdTVneTFrcjg2R2lhTW1BeVR0STBOVG9FUmhjSU1URnBGS05QL1BvVFYxbjNrUjkreDkxczFab3p1eE5PVm9GeFRFemJ0b0RSWTBDbnhHcTVadEpVN014YmtJYXF0Z3crVUJ0TklqRjJBOU5teXRJN2NvbzB6UnovcmJ5bUtrZmtFREtta2tTVjZjYVJrRFJOcFFyZ1hFakdQR0swd2FCS1BFQjZyTENiOTNWUDJ6VFUxdUNIZ05DYUlVVlVYYkdMWUg5L0IyMnUvdGJESW5TdUovaVJJRFJLR3JRUlJaV1hDdW1jckRjSEdvOG1JckpFQ2tsVktienpaVVdVQmJJcU4yczNacFMwS09YS0FTZURTQXBqRFRFSWxzNFJDZmdZOENsamRWazExTFhFTzBmeWlhcXFHS05Ia0lpKzRFbGlUS1doaFdCYVRTRkx1ckVyV3FOR0VDUElyR2thaTFJRkFTUjBSYTVHTUlVcDVMeERtc3pNVnFSWXM0cU9NN3NUM3ZEZ1dicmx3S3FEeEViUGxTWExZYUMyTFNwbVVvd2NyZGFGTXpocnFMVkN0dENQa0laQXpKbTd6bTFoZ3VmSlp5NXkrWEJSSm5kZElHYUZHYUd5a2FoR2xMQzRQaU1FVkFyaUtGajRrZmxFWXFRaUpJOHlrWjJxcGw5b3VqNmlWUWFWU01JeXBvaFVnbjQ5NEYzaWpudlA4YUVmL203NmRZY050K21YdDZsVmhSR1JJYVp5UzJrMDJoU25wQnM2VUJyVHpJcGVLZDFpZVRUaHpGMTM4NzAvOG4xODQydXZvcG9hSHh5UW1WUTFRa1g2RUVoQnN4Z2NRWXg0RnpES0VtSnhoVW9KS1VXSUV0MW9PdWNZQjRQV0U1UXFEMmZkdEp3TWE0eVVuTnJiSWtuQjJCZkxqN0laTUxoVURqNlRpZUhVN2hiZDJoRlRvaGFhenE4Sk1ySFRUZ2hqUVpJZ0RPc0IybHBnbEdVWUhhVm5rMUFpVTVrSnJpdWZpVms5WlhCTDVsdGxLajY0VEtYVkpnOVhrQjFDbEJLQ1lkT2ZVaG1WRTRNVHVBaWtIcXN6bFczSkxxS1VMaFBDa0FvNkp4YVZVaHhMdTFBcHhSQTlYY2lNYmtBeDBnMEQ2MjVFVW93UktSV2NmTXdSYXdvcG9Pc0xRTmFobUZqTGtIeGhKS3BpSzRxeEFHMG5rNGI1cENha2tlZzFwaHJvKzU2VWlvV2lIUFhMd1RqaEMwTVRUUklaa1RYcmNkaE14UXdnV2E0OSs2Y25mTWVqNS9BbmpsUFRtbk83Yy9iUGRNeTNOVi8vK2xWKzZlUGY0STV6YzJKVW5OcHUrY2JYci9ERXM5ZTQ3NEZ6dlBLTjYzZ2l1L01wdlhNOGVPY1ozdlBPQi9pMy8rWXJuRHUvalZGNnN3VklhR1ZZK2JGTVNVTWkrNElUa2Jab0NzMEdLRno0cVdwVGloZ0lFWXlVM0Q0WitJZi81SlA4N3ovOTIxa0Z6NjNMQzI3ZnZJbFZOZk5welN2UFhlWE0vaTUvNGlmZnkvTTNsM3o5bTVmNCt0ZGY0ZkxWQlNmSEF5a0ZocnBGcW5KcjEwcXlNMmxMT1VSNHlCVXhSU3lLcHRGa2tXbDB5ZjRzeHBPQ0FKR0NrQXIyeWRwaXhBRko1OGJOd1UwaE4zay9FcVFSN2oyM3k1ZWV1TXl2ZitVRmZ1UjlyK1dUdi9sc3lRMjJKVjN2VjU3TDM3ek9JdytkNVlHLytOdjR5dGRlNVpWbmIvRHlxN2Q1K1pWclhMN2RnWklJR3dudGhFcHJLanNCU3JiMTJ4cEtVU1k5UlpVcjBCSWFFaWtMcG5WTnp1V0FLNVJDVWZMalJoYUhmTmkwZkxVd25IUU9JVWRVMVhDNDZvaTVISVlFR2FTazk1NHdsRU9XTWVXd21YTmtxMUZjUEJRc3VzRE92T0JFS3FYUVZUSDJyTlk5WGxjSUpUQkNjN3pvT1hWV01adFl1c1dBclNBcFRaU2daV0hzRGIyanJoUXhlbVNXdUpTS3BsQW9oSlFnTWp2YmM3enpqRzRraVVnY0pQTzJJZTVtak5WSUpWbXZCNVFzM0QrUk16bEJOM2lVTGhheW5FcEd6N3RBVld1VVZmUXBzQjRXNkw3Qk5CVnl3N3h0SnhXcDZ4bGNJS295T1FWbzZnWWh5NlRuMXRHU25mbUVlMC92NFVMa3pNNFU1d0xYRGhiMElXNUV1WUp4dWVSZHYrY0h1UGUxajNIajh2TVlmNHNBakVLejdrK3dka3JkYklxZmZnVHBpZGtRUWtSS2pRMUxaTlZ4ODlxSzczemZkL0cyZDMyTUo3L3dESHVuZHBBYm52TGE5U0FOU2lxa0VVVmRKd1dFaURFMVdaY0lXa3l3NmpxbWphRzJsa1pMakNuUktPY1RQanZJYWtOeGtJemp5R0xWbFl1UlN1VVpJeUg3eUtJYnVYNXRTUmdqeG9DU3RxZ09Kelc5TDBpZUVFSkI1dVdSeGxxVUtFYXZ5aXBTTEh6Z3Vpb1p2TkdWUFBrd0RxUWtrVHBEQklsbVVrbGNEQXdwb1NRMHRkbDRwQ1BaRit0TlZxSmtVN05ENWx5NHRKS053U1pqck9ENEpKWnRnUzJkZGkxRktacUdncDZKU1RDdEt5b1QrZklMTnhoRDRQdmZjaS9iVTRPZUtXSnFPZXhHMW9zbGpiV2tETmNPVHJqM3pHbDBwZW1qWjlrVlpIaGRHU29ybVZTS3hjcHhmTFNpcmpUSDNacW1yb3E1UldTVUtmemhrQVZhVlZSMnhJY2U1NXR2Q3dGU0twTldRVGtybEttN3hGckJwTjVDYnQ3SGlvVElqaGdIdWlFeXJqZDlqdnhiMERrSXdhU1pNcHUxckZJdTN1V2trYnE0QVVPVXRJMUU1RXpuTW9sUW9NOUo0NXhIeVJKU0dWeVBzUzFLYTVTSEdCVWhyTWdoUWVPeHV6M3B1Y2lReWcwMzVYSzRpNmswbDZVcTBPcURrNzVrbzNJaWhraU1rSXhoT1RpV0s4KzZnM0dNcU9qUVJxRk1xVjJQd2FPRUpGTGNuRkFlZmpvNG1qb1JraXFIVFR4YUtpcFQ0UUpjT2xqdytnZk84c0NGODl4YWREeDc4UW9wU1dJcTJSMHBERnFWdFV5S2dhcTJHSzA0T2w3amZhUnVETlpxVGx4UEl4SjNudG5teFZldjg3bW5YdVZnR1prM0piZFMxWkxrSXpsWHpDY1RRc2dFWDBiMVNucGFPU0hrVUpyQ29rd3lzOGliU1Y0WnkxdTVhZVdsaEk4U3F3WEdDSzVmWHZPKzMvWTlYTGpuYnE2ODhnd3FuS0NhN2RJQzIyUTJrSm5SZHd5RFFEandlYVNaMWxUTUNYNUE1VFU2THJsNTQ1ZzdYM01YKzNmdGNmdldFZGFZemNQWUlaSWdSOEY2N0pGWS9BaTlpK2hhSVVnc2UwZXR5NWdmSmVrSGowQ3k3aHlaUkI4Y0xzRjRjb1F3eGZtNzdIcTJkMmRFcndqUkZZKzFyREN5WkNNclV6R2IxMWpUTW0wYWZIWUlyVG0xdTh2ZTZXMXVIQzBZK29HbWxoaWRObTNVd2tYTE9TSTIxYUhSUmFxcVpBc3ptYTEyd2xZclNOblQ5UUdSTFhVTklRWEVySUROWjVNcFhiZGtjZEpodEtMemdjRjdZZ1NqTW0xVHNFSStSYkxSdUhWSGJXdVc0Uml0NThqYTRFK09hYkEweGxKWE5URmxoQUVYaThHZ3RSSXBBcXQrcExZbExCNWlKR0JJU1NPRm83RTFrOFlnWk1ZSE9MOXZDVUVWSGVDTzVaVWJLM0x2YWFxU2tmTytvN0VOVVNZVzY2R1lYWXhFWjB2ZVRPZXRGdFJLMGJzUzNiQzZZUWc5YXpjZzVCVGZaOTczM3Z1eHJlWEtLOGRZS1RGRFQ5dFkzdlMyKy9rN2YrK1RyRmFCN1hza3gvM0lrQkszVjVsZi85UUwvTVUvK2QxY2V1RUd3eGl3bGNIN3dOSDFCZTk5MSt2NXpHKzhTSFNCdXJYMGd5T1JxZXlFMFkzVXVtWmVhWmJyRlpYUkdBRldsUnduT1JGemlXMDB0a0VnaURHZ0pKdy9YL01MbjNpUmMzLzNZL3oxLytZSG1WWTNlZndyUnhnN0oyV0JpSUdYWDdxQlVaSTc3OW5ud2U5L2xBKys1M1hjdUg3SXBhdEgzTGkxNE9MVlcxeTd1dVR5N1dQOEVLaE1ROTFvNnJvY0huTXkrT0NJb2dDYmh6QUNndHJXK0poUXloYWJDeG1oSXBOYVkweUY4MjV6Q004SVkrbjZSQmdqV1RpYXBtYmFXdjdTMy9nb08vT0tEL3o0Mi9qbVU3YzR1SGk3R0ZGVUppYkpLODlkUmUvV2ZPZmI3dU45NzNzanQwNFdYSHp4R3RldkhuTndZOFdybDI5eStlSVIzV3BnM2ZjWWE1bFBXNHcxeFdsY0hvaE0yNFlRQTkwd2dpaG1rS2xSeEUwTE5LYUkzVGkyZlhCVXBpRW5WellMS0xiYUd1K0h3cnRMc0RweENDV3BSY0tjYm5IcnlHTFpRMTAyVlNrWG4zY1dBcVVVTjFhTzNhbWwxYks0MXFNZ2hrU2p5N1FrQ28yUW10WFlzN1Uxb1JXWm8zRWs2MXphblM1Z0dvTVFDZWtDYmR1Z0sxdTRmR011alY4TlVndUUxUXpqUUF5SnBDUWhKclJSbk50dTJadFYrQlRMWjJoYTAvbWVpYW5SV2hOekxJeFVyVWdiQnFLMkd1bGpnVXFuWEZTRVNSQkNRZ3FCRnByUmVXSlhicGExMGxoankrV1pqS2JRUkxTMHFMcGs3cWZXVUU5YmpwWTlSMTNQc2g4M3VUcEo5QUZWdDd6eDdZL2cvWkxjWHlHNXlNN2VhYVQwck5jcnhwRElLWkRpaVBNZ2lWaTFSaXFKMGdYUEpjTUJZMi9aUDNVM2o3N3p6WHo4UDMyUjdWTTdwV25yRTYydGkrNDNSWlNTeEkwUFdPdUMrbG12UFZKRUpuVmRqRVB4VzZXbm91WHpNUlRlb3JKb1haT2xMMWFRME9PeSsvYmtPQk54ZldBOXd1blRwN2puN0dtdTNqaEFaRUZWcVUwRUlqT08zOW8yYUt3b0dqK1hJaUU0Mm5wYW9sUENneXcrZGVmTHdYemVUdEZHazJPNW1JOCs0R1BFS0lGVTRJS25Vb2EycnNsWk1BNGVMUVZhUzRZWVVVSWdVWFN1bzlFdFdxcGk0TW1KWVF3Z1BUNUpMSXFKTGR2T2tCSWlXeTRkZUZKT2JEV2x2N0V6cmZqYVN3ZGNPMWp6QTIrN2g0ZnYzbVp2U3hLajROSkpRR0pBU3VhVEtTa0xqcnVCbkNHNUFFb2dsUUpmd08vWXdIUnE2SWZBTUhpcUJDb1dXUW9wRjQ3elp2b3Z4YmN3UnlCMFJxSXh4aEpjcEhjT3BSV2tRQ3llUjNJTkNMczVnOFR5YjJFTkN6K3lPRnFWYWJtVXY0V3pLTXVoS0NCQmxHeU9GS0ljdG5TcDJtZVJTYm5JMUVPVVpSMjhtYnhwVlg1ZFZUV0VJSWdpWVN1Sjc4b2ZMTWNFUVNJeGFCVktqRlFZU0JMWGx3QnJRcEtUeElXUkdCSWg2d0tXOUQyM1ZvYWo0d1hFaUkrUnRnRmxOSmlJcVF6a0JxZFBNRnJTR0V0djNJWWpwd2t1WXl2SVdVQVNaYnhzSmlReXkrVll2S01KM3ZMYXV4RGE4T3psSTI3ZVhqT1pWRENXWTRWV21zSDNSY2NtQlNKSnN0TllKUmpqaXFPbEo0eUJKQUxmOGVielhMOTl5Q2UvOUF5UFAzZnoyMStzY3RCVEJCTVpmQ1NzY21tVlNZTXl0amh3eWZnK01ZYUV0cVhkV2xyVkF0TW8ybW5Kd2Zpa0VVR2dGWXdqcEJoWkR6RGRtekhaUGtNN2ZaN1ZTY2xQU20zSk5tQ3lJbWVKcUZxQ2Q2V2RXTTJKS1hCMGZFamZleXBic1QrNWpnaVcyYzRXMDUyV2IzN3pNcWF0YVkzQm1JMnJWeGlFOUtReDBzZmlJSTB4UTQ0czFwNXFYdEZVcW1ReGZHSi9aNHJ6Z1pQVmt1QVN5M0VrTUhMUDl1bHltQjBpNjlWQXJTV241dHVjdUo0Y3h4S3Fkb0dUdmlQRlJLVXpTcGEyc0xFS05UaTI5cVlNUW1EUWFKR1pibHFRWFhCb0xhajRWZ05NYmZKWUpZZmlvcU9xSkJKSmEyZmN6aU0zamdhc2tXeFA2cEtoMmVndkVUQzZVTmhqSkJxak1hMHFhNXBVSHR5bXFyQldNd3hGMzVSeXdtZUtJOXNxU0pvc1llMEhqTElvV3dEWWxUTDROQ0pVeVFNUHc0Q1FzbkFvbFNKYlNmQUI3ejFPYnlhNG9SQlFLMTF3VGE3UDZDaW90V1MxNnRCMVc2QzVsS0IvVEJrOFpKbkt0S1Q4Rk1ncDRnbU1JVEtHRWF1S3FTS2x4TkZ5emY1ZXkvdmVkaC8rWk1TRXlESVV2TW1kRjNicCtzQW5QL01pcDdZRXRheVp6elVaVGQrUGZQVFhudWFIMy84QXAwL3RzT284dXBwaGZlYkdsVU1lZU9NRHZPVnREL0x4Ly93RTI3TnBJUmZrVEF3alJJV3ROSDNveXN0ZWxZMUVKU1c5RCtpbXhpMEMxcG95cFhBQ2tTV2pLeVdZMTkrN3hkLy9QNzdFOVdzTC9zVHZmUnMvOEVOdjVXRFJjL25TQWNQeEdpRThRNWJjdkhZTVZ6eTJNY3dxeTV0ZmN4ZjFteXhaUkU1Y3orWExoMXcvR0xoK2E4SEZsMjd5alJldXNGd2VjLzdVUGp2Yk0wWmZHdk5TVkZpaEVMSlFKSkxZckRSRkNiKzNUVjBNTXk2VEl2ak5xamZIZ0pJU1V6WGttTG5qekJhdlhEbmh2LzZwZjgyZmZ1bUUzL25qNytEK0I4NXkrZHB0YnIxNGhUUkdjcVhKeThDelgzMlprM0hGcVRObnVPZjBMcTk3eloybGhESDJITncrNG5nZGVlYXBpMXk5ZE1EaDdZN3IxeGNjbndSbXM1YmFLa0pNREtIa3UydXJVS29jNUlSUWJGbkY2TWN5M1JlRmF0RU5Bd0pCM2FvQ0dKWUpiU1prdDJCN1ZwWGZvN0pZSmJCVGc1alUwRVRxR3NUbUFOSTJtblVmdVdPNzRkWERpTStLL2RyZ1JHbUtLNjB3U2hHRFF1ZU1WaGxyVk1ISXBFaWZBa1lxNnVtVTJQWEVXbEJOR3NpaWxQV3lZSXpmZ3ZlWFo1UUxFWkV6Z3hzMkdhNm14REJTd0NqRGJOWVFRMlFjSEhWdE9WZ1ZPSDFyTEZscHRDNHU2eEFoaE0xMzNscUVoRlcveHZ0QVRKa2NCQzRKZ2lwVG1KUXpiV1VKNlZzbGw3THVMKzFqd1dSYXN6ZWRjYkphY3ZIR1FTRmJDRUdqRmJKdDZQMklqNW11YzB5M0pweTlzSWZyYjVQR1F3QldpeFhrRVZYVmFHa1pnOFA1NGcxMktaSlZSRVpQN0NOYWFheE8ySjA1U3NQWk84OVNOWFdKcjJpRjFVVUJsNUlreVloM2pxWXVpcitVSlVKbWpOWVlXU1pSUWpTSVhoR3l3eVhINEQweWJ3NG5VdUtDWXdpZWlTNGE0Qmd5TGlicVNxRlRRVUp0N1J2cXFXQjNaMG8zT3VaTnd6Z2t4aEJvdFNJbVJ5VnJLbU1aZlhuZTlPTWFxUVF1REl5aHhGWkM2bGoyanQzNWpQbFUwL1dlbkh3cDJVSjUvc1pRWkNOc3BvV2lHRjljOEdWelNQbnVxaWhRR1dMV1dBVktsbWllTlFvcE5ldCtMUElRVStKdGxhNFFNaGVwaG96c3p4S0pTQWdiQkZjdVphWkY1L2huSC84bTczdkwzYnp2VFhkd2FxWVJhWmRucngwd3FTdG03WXp1MnhjRVZXZ2MyYUVwMGEzalk0OHltYjJ0T1o0Rjg1bGg4SjRVUWNwQ2U5SFNsc3huQ0tTVUVCVGhoMlNqNkIxRDZUaElRZkorbzRNVVpDeWpEOVFidXd4QzQ5Y1o0YUJTaXJwdU5qZzQvMXNLTGpuUitZNStER1NwMGFiR0dGWEdyZHFRYzBBaUNVSnNtRVVPRndKV1diVE1JQnd4Q1pTcXlXcmNCQ08vUmVMZnNJb1dtWU9ManVVeXNyTmRKbk5yTnhSc0FRb2ZQRkE0UVRGQzIweElVdUM4UkdWSmxRV3p5WXlkV1ZWNGp5NVJWNXFjRTM3c3FWU0Zrb0tjRkZ0dGkxQ1p3V2t3UFZtVjFYU2xMWlZSWmMyZG9KMFlEbTUyUFBhRzAzejRQUTh6ZGgydlhybk4vdlljcFNNdUJoS0prOFVDWStzQ2prVXlCa1VLQTdWVk5Nb2lUZVJrZEx6MnJ2TlVRdkhTbFNzOGQvV1E2d2VPeVZSdDNKY0trc2NvU2Q5N21sb2hwU2RKd1ZaVFkxVEpZNDBCbHFzZWc4VG93cnRxRzF1Y3EwTmdOcHRndENYamFScEQxMFZXWFdBTUlGV0g1MW5jK2hoM0VsSFRnQmdjZ29pUWxqZ200dFFneFlqMGdqQUV4dVR4M3RQSUNxbHIzRm93UDJWd3FXUFo5d2drczFvaktBMnNtRlR4VUN1Rm5oUU9WTXpRQjA5ak5OTzZ4b1dBc1pwMTUxRkNnSXhvVzN6V0tXVVczUW5uOWs3VFZoTk1WWkF6V21xMGhtRVlrVWlzMVJzeHZDTDRpSktCWEFsaW5jbmVNYWtuSksyWTdyWTgrOUoxamhjcjl1eUV0UTlZVlh5aFdpbDZGMGtabEl3b0RHbkQwOUxVdUJoUXFyRDlkQlhZbnBaMXB5aHdPYlRRaE9CUVdpQlNKSkhZbWt3WXZDT0VWRlJkR1lRcWJEV2xNamxyMXVPYXdSZUR4Qmc2WnZNYU4yb0dOekN0Sk5rV2wzUVNDUjg4S2MxTGRrYkxzcTdXaGNHWlk2QnBMZXUxSW51QmJNdUVxNjRyMXNPSzNnVzAxRWlobVRRd3FUVXhTdnF4cDYwc0xqcGlLaG9wTFV1K3g4V3hlTCtsSUkyaXNPaFNhUjZHVUw3bk8rMmNWdzl2OC80ZitBNGV2T2NzTDEyK3hmNVdTendlT1lxQjNidjIrT1NYcnZMNDEyL3htdnNueEpRSUpMU0UrOC92OElXbnJ2UHNTeWY4NklmZnhHOSs1aGxZbnJBN2J6bFlaNGJrZWVkNzd1R1R2LzRrNjZIa2FWSVdqSEVvVFZ3aWxiVk1UTTBRSEowTFJDMFFVdE1QbmlHVkxCRVJWc09TMnJhTVE2Q3BLclpPMStTVStYZS8raXlmK1BRTC9NUkgzc0NIM3ZjSWo3eitEcllxUXhyaDVyVUZSOTJhTkVwaTlIVER3TWxKaDFHV0xCU3pYY3NqOTkvQkk2KzNHSlZaM09xNWRMTGc2ODljNWN1ZmY0bVhYcjVPTlJXMDB3YVRZVXkrS0RiTGZibW9VcFZGS2NGcVhVTGlVaW1VTmd6OUFKU3lVb3E1dEd5bFlGNVpIcjV6bHlkZlBlQ25mdnBYK2ZlLytGVis0c2Zmem5lOTV5RmUrNWI3TWRxd0dBWVdCeU9Icjk1a0ZUMnVDNnppaXNWaUlLZUUzSzFvYXN0MHkzTFh3Mi9HNUl4em1Zc3ZIZkNGejc3SVY3LzBFZ2UzMW15Zm1oS0Z4QU1pUmlxakVibzhlenJuc0VveGF5d3J2MkxTTk1TUU9GbDUxbU9pVm9tMUs1b3lvdzFiMnczbnpzenBmRVlxUVRqcDBaV20zWjJ4dldPcHJLS3hwcXlOcytmOFRvV0xjTlFIN2ppbFlQRGxjeWsya1EycjhkRXhPSThTQlF0VnoydWFlWVVZRTlKS0ZEVnBsb2srYzNEUUVWSW8rc0NZV2NlQUZvSldLcVFxb0d3bFpWa2Zoa0t3Q0VuZ2tvY2hsL2RPeXJoMVJ3aWl2RmRDdVpBNUh4QXhFNUlraEVCclRZRS9oMWdtTkZJUll5NUZtaUVnUThKWVNWT2JNczNLNWZrVlF4bVlOSldscWhUTDBYSHJhTUc2NzRsSURsY0RaK2NUVGs4cUxwK3NDa2UwVnB3YzlTZ3RNTllSMDBEZkI5em95QXB5OEtpK1ExVnJuTStrTExCR1VhdkN4cE5TSTBRa2hvRXhPRXdZUVl3b00yNk1NSkdtTGxCdTUwc0xYaUNSc2p4ck01R1FNajRFbEZTWXFrempsdjJhbklxU1ZDdEJQM1prd0doTEh3ZHlrcEEya08rY2tHaDhLTHBnb1d4UmRJN2xrRFdrQU5wZ3JHSzk4b3lqdzQyWlNUMUI2SXlMWXdIZEk1Q1VpV1lVSGJVdVBZSXkrWU4xM3lPb3NLcVkwQUtid2dkeHd3bk41SlNwamNGV3BkR2RrOENvTWpFYlE2U3BERzFsT0ZtdXFXMk5rcktRT1pTZ3JqVkdTOWJEWnBJb29hazFQa1dDRDB3cnplemNGc3QrNUhnMU1uaVBENlZRTXA5WVRqckhmL3o4cTZ6N2tSOTk1d05NNnBIelp6UldUVG51T3RDQzdHVTVXTXZFT0VhR3ZNYllxaFNOaHNqbC9naVA1OVQyRmk0blhPb1pIS1FjaVhFbzV6Q3ROd2pFU084N2pGUTBzdGw4cmt1UlVrbU5WUk84OTR3aGJGQjdHOGorWmlycFEvbk1haTN3MFJIQ2J6MHNTb21VRmxKWkhjcmdrRUtXazZ1Q2tIUXB2Y2lDRHNpVUtyMVdKUWh0VklWTG1VWFhJd2kwMXBZVmJvaGtLQmtwQTdZU3hHem9CODBnSERHT29DVEgzYWFtcnN2SjNWcU55SkZHVHhpRktLZGxZNm5icXRUaUUxaFRGRjNScDVJTmtpREVwc0dOUXFodnRUNGxNVk55VU1LUmhXRWNIWkZJanA1NUkvblJENzRWTzYxNC9NdVh1SGFyWjFwQkdIb2EyeEFTeEFoNVdLRmtYZElreXBBcEpIenZQRU5JUFBMZ09WNTczejVQUGZVeUwxNjd6VE92cm1tbmNnUDdGZ1V4VVdrQ21iRWZxVXhOMDliRkloQUN3VHNxM2FLVW9KcFVHN1JFSk1iQU1HNGE1MG5nZ2llTHNtcE5rZUlMSGlSQ1EzOXdDNU43UkpjNHViV2k2VFBSRDVpbXhudEgxNjJwdHh0c2JWQk9ra2JIYUJJNVpBS0JhdWtaWnkxMUhjbEhCNXdjbkxEMmdhMWNEdi9mQXJqSEZPakhUTDJaMkFveUlmVklPV2QvTnVPa1h4WW9NUVowNUdTOUxsZ1hXVURRbGFxSVhXUmxWaEF6bGRWTUpqV0NRSTZVRzNzMlFFUUt6NlNTbU5hQVZqUlZTeklSVTJXa3FrRFg2RW9pVkVJTFZmQVRJcUJRS0tFM3BoeE5PNjF3b1lDRVE4NFkweEo4V1RtbjNrTk1hTTIzYjE2UU1FSVJVc2E1Q0ZHamhDRkZRV1VVSVRuSWJTbWM2SW9ReXU5TDFvUnhWYnlkSXJNM2J3SEQyZzlrRW0wN1lZaUZ1aSswS1pZU3hlYnpXekFqWnFQUVNyR3N0eWVUb3NIS1dlSjl4RlkxUXBTSm1yUTFVUWc4bVNRMHRWV004WmpSZThpV0VEeFZFMmhNVzloYVdhRDFCQmM4M2VoSzdnVlJOZ0Nxc0ppREM5eHhic0w3UHZRUVhpaWFTWXVkd2ZscVJvVm5zclhGTC96eXg4aXBGQWM2MTZHVm9WRUdJUlJOSS9pMVQzMlRILy90YjZhcEJZdjFrdjJ6YzZvbFhILzVLcTkvN0Q1ZTkraGRmUFhMcjdDM1AwRUlnNUdHS0R4SzZUSXhqNUdjYmVFcmtndEVQemwwSlJBYVJ0OWpURVZJSHRRbWZ4WVRPMVBGZDl6ZmNPTXc4bmYreGRmNEp6Ly9OUjU3L1NuZThZNzdlT3RiSHVEK2MzdWN2MitQdHJZMGJjM29FcXZiSjl5OGZJdFY3K2w2UmU5N3d2VURqRlNJV3ZIdzNXZDR4NlAzOFpFZmZKU1BmK0liL0xOLzhVa09iaS9aM2Fud0lUT3RETXJBRUNMajBET2ROVFIyd3ZGNlRUYzZ0bVlUcEJTRWxFbERZbXV1UUNUaVVBUUR0YTJSS1hQUDJUbE5zK0NwRjI3eHBmL2hQL0RnbVlidmVQUDl2UFV0ZC9QSUl4ZTQ3NTRMUFB6MlhSN2JtWkJ6WW5IbEZyZFBlcm9VaU5seDZkcWE2eTk5ay9uZFp6aHpZYzZadlMwZWZjZjl2T1BkRC9QS2k0Zjg2Ly96czN6K2swK3p0VHRERzFsNGlvQWJROGtkYmxhR0twZU00dUFkVTF2VDFvTFJlNVl1NEdKR001UVNsVkJNNTFNbWt3NXZFakpidEpXMDB3YWxLc0pHbXJEcUlpbENRSEhQK1gyZWZlVWFCOGNqZTNOTENHbVQ2eXYvWDYwYXRBb2N4SExobWMxYnBsc1Q0akNBVGlCVmdadFBETlB0dGh5aVlvR0xDelk1OStCTFhNaVlNaDNhWks5aUtwTXVJU1F5cExMMmxoblhCV1NXU05OUVZhVzA0VGFHa3JUWktDaGRDa1BGd1R4Q3FxaUVJUHVBSnlPVnBLMHRTaFl5eGhneUNNbHNVcU5GdWZUMzNjRFJjbURlUW0wcnhoQnh3WEZqdFVab1JXTXRpNjc4YkQyQ2NSZ1pGMGRVcC9aWUwwZVczUWxXTjJnaENhc1JQUmNFUDVCUmVLWFFJWktNSmthQjFRcGFjSXMxMVhTQmlvZWMzTHlJaXhtaEpTRVZDbUFsSlVoZERETmFZRTJCZHdzQ2ZjeEVIOEd0c1ZJek1SYVhQVzRNaUt5cGRZMkxqaVRZY0huTDM5UEhqRGFsRENHRlpGbzFWRXB3Y3JKbWZleEp2cWRmd2RhR1o0anl4T3lSYUZJR2pVYVFHTWFSakNlbE1sQ3E5SXltTW5SOWg1U1NyZW1rNUhLRHBHazBJVlQwMFNOdGlUeTRJWkJ6b3RhS3RqWWs0dVl3TFRCV29xV21kNDRRSTRMeTJmVWhvWTFoYmd1WllmUWVxd3dwUjBST1NGWG9NRG1VVXM5a29taXNJRWFGbUZpV0E2eUhVSkEyS1pleWlSQjg0dkhySEMxR1B2eU9DN3p1cmpPNFpIRlhBcmVQMWpqZmx3dWxiWkE2c3g0ZFdVaWEyaUxKOUg2Rld3c09iL2N3aXFJd3pqQ01rYlVkTWFyQXQwTTJJREpTRlhOZEV1Vno1bE5FeUZBSU1Ea2hKUlRYZ2lhR1lrMFNzcGlQQ0xEc1IwSUttNXl6L0MvZDBGWllaRlNzNDhoeXRjQ0ZFYTAwMFVla1ZBV0VLVFM2S1lkQUVBWEVIVGFsRTVFSkNZZ2F1VUVOS09XeHRyU3RmTWpFckVnSVJqZmlva1BLY2hPYnRnV2hvM1JORGtXSzdnaW9jVUh2QXJlT016ZE9sc3lucG1TclRMbXA1UmlRS0NwckNkbGp0TWE1d0hyMEdDMHcxVkF5RE1yaXlheFhBOFlHakZhRUpGaXNGdnpvOTc2TmgrOCt3OVBQWCtXWlY2NGpwV2ZWSlVEamZTQ0o4Z1BWeXRLWXBxdzFWTWJheEdMaDZkekF1eCs3bjlQN0ZVODgrenduM2NnWG43M0JZdVhabW1xYXF1UTVhbXNLTWtJV3kwR0tKVk1RMDBqT0FpVk00WjVSU1A2eTBPOUFhSEtLeFg1UTV6SUM5NEl4RFlTWUVNTGdvdWNrd1BOZnZRamZQTUJJdUhibGtCaU8wWTJrbmhoMEVDdzZ4Nm1nVUkwb0FXd2ZTVEdTNndwWkNZNE9ibUZPYXZadm4rTHlsNS9oK01ZU1ZTdTBOb1JRSUtkMW8raDhaTFgySER1UHlRVzVNYTBteFRrNlVReWgrRlRuYzB1V3NuQWtSR0xSQlU0NXplbkp0T1FvQ1hnWDBhS0JMQm1jWjZ1Mm1KZ1pYZHpvdGdSS2dtMGJkQzFwY3laUEcwSWRDVEhSRFIzYmV6dmNjWDRYbTF0U2RpQWtvMDlrNmFscVd3NWVlWVFrRU1tV2k0UXNGNDUrVEdRaHFDcUx6UjZCSm02eVcxbW9FbUpPQW9IRVZMcGt6WHpDR2tGak00TXZmRFNrSUFURmV1V1lOUk5pZE1nRWs5MWRGdjJha0Rvd2hpQWxsUkswazVLZmtxbGtkak1LSWN1TE9zYUlrZ1VSRWtLSHRvTEtLb0pMak9zRXFzYzVpVmFHdG0xWUR4MWFsUW14Vk5CV0RaMkxwTTBheklWQVhXdXlLN2lwZ01UNXZGSHVnVW9LaEVaU3BpNFhyeXo0dzcvN01SNitjNSt2UFhrREt3UlJhL1NPNHJGZHpkT1BmNVBmL05UelBIam5oREZFakNybGsweFJ4WjNabS9McHoxM2thMSsvd3BzZWZZQVhYajdDR1l2ZGI3bDE0enIwbnZkK3p5Tjg3ck12SUZXaG15RTBYUmZCQ0ZLT1pSSXM0K2FDQmpGMktLWHhSRTVXS3hwYlFTby8vMHByMU1aVE84dW1mTitNWjJ2cVdLMDhqejk5aTA4OWVZdm1IM3lCTzg5WFhEaS95eU1QbnVIOG5lZTVjTStjQjg1WDNQMmFDK3ljMlNhdlBWZXVISEY0cmVTb08rZTVjZVUyeHpjUG1kNnh4Ui81NHgvZzlXOSttRC8zWi80UkwxKzV6dDdPaEJ3VXpjUlMyUVk5eVlUb0dlTklaVFZhR1dUS3BPQ0s0U1JFeG01RXFuTHBPTzU2SkpLdGFjT2thWmpXaXRta0l6ckJ1dXY1MVYvOU9yLzRLMS9IV25qbzNsM3V2dWNjRHoxNG1nY2ZQTS85OTdUTXRyZDQ0UHdkYUJWWjNKWDV5dXFBWVZneUZmdjRJOC9Gdzl2b1NuREhRK2Y1cS8vejcrVm4vN2VQOG0vLzZXL1E3RXdRMGlBb1pSY1FaZktjRWtQMFRPc1pMMTQrWWxsRnpwMXFvWmVFWUxDMUllRUp3V0dxQnJrOXhWdy9nT1J4OHcyU01ma05xMUdoUkNibFFCS3c3QnhUb2RqYnRoZ2lVbGhpTGhtNGIwMzEybG9WMHNiR0MxOXJTVk8zSkcxSjBaRzh4Nm90cHRzNzdKeWFvWlhBR0UwYzNXYWJKY3FhTWdmRzRKRVpvaFJvbzh1TVNtYTBra2dFUmlzd0JkTkNTcGpLa2xOaVBmUVlMV2tuTlVxN01oSDJ2dWhiTTBRa1FrbXdnbVFFNkNKRmNDSGp4NEVJYUNtWjFoYVpTcTR2eG96UHBXZ1dOeGRzS2NzUVExbkY4VGd3TllhejIxT3VIcTN3S1hGdzJIUHRxWmQ1NE82N1NIMWd2TldUcTBob0RXcE1kTmVYeUVZaWNUaVhjYWxBOVNFenFJdy9FR2dmcWM0S09Ebm0ydE92Y3J4MDdPMFZGK20zeWd2RWhEYUNtRW9aUkFvS2xTSlNFRGc1c0I0ZDgzYUd6b2FrQWk0bVVvWVl5MEVFMUlaK29wazFNMDQ2emJGYm8xVGl3cmt0aUpMcjE1ZU1JUkpXQTljdkhmSEdoODl6Wm5mR3pZTWpqSm94c1RYZWg3SzFyQXc1Q1lUUVZFYVVLZWRHUTVjQk53NFlWYU5WV1R0M3pxR01LVVZSVjNMZFZxcXlrcFdsZGUvSFVsNnFyQ3diTHlHWVRXdTY5WXJqVlNqVFVDSEw0YWxZY1FtK3JLV05OWnNEWUluTklBdEJZZG4xMUhxS0ZDVmIyZFlHSVJVNUY3UU9DU29sT2JVdCtmS0xSOXcrR2ZtUmR5Vk83MHhvdEdGdnErSEt3WUF4aHQ3NUltTFFwdXpBVWltbUtsRlRHWVZVaVpQVmtsWG5xU3dZVTZiZGcwL2xHVXpHcDB5SXhmNlNSVUFyaGNpQ3ZoZWtGRWdxRWduSXpZQkFDSW1RcVh5ZWs4SzdqZXJaUjRKTGhZN3gvMzFZVkVMaGs4ZUZCZHVtd3FxSzlSaHA2Z0tVWEM0OWszcUNNZVdnVjFsYjdDZSsvRFpaWnZwaG9OWUNZeFdqY3dndE5wMHVtRlNLYnQyeEhzc1h6MVNXU2hmaDlYTGhTeUM0cXBFeTA4ZWVTSUZEeGl5SUx0RjVSK3dESWlubWRRc1NWbjFQVTBIVldDcXBHSHdKbzBvbEdGMlBOaFU1cTdKR1RKcVVGTjNnYUVnSVVTYWZIM25mZC9JOWIzMGRONDhPK2R3WG4rZDRsZGlhSjhZRU9WWWJmQVIwZmFDWmI5T3ROUDFvR0gxUDd3WW1wdVdENzN5RVU5czFqMy9qR2E1ZHZjVlhYbDV4ZStscDZuSkxNa3FVQnBrcE9CTWZNbG9ibENqT1R5RVVVaFRZdFJzVE1ZY05ZcWFzVGlXWnBxNlFCa0lNREc2ajBTSVJBb1Q0clFjZlBQbjhFUi8veFU5eDc3dGVRenVaY25pclF6V1c5Y25JUkZta1UzVFhWcmk4SkZxQnRwYXhqOXk0ZlVEWE9VUUQ1eDg5ejZVbm51ZnhYMytHRzJ0UDI1ck53eFZjeWxSWjAwakRiSkxKT1ZEcDhsbFFRck1hUjY0ZkhSTkN4RGFhcmRiU0RTTlYyeExpeUdJMWNOekJ4ZHNIVEp1R1dTVlpybGVFNURaTXhNaEo3cEVhWXNoWVhiQTNNbFc0TEtqbkU1YlZJYXFwRUNZeCtGQXlwRllEaGl6QVdJVnpucmF1a1RLUnMyYjBLM0lvdDJtSEoyZUJ6aEpsSk9GbzRQYXRKVkZxS3BscEtrMUNNcm9lcXcxYisxUDI5NmE0MFJOZElPVklGZ01HZy9kK1l3UFFEQU1jSFhkc2JUWFV0V0I5YzhGc1o0b1FvRkppZG1xYnl0WkVwVWhEcEpsUEVCdWZjR1VzYXcrRFUweHNZTFgyVkxZdVdrb2ZTS0dzVFpSVXROc1ZTYVR5TTVlS0VEdFNqclRXWURhTlFEUWtJZEd5NUhCOGNqZzNRSllvYWZGaFRSWVZTcGp5RU5CRlZXaUV3RHZCYkY3eDNSOTZsUFdZTVNaU05UWFJSY1M4NGR4cnp2QzNmKzZYdWRFNzdsZWEwV1ZxVzIzVWNRWG5vNGdjQmZpRlgzNktkLzRQUDhMOFZsY0FzWHN6ZGl4MEVkN3pnZS9nWC96ODU3bDE3WWp0YlVXL1dUblBtaFlmSEd2ZjBUWTFFMjBaTzE4aUJiNHcwYlNvaXMzSWo5VFcwbFlHclRUcjBTTXhUT3BpU21scXlib1ZuTjR4bkt3ak54YzlKeWNqdDI1YzR6ZStkSTNBMTVnQVowOXBIbjc0VGg1KytEUnZlOHZkdlBzN0grR05kNS9uaVcrK3pPR3JONWxiZzIwYmJ0MWNjdXZnYVI1OXgydjRzMy81eC9ncmYvNmZZSlZrMG1vUXVWd0NjOEtxc3JiTG9oUUJ5NVNrWklxUUNhazM3bmhocUUzQWhjem9NMDBsMkovTkNCbThDV3kzaGd1bllYU1pXOGRyTGw4KzRvWG5EL2szdi9vMEFqZ3pnVHZ2MnVQZSs4L3h3UDFuK040UFBNcDdmdHY3T0w1eGhjV2lRTUR6SkVQS1hMMTBnM0Y3elIvN2l4K2hId2YrL1QvL05QUDlMUnBqTVVvV0hxNlBXQ1h4dVd3enRCS2NkSTRkVjNLQmphbFJLaEJpSUNSUDBoSTdhYW1uYzJSdnlDcEF5SmpLVUUxcUpoUER1TExzekdvV1MwZENjdXZvaUsxNXhUQUtWc05ZZHZkSUtsc3dKZDNncUV3SnppOFdQZEpVMVBQSTRFWUlBamtxa3M0a01pNUhjbzRvcGFpcXFyUlNmVkdJMVcyTDYwZVczWUN1REZ0R0lVVXByUmdsdUhINU5qNUpURk5CVGlUbnFheWhHMGFFTWV6ZHNWK1FMYWtVR2wwb0VPM0tHSVloNE1kQTN3ZW1FNHROa2U1b3ljbXE0NzQ3VG1HVVlyM3U2WHhCcXdnbDBhSFl6SlNXR0YyaUp0RzVzZ0t0TFNFRXVuNWdPbTNabVRVc0I4L0xWOWQ4OGVOUDhNZ2pGMHBlOHh0WHlaUEllTklobkN6cjNKc0phWFhaQkNxSHJDWGptSEFSNGlxd2YyNExqT0hWTHp6Rk41NjZSQmN5d3hob213MTVNMllrc1lnMmxQajJHbFVKV3dvVEtKUzJRR0R3UFNyckFwMDNtWFhxMFZxak53Vy94azZMQzFvVVVvT1NKVnQ4NGRTTTZ3ZHJiaHowSkFHamk5dys3aUVuSHJwam42ZWV1MXBVajJTVUxIMklvMlZQWFdsbXpRUWZTaHpNNnZLNXFMVm1jSDI1cUVwUkpuM0k4aTRLQlZHbGhTSkxUUVRNcGx5VnNxYzFpdHBhK2xCc05sSnFjbGFGMnl3RVRXc3dRbnpiWW1XTktwOFBCTjBZcVUxazJoVGRINkxJUEdJb2g2ckttbzBFSXBGelFneU93V1hTSnFKeVlkdHc0NmpqSC83YU0zenZtKzdrRFhlZlpydXRrYWRPOGVxMUV4YXJGVTJ0TVRyanhLWlFxalFUMjlLN2pyUVMzTmd3R0FXUXMyUmlEYldwMFZJVzZvajNXS1V3cWdoR1RDWEp1ZHRzdlVDaHlVbWlqQUlSeVJGQ0doa0RCRm1telEwUXRjSlU1cjg4TEpJU3craFk5WDNCY0lpRW9wRFVoWUNxMnR6Q2lLUWNFTml5R3NvZXBSWGRHRGxaQmFhdHBtN0xPbThJSGhjS0VGUExpdFc2WjducVM5aFVaY0ptM1JoVDJOVFlLL3pvVVRwalRCbWpWMVZOVTBWaWlLU2M2YnVSQzJkM1VXWlRMemVLcnUvQlROQktFbE5BYkY3NFVnQlI0ajEwb2FPeWhyb1ZET1BBem5iTDk3ejFEYnoxTlhjaFErVHpqMS9rbFN0cnRDblp5YTE1bVo3NWhVS0xoREtackNPamR4eDNTN1N2dWVmc0R2ZWVtZEt2Qjc1Ni9RYVhMaS81amE4ZWNhMzN0TGFzRVNzdGFZeWlxUXBZRXdYSkIxVFdCTy9vVmdQU1dycHVqVlVCcVNXakc1RkNVRlVWV2taeWlpZ3BXZmM5TWtzV3VTczVFbDJhVHZpSUZJNmRxZVRLOGNBdmZ1WXB2bDk1N3IvcklRNnV2TVFMejExRlNzLytaSnZKOWd3bkZDbU5oQkdXWXlKSWdWT0p4V3JGSTQvY3pmN2VqTXRQdk1qSHYzS1o1WkNadHVXL1BhbkxoSFhaTzVUUTVBeE5WU1N5cTc1alVzVXlRWlNXK1Z5eEdOYXN4NTZNTE0yeFVYSG5mc05kNTJZWVU3UnVpMjdqOTkyc1lDZE5SY3JnWTZDMnRnVGMrNUdyTjVlOGZPbVE3MzdIQXh6UFowUlIydGx0UFRLZFZneXFJa3BRd2FGbHpTQmNjVm1MRWxrWXhvVE1HVnNwaEVpd2NWTDNxeVgzdmVZZXZ2L0g3bU81UE1SWXZmRWlhMXoyTEZjanozenhXZHk2SThtRWxSWXJhNGFjNmVKSXJSUzFiYmx4dStmd1pHUjdacWhyVlFEQWdLa0Vlc3N3TVZ2NGd4NHp0VlRLc080N2htUUpLWk5GS2xrZ1lRaEowdnZ5a0ZJYXBGS0lvREJGMGNJWUV5bU9WTFZCSXBoV0ZWVlRHSHN4YWJRcUFXc1hFNEVCcXljSVViU2FpMldQVnFYaFBXbWh6aFppb2h2SGdnSEtKUkM5UGg3NDRaOTRFNDkrNXdPOGN2azJwKzdjSlVmTndhMHIxTkh3M0pVMWo3MzlUbjcrbmZleWYycUg3dWlrclBXYXRwUzFwTVNISll0RlI2c05WdytPTUhzVDVITEZlSFNKK2M1NW9oYWN1ZXNVMy9XQjEvRjNmL3FqVkJPRkh4UGJWVVVLSHEwTU9oZHJpeGVlZ04rd2l5SVNUVk9YaTZZeGxubGJrWW5jUGx6Z3gwUlZsZlZxU29xSVI3aEFiU3JxblpxNjBtV0wwWHQ2VjREN3BKSFZPdkNibjM2Wi8vVHBsOG4vNkF1OC90NDUvKzEvODhOODhBT1A0a0lpRHl1Q0ZTeE9QRDVIWHZybVMzem9CeDdsMDUvNEJwLzZ0Y2ZabmU5U200YkJodzJZdi9BOFV3VFBXRnFOU0VSaU03a29PQlloQksxdE9GbXNPWEVyVmtxUllxSjNqdHBxWk1yWXRtYTJWZjdPTVVZeWlzRjVGdXNWWForNStNb2hUMy9qQU0vWCtTYy8rd25lLzZGMzhsZiszTHQ1N1Yxem52M0dMU3cxUVdwOGY4enFZRTEzZThtSGYrSzlmT1hUTCtMNndnWU1JYkJ5WThGRUtWVzBrWEZnZjFjVGZKRVBWTnFVeG44b0FQb1FCVU53YUJKQ0M2elVZQnVrY2N5bkdveG05S1c1dmowcmkrYjF1S2IzamgxWnMxeG5PdU81WTd0bUpHR2JDdTg4b2Zkb0RHMGx1WFJ6VFo4bDdkVGdUa3ArMmxHK24wSnBkTlVRaHNqUWw3YTJzZ1pqaXJ0VnhJeVBFVzBsdFNuNVFtVXMyUlhFeS9mOHlMdlFKaUdUb0c1YUJNWFRtN1RrMlNkZTVkYWxRNlNvQ0dNb1BGb0JJa3VFaExiUzFFcVR4b3djTXFNVWpDRnpabXRLWlNUcjBiTjBCUVBXMXFaTTRGemFnS2RMTXpnSlFDdTBFaHZsckNEbGNvQjJZMlRhVkNBbG4vdjZGUjc3ejE5aDlyb0g2WVRndWE5ZDVOeUY3UUpMMXBMYVdvNXVMZ29PUlNzNjcxbDFJeklxN3I1N20rMzdUN082ZGNBM1B2TU5QdlhFZGFhVEdva2d1TWlzTFV6YkxHVVpVQXlScG1xSU9oTmlSS2RpcnlHT3RMWW1STTFxSEw2dEdJMFphajBwNVRRU0tYdWMzMmp4Zk9ad3RlU0JDL3U4NDZGN2VPWGFNZG82OW14bUNJTGJKd3R1SEIzd2diYzl3R2VmZUluajVjaVp2WXBJaVVSSUlkRGFFamRZdjNFTWVDVTN1ZFpBYll0L084YUlWSVphRi9QUGtFdGhhell4REQ2V3c2SlU5TDNEYlJCY0xwWFlnbGFLZmhqTFdVZkJtQUtqRzVsTlppU2xHVUlzNXdnRVdpaTBWRmdsaVQ0eXhqTE4wMXBpR28yT21UQ1VxZldrMWxnanNVcHdsQVV1K3VKdUhpVTdjOEhvRXgvNzZpVk9GaVB2Zk9RQzgwbk5xYm5nZUFWS2xNUDM2Qkl1QmtMdThTRVFmV0RTN0xCVmEwUUtqSjdONVY4Z1pZbFdhS1ZwYkNJblI2Wllib1FLSmFPdU5Fb1hmR0g1ekpWOFk0Z2VJUlFwUjQ0V3h5eUhiUkJGV1ZsVkZVcjlGaWgzaUFFakttYlRmWkFlS3d3VGF4R210SWhxVzI4c0w4Vkk0U040SDBrRWNvQlY1eGc4S0NlWjFJcmFHTktRNmNmaWdMM2o5QzVWTldFOWp2UjlqOXE4ckFXRlhhU1ZaQmpYaEFBNktVSUFMMkhZSEI3N0lYRDFkc2ZkNTNiNHJzZGV3MWUrK1NyUHZYeU4reS9zWVpRbFFuazRaNGZWR20yYXpROTZLTGRGdDJSeDFOTll6ZHZmK0JBLytNNDNzYmMvNCtVck4zanlHOWQ1L3ZLQ3JXbEwzVlQ0R0ZtdUI5cW0zQmljTHovb2E3ZVBtRlFOOTV6YjQ0NzlDVkpFYmg3ZUJxVzRkR1BCYjM3eENsMkk3TXoxaHFNbVFPU3lzallHb3kzZDJLRlVLYTRzbmFJN0dabnRGTzlxTnppcXByU0tqYTRLTGlTWDAzcktrRVFxNjg2OGNaa0NNbWR5VGlUS2RPcHdNZkRwYng1ejM1bmI1Slhtd3RrcHg5NXorY1pOdk90b1ltSSthVEFwY2VQV2dxVUxKQ2xwSzhzanI3dUw4enRUYmo1NWlVOTkrVEwvNFlrRHRpY2FVaWFHQkVrVVQzSElLRk5XRjI3TUtKWFJXVk5wdzJTbnhhY0NqdmJSRkk2ZnJEZzVYdEJVbXNsRVltWGcvTzRlWS9Bc3VqVlYwOUxZQmg5TDJjTktpOElpc2lhbGhLMFZQc0RSeVlEZDM4UFdCL1JhbzVXa2NnN2hSMDd0emJsd1pvZUx6MTNHVmhWdVRGUUVUR1Z4TVpRVmxJaElwYWpUaEV5Z0h3SzNicXo1UTMveTdmeU9QL0xiR0M4L2o1SGdUWTEzbnVudWxPZXVydmlMdi8vdnNMcDF3R1JlR3RKR2FXb3h3WVhFMFdLRkd4dkc2RGg3dXNZSzhCczh6M3pEWHRPekxXenE2YVlqb2hia1ZVZFRLU2F6R1NIRmplUFRNR3Nuek9wQ0FoQlNvMFJoZkFraXBwcVNZeUN1SFVwUkhPbEQ1Q2g2YkRBUUZVSkRUT1dsWEJsRnJScUNEL1JqOGZNaUlQcE1CS1F2QmdRb0NJYmFHSExLeE9DWWJTbmUvNE52TEtxK2pZNHRlY1gyMlh1SWJxUmZMbm5zVGZjeXEwQm1SYitUcVNZVjdlazdDKzlPcUJLNEo5S05JOWR2bjZCTm9EcDlDbjAwSU5iWFFOekpqWmV2OGI0UHY0MlAvZEpYR1lZQmJRVmpncE5GUjJQbDVtV3BTSlR0Z1JzRFZsYVl1cUJOTW9uYUNtSUlrQkxuNzlpaHFsdmtKcitUVTBJWmpaQ0c0MXZIckJacnp1L1BHTVBJdEtwUlNyRjJhMkpxMlpscHp1NDdmQ3BjeStkZlh2Qzcvc2pQOFgvOEw0NmYrSkhIZU9IWlZ4aUdoS2tpMDZaRk8wbGpETi81L2pmd2F4LzlJajVrck00b3BhZ2JXektnUGhHQ3graXFvTDlTVVpHUk15NDQwcVlvTUp2UDJENjFCWVNOWXErWWdPYVRDcXMxcTZNMS9lQnBwdlhHOUtOWkRaSzJVcERFdDF1ZkdjSEJjY2ZQL3F2UDhKbFBmWWwvKzIvL0pIZmZmNTVycjF5amFnMXFVanpIdDIrdnVPUHVPN243OVhmeDZZOStpVHZ1T0VXbEN0TTBDMUVVaGNLUU4waVU3Y3JpTXB0SjJGank1MWtWUG1jV0NDTFdScklFa1JKcHc5NDk2QnhIeTU3MWV1U282VWtaUWk3bGc3NFBWQ1lqWmNLb2dxTWF4NUhvRXprVkR1UjBxMkc1OGl4V25yMnBLYnhTU1VIN2FJRzJOUTg4Y0lGcFc1RkNSdWdNTVJkQXVoYjB2Z2VabUxjTklaUUxWS00xUjR1T00rZFA4V2YvNnUraHRRUDlZazAxbVRINnhORDE3Tnp6QUQvL0QvOGovK3RmK3NlY3Vlc1VkV01oRmZpeEN4RWpOS2F5MktiQzZrMGh4QWlVaHBPaFozRnRZRHB0UUNsVXlxU1lFRkppckN3V01GMlFNMjRvbXRyR0ZyVmpsaHUrYWM3MDQ4am9BNmUzYXI3eXltMCsvdVZMdk1NSnhsbk51ZGZkZ2U4OWZ2QUU1MWdOY1BQV21wTmxUMVZWUkpISnpuTitwMlcrVzNIOXlSZWdTL3pLNDlkNTVXYlB1ZE1OS1lQY2FPNnNWbVFoRVVxUXBOa1VKVHl0TVNpaFdic1RoaUZRcVZnT2FwUUd2WkUxb3kvbDJKZzN1SjhZMEVKUlY1cVY2NGtlZnVkN0h1UHM5b3hQUFhHSk1VcFNUa1NmZWZxRnE3UlR5WTkvNzJQODBIdGZ4OC8rNGhlWXREWFQydUJpWU5wWWZBd2NMQXNNM1ZZd2pvNnhEMGdScWJWR2E0V1FsR2VPRUlTY3FiUm1PYXpKMGpKcmEzb1hHRVpYY3VlaTJJazBJRGJvbVJpS2NjNXFpY3l5V0ZMa1FLVU1tVVNXYW1OYmsxU21vTHFFVWxSYUUwV2hxOFJRU2pQZitqMmxsclMxS2RHRFdFdzVJUXFjU0tTVXkrWWpTTDd3M0UwV1ErQTlyenRQMjByTzcxVXNlemhhRGFSY0JnNmpMMTBPS3h1U2o0UWhrcFBlWkF3TEQ5WDVSR2FGMFpwSlhkTTVTcHhBRlZacTc4cm1xS3Jyd3RrTkRqZTRrczJYSmFwa05kVElJaDR3TlFxSFVncjVXdzB1U21seTlnekRBbVZiUmlSQlJLUlB4Um01R2RlcURRWkFDVWxsRFZaclF0Q000NUxkZVFucWQ4TlkwREE1Y2YwbzhMcDdkM25EQXpzY3JwZjBQakJwRGRtTkNCbEpXWlcxWEJRbzJXQ3J4T0FkQ0kxTEk2a3JONEdjRmE5Y1cvQ2ErODV4ZnIvbEo3L3ZiZnlqWC9va3R3NFc3RzYxYUEwK2VielBkRVJncE9zSHFpcXpNeXVsaXdkZWY0N1gzM2NuNTgrMjJEcno1V2RlNG5OUFhXYXg3dG1kN0JETUFxa1RJZ2o2UHJOdzBFd3l1clkwcHVYc2Z1VEMvaGF0Z1Z1SE44dUxNc0ZUTDE3bmExOC9RQm5CMXN5VUFvZ0Vtd1duSmhWU1I5YTlwNjQwWTErd0gxSkw2a3F5N0NOMmpMUzFJT1JRMUdCS1lsUmhabzBoWWJVdFkvQUlQbm9teGpBeE5XTVlDeDFmSktRb3NQUkpvM2p1cFRXZm1OOGc5b0hkdlMzdXZYQ0dzZmRjdVhsTWQyTkpZelVTeVdMVk01dFduTjJaY3MvK25OaU5QUG1wYTl4ZURmekhMMTFHS1RDNldIQm1vb1R6QlFxam9MR0I2QVRkbUdnYlIyVXFqTlpVUnBIR3hPZzhXa0NPZ3BpS1g3TnBHeGJyb3JoeTR4cWY5ZWEyNmxqMUsyYW1KUVN3VlZseFFDSzZnTWdsNDNUcDVXTTZMNm5tTll3bGdLK3FDdThEWjNacXp0MTlobWVmZUlsZEl3b21vVWtJR1RBS2xER2txRERaRWtVa0M0T1drSVZBRzRHN2VZWG5YMXpBNmhLeW1aRHNqTDNGbW5FdElQclNxRjVCMjFoQzhtZ1IwQWhBTTJrRiszVnA0YnJvYU8yOHJPMlZScWtHaE1ZMmtzWmJYQ3JabWVuK0tjUmtqNVRLbjJOM1BpTXJ4ZkhocXNCV2RiRUlsR0IyUll5QnZoOUpPYUJsdytnY2sybFZzanZCazVNampxcmN5RTJaQWlFRXE3N0hoY0kwYld6Uk9DRmlVV0p0Y3NPbWt1eE9KNHd1OGZMTEM5NzdvZGR5K3NJMkx6NzdNcE42UnNxYVJubXN5dFRiZ3UzVDV6anVJaWVISzdRQ3ZYOGFPNTJpclVGRlNRaStVT1ZFeFdScnhuM2JaMWdjSExEdVZtemQrVEQrNkFaK2NjRHFVUEw2dDcySmQzL2dUZnpDejMyYzB4ZG1hQzNaM3Bxeld2VmNQeHpJWk03dFR6Rm9rc3psZ0p0emdWWmJEY216N0h2U0dQa1QvLzFQOHAzZi9Ub09yOXdrNWtCVmFVQ3lmZll1L3RPLy96TC80NS8vVzV3NnZZTkJva1hKSDdXMkx0N3lEVjh1SWRpZU9yYW5BNis4N1BoN1AvTXh2dmVEYitEMCtRc2NYTCtGclMzVmRJWjJnUmcwdHJaTWFvMldtdEY3MGdZeEZrTkVaSTAxWldvVVlzRnBTQW5UdGlLRXd1cnMxbXZ1dnY4Q2YrcHYvRzVtZGNudkN0RWd3d0pkVFppZXVaK2YvZ3QvajkvNDVVOXo1dHdlUWhVcXdiU1N6S29KTVVWQ1NvUmtrU2dhcTluZmpuenV4VVArOFQ5OW5MLzUvLzREWEw1Mm0wbXJtRmN0cThXNjVMeVZRaWpEZWdPUDFoUE56cVJtUFJaSmdsS2k1S2FUSWFSRUZLWFozWnFDOStoZGdkeWJ0a0pVTlpXdHlWVW1yQWFNTWhnN0FVYzU4TGM5VmdyNmtLbHRXOUJCV2JBOUVjUWNXYmxBaUtCem9ySmw3VFg0aE5LS282dTNlUFhTQ2ZlOSt3Rk9UZ1pzVTJOc2gwZ1I3ekwzUEhRUHpiUW1pMHhsRkpWV2RHUEhTVTQwcWhSTFRsWWpsUzZyM2hUTFplRHVMYzNZTFZqZUdGaXVsZ2h4eURCRVNJTFo2ZE1jSHF3WlEzbnZnYUd1S3hhaHcxcUZGWUxsMExIUUVSY1NSRUdURXprbVhDekEvNVFLY21ib0hlaGNEdDR4STYwcUZ3SWtPU2VrTEE3akdGTzV4S0UyQnpoQjUxSTVORmNWdi9iNEpjNmRudkZnZTVxVEE4KzRHRG5wQXBkdkxBZ2hNZG1lSU5Ga1YvaVM1ODd0Y0dwdWVQbnBLOGd4OHJtbnIvQnZQdlVzODNsNWh5c3RVSlhDQTRTRWxIbHpVUkg0V0x6VUUxdVRVcWEyQmlsTHN6MlNzYm91NWlJbGNkN2pneU9MZ0JBbENxS1ZZTm4zM0Q0NDR2Zjh3SnQ1LzNzZjRHT2ZmWWJQUG5FWnBUVlZMVXEwYTRoODZ2SHJYRGo3S2ovNHpvZTVkYmpnVno3L0hLZmFDZlBKWkpNUExGRUlLUlBXMW1qaHlVaENjb1hkR0JKS1dtcXRpTUF3Rks2alVaSmhISWxHTXNZaXloQXlJMGtiMUo5Q1NjMFlTekdXTEFtNXVPWkR6dlNoREM2a2lEUlZNZjlreExkZDVsWi95MENrcUsxbTFRZHVMOWVFRkpsYVM4b0J2MkVoN2s1cmZGTDBZOWxpTEllSUM2WDBPbXNOVDcxMHlPR3k1NE52dXB2dHlxSkZwS29xVHBhQ1NXVnhJYkR1UjQ3ZHlQWjBIeU5WYWNXbkFrcjMwU09WWVZKUDZZZU9JZlRVbFNIRmdIT0paQ1JTZUZJYTZjZGNQbVZDWVV4eG1Bc2FFSm1jT3ByS3NqMnhMUHVBWTNPSkVQeVhCWmRHVmhna01maUNTY0VERXExTmFUWkhnZHN3Ly9TR2ZKOWxSR2xKYlV2dW96S1JNVWkweWF3V1BiTWFmdmhkRHpPZlR2anE4Ni95NnVWajVsT04wS0NRS0NSU0pib2hVbFVXTWxSWklZUXFKSGtMZ2dMRVBGZ0VQdlhsRi9pZXQ5N0JQUmUyK1RPLzkwTjg5c25uZVBueXJZTEJFR1cwSEQzc2JyYzBsV1pyWmptek82ZXFLeDY4YzUvdHV1YTVpNGY4NWtzWGVlYVZheGdwbUxVVE91OUtCbUVjaW50U1NxWjF3KzZPWlc5SE01ODByRllyUWxod3U4c3NPc2Z4S3ZEVmwyNXk1WVpuUGxVRmZKdUxYelRtaktrS09zaFFzQlJ1RElXejE0ODBXbFBWbWlBRWg2dElZMnVVS0tpaVJsc1FDUjh5bFpFY0x6cDh6R3hQSzN3WWlKc2JlbEZMU0VLZkNUNmlWYm5kem1yRnA1Njh6dWdkMy9mV2l2N2xXd3pyam1ram1EY3RzNm9pNTBSVFM3YW5GYTFLWExseWc4RjdGdjJhajM3MUJwZHU5ZHl4MjFCcFFDUldvOGRhUTdYeGE0NCs0cEpnU0RCVEFxMGlrY1RnVExGTytGS3lPT21YS0lvYUtZYXhUTXQwVlpxQzJkTTBsdHJXT0o5WTl3TWlLSUlLMkkxOUljUUNvOTdhcXZueWw1N2o0dVVEenU1TlNaZHY0WVVpMURWYVIxU3p6OE9QUHNBbmZ1R3pWTWJTVHFzeXhjaUtMQUt1ajBqZE1NWkk3OVlsUUJJRXdtam1wM2FKSktiYlV3SlRidHc4WnJRVk94ZDJ1ZnpNVGE1ZnVjM1c3cFRyUjU2MVQreTFGYU5PeEN3eFZySGRLcHdiQ0JtTUZhQVNQZ2Y2c1dmdUFsa0laQVhDVHJFWWJDN2g2ZFhRRVlJcytpcTN3dWNhRnpPejJ1SlRPV0FvbmIvZHJ1eWR4eHBiTGxPNTVLZXNOY3duRGQ0SDFvT2pkTGdUL2VCSzFsTkpja3lzMTJXQzMxYWFMRXFMWDZGbzY1cVFVOUZOSm9HdExHOTUxK3ZwVjJVVlZxa3lIUk9pNS9TOFpXaW5mT0g1bnFORnorZ2lPOXN0VFIwd3l3VlNOSXhEM05oaU9qUTFRbGRvRTduejNBNm1NdVVTc1g4T1Badmhla2NPQTkvMXdUZnowWC94R1VRMlJlbm5IZE82b3E0c3EvWElzbk9GdUtBbFBtWDg2S21yQ2x0YnVxRk00dGJPMFU0cTJ0YmdWU1ptZzB6Z3hnNFZIUmZ1M0MzYVNlZHBOcGFXSEIweGVsSXUyQTBmQm95cDJKbnRVNWxqN1AyQmc1c25QUDdVZGQ3L1hROHg5Q01wRGlpalVHMkRtVllJbjhsQkk2WGE1RFZIUW5Cb29Za3BVQ2xOaUFHeTNNVERQSWlxRkFGenlTc0xxemgzZW9vL1BNQ2toSzFEd1ZNRmFDZVdVMmQzTnl3MlNZcXArRnVST0RjaWhTVGtWRlpSWkhabkRhVE0vZE1UcnJ4OGphUGxTRFhiUnNqeTY2MnRDTjV6L2RZUlErZVlWVVdwZU96WFZGWXl4aEd0S3JSV2FHVTRHZ1pTVHN6cmxoQWNVZFdZY2dzazVVUk9HWjloY0psMlVsTlhrZUFqUWl2YXlZejVkSUkvWHBYSmZnd1lXWkJOVW9yQ3lVMWxxcVpVeVh3cFdSNXJ4VHFqdUhYVDhmVFRsL25nUjk2TWV1Vm1RZGJrOGo3cWx3c2VlTzFkM1BuQUhiejQ5TXZzN3MwTDJVQkZhbG1LRHlsbmNnaGtGUXQzRjBuZmQ3UjdFK3A1eStKd0RWSUJpc20wcHBuVW9DcGVlZjRLeG1xMDFuZ1hzRUpUNjhJeVZKdC9CN041aHRlVkxWTjVWWlI5US9ERklwTUs2eEVocUN0ZENoQXgwTHVSaVduUnBuaXpVeFlnRkRFR2duTlVTakdkVkF3SmJpOEhwSURGY3VEdi8vSVQvTmpiNzZOdGF2b0U4MG5GcVZNTmxUWlV1cXhoWTRLbGM0VFZpdU5GWkprRTM3aDZ4SzgrOFNyVGlXWmVsMmxveWhFWEkrc3hZWFc1MUhSZE9TUnV0N1k0MDZObkhFSG1oSkVTbDRyY0lJZUVNUlUralVnZEVNa3d1dktaUE9sWCtCQTROZC9pOTMvL08vblJEN3llNTY1YzU2bFhyL0hJYTF0VVZseS9QZEtObXVtczR0YkJDYi93YTE5SGZQZjlmTjg3SHNMVUZVODhjNG1yaDRkTVcwdFRLY2JvQVlNSWlVeUdFQXZzUEFWRzU2bE1JaWRENzBkQzJsQkhtcnBNMjJPa1VRVTRIM1JHcWFJOFhmUWoxbFpJQmZQRzRHT0JVa3Nsc1RLV3dsY0NxWFF4K2xCc0xrSVVycWZacUQwM2cwU0dvV01ZU3hkamlKRTRsaGE0clF4YlRjMmlVMFFHZGsxRE9Ba2NyVndwNWhySm1SM0xqWU9lWC9yOHk3enRvVE9jMjJ2WXFTc2FNZUhhN1FWRDdER1ZaaHc2MnUzTTFuNk5mRkY4dXdnclJJbFc1U3daQTFnVk44ck1rdEU4V2k1b3JLRzI1WHVUWTBZYVVhRDdzVmh0aXNPOVFQZWxVTVJ1eGJncUphOXZVVkMrZlZpTU1iSHFIWWdaVmtsSWNTUHREclRhSXBJaTV4R2pTMlZGeU1SeWNPZ00xb2dDYTAwUzV4T0RjN2hGNXV6dUZyLy8rMS9IMjE1L0R5OWVQT0xMVDExajJUdGlMaFdyRUFPMVNWaFZvWFZGenE2NDBUY3FHaDByQnA5S1ExZ0VLaU81ZHZ1SVgvemtrcmMrY2dkdmVzMWRmT1I3MzhyeGNVY2VFb3RoM0RTVUlwTkdsclNteVBSaFpMSHlmT1BGbTd4eTlUYXZYRm1TaEthcHA3U1ZwdEcyTktXa29EV0s3RE5LU1pvV2pNbmdIVzZWMFVKeC9hVG42dTBWcjE0NzVOS3QwbGpjdG9hcXp1UW9HTWFFclFUS0Y2dEtsbVVpT0tra2swbE5GeVNYcmgyUnRVQVl4YVJKNUVGaWhjRXJ0Nm0xbDZacTNFQTFyVFhnaTlTOHJWWEJKb1JJbG5tRGhQQklrVkJab3FEa2gxQjg2ZmxEVmlOOHgxMzdDTldqc21Sck5pZW5qSXlTMW1ST2xpZmNYQWRBY0hteDVBdmZ2TWxpSGRtYkZwQjFUTEF6Yldocmd3K2VMQ08xMWZnZ2tMSWdiYVMwaE9nUUdEd0RrNlppU3pkb0RVZkwwa0swVmpENkVoQ09NYUdyaXRDdlVSaWtLTGNkbVZYSnV3andYaFRGbTRWS0Y4LzJsV2V2OHNYUHY4anYrNFB2b2I5MVV0aUpPVUlVM0hyNVJkNzF2amZ5cjM1bWp5dFhicUJtTGVPUXNWWEVqWkVRTXpvN3JGRk1teWxKUks2OGZNRGIzdlU2M3ZxMkIraE9iak5ySkVtZlpubHl5QmdHbXEwZHZ2aWx6M0g1cHVQc0JjdDlkYzJMbHc5WUs4RnUwK0JUS1NZc3VvNUtWOWlOZW1rTUhWSW9uSStNb3krZlo5bFMyYUxCd2ttR2xEWllxcExYREY2UlJLWnBUWG1ZKzBUdlJ0WmphWW42c2VSV3RWU0VGRGI2cllDUGt0UjdqRXkwRmVWMm5DejRSRnRKNm5wQ055UW10Y2NZVFI4Q2txS2VuTlN3UFdtNWZkTFJlOC9CalFWdmV0djl2T1oxNTdoeDdaaFpsYkJHTWtUSnNkTTg4UHAzOHpQLzB5L3k1Ly95UCtOMG96ZCs5a3hsRmVPWXlpRkFsZW56NENLVkZMUzE1SVhiSTMvbmIvOGgvdmovL1VOY2UvSVpRaGlRVXFHcmhxT3IxM25IZDcyV1I5L3plajc3OFM5eDlvNjlUWTRHa3NnWXEvRGUwM2xQaGFZYlBVSW1LcUhvVmdGa1ltb05sNDdXdlBqOFZiN3p1eDZrNnlQSWdsRkpJZElkWGVQdSsyYnNuVDNMcFZldU1wdE5HSWJ5YnlTMXdEbTNBVUpIZEVvRTU1azJOY2RIdDJncXc5N09ETGNlcUpVcTdXR1R5REtBdGR5Nk5iSmNEU1JaVUUwMktES0ZzV2lNSm9haXZkUXFZNlFsWlVIZmV4S1p0cWtaeHNDcnI5em04Q2pRU29rZlZzWEdFUlNDa1R3Y2NmZEQ1MGsrd1FhNm16YXFoajZNeEFCR1Z5aFRXSFpHcWVMc2paRTdMcHlpdFIzSHpoRzBRb214VEszckdRN05qWnZIWUExMWJjb2tWQll0bUJ0NllnS3ROVHQyeXJKYk1BYlBySjRSOHNDeTd4QVUzWmdmQmNnYWtSTkN3S1N5UkJuSVJvR0g0REkrd2tRckVnNUNhU3ZieXBCQ0pJYkNqYXFNUkdYS2xKZHZIY3JnekduRkp6LzJCSC80di80dzIvc3QvU29TMEFnbEdWZHI1dnY3dk92NzNzeVhQdmwxOXZhbkNDRnB6WVJxMDRiMm9iUlRsWUhlRlMxcFpSVHZlZjg3R0x2QWVybG1NcTB4T2lPeVlINXFoNHVYbDN6dFN5K3l2VHNqcEZMVEhueVJNUVJmSU04cHlVSXJTT1Z6SmtRdW1Cc2ZhWnVhazFYQi9NeHFpL2UrbFBXc1pyRWFDVm1SbENLbFJKVXlDQS9XWUlWaXZYYU1NckExcmRFQ0dxM294NEF5Z3VQbHdNOTk0cHM4OXRxejNIOStsMGxsYUUzRzVMTCtqMzFFRzAwckpUY08xamp2ZWVMaUlWOTk0VEpHYXVxNk9NUmJXMkppMFpXbTdGWlRzRTFCWmFJR2JZdHRLV3plZ3ltS0lrNXdrVVlWWVAvSitvUmg5TVdPcGdNNUZxN2wzZWYyZU9pT1hkNzlobnVaenlaODVla3IvT1pYTDNHMDFOeHpvU1liejg2TzVKU3lqR05tN0MydlhsM3hyMy85QmQ3NzVydjU0TnNlNHJ2ZmNCZGYvUHBGcmgxMlhEMDQ1dUNvNDlxeVkrL1VsRm9KZ3ZkTVp2TU5LVVFVTTRrcXoxWXJOYTB1a1pva0ZRa1BLVFA2Z0ttcUVtSDNFVGZDR05ac3o1cVMxL01lS3dWQldReWdOalRlbkdGTUdaOENXbVNNTG94aGx3SlNDN0pQRE00VGNtTGFXcmFuTTdyZTQyTFBkR0pSYUliZTA0OXJVdlRZcW1MZUZsYW9qeGtYQ2tsamQxYXhHRHdmZS9JaWp6Mnd3M2U5OFR6Ylc0cjU3aFl2WGswTXc4RFd4SEswNkxseHVDb05iUUdDaUpJVFV2YXMralU1Sm16VEZNRko5a2daU2xWWVZzQzRRWXcxNUpRMy9PRkVwVFFwTzVMTXBKRHduV00xT3F5VzVCREpLZjBXZzRzUUhQY0RWdzhQbWMrbkRLRk1Ua2lKRUQza0l0bldXaGNJdDR6VVFoTW9Dcm1xMGtnSldsV2N0WE5PVGFjOCt1QUY5dmUzZWZIYU1TOWZ2Y1gyekhKcSt5dzVnOVNKUG5RbGxDc2JRcENRUGRPNVJrbTFRU0FrUkF5a0tBalpNSjBhdEFsY3U5SHo5SXUzOFVteHRWV3hOYXVMQnpvSVVzaTBqYUt1QkxmWGp1QWpSNnRTckRsWURCd1BrYnN1VERtM3Y0MUxpV1hYc1ROcE1VcHdzQWdZcVl0dzI3blNxaDRIK2o3eTZxTG42dkVSTDEwLzVtaFJ3SysxMHFoSldjOE9EaG9OMDFZeXFTUklTVjJYRlNma0VwSmY5MlFqT0wzWGtGd3FoejhqT1ZvbkRoY0xoTTBGVVpRQUxhaTFJaWRKVTJlTWpYZ2YwYUlGSWtLWGtMNlVvTFZFcDF5eW5sYXc4aGtwQmR1VjVKbFhEbm5oeWlGbmRpdjJKNWJaNUlUVHN5bU5hdkJrRGxZckRrNUdicDcwWERzZVVFSXliMDBaVDR1SU5TVXJzajAzZEwyazZ4elpyRkdxcHNKaVZNUm95M0pZWTQybE5ST2tFQWhSTWhPemFZMXpHd3VIMFlTd291OUh1dlVDa1RLamN5U2Z5U2lVa0xRVFRXTXJsdDNJRUR5bWJ2Q0pqVkpOOFVzLy95bCs5MCsrbjYweld4emZYb0JVdURHenVyN2dqamZkeFIvOWIzODNQL1VIL2hhVFpjZGRkKzBpWW1hcm10REpnSThPQ1JoanVYanBBR2tTZi9qUGZvUjVZN2w4T2FCMElmYWYybGJzN2U0eERDMi8rV3VmWjM5SE1BNXcyUGZzYjdkWWtjalJZNVNnMHJJUTlHVXVMbFpqaXRwTEttWk5UVFZSakNIVFM0VUpheUtDTVlMVVVGV1o0Q0tySG9iMVFGYUt3UThjdVEzOG5PTGNOVllnVWlsL2RiSXZPVEZabW9GR1dnWVhxS2FLN2UxdEJ1Y2hCWlFvNjRtcG5GTVpEeW9TY2lpZnA2cUdKcEVKaEZnTzVaQ1JHdDc3b1Vlb3N1UDJ3ckY5YmdkYk42Qmh0cjNGcXhkdjhDLy95Y2N3Z01peFVQRUNkQzR5SkVnSlRrMGtJV2VHSVNJdGJGVFQvTUsvZnB3Ly9sKzltOXIwTElkcEtYTVpTUng2akV4ODRNZStpMDkvNG5NWUJSbUxTNUZyUngydEVlelBLbnFmV1lZUmF6VzFNZlRSTWZxSXlaS2QrUlNRZlBhVHovT1RmK1Q3MllCaEVTcGhLa2xZTHpsOS8ybCs1eC83SWY2ZmYvVHY4T3JMVjVudnpOaVp6NUhBUUU5eFYwbXMxaUFqMTY0Y3NqejAvSm0vOFR0NHkxc2U0dXB6cnlCRVdYbUpVR0VtanNYYTg3SC8vQ1JwNDBFUFVlQ0N3MXE3b1FhQ3o1SEdWdVFjbWJZMVpEaGVyVGJRWTRHMWxxOTg2U1crK1BubitmSGY5WFl1UC80a1FnYXNCb1RpK1BwdDN2dWh0L0NoMy81K2Z1V2YvMmRPM2JGSE03WGtIS21zd2N2RVJGdUc2SkN5bEFxdVhyek82eCs1a3ovNEozK2M4ZUEydzhGRnFqT3ZwNUlMUWt5Y3Z1OXVubmpxQ3M4KzhTSmIydzJla2tWenNYQnQwYm04Z0dXaXJScklMYjFMeEpSd3lkT1BqcDEyRzZNMWlkSXlyV3g1Wmk2R1FKVkc2dDZSOHJ4Z201d2orRkFVbHVTaU9GMDdHcVBLWVNSRERHVjZJVFZzeHVNWWJUaDMvaFNmK2MzbitFKy84amkvNC9lOWxmN3hiNkpWQmJJaEpjK3RsMS9pKzMvOHJYejEwMC95bVY5NW5BY2VPWU5FbFBKUWhzR1hzcUZWaHRzSEN5Ni9jc2lQL0tIMzgzMGZmZ3RIbHk1VE42SVVqb0pIS0doMnovT2YvK2t2OHN4VEYzbnNqV2NML05rVXVrTEpuUnRDakNWSzQ4cjNLWXdKbWN2S2NqVjR0TmJNcHpYcmJxQXlHb1FscGJUWlBGZ2FWVGlHaHlkTHR0cWFuWG1Ea0FYOHJXMlpZS1pZZk9uVHBpWUt5ZUZpemFReURDSHl5U2N1OGRLMVF4NDRkNHFkcVdWMzJsRGltcG1RTThlcmtWY09qcmwwYTBuWE9TWlZUVWlKb1hlMGRlR3d0cWJrSm1mVEJrSG1aTjBSaENETFlpR3kxckJjaldnZDBVYlJaSTN6RHBjRElTZk83TTZ4UnRGV0ZaT1pZWDgyWlY3Vm5EMjl4OW5URTU1OTlUcS8vTmtYV0s0N3ZOTUltWGpteFZ1UU5KT1paVHJybUxlU2grNXMyTjlSWEw3Wjg5SFB2TVRWV3gxdnVHK1BkN3p4WG9ZUXVYejlrTXZYanJsOHVDU1NHRHZId1RJVDhrandaVmlpVklXTEdTTU1PUmNpUThxNUtJaXp3TG1TVlNlRDZ3TTVKcVFvRnhPbGJGbHJ4N0hrSDBVdXJHa2hXUHV5Q1pzMkZmMFk2TU5BVXhYL2VNd1NvMld4RFFsQjA3VEZZQ1FGeVd3dWxWbmdvc1BGVUthUVNTR1J6S3NwS284c2hwNStaS09nRkd4UExiMXpQUDdDRVczYjhLWUhUckZWMVR4eTdqeFB2WFNiNDlWQTNMS0VNVEJHUjg0UVlqRkhLV1VRU3BKMHViZ3JLVENWQkQvWm5Nc0V3eWpwWGFHakdDSEwrVUlBT2JBY3hwS2RUNTdlRDNnaEVGR3lYUFhGUFBSYjNkQmlJMStQM3BHY1I2SFExcUprV1hFbVRGRWZiUjZLRDV3OVEyVUxXMGdwVFRjTU5GWnk0ZFFjSVNUUFhMeEdldmxxcVdqTHhQYTA3UHF0S21tdjBVbGlTbWlyeWJtRXFZMFV4T0FJT1phR3BVcVFOSU1QdEhXR0ZMaXdJL0Vvbm5ueEVzNnQyWjFQa0VpTU5paGhtTFNGVEg2NFRzWGZ2RGloVW9iWnRLSFdGcFVUaEFMN0ZHRkZHRE1POE9PQVI2TXdISzlXTEVmUHhSdUhYRDhxdVo0UWlsRmdXaHZpS0toYkVDcXhQb0pLUWRYQXBOSk1xZ3BpS3BURWJCRXlrWVZrOElLY1BJMVJCR2tZeDJLdnlMTERJYW1pUVlvQ1haNVdOY0Y3VXZiVXRTRTdqZHhnWkZ6MFNLMlpOQlVxYThia0NkNGhsV2JXMXF6ZHlDcGtoSkJzVHdVdVptNGNPcTRmZUt6SnpKb2xSZ3VXbldEWmwrYVowWUxHbEVONnBEaFlLMTNzQ3doWTlqMGFSVnRydWczaHY1WWFxVE0rbDNHMWxDVkVPNHpsMTBiS2hOZWFjc0VZM0xvYzdPdUc1YkpqZTJ1TzBOVzM4VXFkVHpRMmxVTllWUUNxUnRqQ0EwdUJVMmRtL01Zbm51SHYvcTFmNEUvOXBkL0phdjAxMWl0SFZncmRUamw4OVFvZitzaGJXUC9NbitJZi9QVFBjKzNTRGF4V2FGWFRqeU5DSlJTU1N0Yzg5TnA3K1FOLzRTTTgrc1k3dWZMTmwzQkpJS05BeTRnNit6RG5IbmdkZiszUC93dSs5dmdOM3ZQbU04enFVaURwUmtocFpOV1Y4RzhXQ1drS05pV2tRT2g5K2ZPeThhWTZSemNHZHF1UlNnK3NuU1JMU2RVMDVISEZuZmZ0OE1iSHpuSHZ2ZnRrS280WEs3d2ZzWlZCeVdJbnFtdlFXUHF4bUdpMGx1UmNNc1JXYVp4enZIcjVPc2NuQTFJR1lraFkwN0IyQWRXZElGV3hDVFMyQVVYQnBBakw2QlBPZDFncnVmamlNVy81enJ0NTMvYy95aXRQWG9FczJkM2RSaXFEWnVEZTE3NkduL2xmZjQxbm5yL09vM2ZQaWlKTHlvMTNQSkRSaE9EWm5kU0VPR0pzalVpU2s2TVYyL1BBbHovMU9ML3lINS9pd3grNkcvZmNDcUVWM2dWeTB0eDg5UXJ2ZWQ5cnVlZmhCM2o2OFJkNTVEVVhVR1IyMmdxakpDbnJVcUtRQ2lNS2QwL2tocEdlUGpoRXYrTHN1Um0vOW91ZjQ3Ty84UU84ODcwUGNQWEpKNGxCRnFDdjFOeCs1U28vOUtOdlJzcy96Yi84M3ovS1M4KzlnRnVPYUdVWlhFZVdQVG5DWUJLMXJUaC81eG4rMUYvN1BuNzc3M29QTjErNXpoQjh5UjltQ2Jubi9JTnY0cGYrelpmNC9HOStoWWNmT0UxR3Nlb0dxa29YSGFxbnRMVTNQKzh4UmxaK1FXc2JsQktFS09oNlI2VXNsWVdmKzVuL3lJYy84bmIwMWc3dTVKQmhlVUpNaVMzdjJaODMvRC8reGs5eTV0d2V2LzRmUHMydDZ3ZEZRNWNLTUxlVGE1TElEQ0V4bjdXOCs0TnY0WS8raFovZ3Z2djN1ZkxNZ2trcmlQRVk3eFB0cVYzc2RKLy84MmYvRVNmSEs4NmNuaU96S0R5NWxEWSs0NDNCU0dRVzNicHdCYU5nNVJ4VlpkR3EyQjJFVnVUb3lIR2tGUGhWdVNSMk44aURRcy91QUZWeVpLTXZERnlWQkZsRVJ1ZFo5WTd0ZWNYdXRPVmsxUk95UUFzQnFaUU5NdEJZeTlZYy92Yi85Qy81d0ljZjQvUUQ5M0R0dVN0bzZVR0JqSUd0QnY3cTMvM2ovTXgvL3kvNTFLOStscHZYRHhDcDRHbkdtRG1XVUZ2RmROYnlmL3NMUDhUdi9STS9URnFlb0hMRU5DMHhCSHdVM1BuYWgzbmx4ZXY4M1AvMjd6aTFiemNYWElNUG1XRXMrbGloSkRrVm5aOHhSWHVuWWlUSGhBZ0Z3dDg1aDBtYWpHRHRQTFVwWllTNGlRdFlMZEhrOG5jVUVSZmlCdmdNZ3dzTXE1NXBiWmhVR3EyTEJrOUpXZnpIaldGM1ZuRzRIUG1ObXhleEdxYU5JY1VFb3VSbDEwTWhrRXhzemZha0lteVVpRllhbENncU4yMGtQa1FRMEx0QUgySXBmbVJCR0FTZGo2eWQ1OHg4QnpkNjVvM2l3UWZQa1ZOZzNrcWFTY09RRXpvWWdsY2NyVG9XcTl1c3VjVUxsNmQ4ODZWYitCaTVjR2JHcW9zRTcyRGJNR2xhbHAzblpEa3lPRU96RGVkMkxhZm5sb09UeU0zYkM3NndXdEkwaXM1NVpFcFVWblB2K1cxU0tyR0hic2liN0x2ZlJBRGcxUnRIWmRvbkxTNm1VclNSbVZwYkhPTUdJQjhMWmFTcHkwQkRTNVFvZ3d3bEZkMHdGdTJrTGdNZ3RjSG1LQ1d4UmxJMjRHbXoxVW1ZQkdHRGxhbDE4VWlQSWRKSFIwNkowV2NTa1VwclpHMVlqUU14RmI2aFZKRjVNMEhKelVFdEpsSXVsMVZGNW1OZnVzclRMeDd3cnRlZDUrNzlHWGVlTVl3NU1ZNlpuYlpoM2xiRjd5eEt3UzM0WXMrU1NvSDBwRHlpcWRHcWlCdFNpSXdoRUxKZ2RJV3o2UE5BVmRXa25Ba2hzUjREcStDSUNDWmFzK3dHK240a3hQaGY2djZVb0doOVJNWTd2NkYzbHh4ZVJtd0N1WUxSRndWU1ZXc2FuZW1XRzcxTlVHQU42eTdndkdjOWVPYVRsaGdqT3BWczFyb2ZXT1l5M2xaR0ZaZndjVUhXdEhWZHpDck9FWElpQ3dNaTRIM0gvNGU5UDMrNmJrM3YrckRQUGE1aDcvMU03M0NtUGoycXU5V2F1aVhRaEZRUXk3SEJPSTRMaWxEbFNpVWhSZUVLZG9uRWNVemlVQ2tiSjY3WWxSZ1RpQmxTS0laZ0JFa2d0aEdVUXlFaEE1RVVJVUFTY2t2cWxscnE2ZlE1NTUyZTU5bDdyK0dlODhPMXptSEtmNkQzcm5xcnpubnJuZmJhYTYzN3VxL3IrLzE4cmJPWTFUSWRaVVp2SFhqYkNFdmhkRm9adTUxa0pmcklPeThtM25tYThMMmg2eFhMbXBoYXBKWktDQUZ0TEhkejR0bnhsbWZQei9odW9DbTRQMGFXSlhOS2dYa05BS3hScXZMZUdYeXZaV3kxUU9jYVhhZEpTZEg1eXFOTHkyZzBMU244NkVXUHBTTzdRUkFmeXpwaDdjRFFEVklzcXN5OFJrcHV2SEkxTW9WQWJ6WGFhTzdMekhRdVhCd0d1cjZqMVVLTWJYTjlaVnkxOU5aU1N5R21pTmFLWFQreXpKRWxhbkxWREoxbTlJMDVKUWF2U2JwUnE1eEMxbFFwdWRLS1l0K0xEdU05Tml0STluTG41ZGNxTkxacy9Db2xJTmJCZVp5MzVGU0lTVExBblIxSnNkQjB3ZnVCUmtNM3lEV0pMa2QxT0x2anlmTTdyaTlXMU9hbTlNNkRWY0x5NjN2eXZMS1NpV1NzQmUrMGFDcWFHRUVlUE5EODcvKzlIK1NqbjN5ZGYrbDNmQS92L3RJdkVrNFJZeFExSjU3KzhwZjRaNy92azN6b1EvOGFYL3lGci9HRm4vOFNYL3pLRTVwT2pJUGxveDk2azA5KzQ1dDgrL2QrTXplWFBXOTk0UzFDQWFYRU1ERStmc3poOGNmNTQzLzQvODRmKzhOL2lkZGZkU2pWQzBOTUY5elFvRGpDcXNsTlh2SnRGVkgvdUR0d25PNUZTOWdLTVl2V0pzNEZPSk5WaDNPV3ZqTTByN2ovMHR2OHEvL2o3K0gzL041L2JqTXdqWnpPOTl6ZFRRejl3T0ZTSEx1MHdEaDY1aFdtK1o2U0EyUG42WjFCZWM5NDlVSCswUC82LzhiLzlZLzlFSTlmN2RudmVveXhVQ1E2ODZhL3d1cUNWZzV0TktWR1lsMkpVU1lGcWlWMkh2NzUvODUzY1hQWWNYN1l3Nk1SM3l1V1dCbjJGeHlmRmY3YVgvcHhQakRBcTlmN2JUd2wzU2FNb1JTRmNabWM2Z2FvbHBpNDNqVE02UG5LMTk3bXYveC8vQ3kvOWJkK0JzcFhTRkhjM1NFa1lsejR5QWRmNGJmOHk5L04zLy94WHliRUJGVDJuU1ltV0tPNFg1MlZhY01haEtmYUtjZHVkQnVBT0hNM0Y3Ny9kLy9IL0pXLytlL3orcmQ4STA5Ky9uTndya1JUaUdraGZPNUwvSlovNFZ2NDd1LzVCdjd1ai84c2IzL3BubmZldWVOOFBrcDhaYWQ0L2ZVSGZQanIzdVF6My9FSlhuMDg4czR2ZjRYVGNXWTNkbGlUYWQ3dzZzZS9qci83azEvZ2YvWDlmNVJoTkZ4ZkRpeHJFZUc3dHBUUzhOWmoxQllIdVJFa2xNcmtFRW01RWt2RmFFMmg4S0VQM2ZCZi8rMWY0dC84L3Y4TC84SC8rWGNSMWNxN1AzOUhUaXRyeUlUMXpOV3JyL0w5ZitDMzhjLzk5dS9nc3ovOU9kNzZ3dHQ4N2UwVEtRV2M4enk0ZWNDakQrejV5Q2NlOG0zZi9rbHNVeno1NWErZys0SGFYcUhseFBENm0xdytmcDMvOE4vOUUvejVQLzNYK05USEhyRHJqRVR0MGVpdEllZUNNZ3Bsa01pOVp1UWczQnRPVXhSMkhoM0xJcTU5bzhCN0s1MTFWZWdHVDJpdlVkUklTbWZ1MWhubExlUFFzWVpLSmJFZkhidkI4YzZMSTZkellIUWRLT25PeWxpNzBUU3M4OHJnTFIvOTRBTis4cjk1eXUvN0gvNWgvc3gvK1FmNXdEZnVlZWR6bnhPb3N1MDV2djJNNnpmZTROLzVJNytIbi9xSjM4QXYvWU12OGRZWDd6a2V6MVFhTnhkN1B2Q2hhejc1YlIvbG03LzFnNFRid09sMlJpdE5TVkIwNDhQZjltbGVQQ3Y4cS8vSy81YXZmdmtaMy9ESlYxRmF5eWE3SkxTUjRuTXpzMU9WWW9tWjIvc3p2bk9NblNHM0xFVkpheXd4MHp0TG9USkZDWi9vbEdKZVYyTElQRGdJU3pIbFRJeUo0eUx4czNPUXduRDBEdDlwWWs3Q2hqUWJ1azRwYUFxbkRaZTc3YkFXUlFKUW1tRGpydllkVm9tMHdCaTdwWDAxaHM1aldzTnBnOU1hWlNER0l0MGxxMGxMeEdtN2FlSXJ6bFpVcXh6UEM1MFZyYnFwa3BQOTl0TTdDZzdheWpKSGFqV3NuR21tWWF2bDFlc0x1aDJVa2ptTWR1djZWYktDQjlaeXViTmNlTWVMY3lBZEcvdmU4dnFEZnVzeVoyTE1VQnBWS1Y2Y0EycGFNUnF1ZGpzT3ZhZmtqallZTHNjRFMxaXdXdlI2dW9tY1NaTGFDclVwdEJKNWhmWmE1Q0crQjFYSktXek9aWXYxbHJvRzRweFJnNU5KYWN1Y2w1VWxGSnhWOUoyZ2FHck5XQ3QxU015VjFDVEpTRGRJRytKUG1tS0c4MUtwdVlITzdIclJOcWRVR1BzQnB3ZTB1cWRXVFN5S1dpRW1rWjQ5dW5JOFBRZCs5T2ZlNG5zKytaaVB2WDdndzYvMkxDdDg3c3Z2OExWbjk5SkpiSlVsVkhLTk9DdWQzczRLVEQxbElhVTRheWtsUzZGc081elRyR0ZsRG9tS1JKb096aE4xcFZReDRkVWlxVWpPUzMzd1Q0eWhCVkNzdGNKWlJ6OE01Tm9vYVJOQVZuRm1VU1Y4SGl5Zi9aVVhGQldJT1dHMEYvSHdsdlZwVFdGYUJaVFpxRmdsTHQrVVpFN09GaUV6T0dFT2hRTFdDRVM0dFViT2drK3cxcEpMeEZtRlVoTFpoRkxNUzZYdjVHSFBXUnhnQ3VnNnVEdmxEZkl0THlDdFJhUTZkT0xzRGFsaUxFeFQ1djVjMGZhZXprRXRpQ3ZiUXRjWnJGTU1XOVRmR2tRSHJZdEVScUVFWGRONTBZQ01vOFVqVVRreHJhaXFxVW96NVFXdERNNE5OQlVvcFJCaVI4Z1IzOFBUNTVFYnZXUHdoWklUVFNuUlZUUngwMUVUdVdTOGI5UWlwMEhySE1ZWW5qNk5XRnU1dlBZNEl4MlI0OUxJYzRJcURyZE93a3RZZzZJcHViYXRLVkpURzJ0cHc2Y29oVlpzcmszd1JyU0dUVFcwenNTMk1jYVVJK2JBMEJuMmU4K0xjMkJlRzVySTJEdXM5V2djdFlEeGxTVW5iTk1zYzhFUGNycGVZMFE1eS9GOEpxbksvVFRUY21Mc0d2ZEJUdSsyNnEzREVZakpFRkptRFpuWFg3a2c1VHYrUjcvei84aS8vNGVlODN2L1o3OERtTGo5MWMrem5nTnBEU3hmK1RLZmVPMktYL2VOMzg1YmIzK0UzQ3FWVEZnckYvdVJSemNqNVh6aTJhODhwZXNVM2VEeGgwdXVYdjhJY2FuOHdkLy9KL25mL1IvK0loOStDQjk1L1FKYVEyRlo0c0lhQXplN0M5emVrcXBtRHRKcHNMNmh0T2dRTlVBTjlKM25ZbjhCK1k2bmQyZjgyTEh2UjVTdExNdUpObWYyRld5ZEtVV1I4OHgrdWFmck5kcGt1aFRSMlpKTFFGZE5uV2FPVDI1WmxwbFhydmRjSEVaTTUrZ2VYeEtLNk14OFArQ2RiTWFvbm5sWkFjTmhkTHc0bldsTnpHZk9XVlJ6VEd2bTd2bkVkM3pYcC9oMTMva0ozdjNTdTl4Y0Rmak95Ymd3SnE1Zit4Zy8vTmQvaHAvNmlWL2tHNzd1RWEwVmxoaW8xYUpNbzJ1Q1hrb2tFb1g5L3BKWUVxa0dkb2NCZytZem43amtSMy80Si9ucG4vc1grWlpYSzE5N3E2TDdIcU5tVXF5OGVQc3AvOUx2K0c1KzZBZi9PbSsvL1lKWEhsL1RWQU9WdVJnN3RMS0VKQ2tSMHNYYTBpOXFvM09XWFRmd3FZL0JUL3pTRS83YjMvc0grSk0vOEh2NTNuLzJXOG0zNy9EaTNXZWtrRkd0Y1ByS1Z4bjJudC84Vzc0UmJRZFNRMkpNcTJ3SVdqdXNxcHhmM1BMc2w1L1J0S00vOUZ6ZVhIQjQvUkUxYS83Q24vbHgvc0MvOVFQY1BqL3o2Nzd4aWxvcTB6SmpsY05ZU2ZoNDcrQ1ZTME9iUms1TkVHRmFZMDNtdUJsSEJpZWJ5Z2RlR2ZnVGYvcEhXY0xFLy9UMy93czgrTWlIT0Q1OW03dTdaeUxWZVg0azN2OFNIM3h3d1NkK3g3ZXg1a3l0bXJRVzBXcTVBV2NUWVY1NDhjVzNTSEhGanp0Y043QzcrVGlYMXgxZmU3THc3LzFQL2doLy9FLytLQjkrMEROMGt1dXVyU1hrTTZvMlV0R1lJdG05UmxuR1lZQldXTllnQldTT3BEVmdYQzhhdmxyRm1lNFV0VlFNaWE2M0pHTUk4eGxkTk41Mk9PUFFYZUhGdkpDejVqQjJITWFCZGNuRUpMekpOV2NHNndERkVoTGFDQkdoZDVhUGY2am4vL1ZmL1F3dnZ1OS93Ui83VC8rWGZQalR2NTU0KzZzY254NGhOVTd2UEdWOThZeGYvK2tQOHAzZi9TbFNhS3l4aU1uQU5SU1plRjY1LzlWM2FMcWl2VVMyUG43encramhFWC9ueDM2YWYrdGYrOFA4N0QvNEN0LzBkZGRRSlYwcGw0TDFvc2szU3N2QjJpWmNNMWdsZThoNXlaaXJucnpsUkxOTjBsR2FuZHZ5ZXFzd0gydURLUVo2WjNEV2NGNGwvNzEzZGpNOGFYbEhJN2dkcFlTZGV1amxIWjlMWVUwWjV4U2xRTTVLRHRYR2J0OUZ3aXFMMW9wbWhKL2NPMFBYR1hiYjM5Rm9sQ0p3OHBpckpLTTBNUmhWNUgwMmRJNnNJSzZCem1pZXZKaDU2K2xSSWhNYnRKSkpxV0I4ZTEvRHVTeUpmcmpGT2prd1dTUEdQSzAxRmlQUmhxbmdqY0U0amJPV0hMY1JwNEZVS3JsS1dvcGNhODNRUzN5cjFnVmpNbGIzNG9CcWtrdHRyZU13R2pEU0liU3FNWHBEYWoxTk55aUZ3NjduMmYyUjA3enc0T3FDVXJQc3I4NmpOTVFReVZGaWlYMG5NYjZTVSs2RVYxdGt6N1JXRWZJV1Jac2JXZ2t2VTFVRjJteWtCa2hSd2tpY3NmUmVOQldsUXQ5NUtjQ3NwYllWWXpKRDd5Z3RzUVJGU0pCMUptVmhKbDcwbHRNVStkR2ZlNHRjWCtNVEg3cmk0QlcvK0lVdjhmWUx5WDV1T0pRV1ZKUXhSbWcxcXVITXdKb1NPWXViUERmSmhhNjFrVXVtTklOU0E2RUVsTkk0MDdFZk92Yk8wbkpsV2lPMGd0VlNiUDlUWStpeEcxQzVzQlkyOTAraDkxN0MwNXVpNzBkaXlJUTFNSzJGKzBWMExVb1ZyRTdFREhkVHhDZ0JhdVlxTC9QU1pIdzM5dUFkdEtya2doZXdUdlNTdFFtRTBtcUZNVzBEVHJKQmxCdkxLb3pCb1JOaFoybHdYQlVsTnNFOElIOVgyMXlreldqc0xNVmN5a21nbEtlR2tqQURsRkdRWlZ5NlAyd21uNFM0dWd3Q0VnZUtrNytySk9GTkk5aEIvR0F3Q0Y1Z044ckkwYnFPbUZjTUJhVXNPenN3cnpNMEwvbTcyaE5MSUtWSzd6ek9XY2JMeXJRR1hobDZBZ3RLVnk3SGdWWWh0VWhhSTYyS3Ewb2I2REJZbDVtajVEK092VVpYVFM0RjV3eVB2UWJkZUhGT1BMaTB2SmdtN3M4eTFxbEllOTFxNGIwVjVIcHBEVnJMS0ZwcDZKM240ZVdJTWRKNk4wcFJxamhTczBxYzE0WFdORysrTXZEYUk4Y1h2bnhIU0lGaDZNaEpFZGFGQnV5MXB1WksxUnJyd0NyRnpiQmo4RDFMYWNTWXVIRGkyazFaTVlVa3JYVWptNGwwVGdPaFpyejIzT3c4YzQxODdJMEgvSHkrNWZ2L2pmK1V2L0ZYL2c2LysvZjlOcjd6dXovT3E2K0wrMnU2bjNHMWNMcDlSbDRpWFdmUU9ySE9aODdoeU1FL1lMYy9NRHk2eGg1dW9OM3k5TzNDWC9welA4NmYvQ00veUYvL08xL2k5VDI4Y3JXanR4M293bkdaS1RVeXVwNVlWMXF6cUdxb3BlRzdEVEcwbk5FSzl1T2VuRmR1N3hMVGRPYnk0UWU0dWpBY1JuRGRGVGszZkpxaExHZ2N0dk1ZSTBrenp1eG9iWlNjVWEzUnFxSjBJc1RBc2xUcXNLTWJSdnloWTN4dGh4OE9ZRjlsNkR1c2hXRXdyR25HNWNiT2QxQXJwUVNXWldCWkl0MEF2VG1RYXdWWFVXdkZPOHZ2K1ovLzkvbk83LzBNcDZkZllOeGRZb1pPVGsrbUJ4N3lRLy9QUHlyOE82K29XcitmUFZ0cjVxS0h1V2ErK083Q3h4NWQ0YjBtTEFGakZOTUd2TDA2SFBpWnozK1Z2LzVYUHN1My9ydS9temRmLzd2QWExQ0QvSEFEcUkveXoveTJmNFkvOVIvK2VTNC8zSE8vckpKVHJFVlVycFFJRmxLVGtYU3RTbEpzakdhbkxUbjNmT2JEaGM5KzhRbS85VGYvUVg3WDcvbytmdnZ2L0M2KzZ6dStudjdxRXVvZCtYaGttVExIcDNjb2M5NjBUQ3V0VnRhVUtIcVAwUTdmV3g1KzhvUG8vZ3BLNHEydjN2TTMvOUxQOG1mLzFGL2x2L2gvL3h5WFh2R1pyMy9BNEEwaExwdENVUk5pRklleUJxdGx0QnVpY05qTTNuSE9DemxiUVYzVkxMckx6dkhvYXNkcFRmeVpQLzkzK0ltLytRdjg5bi9sTi9MZityNVA4UTJmL2paZWYrVVNxaVZPaGJBY1dkNlpxVTAwZEtvcVlrb1Vxd2k2STFYSDhPZ0dyNU00cW0zSDE5NDk4NmQvNEVmNFUzL2loL2lWcng3NTlJZXZ1Tnc1bEhGVUdxVW1TaEUzcGJkU0JGbHR5Q1Z6VHBIcnNXZFpBb096OHM1d0hYM25TREV3OWlQZDVZZDU3WnQ2TUE1cWhwU2hlMHhObFp2OW5tZGZlMFlDY3BOMEhvdGgzV0lwclJQRDF0aUxNOVVxaFdxR2FpcWROY1FVd0daZWYvZ0FhMmIrNi8vUEwvSFAvNFovZzMvOTkvM0wvSGQvNTNmeGtZOS9ERlJIbkFMeDlJSXduWWkzVzhmVkR4eW5tWlFLMTljWCtNNHlQbnJJY0xWSCtaNFNHNS85dWJmNGkvL1pEL0xIL3BPL1RNcU5iL3I0RGM1bzBjWjZTd3laM29sTFB6ZWdGbElzOU43SU9Oa0tIaVd0aFpxYlNHaTh3UnNqMDdncW4rTXdXSTdUU3RJYUhDd2hFS2VLTVphSDF5TlgrNEdudDJmT1M2U3ppcjd6V0dzWmVybnYrODV4ZjE1Wlk1RVVyNDJyV2JkT1laTjZoYzUwT0d1a083UVZPRVBuT093N3ZCSU9ZSzZDK0hGSytJS3k5M2RZVTZoVm5PcldhR2llTlJZd2hydmprV25Kb0tTYjJTaW9wc2xMSVdXWk1CaXRlYkVrVkt1QXhFWTZJMDBWcFJSS0JISk1KTmwvdHZ4eHA2WEtPb2U4QWFabHoxSElWS2x6TWtuTUpXTjB3VG5SdUU1ekpwV0pYVys1M0hzdWR6dFN6Y3haVTJwQ1U5RjRyQk9KMnBmZVBkSDNFVzJrR00weEUydkd1UTdyRkw1a3JMVm9YVG5QWjZJZTJPOUdsSVljTjB3ZDBtSHVuTVlZUTFrck5OaVVTR2pqaUNXeVRCR3JMYzVBcHgxcjNjSjdsV2gwd1RDRlZYaTBUb3hwYTJ3NEszS1NOVzRZcDlHeGhzS1AvTXpYZUQ0RlB2cjRrbElxcDBYZWZhV3N3dXJjR2tnYXpSd0R6alNNcm1ocmlLbVNXMkxYZGRTSzVMU2pVS3JpdFBBeW5UVmtKUG8zeE1vNVZKd1N4TkkvNVlhbU5WcU1xTnhURVB4QjEvWGtVbWtJT0xXV1JrNlY4eHBGdEI4ek5WZkdRWk4xWVYwYmc3ZmJEZG5vUFZpbldFTGI5Qi9nM0daSmwrSjdLeFFocFlieWhzN0w2YUJ6a0xMQ0duQk80NjNjYkxsV0ZBV3JJR2JSQ1hxcnlLVmhuRUszRGZwWnBWSnZWWGhkTVRWeTJyQU5rcVdBQm5wWGNWN1JzcUhyalRDamtKRnRMQkk5dE50RENKV1c0WEJ3NkNJNkVkY1p0RklzYTZhbUpvRGdWdEdkdEowSDcxSGFzWVJJS1RDWUhVMVpxbzcwemxKVjQySW9WRmZSVGtsWFNsVzg3aml2TTdVMWVyOG5ySkdhd0hxRDk0NVVJdVBnaVVzbE53MjVrSXZrZHh0bHVEbFlIbDFJbDY5UXFEbWlOU3lwa0pMYWhMemJkNzVoQWNiT01IU1drRE5YdzhBclYzdm1aY0VvZWRET2N5RVcyVkRkRmhQMDl2TVQxMWM5Yjd5eTU2Mm5qYmVmTDl6cysvZmIvN1VhQnQreHJKSXFJam91eWYwMHBYTGRkVngxUFJlOTUrSWdyTGEwcmlqQWVFMWFHbFU1TVE3NVlZTktaN0NOVDMzb21vdG5ML2pMUC9KWi91cVBmSmJmOE8wZjQ3dSs1NXY0eU1jZThhbHZlSU9iMXg2dzIxM2pid0pHZGZqTzhQcTFHSWlXR0huMmZHVzZmY0l2ZlA1bitlRWYvbG4rM28vOU4zeitpeS9Rd0hkOGVNYzRlblplVTFxbFJsakRndFVkM2VpNVgxWnlxbHp0UEoxUFNMQ1JwUkp3emtoUjNSeTV3YnZQWHZCM2YreXJYTjEwbkpkN3ROTHNoaDJnbUpZVHl5cHU0b3ZSZ1haa0VyM2EwN1NqMUVRS0N5ZzRUaFBQbmgxQkZVcXJkRXJ4b2RkM0RNTWxkcmZ5aTU5N0MrOE5vKzg0NTB6SjBBOE80d0pGRmVabElXWEZUaGxBazBzbVJUbEV2UHI2RmIvdzgxL21GMy9scTZRd1kzVW5HbVlOL2JEanJTOS9qWi8rcVYva1U1OTZJQnJDb2puc0R1aVNtT2JLMGpxKzlHTG13Y1VGM2hxZTM4bUk1REFlT0U4em1FWlZob2ZYaXIvNGczK0ZoNCt2U08xcjVEUmd0TWZhUWltR1duK01aMC91ZWVQTlBjcUJ6aDZQNHJ3RUtXUzhJYVdNUXJIYkNwZzFGSllvRzZjMmNnOS95MGRIdnZ4azRZLyt3Ti9nei8zWnY4RjNmK2ZYODkyLzhWdjU5R2ZlNUdNZnZjRU5lL1lYbCt6R1hvRFdjVUVyWWErdFUrSnJMMmJLazhEeDU3N0FMLy9TTy96YzMvc0NQLzdqdjhBdmZ2NGRBdkNoRzgzcmp5N1k5VExpQzJ2R05JZXptdEtLU0d5c1kwMkJodUN2aWxaNHBWbVNGTkJLTlNrb1d1TitYbEJLOGZpcXA3ZUJMNzk5NGovNGovNHEvL2tQL2kyKzl6ZDlBNy8rMnovT04zM3p4M250amNjb2ZjblZ6WUJSOG50S3JkUlFzTDduZmlvY3ovZXM1eE8vOE5tMytmem52OElYZittcmZQYnYvektmLzhxWkNuekxoeTk1ZEwxajhNSlppeWtUVXNMcURxTVZ2ZGVVVkltbDRaMW5Ub0VwVk9tY2FFMHJRaFNvcFhKeHVlTm4vOEVYK2VQL3AvK2NtRVN2V1J1a21MazhISmhPSzgvdlQxenNPOUdzb1JtODNTZ0NCWTNDT3kzUGo2cDQ2NGd4b1ZxajF4YXZMVkZONk9vWXV4SC8yS05ONG5OZk92SDcvemYvR1Qvd24vd1hmTmYzZlRQZi9HMmY0cHMrOVFIZS9NZ05yblBzaG9IZDFZRldOVTdmWWxWazFUM1BUNFV3bi9uU2ozMkp6MzN1TGY3ZVQvNDAvOSsvOWZOODZVWGtsWVBobXo5d3phR1hhTk9LWWcwRlZSclZ5cFJsRFJIblJRNXpQTThNNHhVSyszNkh0Y1RFNVg3RU9NdDBYckZhWXZpV25BV0oxZ25paWFaRTQyMUUzcU5WNC9scHBpaEYxeHRVcWNRbytjeGFhNXBXOUZiUnFaNmxWT2FjNk5kQ0NJWFZ5QVFxYjNRRnJkVVczYWdZL1dZV3RRcWpwRXVhVXFBcXpkaDFuRU9rWnVtbzBUbDZMd2N3YW1WTks4WjRjaWxrR25GckdLbE5laVBkODdMRnpDclJFMXREeVJxRm1HQjBOcHZUVmd5WHFzbitLNTAyR1hrYVl4Zzd6eG95VjFvK2J5aWcxZGE1azFxTVVqUzVpRWE4cmhCanBhQnduWURoWHh3anpuUzRYU2NwUHpFUmMyTHNQVHBKQ3N2RjZMazdyM1JlRHJxNUpGU1RmVjhiemJCSkRMd1Q4a2NwNG9UM3h0R01qSk9kYnFpbXR3NmVadWhrdkY1cTJZd3kwczN1ZWt0cGxaZ3lSVHNKVEVpSjBROEVWWmdXdzdvR25MTU12aGNVazlaWTR6QmJZazVTd2xudW5CU25uLzNWRi96OHI3NmdOWmwrN250SlcxSW91ViswcEZmUllBbVJ2cFBKN0JvYlZndkt5eXJIZmhnb3JVaFFBSXFxQ3dXUlRUMjVtN2wrOTQ2Mzd5ZU0wU3hMb0cwYXRYK0VzNmpJUUVJcTJsSVZCVXN6Q1ZXYndCL1RDbHE0TzJzSXRDS1Y4cklCa3ZVV1NCL3oxb1p2c0t4VjV2MmpuSFJVYXdLck5Gb0MzcFdNWEZOdTh1RzJFeEc2WVhTalZFMUwwcmxScW1LcGxHWUlTMFZWUVVpczY1YnFWaHRhQ1ZEV1d5VXBJbG5FcTRPdlRLR1NpK1ljRzZwV0JvdEU4RXhLYmtLRC9JTlFHTmZZZVkyeFdzRE5hS3BWakwxRnQ4YXVzNHc3VDI2YSsvc0ZsTVRxMktySnEwWlZPU25wM3VQc1NzdmluQzBrZEZPc2FhVWZMQjY1Nlpld29MUkNHOCthWjd6cFVHMUxvbEFGYmVWa05hOGkxaDM2aXV2WkRCeVcwNVJRYUZ5bk1OV3p6QUUzd3FFYjBBZUpIdlI1bFV6SXBpaEtrZVFiWnJDV3crN0FlUmJkVEtWeGUxNnd3TkNKcWFYaVVTRmlWVWRvUmR5elNoTkNveXJRVmROcnlSWHRYYVBUUFNGV0xycWV5Z21uTzBHaWFHRlRMVVZPREdzdGhKWWtxa3NMaFgrTkViMTRqSkhzeTVJcVVRZXMxZXk2Z1NtYzJZK0dEejIrNFhJWGVPdkZtUi83cVMvd3QzL3FDM2pnOVJ1UDJYVThlblJGczVhcnJzZDdUUzZKL2VCNTY5MFhQSGw2WkwxZmVYTE1uSUVCK1BDakR0dGJjbFZjK0E3WHk4RW1JcTQ0Wnh5aFJScWdWT0YrUFpFaU11WXhDZTNGQ1gxZTdtbEtZNTNqOWpid2IvK2JmNFIxYlV4SlhrYURsb05TbEl4NU9nMWVKaXVFREhzUHlvcThJa2JwYk1kdHRPbVUvSGNDTHBXY2FHT0ZZYWY0K09zM2NxQVpSNVRTeExwaXJFRXJ5N0Jyak9PSUxsWVlqSHJicEhVbExwRi81OS8rVTd3Ykt4MWdnUGQ2WlFBZDhHMGZ1K0l3ZHVRRTl5OG1IanpVT05kUUJ2NytyNzdnb3JlOC9yQmpycG5lTzVReTVCSVpSNC9TaldsYWVQUDFCL3pLMjdmODduLzlENzMvMXZIYmp5eVhtamNPanEvLzZDVjM5eXU1Vm5hOUk2c214aDVsd0RTc2t4ZHRMaG1sR2pFV2lmL3FPenJ2Y1U3ejVtUE41Umc0VFpuLzZtLy9Jbi8xYi84aUZuaDE3emxjOWJ6MjJnTXVMMGJSNkNCalYyY2M3enc5OHJWM2IxRWxjbnU3OGl4dERGcmdqV3ZMd3h0SFp6djIreDVGWmcwUWs2WHpscWJrMEtwS3hkcUdwa09yZ3RXRnpucGh5bXBENXd1NmFXTEpvRVJPNDVURFc4L05JVFB1VG9SUXVIdCs0cy85aFova3oveUZuK1MxZytIaHd3UEdESHowdzQ5QlNWWnVTbzBsTm5ydmVmdWRGeHhQOStRUXViMlBIQlAwd00xZThaRTNkbEFMank1N0J1dmVIOWUxVWdrMW8wWDZpV29LMTRuZVRTdU5iWVZsTGx6ME8xSk9vTUZxRFVWemMzWEYzL3BidjhDZi9hR2ZFUzNmUDNLLzZPMGUrdWJYZDN6aWpSdE80WXhWbGxZOXFVcHVzTjlNRnFsVThoclorWjVwRHBTcXNNNmgwcGw5YnlBYmNsbm92R1BuQno3NnVrQ3RuejlmK0lFZi9BbnFELzRFbjd5eVhONTBWTFBqNFlNTFhuMThRd3dDSW02NmNIc2Z1TDlkU2N1WnQ5ODljeGZBQVRlWGhrOS8rSUtkOXpoZGNhNng5eDN6RXBsVHhqdjN2bHduRk1uTVJSbVNBYU5FWDBacjlFclREU05ycWRpU0pKM01XRW9xekd2a3ZoUnVMbmRvcmFrMWI2NTd1RHN0UEhzV3VMd1lHTWFlM2RBUlFtUUpVYURRMm14SUtrWG5MVFVuMEFhSFp0ZFpjckdVMWlRSW9oVm9sWWNYQjZ3UldWYU1tU1VsWGh4UFBMNlVTVWxzOG1mZFR3czVpK21tdG9nZFBJUHZtRUltbHNhZ0ZESEQ3ZW5NZVFtVW9qa01Cb2RqeVVua1dBaGtYTmRLQ0pMd1ZaSEMwbTBSZ3EwSlBOb1pzeFYrMG94cGlMU3NWY2xSTmtZNnBhVTBySk1ZTy9GS2lIN1dXNUdUblVQQ2FrdHZGVVdLQU1tMEx4bUZ3MmtGT0F3S1hSc3h5UjU2YytsWjFpelRUcW8wVTJLbHhJTDIwajJiNDBMRGNlaEhtdHJRUENFUW9uU1kyUXlnV210VXpWUUsybXB5bEttSGFFdjF0bmMxakhGYnFJbVlUOEkyNVZSS2NxU2xpMnNwVGJxMnZSS1pRR3VHNDF6Zm41d0ErSzByNll3Y0VrRkd5MnA3Zzc0bkVmQk9vMmxRSFZuWExXclVFdEtLc3BteDZ3bTFrYXVoRlVtYmExWDIyalUxU1kvSkNhUHQxcHo3SjZEY1NrR3hta0NUdHF3ZnFLVmdIVFJseUVGSlYxQkprTG8xa2FIUGxLSXByZEVaR2MrV1ZuRk9Ma2JPVWtBcUdoV1JLV3J6M3NXb0lsdlVDb3BrRENzbGtXUktLOGhOTnZqVXlMV2hkUk16aGRFWTNmQzk2Q3pYWEZBRmRGWG96dERiS3JGU3RZaytTMWUwS3FBMWw3MmpxY0lRS3Q1WXVyNVJpMkthaTJSZGxrWlJNR2pGMkVIZmE1d1N6WVRxRkxwS0o5RzR3akJZVkZPa05iTGZHUm1ucE8zTGJZcFdGTFUwT1ZVWlRlY2JsWUF4RGEya3ZUckhncmVPYWpKNWcxNVROeEcxeXJTaXBRQzFWc2hQMjZrdUpGampSTjlyckpqZ3VMN1lzUzZKbEJQT2VuUXpxRnBvTFhHeDZ6Z3ZCWmZnY0RDa0VFRXBpcko0bzNHMjBIbE5LUWJkT3F4dXBKU0piRVY2ekRTcnVUUTlMV3ZPS1JOS0paZEFxWkJUZzFwNTllYUtjMXg0Y1pyb3JjSjdTeW5DMzFSSzRVMUhpUk9qbHdKWE5VMHRtVksyRzFBSllkL3BucEliQ2szSmhqbFdnZHlhd0g0Y3NIaENXVkZhT3RXdjNReTg4Y0JRVmVZOEplNlBFZGJJZEhkbVdocXhDSDl3NDZ3eVdwRkU5Rjd6NXF1ZUN2UUtEcnVCWWV4NDlpS3l4SWF4MGdsZGM4WXFqK3Uwak1kOG8xck52QXJrMVRuREdpSXRObHd2cVJReEsxUlZQTHp1K2ZLN0szT1RBdkhRSzR4dE1uSUxHbzBjVXVhNC9mczB6RnZFdGpKUUhlUUt1b29lZDlkSmx6d215VjhIdU9vN0JxdWdGb3lWOFk1cVdUUmZ6WEEvbmRuMVBlaEs1eXdPeXpuT29CVXFWYlQyZk9qTkhkZkxqRk9Ha0NwektEaGpNTVp5NkIybHJCeFBtcjd6WE4wTU9DdG9rOVFLTFUyODhYZ2tsaUxPK3M2Z3FveERqTlpicHFyR2Vjc0hIbzFjREltVWk0eXVqT2o4Vkd0QXhHclAvU0lhTTY4cnhScGFoYkh2c001UXF2ei9IRlpLRlVSUlZVMlNCdW9XeGtEbXRjc0QxN3VCNDVLNVhtWTY2MWhDNGQzbkMzZHZSYjcwMVNQYmNJT3lGVHJ2eFlDTkRvWUJkbnZGbzc3REtJTjNpcXNMeDJBc1VPVUZYd3lOakxZWmJWWXFCcU83YmZRYzZmc2UxVFF4RmZhRDQzNjVGem1QODZMMzBwcWg4OUNNR0E4NmNlcVBnK2lHYmk4V1FwYVlzT00wOCt6WkhhM2U4WlV2dmszSVlEZEp6RksyZ3RaQzd5RTF1RGhvWHVrNmRJT3JmY2N3T3JSdTdEcUQxekNuVERtSldGL3BoallHaTJLSkNlMmN2UE5xNUdBOXo5YVY0akp1NjFDRlhGRXFVVnJoNXRKeHViT0VXTWl0c1BNT2JTVnhveGFEOThLU1V4akpzVzhLVTJWc0tybmM4czVVYUdqU1hYeHhOekhzRTRQdlVHMUU2VWF0aVRVRnJnODc5dU5Bem9VSEZ6MlBwNW1VUERFbnZ2cjJSSzBUbi8vQ2srMlFKOS92cU9WUVpiV2NoSzV2Qmo0MGRuZ2wyZUVYdTU2REh3aFprR2lsaUg2MVV4Nk1GbE5EcVF4T1UxdEJXNHNwaWhRVHZWWTQ1VkJJMnNqeHREQjRSK2N0b1ZSYWc5aWtxVUtEL2RCamRPWVlFcTJKRy9uNnNxZTNodk5KSE9GTk9pL2lubTZpODE5RDQ3QlRlQ2Q4VTJWRlkxaU1RaGxGYnpwaWpCaW51ZGdQbE5wUXF0STdoVjZnTEtLOXM1M0ZaOUh5UGRnUGhGSTN4MDdGS1l0U2lvUk10N3kyV0IzUnBySHJQSE5NNGhsNGI0UnBuWXhnbTBLcERvMG1sVWdvWXNEeFZrdy9UbW1ocUxTNm9XNDBTclV0RWF3UlN4YkVsSmIwTSs4S25kdlNxRGF2Z210U1NlUmFHTHpEYW9QUzBzaHFwZEwzRG04cW1pSWROS3ZFNUZQbDRURE9ZSlJpSER5aEJtaWFFREpqTDNLd0VKTjAwSEtqMmt3eG1wb1ZWanNwd25LVTZZRDN4QlRJUmFGYkV6MnJjV2dqQldTcWxRRTVDRmhqQ0RHVE5rZTMwVXBZcm1pOHpUUW5RUHp6dkloNVNqVzg3VEJHWVUzZGFnZHBncFZTdDJrZFZDMFE5OW95clJsVXEvSU9ySG1iY0VGcm5qVUVLaGx2TEpYSTBGbU1naVZKczBBaVF6UldXWXpWZExieTZzTXIzbmp0SVY5NzhvTGVhb1l1L05NSkxyVlcwakpCMTZOYTkvNklKS3h4cTFSRjZKaHlFYXpGd2JPK3IvRnpnb05JMHRvMHBzcEd2amZieTZYUXFrQkkrNjdiM0U0clRZdjRWeVBtbWpXdE9LdHB6ZUM4b2JPVjRoVktXeFN5T2ZadUVHeEVrYnpFWFpPWnZER0NlK2ljT0RvYWpkUUtHdm5TeFZXYXFXZ0c1ZEFZL09DWndzckZSZU55OUtRa3dkMkRNMWhyNlp6ZjlKZWFwaXFxQ2ZFOHJJV29NOVpwZ1NvYlRRaEJlRTdLTXZSR3NteFRabzFKdUdBa1FpcUVBaUV1REw2VEczY05HTk1KVDZzRWxFa1liWWhSczRZWnBSVlhCMGZKamVNcFVpb1NZZWNVTVVBTWdkMVFHUHlCOXA1cGFEZnk1UFpFV2lyS0t1S2FDQ0d4Nnp1czByaTlZWENPa0JxcGxpM1hFd1puaVRsanRjWVlSODJTbnh4U0piWk1ieFVYZmMrbHQ4d3BjNTQxMDVMbzFJRFZpVGxJU3NUVmJzY2FNdXNheVlQRWtFMXo0dWJnY1YxbDNIa0pzcStaUk05NW1ybTlPNUlibk04UnF3eE9WZWJRaUNsQnRTd3BzZVRFeFZUd0JqRTdhR0V2M3E4Rjd5dGFOWHJqNEFER0NOejZjaDhveVJKclE5a0VXTHlSWW1yZmQyalR5UU5sTlpwQ0N3dm5OUk5LNXJVQ3B6VlJhbUhzQklWU1dFWFFyQ1QyTCtZVnJmYVVWc2s1RTJkQkdkemZyK3dQc2dGZURoWm5MYkZVcmthTkpsTm9MTGF3YzU1bDFmUmE0aURYM0VpcFVrcmg1c0pScXBpdXFpclVuT20xWXR4cGNkd3BFY3FNTzRQUmpyVm1waUFwRUsxSnNhdWE0cnhFYWhFUTd6a2YwY29RNG93ejNlYUVqK2lXdVhDanBERzVqRk1aa0d6UlZDU0c3cUkzeEZqbEJaOHlUMklpNXNvblh0MWpUZVBkdXlncEs4am93bWhETFNKVlVhclN0T2lTQjJzWnJCVmtTRzBNUnNabG9VaFhJbXlqdXJsVTVxWGdyZVU0WlpRSHB5U1JSbWxOeUZrcVBFVEVIVXZCV2tNcWxhVkVqTEpZQ3IzUjdQcU8wUWZKZHEwZDB5eWJ3OFZCUm1mbldVeHZ3eUJZRTZjZGhZeXpqc0YybExxU1V5Q1dqcW95cXF4UU5mT3lVRnJsTkFWR0w5Y3paVVBmOWN6eGpOT1dXaFBQcDFzTy9aNWVkVHcvelpMM3FnMGhSa0xLN0R2UGhWWXNpMUFiYWhHRHlVVXYzWlgrdmFJRlNiS0JLdnhabWtDL01WdFhRYnBRdFNyY05sWXpHTmF3c09zNjdrNFJUZUxadExLRWxjTW80L1BPSjd5MnpDR3pSa216R2wzSDViNGpVWGh5ZjR1MXZVeWdXc0dvUWt6U1lXK3FZV3pEdGNiUUdSU1NxcE9CV2hKTFdCbTZQVGxsUXM2b0xXTysxc2JnUFRrbjZTN0dRcXJpSUhmYTBaTGxGRmNVVlZ6aHVhSFZTdDg1ZG4ySGNoMzdzWkJXemF3U0Q2ODlyV2tCZHNkQ3E5QTdpN09hT1FteDR6QjRCbWVsKzkxZ01DUFRPbTNYeVhHY005NVVZa3d5NXZSV0RpV3RibVlpZ1ovUFMwVnBnVHdiTGFPQzkwRG15bG9PNDRCYUZtNm5nREdHWGVkSVJVZ1RZKzhGZWwxZ3lobnZPblFWOUpCVm91ZmZ5RVZvSS9yQkZBcHJ5RmhuTUUwS3J0SWFhb08vNzcxajhjSkZyaWxUdHc2dzFnWnRFemNYd3phZXplUXEwWVM5OCt5SEFVb2lwa3hxalRrc1dNUUlFM0tpOTQ2cjNjQzBacXlXNkZZVWpNNXZKaDZaRHhodHNLWnlYaXlFeXRoYm5OR2swbVFValdqU1VSbXJSTU9ZcThJWXk4WFl5WHVlS29rM1dKeVdwSlhPYnpuenpsSmFvR1JINXp0eWprUnBza29TbkJhOVhzcXdIeFE3c3gycVN5V1hUSTBLN1FVKzNWbFB5WTBNVzZlM2NKNkQ1S0J2dXNjMVZxZ2loeHE3N3YweC9od1hXaTIwWnJESzBwdU8xRExHU0h2T0drM25yTWpabW96Wno0dEVFQlpWVUVpV3RkSWlPNnVtTXNkRVdCV2RjM2hUc0Vva2JiVnFuSEVzSWJGdWhhTFNGZXJXd0xKMksxQkZwdE5xcGJmU2VDbXQwUHVPaG1QWlJ0Uzd6bThPNllKcG1zcElWbExIc04xdkJibS9kZE9vb3FUeDlFOW1Rd1BvS2ppVFZEUG5kU0tFUUNXU0txalNzY2EyNVJFbVVzMG9KVEYyRk9rVVdtM29qSXo3U2syMHFNbklxWExZOGhKcnlZeWR3eHV4cytkYTBKMk11QTF5RWxOVk1mUWRSbWVXa0NsSnp2NmRhYWk2NGxVVmwzVFZLQ0o3MzlHYUpaRlFOT21JMk1hMEZ1SXE4M0J2cFJQVzlRUGFlTTdIeUx3dXRKYlpPVTlaUlZmWmFJTHVLQnBEb3RtR015TTBXRnZrdkN5MHJGaHp3WmdGNXhxdGR1UlM2THZLdkViV2FCbjdRbG9GYUY0RzBUZlE0SDZhbVplVnk2RnRITERLT3A5d1JvSEp0R0N3a2w1THlaWllaM0VzYWsrdWlqVW0xQlpHZnB3aTFva0diVHJkMFErS3RXblcyUGphL2NLaFU0d3VNWWRLNXoxTE9qTkZ6K1ZoNUJTQ1lES3FJYWZHVklLRTI4Zkl1b0p6aWM1YVFwQlJTNnFKRnlsekhodmphRkEweGs1UjhUdy9yWXk5WWtrcngzbmg0ZFdCaTcxbG5qSXZibzg0SXc3cVpXakM1WXlKMWhSTFNvUzdtWnZMQTcvaE0xOUh2eHU1TzA5WXEvQ2RKYXdMcFNoMmZjOTVYWmlpWm1jTjNtdmltbmd3RHZqZTh0YnRrZXVMUFNFRnlpcW4wcktKOU9jWTJKbEJvcXE4WStnOHAvT1pHRmNlM0Z3U1E1WUhmQmhvNjBSUmlRL2NLY3BhK01RSFJzNXpRbHVEMXBhNzgwUW9Bbm92MjdqWG1zYVVFcm9Wcmk5R2NqTTh1enZqVVZ4ZjlCeW5JOTF3RUhqMXNuQzUzMVB5U2tHenBzUys5OXlmQXplN0R1Yzk5em1SbGtUTmpVZlhQV25UaXpWWHFVbno3TVZNVW9rSEY1YmFETVk0ckczMHc0NW5MNDY0Mm5qajBRTmlGVDZiUWpCSktNWE9kYVFtcnUyY005NTZ1czZRU3VHNHJGejFsNkxqTVJCYUpzNkptMjdnV1ZwNTk5bVo2d3VIb3lPSHlJT0hJNlZwVHRQS3hXRms5SXFVS3NwNFVnalNoY0JSY21Td0N1MUVNbkY3U3FMZjhwNmNSV1J2dGNKNjRhUEZra1dHOG84VWdaM3puTmVNTXVJb1BDMFRwTUk0U2hKQktabmRmcUFWeFhTZTZMeEhXWXZSOE9KMGo3RWR1M0ZQV0FJMUwzanZXR05nU1kycnc0NFVDMU5ZT1F5V3kzRlB6b3FVdHR4czEyL25iMkc0S1dVa0E3eEpCMk9QNVhhZUNDM3orczFEN3BjVFljMWM3blowVmlZUjU1YlJyWEhWNzhoeHhmY0Q1elV4bmM2VXJadG1uWmdxWXE2OHVKc0pJZkhxQTNHOHgxVCtNWDF4UVpPYlFsUG9qTm9tTDRxU1plU0kxcVNVNmF6aGVqZFFXdVdkdXlNUEx2YXk4VStCcno0OWM1NVhkcjNqalllSExVWlAwcFhTTm1yS1JWSUtXeFUzOU9BOVhTY2RublVSOXFCek1pYXRTcmgwb0dTY1dEVTVpU2x1elptdTMyRzFvdmNXalNJRWtkT01YYytheTVhTUltYU5RcWEwd3NXd0Z6VElITkRHU05PaXlRYXZ2V1VwVW5EM2VvTllOem5Jbk9ZRmpHYlhlNGtUVElsbnh3VmE0Mkp3OUY0T2Iyc3BKTUJwell2emtkNFpyb1lkU2x2V2toaTJoSTV6VE94M0E5NVowaHBvRGVZaW80cGFHeGpoR0thY21VSmlXWk80aTYyaElTN2hzS3dNM2pPWEkwUFhVUXJjSG1lQjlDK0pmZDlKb1l0MFcwTVdWbkNwdkQrU3JiVnhQSzFTVEN0RFNFWE1MNzZoaTZJcVRTMXlMeHRqVU00U1EyU2FGbmE3UVF4cHBiS2tRTXlGYWMyayt4Tzd2cWVXekJJaXVXbWMxbHp0UFd0S0xFRkd4SjJ6MGwzTGpiRVhpVkF1V1Z6TVdiUEVnTzBVTzkramE2VFRCbzNJMmRoMGlyUWsyanpuME5waEFLY1VEZ0ZkV3kySlNqbFhSdWZBTzBxdHBGcElhYVd6Q21jYlJrY0tCZHZBYlFTQzkzUjdwUlRNbHQwc1dtYXBnbXBKM0U4TFJqc2NpbEJFeG5HZVZyeVZKa2xZRTVTdGU5cWtvTlZLTWNmTUVoSk5TUkhmYTBmTGhhbEZZaFlOdWQzZzhtSU1GalJOTG8xZE41Qmk1ajRXZENzb2JVazU0SnltbEptNEJyUVRMZVl4ekRJMXRZcFVOS2xtdENwNHF5blZFZGVWcGlUZ294WW96akNId2hJYTNraFVja3dMZmFmSnBYS3NtZDUzNUt3SVNXUU5SZ3Ric2hUcE1LSUVxVWJWeENETndYbWU2WjFvVEp2UzIyVHpIeDFESTkyWWpHS2FKM1FyZk93REQ3R2RvOVdLclJsdExhWEpLQ2lWaUtvck5ZdlJRK21NMW9iV3JNQnQ0NHpSbHI3dmlVSHlvN1hXcENRaTRhYkVxRkpicFZaeFErY2ltMWpuTEoyVjhjM2RhV0dKR2VjTWwzdFBaNnpNNDQyamFvTXFpVU0zOE93NFVacU1YVk1Wa09aVk41Q1VtQk42MStHY2RBdGFhK1FRV0ZOR05jVyszK084aUhsUDRZU2owZHVlYk1RUjVBQmxQVXRaT1U0cnJScEdwNmx0bGNCN3ZaUFAwV2IyUTQ5M2NoSTVuaWFHdmtOalpXUkE0Y1BxV255VFRYRmFWL2F0NTNvWWFCVFduS1U0YzQzRE9Jb0RWRGRLYklRUTZZZU9XQ3JrUnU4dHgza2xwc3JsMklzN3kwb2JYTFdLN3kzV2FQYURwY1JNOVlxV0pSNXU4SmFid3lXZDNiUEV5TG9HYXBNaTYzMFJza0lLdWlDY0x4VGtXbkRLVXBTY0x2ZUR3OXNSOWVVblhGejFHSlBvN1VPODM5RktwZVRJa2hORE41QnI1RENNek1zc2hjSWM1SVhxTkc5KzRCVys3b09Qc2M3emZMbmpxanZndENmV1NHMWl4cWcwMGhyb2pXaUR3aXdkaHFRTDMxQXlyMTdjOFB3OEVaYVpCNGNkeHlCQjgvTTBzeHNQVExVd1dNdUY3MWhDeFBZT1l5MzNkL2RZWjVuenhJMjl3cWlCYzh1OC9lUVpIM244bUthcVJCQldPTThydVlyQllwb2puYkk4dXI3a2JqMnhoaE1mZSsxTlhvU1owM3JndGN0cnB0Tk15bys0ZVhETjgvTXRaVnA1ZUhHTjF1Q041cmdFempHeGxzeUhybTlvdXZKc0R1UVE2WXltZDlDS3BybU81c0hYeHVrY1FDa3VkNDZ2M1o3UVRVd3g0N2pqR3o3MENqSFB2UHJnQVJySkdaL0N1bTJraFYwbm8rTE85NXpEd2hyT2pKM0R1b0dZNGVIUUVZSkVaaVlqV2F3UExCeHI1c245d3E1elBEK3RQSDIrOE5vckY3eTRDN3g5YnZUSzhkR0hPeDVjRHV3SGgwSVJvdUxkNDBRczBpbWJRcUZUa1k5LzhEV2NoWEh3ckxsaVZXVzBVdmllY21Ud2psaEU3K2hWUlJsTFp3dzFKc1poNE5qZzZlbklRWW54MW5lT2xMTmt3ZVpNelFGblBWVnJuTE04dlR2U2EwdmZkNkFjTVFRa3U2YmduT1BDR0o0ZTcxZ3J0QlI1NWVJYXM5dGhiV085dStjY29OOFBPQVB6dk1pK3B4Mlg0NTdqZWsvZkZHdk1hR080dk53VDAwcUxCZThkdnUrWnBqUE5EUnpHUGJZRjFoZ1ozRUJPaGFjdm5qTU9ucUlWMDd4d2ZkaGhyQndJdkhXTSt4Nm5HcmxJRkY5bkRGTm8zSVdGaTk2eUgwYzZJM2lldUtVaEhlZElDcGxVRTlmWG5xdWhwNFRDbDU5ZDBQV2VEejYrSWkySjh4UTVuV2EwMWR3OHVLVHZMS2RwSnFlSzd6cTZ3UkpDSUVVUjJEOC9CWFRMM0Z4MG9BeHJFT2VrMFJhbkNxVXBpdXN4TlRPblNLdU52Zk5vWlhoM0NxRGdjaENYZVdtS3NBUU9vK1Ivdi9Yc2pHMlppNzNqdUNScWtoakp2aHNBQ0d2Z01QajNpeEhiRkhmTHhGb3FlOTlEcVRoakNWcWpXMk5kSjZhU2ViZ2Y2WlhtNmYySkpSY2U3bmNTMzJlc0ZHazVZSzFsVkpwVGpLeXRNQ3FKVEQzMG5xcEVjbE9qNEU2RzdoL3ExWXcxaEp5SlUyS2RWL3oxeU0zbHdOZS9lWTB6Z29WeC9TZ0dvbFdLWnVXTVlITzB3bHZIRW05SXVjaCswM2NjbDB4bkpUOTZDcElSdlJzNitzRmpxcUREbnA1V2pEZGM3WGU0Sm83anpzckk5M1lKZUdmb2tORTFWbTlSb3BuVGtoaWR5S1ZPNjRvM0VyZ3hMUXRhS2NhaDQyQWQ3OXhOckszeSt0VklDWW01aUROWks1aHlvbFhrOXpwRENJVnBYdkMyU0M1eHNSeDJIcU1neDR3eWdtZ3pTcE5yNUx3RXhxNUhheW5zeGs3MjNGUXk0M2lEdHgwMUZvcXFXR1VFQllSa1V4c3RHS0JHSnFhR3N4N2xGUlpMYTRXSzRlNTh4bW5OWWRmVGFzTzdEbTh0dFNSQ1hFbFVkdjNJUENkeXJleDNJekZGVXBUMEZtOGRYaXZ1NTBoVDRIdk4wQTJRRVZhcWtaaGRsT2hEdFpLYzVXVmVHY2NSNHlUZnUyNGEwcHdyM3BydDM1QzVYU2JHZnNRWnd6bXV3akxjcG1mT2lhRnNTWUdMWVk5cGxubWRDVFhTK1lFMUJlNm5nRzZXMGdxcEJFWXZUTjNlZFJqVmFDMWpyRWRySmNha0lzU0VXaUhId3VCRjNtQ3RJSUdPNXdXbkRidXVsK3VRSzRmTzhmeitUSWlaem5sS3lxU1UvdkZpTWRlNmRid1VlVWxjN2pwKzQzZCtQYzUxVUdWc1o3U1RNVUZEQXJuRG1ZYWkyKzNGbEVEREtXRktOUXpPZHdMMkxvVlNGYjdycVdSeUtZU1NSU1Rhd0dwQkV6eTd2K1AyT0hHNTYzaDBPVkRpS2ppQkpFNnZSeGNEWStmb3ZhZnJIRXVSdk1wZDcxaFRwT1hNdTdkSGpsUGtRVC95K01FbGJqK3lwb2hwbWFIZjgveDhwTVZNNytRVXJKV1JsSXpPb1l6bDJYTGlrc3JsZU0yRUlZYUlyUmxNSXhiRi9SUjRkanh4MlhzZTdTM0hzckptelRSSGRBcGM3UStNRnp0NjczbjN4Vk02ZXJSdXJLVmluT042ZjBGWVpwYVVlWG8za1V2aGF1d3dHaG1MVWxoYW9YclJvUXltWnpDV2VaM0lMVXVnT3NMV09rK0xzS01PSS92ZEJSaFBJN0x2T3Y3KzU3L0dwVEc4OHZpS0x6NTdnamNHNXoxaHpUaFZlUDN4QTJ6WGsxc2xoNVhwUEdPTnczclA0RDJ0RnM3VGpMVWE1ZDdqU29uemlnWWhCbzVSOUpGWGw0NzkwRW02d09YVmx1Y3Q0L25lU2lkZ0Rldjc2SjVCVzQ3cnl0RDNXSzE1UHMxMDJuQzVFME9JdG5CeHNlT1VNcDF4bUNvWnFVOURwbVRKRlUrbFlXUGpicDJFNHhsUHZETWRpVEZBTlJRdER1S1FDbFlsYk9jNFRqTnhEaGpuTVZOQkdZa3pURGx5T2swazNlR1ZKT2FVVkhseG5EanNQY2Mxa3BVbWxJcFYyMWpRZWxxcDNNMFRVMWpJdGVjcjc1dzRwek9IM2NqdEtYTjdYSVIvZFF3OHVjME0ybktLaVpRU0RzTVNWNWJTR1BvOUw5WkltRmZtTmFJb1RDQnBEOGJTZHhvVkZITk16RGx4c1JzNEhpTmxOWmhPNFl2bStlMGt6MHcxZlBtZGUwYmR0c09GYkc1UFRtZkdybkx3bWhRaXF6TGtwRmt5ZEwzbWZwMndPWXNndkZSYWsrNWdISngwSjJ0Rks4MmJ1ejErNkhFTzhvdkdrK1BDdS9jVHYvRFZwMXlPamxmM0hUZlhqZzg4Mm5OY0M4ZnpRdDk3WHB4WEhnODdXb0pqV0ZsVElxYkM0QnhUVGN5MWN0RjN6Q0h3ZkRPdlhIU2VUbWVDRmozclhCWFBwb21TSXZ2ZE5YZlRSRHNKa0hjSk10cHh4cEJ6NWppdEhNWTlCam1SeHltZ25FZDFqaFFyVlVzSzFaSVNVMWpwOXhlazFIaHlmeVJQRTRlKzQ4cjJwSEppdVF0UUZPZDVadGYzakR2TnNTM0VKWEtiSWtQZjQ0M21pMi9mc25PVzBSbnV6aFA3UThGcnhlMzltZWZId0t1SEVkTU14K1ZNeW9FMVpncnc5QmlnNUsxb2J0Z055bXlWWlYxbVFoSXU2Ym1zSEtmTXhlQXhCWTZuQldVVTY1cVk1b1ZVRzd1aHd4c2xCZUd4a3VaTVh6VjMwNFJaQTJOVEpHVVl0bVNacFZsT3A4Q3lSRnFwekduaG5mc1RiejY0bHMyd0t1YW91SjhUeTd4QU1heDFwYmQ2azdvbGRrNVRrWUsrMDVXOFN0UmlxSUdNNWRCM0xBbHFhY1I1UVdtM09VQTFUNTVOM0QyNzUrb3dZS3BtbmdNNVF0ZjFOT0xHOUszY3o0bDFObHo0R1dxaVpCbVR6MkVsNUVRemhuTXVIRHJMd1dsVXJMejcvTVM0RzNpK1ZuWlcwNVFqMVV3SU15bUpxUTVYdVU4RnJUdmVlbjVDdGNESEhoNDRocFdtUGNsNDluNWdDcEduMDh6RHd3N1ZGR3VOeEJSUklYRzNKSTRwNEUzak4vMzZOOEY2MmUrVXdUV0Y2ejEyc0J4bnlmemVlMG44T3EyVjB6VHo0R0xBR2lXRnNqSXM2MEt1bGF2ZUNldXZGbHJMdkhzNzg4RUsxN3VlZmh5NTdBZFNxMHp6aXRQeWZ0SW9MbnJwbms2cDBKUzhRNVpRYVNXenRzSjFML3FFb2p0U3JuaVZHWGM3UWttOHVMMW5IRWFVY3ZnbVJkVTQ5T1JjZVRJRnJnWlA3eXpuTlZKaTVuaWVhU1Z4MlBXc1JjSXJkc1BBdEM0NGI2bEtNODh6SVNmbXBmRDZveXVSa0t5QnptbnVsMFRuSFRlSG5wQXllVTNiOU15SXQwRTFlbXU1N2gzM3NmRE83VVRPalRjZUhURE9VSlBJR3JLR2QyNVBhREkzVndjYWlzRTYrcTZYcU4vVGlmM09jN0hyVURTbU5hSzEzQSs5YnV6ZFFHbU5OVWJ1bG93ZGRseVBPM1lhMWhRSVRWSFNpbW1GM1c1UHJBM1RRTlZDS0FYam5LVDBGS2lsa0pKTVVidSs1Mkxvc0ZyejFkdDdXaTFjOXA1WUs5cGE3cWVaSmF5VUtNU1hZZEJjN3k5WjE4UjVtaVY3MjFudTE0V1dDblZ6WW9jVTBGcHhlUmc1OUFOaGpjUld1RG5zU1NrU2xSVDE1MmtoNU1xdTk5aWFPQzhMYTI0MDdWRzFRUzJTUTI0MW5UTk1TK1RGVVdJcUpSaWx2YzlaTkp0eDdZRTE1alBmOGNsSDMzdlJHNVR5R09Nb3JUS0hsWmd6cFNybWVTYW53Sm9pSVNZVWxsb0ZxWEthQXlrbWpHcE1XZlFsSVpVTkFMazVvRGQ5WENyU2psWk4zRGFwS3A3ZjMzTjdmNWFjUksyWTE4RFhudDd4NGw0MlVPbEFTSkpNVElvVVYyN3Z6ancvVGFMTktnS2VuSEtrckprVUk1bkVISkk0dWVaSWJZMjc1UVJaRTdNVXFtNGJWWlpTV0ZMaitiU1E0MHlxbWllbmlkTjBaSzJadTJubU5LMWIwazFoWGxmV1dzaXRzWVRDTWk5Y2pRZm1OWEUvQlVMTHJFdWdWVXZSVFJ4c25VZTFTbG9qYzVFL28rYk1uQ3ZQVHdzaHIwQ2pycFZudDNma3FsaW1CYlFsVlRqUFVlS25VTnpmeitRcUl1aGxYamlHbGFGM3VDWmk0aGRMWkRvdEdKdFltc0ZWRGRwZ3JjRXBxSzF3bkxaTm9rWktycFNxU1NpSjU0cmxmVmh1S1JLOVdDdWsycmhkWmxKdGhKeTRYeGJtR09pVVp6ZDB4RmFwcmJMbWxmZnNUZE82b3F2aW5LUVE2cXdVY3dXWTF4bGRZTENlV0RLbitSNmpQYTdiRVdJZ2hCWGRLc2Q1cG1JM3pwZDBuM1hMckNreXp3a2RLL2RUNUpoWG1qYWtEUE4wNHNIRkpidmVrMXRoU1JsdkRLb1oxa1Y0bU1iSkptYWJwZVpDYWdYYmpWampTSGxoNkR5cGFVN25GZDNnK3VKQXlCbTlzY05pemFBS040Y3Juc3kzN0ljZCsyRkh5Sm5CT2ZhYnMvVGQyM3VCc2RZc2VBb1VVMWpReGpFNHd4cFhwaVZ5bmhZR3F5VzZ5bWc2TCs3NzFrU2paNHhoOEFQeldwbFM1Qnp1TU5xeXRvcFREYktnRWpwclVNTEx4UUFoSlhycjJObHhrd1VrY2dGVkRXa09uTmV3WVRlVXVDWXFoRnFZVWtJMUdUTm00K2kwNWg5ODhWM21kMWQrODNlK3lUbE9mTjByMTN6Nm85ZnM5ZzYwSERhY2IzaGo4V2JITys4ZStjRE5ucXZEbnROeVFsdkRXc0JyU1lFNWhZVHJQRVVwemx1aDZJekZPa3RLaVRrbTdtT1RjZENhMlh1UDc3b3RkV0pGMCtnSFQxT2FzRWxXY295aTY5TWE2K1NabU1KS3lvTFVVSnV1dWJPV21Db3Bab2JOT1crMnJQTjNUL2Ywd3loSUttMElXWEZhSzd2OVFOV044N3hnbFdCV2FxMVFLb2xHTFRDdkFXVTB5a3FzNG5rTjNKN1BlTlB3dmQ4Y3JKV1lLMVpycmc4OXBqVk9vWUt4TENVVG02QXpRcFkwcEJRU0lXV3U5d0lUbjZhVmtoSWxSODZuaFZJYlZ6dkJrTVJVVUxXaE5tZnBsQnY3Y1dSZE1sTXVhQzA1NkJXTDJmaDNXaXVtRUxtYlZzWisySEE1aWprbEt1S0s5SzFpV21YYzlkeFBLNmRGQU5PNVFWRUZUZUcwU1VHQzNFYTB2SENjRTRmRGdNMFpsUnRWaTNtcWxZTFhsY0ZiRWRzYkE3V1Nhc05ZSTlPUTJ1aTdqcGhXckcxUU1rMGJ4dDZqV3FNWVRWR0ttQ3VEZGRSYUtVb3pSU25rbldwMHJlRm9sQzJhZGwxV3BsREUrR0MweE9OMWppVVZvRXFITDFZTUZiT2gyNW96YUs5WjVzRHhmaFZFWEt2Y1RTdGZlM29VRFdUbmhkSmhOYzNJZUZXYUlncUw2TEJMS1RnRHh6a1JVb0Ftc081VTRMaGs1aERZRFFackduZlR5dDM5eFBtOFVJd201c2J4YnNZb3RZMkdHOCtQSjNKTTlGNE81ZXNTcU0yd3BFU0hFQzdPSVZPYnlMeWNOb1RZV0tOYzU5RWI3bTdQL01qZit3S3ZYUFhzRk53ZkY0cldoSlJJUlF3dzkydVFaS2hjdWI4L1FrckNYRldhckJYTktFcHVwQ0tkcmRZcWJadklLQlNoRkVFbnBjSnBqVHk5dTJWZEJRbHhPcDFGYnFFMDZ4cG9kUXVNU0ltYUpYditMbFJPcTR5RHJkRmJwRjRocE1LeXppeEJuTTUxMDNPZVRnc3BSekNLT1ZjTTBGSmpXalAzY3lERXhEd25qdFBLbkJQbkVER0l2cG1tbVlNY3dtSk1wRlNZUXlDM2dqZVdGQk5MQ0JSbDhGMUhxNWwxRlgxMnlvbVFNNjBKOUg2cW1SZ0NwK21NYlkyN1UrQ2RGeE5MVERTVjBWaW1PWEUvVDVKaVZ4b3ZUaWZtRUNRbXZVS0toY3Y5dUtIL1JDS2l0Y0tnQ0dza3BjVHh2REN2a2ZNNXNzeEpzc0pycFhPZXRjSzBJVkRQNTBBS2VldU9GNTdlbmNUbXB5cm50VEIyUGVQZzBiWHlsZnVXdi9qdTdWOCtuK2VmZTYrejJMUlcrbzJIVjN6a3RTdU9wek01SnN3NGJzSHZpWEViS2RUYWFNcFJXbVBYOVpRc0w3QkRiNmhWMnZXakZWQjB5VVZJNXAzRldnMjVvWXhGS1V2TFNlS2Z0TWQzRmxzNzlsNDBHMGJCUEs4VTc2SElLUGJCZGM5KzU5bVBPNXp5NUxTaW5hVlBsZXZPNDcxbFNabUw4VEhwSXZIV3N5Znk1YTZCeTEzUFZiOUQxY0xCRzY0T0Y0eFdzcGt6c09zNnZOT1Vwa1JJR2d6YUd3NHEwNCtlM25XRXpZMDB1cDVUbXJpOXYyZlg5WFRXczlySWJhMW9wM25ROVJRcWlRd0dQdkRnZ05XTnJ1dlFUWEY3dXNNZlBCMkt4MWM3Y2k2U3hKQWIwM0prU1F2N3J1TWpoeHV5OGxRYUR3NERzVlVnY0RtQVVvNVpqL2krSjViQ0VoYkcwZkxGcjl6aVc2SDNsWDN2TWNQSWE0Y2QrNWpFN2FpRTdxNnRBZFU0bjJRa1lxekQ3a2FKL0tuaTZtdE5rWklWamVHeWd0VjB6bEZ5eGZxZVUwaU1TdlA2eFExTFMvVGFNWGI5NXZhR0YzTkE1WlVPaDlhRnd6alNOUVUxc0hlV3ZFcTZ6cVByYTNtNGxvWExxeHRpR1hCWURvUG0wblhvWnBrTGpMckR0TVkwcjF4ZDdMalk5ZHpOSzlmTzhOcVZnVks0WUdRdWV3YXIyZnVlY0RXeUh3YVVWaXh4NVhKMEtCbzdiWmdYQ0NsdUVZeWUyY3o0d1hJWU9wTHBpTHVCcHk5bWRsWXpEZ091TmNiZW9aeEJxNTVlTjFwdDNLMHJ1bWoyUTJOMytRaFhKYXUwOTlCWnc2NGJlUGJpQ2E5ZmVxNnVEc1JaT3JpN3NhUHZnR2JaRDQ0MWJZeXh1bko5R0dqYVlyWG1vbk5NS1JPcTRzSjFIRG94Y3UyN1BVTlF6TEdpdGNFVnpVY2VYK0Z0UjRpVi9lQTRSZW5BSEV6ajBlVURNQjIxU243cG9PRnF2eGNqeVhsaW1ScmpodWV3Vm9tWlp0VE1NUW1tUTNmc2VrZmZPZDU0dEtlZUUwMFpYci8yN0ZYSEc0LzJmTkJjRTZLaVV3cUlKQ3FmLzhwekhsenQrZlRYdmNuYnQ4K3cxbk14WGpCMERvdkVtNTNXaGM1M1dPc29vNHluWXduMG5hVVYvejRqTEtkTTJTdXU5aGUwcGhpMTQ4R3VvME5SaVJSdDBlYUNrZ1A2NE5IV2NjcUZuZS94eHBCQzRINlpKRU81SHloazlrTlBaeUZ2amxXdkdxUFZYSTdYekhrbWsrajZDeDUwSTlNVU9LNkpZWkFDdjhRSnJ4U1ByeTVKS2FKbzNJZkMzbmRjN3p4SkFhM3dnY3VPenU5NTUzUmtyb1d1S1E3andPWFFjWDg2MDFsTHFTTER1YjcycUZiQWlIaWxIelZLYTR5cW5KTWp2NWpST25IZGUvWmRKMFY5TW9BUy9iVnZyTEhCNEhuMVlJWFFvQzJ2WDFsdVJzK2NtemlwZGVYeFlVZElpaEF6T3krMGk2Ymg4akR5eHMxSUtsQmpScVdDTVpWK1orbTJlN0x2ZXFpVjdtcEV0OEtUZWFYem5wdWRZOWNiUWhHNC9xTmR6eSsvL1l4NVhqREs4K2pWSzhLY29GU01nK3c4WERuOFZsaFVQR0YwV0dkWlltVlpBOWZlaVdIQ2R1d0dSNmZnVk41ajloVWVlWTl6bnRzcHNGZlE5d09MZ2xkeWgwSmhEbnRVTGVUYzJGdkJoaWlsZU9pTUZOZHJ3QnJONEFTUWZab21IbHdNaUhtNmtMWEJhQmlLNVhaWlVEcHlzMWZjN0Rxd1BUZVhQZSsrR0xrNWVCNGRlb3hSR05zVHF5Ylh4S0FzTFJmbW1MQUVManJMd1Z2TVlZQzlHQmZRbHN0T2M5RlZwbXpaZFpxV0NyRlZodjJPZFYzeHZhWHRQWE1Yc0MzVHEwUS9qT3o5TmIzUjNPZkMxVzZRT0V5dGVEZzZCcDJaZGNlWm1SdnY2RFZVSEhZdjJzQlNGVTRYVHJyeHJSOTloVGNlWEdCcXdoaExOWTZkZFpJUDNBeXZQaml3OTQ3ajhZenJEYU16REZYVDd3YVUwa3pMd2hJanVrVjJSa3cwaTY0OHVCZzVkQjFQNWhscnhESGZpc0lnaUM5cVlYUUdkR1hvRE5lN0s2WkZZaXhIZThFcHpGaG4wTGJ3Y0grTnRaTE5YSnZpMGp0YXpieTRLenc2R0lrbFZKSUdVNHpoY21leDNqQjJlMXg3ajNWWlVWcVJzalNWYUkxaDlGeU9veFNMM25FL0xWSVlGZUV4NzhlQnRVaFJxS2gwVHFGM1BhVUowY0laeTZvTnpXaThrb09yMTViN1pjSjBCcFVMMm80ODNsMXdPd1h5ODNzNmF4ajNtclFtN25YZzRXWFBvMzNQM0NvbE80d1hodWNTb3FENnZHR3dsWlFWeGppY1FXRGMxbU5wakxNaVZmREd5K2RybVRjZlBhQlJ1YjJmb0hYNGl4RjdzK2Q4bW5reHoxd01sdEgxWFBhV1hXZnByVU5waVF2T3ptQk5IR3FwL2oycG9nVyszbG56My90Tm4vblEvK0RRdTR0MVhYT3RwUm52dCtnOTZXZ0lyQlFVNG14V3RQY2orTFFTbGxLcUJXdTBVTmxiSTVYNnZuWkNOUUZiYklRbFFwUWN4YzQ3YWkxVTFTUnZkbU44MVZJSUtVc0ZiU1Zkd0dpTE50S2hLVTFhSjFZcEdXL253cTRmV1hQbU5NMmtMT2t1emhvR0o2ekIxQXA5MzBrOFVpcmJ5YS9odFVZWlF5eUZrcXM0cGtvVTh2eG1NaGN0czJGSkFZT21zNDdTNURTelpuSHk5Y3BnckpKUlhpMzBuWWZNaHYybzhubTJ3cXUySm9Ia1cwd1BCWTVoSnJmS3piaVRkcndXWW53RFVnclF3Q29CZmhxcnQrZ2oySTJlTDd4MVpKbnZlWFRkc3h2M0tBMjJXb2tmdEZMbzA2VEwyUkI4UW1lbFcxZVJEa2VwZGNQWXlQZmFhaU9sSkhHUUc3dExHMFBNc25sN1l6SE9Bb0lLMGxwTzc2a0tCMU0xQVp1Ynpzbkpkb1BITGxrNk9kNDZUbUZHVmNWK04zSmFGbWlLL2VpaFZFRUdJQ1B0WEFxdFFPZXM1Sm9XeVNxMVZyUkVGUTJsMG1xbTc3MmN5RkxHR2l1b0ppT1FiUVdZcWxoVFJsdURzVnVpUkFOdkplNEthNW5XQlZ2QmQ1NHFsNDBReFlIYmJRTGdKVWVLSUxMWTdVWXhSOGxEZ3JWaWJGcVdXU0lmTzA5S1VTS1l0Qll4dE5aVUpUS1FXbUROSzcwMURHNFFyYkJSNUZaWlVzWW9RKzhzVGZLdlNMVnN6MStsWnJnY3ZUQzlhcVV6bnJrV1dtbDA3Mm1YcWhUSVdrbmVwekdhV2l0cmttZG5kRjYwcWxXNlhoWEpJemRLUG9jSGlqWmtNdHFBbytQdWRBOW9MbllEYXNzV3RtYUx5SXlSMGdyN2NVUTN3VjRvWmRBSWFtdlpOcXVVQXhwSmtYZ1BlN1hHaGM0NW5QT2llY3FGbEJQS0txeTI1STNUcVpXY3Jtc3VPTy9RMWhKakZCU1BVdHY3eU9JMlVzQVM0d2JldGNSTnMxWTNvSDFGMFVxaUZ1bmtIdllDN1Q2dDd6M3Y4dktPS1dHMVlVMFJ0c05tS1ZrYzhWV0ptMy83M3NyR3NYTkdZbFNYVXBsRHdDZ3RDU1U1YjZ3NTRhbDF2cU9WaEZKUW14YWdkNUVKQmtZeEx3bFZDME5uTjVlaVlvbFJJc2xxbzNPR1hCdTVWY21nejhKZWMxb2lQSnZTT09mSXRXSDRoeDBnNzBSaU1nVkI2VnowanBnRm9hUmFGUkcvMXJERjNyVzZSWkp1MStPY01rTm42YTNCR1Uyb0VwSG1sZUtjZ254UDJ0QVBuWEQwaXV3RFNjVHlNdTBvV1Q3SFpwU01LWk5La2U1OFU4eEo0c2VzMGNSU0pPRUlqYTZ5UjFRVUJtRk9WamI4VjY1WUw4OU1MSm5SZCsralNMdzFHTldZUTZZcFJXZUV5YnZtZ2pJYVp6U3RDTFE2dHlxMGpKanBleWZzdWdaVXRjWDV5VmpmR3kzNHR5WTZmS1VGL1pKU1pGMGpoY3ArOExRcVlSUk9OMktWcmRqcERiS09HRnB5bHVnMzd5MWhpMjdyTzJuVUxHdVV5RUJuc2RaaGxlZ1h0ZEdVelhEYWJUelhVQ0dXUnFjMVZna1gxeGhOSzhoKzJ3cEZLUzU3eHhxU3hQY3BSUVVHSTdyMVVCdmVpOE41RFVtU3dLeEcxMGJuUFZwcnBuVWw1aUtIUmRXazQ2NFV3MmFRbUZMRUdzMW9yVEIzbTd5UFc1Vkl4NURGa05KWnU2VzRHRXBUTklUQUVsTEJPN2Z0TVlLVU1sYjIvNVNxZEwrYlJDS1dKZ1g0M3B0dDcxWm81TitjcTB3NlM1Wjd2elFZZW8vUm1qWG1UYnN2a3dLVWdnM0FMVFdQQU5pTkF1ZWRHRncyZWRMMk5XS3R3Mnkrbmx3cm1rWnF3bjN4UmhKd1lpNGk3OU9LbUtUVE9Uckx4ZUJSeHJDbVRFb1pvdzFwayt4cDVOQW9Mbmd4RUJtdFVWSldrYk93RjVXUnNYRXRnamtzcld5ZlZkNzV6bWlXbUppV2RZc0tGZEM4VmtwOEp3cmxqVkdsdHZqTDc1NS80YXZ2M3Y1SDZ4ci8ybnZGNGpjRC95THdIY0FyNzlGMGVMbGVycGZyNVhxNVhxNlg2K1Y2dVg2dExMVkpGRjhBUHdyOE1QRHo3NDJoMytQUzl0dVA5ckpZZkxsZXJwZnI1WHE1WHE2WDYrWDZOVmNzYWlTTTZiQVZqc1Z1aGVFQ1BBWGVRc0QzOEEvVG0xNnVsK3ZsZXJsZXJwZnI1WHE1WHE1Zkc4V2lBbTZCSjhEMFhyRll0NS84N0ZZb1hyMHNGbCt1bCt2bGVybGVycGZyNVhxNWZrMFdpd0FuNEF2QU02Qys5NU1PYVRmdWtkYWplbGtzdmx3djE4djFjcjFjTDlmTDlYTDltaXdXNDFZd25vQ28vdi84UXYzeVdyMWNMOWZMOVhLOVhDL1h5L1Z5L1pwZC81aHY1ZjgzQUN0RWo1V2dDQzB5QUFBQUFFbEZUa1N1UW1DQw"},{ name : "__ASSET__:bitmap_SponsorLogo", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQURrQUFBQXNDQU1BQUFEbzNlQ2ZBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBS1QybERRMUJRYUc5MGIzTm9iM0FnU1VORElIQnliMlpwYkdVQUFIamFuVk5uVkZQcEZqMzMzdlJDUzRpQWxFdHZVaFVJSUZKQ2k0QVVrU1lxSVFrUVNvZ2hvZGtWVWNFUlJVVUVHOGlnaUFPT2pvQ01GVkVzRElvSzJBZmtJYUtPZzZPSWlzcjc0WHVqYTlhODkrYk4vclhYUHVlczg1Mnp6d2ZBQ0F5V1NETlJOWUFNcVVJZUVlQ0R4OFRHNGVRdVFJRUtKSEFBRUFpelpDRnovU01CQVBoK1BEd3JJc0FIdmdBQmVOTUxDQURBVFp2QU1CeUgvdy9xUXBsY0FZQ0VBY0Iwa1RoTENJQVVBRUI2amtLbUFFQkdBWUNkbUNaVEFLQUVBR0RMWTJMakFGQXRBR0FuZitiVEFJQ2QrSmw3QVFCYmxDRVZBYUNSQUNBVFpZaEVBR2c3QUt6UFZvcEZBRmd3QUJSbVM4UTVBTmd0QURCSlYyWklBTEMzQU1ET0VBdXlBQWdNQURCUmlJVXBBQVI3QUdESUl5TjRBSVNaQUJSRzhsYzg4U3V1RU9jcUFBQjRtYkk4dVNRNVJZRmJDQzF4QjFkWExoNG96a2tYS3hRMllRSmhta0F1d25tWkdUS0JOQS9nODh3QUFLQ1JGUkhnZy9QOWVNNE9yczdPTm82MkRsOHQ2cjhHL3lKaVl1UCs1YytyY0VBQUFPRjBmdEgrTEMrekdvQTdCb0J0L3FJbDdnUm9YZ3VnZGZlTFpySVBRTFVBb09uYVYvTncrSDQ4UEVXaGtMbloyZVhrNU5oS3hFSmJZY3BYZmY1bndsL0FWLzFzK1g0OC9QZjE0TDdpSklFeVhZRkhCUGpnd3N6MFRLVWN6NUlKaEdMYzVvOUgvTGNMLy93ZDB5TEVTV0s1V0NvVTQxRVNjWTVFbW96ek1xVWlpVUtTS2NVbDB2OWs0dDhzK3dNKzN6VUFzR28rQVh1UkxhaGRZd1AyU3ljUVdIVEE0dmNBQVBLN2I4SFVLQWdEZ0dpRDRjOTMvKzgvL1VlZ0pRQ0Faa21TY1FBQVhrUWtMbFRLc3ovSENBQUFSS0NCS3JCQkcvVEJHQ3pBQmh6QkJkekJDL3hnTm9SQ0pNVENRaEJDQ21TQUhISmdLYXlDUWlpR3piQWRLbUF2MUVBZE5NQlJhSWFUY0E0dXdsVzREajF3RC9waENKN0JLTHlCQ1FSQnlBZ1RZU0hhaUFGaWlsZ2pqZ2dYbVlYNEljRklCQktMSkNESmlCUlJJa3VSTlVneFVvcFVJRlZJSGZJOWNnSTVoMXhHdXBFN3lBQXlndnlHdkVjeGxJR3lVVDNVRExWRHVhZzNHb1JHb2d2UVpIUXhtbzhXb0p2UWNyUWFQWXcyb2VmUXEyZ1AybzgrUThjd3dPZ1lCelBFYkRBdXhzTkNzVGdzQ1pOank3RWlyQXlyeGhxd1Zxd0R1NG4xWTgreGR3UVNnVVhBQ1RZRWQwSWdZUjVCU0ZoTVdFN1lTS2dnSENRMEVkb0pOd2tEaEZIQ0p5S1RxRXUwSnJvUitjUVlZakl4aDFoSUxDUFdFbzhUTHhCN2lFUEVOeVFTaVVNeUo3bVFBa214cEZUU0V0SkcwbTVTSStrc3FaczBTQm9qazhuYVpHdXlCem1VTENBcnlJWGtuZVRENURQa0crUWg4bHNLbldKQWNhVDRVK0lvVXNwcVNobmxFT1UwNVFabG1ESkJWYU9hVXQyb29WUVJOWTlhUXEyaHRsS3ZVWWVvRXpSMW1qbk5neFpKUzZXdG9wWFRHbWdYYVBkcHIraDB1aEhkbFI1T2w5Qlgwc3ZwUitpWDZBUDBkd3dOaGhXRHg0aG5LQm1iR0FjWVp4bDNHSytZVEtZWjA0c1p4MVF3TnpIcm1PZVpENWx2VlZncXRpcDhGWkhLQ3BWS2xTYVZHeW92VkttcXBxcmVxZ3RWODFYTFZJK3BYbE45cmtaVk0xUGpxUW5VbHF0VnFwMVE2MU1iVTJlcE82aUhxbWVvYjFRL3BINVovWWtHV2NOTXcwOURwRkdnc1YvanZNWWdDMk1aczNnc0lXc05xNFoxZ1RYRUpySE4yWHgyS3J1WS9SMjdpejJxcWFFNVF6TktNMWV6VXZPVVpqOEg0NWh4K0p4MFRnbm5LS2VYODM2SzNoVHZLZUlwRzZZMFRMa3haVnhycXBhWGxsaXJTS3RScTBmcnZUYXU3YWVkcHIxRnUxbjdnUTVCeDBvblhDZEhaNC9PQlozblU5bFQzYWNLcHhaTlBUcjFyaTZxYTZVYm9idEVkNzl1cCs2WW5yNWVnSjVNYjZmZWViM24raHg5TC8xVS9XMzZwL1ZIREZnR3N3d2tCdHNNemhnOHhUVnhiendkTDhmYjhWRkRYY05BUTZWaGxXR1g0WVNSdWRFOG85VkdqVVlQakduR1hPTWs0MjNHYmNhakpnWW1JU1pMVGVwTjdwcFNUYm1tS2FZN1REdE14ODNNemFMTjFwazFtejB4MXpMbm0rZWIxNXZmdDJCYWVGb3N0cWkydUdWSnN1UmFwbG51dHJ4dWhWbzVXYVZZVlZwZHMwYXRuYTBsMXJ1dHU2Y1JwN2xPazA2cm50Wm53N0R4dHNtMnFiY1pzT1hZQnR1dXRtMjJmV0ZuWWhkbnQ4V3V3KzZUdlpOOXVuMk4vVDBIRFlmWkRxc2RXaDErYzdSeUZEcFdPdDZhenB6dVAzM0Y5SmJwTDJkWXp4RFAyRFBqdGhQTEtjUnBuVk9iMDBkbkYyZTVjNFB6aUl1SlM0TExMcGMrTHBzYnh0M0l2ZVJLZFBWeFhlRjYwdldkbTdPYnd1Mm8yNi91TnU1cDdvZmNuOHcwbnltZVdUTnowTVBJUStCUjVkRS9DNStWTUd2ZnJINVBRMCtCWjdYbkl5OWpMNUZYcmRld3Q2VjNxdmRoN3hjKzlqNXluK00rNHp3MzNqTGVXVi9NTjhDM3lMZkxUOE52bmwrRjMwTi9JLzlrLzNyLzBRQ25nQ1VCWndPSmdVR0JXd0w3K0hwOEliK09QenJiWmZheTJlMUJqS0M1UVJWQmo0S3RndVhCclNGb3lPeVFyU0gzNTVqT2tjNXBEb1ZRZnVqVzBBZGg1bUdMdzM0TUo0V0hoVmVHUDQ1d2lGZ2EwVEdYTlhmUjNFTnozMFQ2UkpaRTNwdG5NVTg1cnkxS05TbytxaTVxUE5vM3VqUzZQOFl1WmxuTTFWaWRXRWxzU3h3NUxpcXVObTVzdnQvODdmT0g0cDNpQytON0Y1Z3Z5RjF3ZWFIT3d2U0ZweGFwTGhJc09wWkFUSWhPT0pUd1FSQXFxQmFNSmZJVGR5V09Dbm5DSGNKbklpL1JOdEdJMkVOY0toNU84a2dxVFhxUzdKRzhOWGtreFRPbExPVzVoQ2Vwa0x4TURVemRtenFlRnBwMklHMHlQVHE5TVlPU2taQnhRcW9oVFpPMlorcG41bVoyeTZ4bGhiTCt4VzZMdHk4ZWxRZkphN09RckFWWkxRcTJRcWJvVkZvbzF5b0hzbWRsVjJhL3pZbktPWmFybml2TjdjeXp5dHVRTjV6dm4vL3RFc0lTNFpLMnBZWkxWeTBkV09hOXJHbzVzanh4ZWRzSzR4VUZLNFpXQnF3OHVJcTJLbTNWVDZ2dFY1ZXVmcjBtZWsxcmdWN0J5b0xCdFFGcjZ3dFZDdVdGZmV2YzErMWRUMWd2V2QrMVlmcUduUnMrRlltS3JoVGJGNWNWZjlnbzNIamxHNGR2eXIrWjNKUzBxYXZFdVdUUFp0Sm02ZWJlTFo1YkRwYXFsK2FYRG00TjJkcTBEZDlXdE8zMTlrWGJMNWZOS051N2c3WkR1YU8vUExpOFphZkp6czA3UDFTa1ZQUlUrbFEyN3RMZHRXSFgrRzdSN2h0N3ZQWTA3TlhiVzd6My9UN0p2dHRWQVZWTjFXYlZaZnRKKzdQM1A2NkpxdW40bHZ0dFhhMU9iWEh0eHdQU0EvMEhJdzYyMTduVTFSM1NQVlJTajlZcjYwY094eCsrL3AzdmR5ME5OZzFWalp6RzRpTndSSG5rNmZjSjMvY2VEVHJhZG94N3JPRUgweDkySFdjZEwycENtdkthUnB0VG12dGJZbHU2VDh3KzBkYnEzbnI4UjlzZkQ1dzBQRmw1U3ZOVXlXbmE2WUxUazJmeXo0eWRsWjE5Zmk3NTNHRGJvclo3NTJQTzMyb1BiKys2RUhUaDBrWC9pK2M3dkR2T1hQSzRkUEt5MitVVFY3aFhtcTg2WDIzcWRPbzgvcFBUVDhlN25MdWFycmxjYTdudWVyMjFlMmIzNlJ1ZU44N2Q5TDE1OFJiLzF0V2VPVDNkdmZONmIvZkY5L1hmRnQxK2NpZjl6c3U3MlhjbjdxMjhUN3hmOUVEdFFkbEQzWWZWUDF2KzNOanYzSDlxd0hlZzg5SGNSL2NHaFlQUC9wSDFqdzlEQlkrWmo4dUdEWWJybmpnK09UbmlQM0w5NmZ5blE4OWt6eWFlRi82aS9zdXVGeFl2ZnZqVjY5Zk8wWmpSb1pmeWw1Ty9iWHlsL2VyQTZ4bXYyOGJDeGg2K3lYZ3pNVjcwVnZ2dHdYZmNkeDN2bzk4UFQrUjhJSDhvLzJqNXNmVlQwS2Y3a3htVGsvOEVBNWp6L0dNekxkc0FBQUFnWTBoU1RRQUFlaVVBQUlDREFBRDUvd0FBZ09rQUFIVXdBQURxWUFBQU9wZ0FBQmR2a2wvRlJnQUFBd0JRVEZSRkFBQUEvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvdFRVLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlYVi85WFYvOVhWLzlUVS85WFYvOVhWL3RQVC85VFUvOVhWLzlYVi85WFYvOVhWLzlYVi85WFZsbGxVLzlYVi85WFYvOVhWaENNUnJINTlaaGNOeDR1RXhYTmxjUmtNNkxxNVppSWFZeE1JN0xtM2JpTWJoakVqWERFeGdrRTdoMDlJdFdOVWREdzNYUjBZb2xOSFVRY0FYd3NBNmF5a3VVWXN6R0JIMDE5QmsybHBueThWeUp5Y3pZQnlsa00xdG50M3ltOVR6SGxpcVdaZlNBNEp6NStmcjRTRlNCUVVuM056ejZXbGVFNVBsMDVFY1JzTjVsQW5waUFBMTBnaTRrNG0zMDBtcEI4QTNVc2swMFlnNUZBbm9SNEFrQllBYVFjQXJ6SVVlUXNBbWhzQTdYbGFWQUFBY2dnQXlrQWN6a1FnMVVjaHhENGJseGtBaGhFQWtTRUtueDBBd0R3YTJrb2o3bnhlV2dBQXVUY1dmQXdBakJNQWd4b0ZUZ0FBZHhJQlhnUUFqeVlRZ1JZQ29ENHBZd3dBUndBQWJnOEF4RTR2WXdJQW5Da1FtQ1VNcXk4U29pa09raGdBc3pNVDZuTlM0MU1yNDFvMGpDQUtpQThBaFJrRHlsMDl5R0pEZ1EwQXhXUkZ4a0VmMVVzbWJRZ0EzbE1zclNZQ2lSNEl1ellSY1JFQWZCVUNtRFlncDBrMnlsUTE1MlZCdXprYXRqZ1pweXdSaEE0QTZHOVBvRTQva2pZa3BFVXhxamNlUHdBQXoxUXg1bWxINTFRczZHaEdrQndBcDAwNWt4MEZ4TVRFeGNYRnhzYkd4OGZIeU1qSXljbkp5c3JLeTh2THpNek16YzNOenM3T3o4L1AwTkRRMGRIUjB0TFMwOVBUMU5UVTFkWFYxdGJXMTlmWDJOalkyZG5aMnRyYTI5dmIzTnpjM2QzZDN0N2UzOS9mNE9EZzRlSGg0dUxpNCtQajVPVGs1ZVhsNXVibTUrZm42T2pvNmVucDZ1cnE2K3ZyN096czdlM3Q3dTd1NysvdjhQRHc4Zkh4OHZMeTgvUHo5UFQwOWZYMTl2YjI5L2YzK1BqNCtmbjUrdnI2Ky92Ny9QejgvZjM5L3Y3Ky8vLy9DZGFBa2dBQUFBRjBVazVUQUVEbTJHWUFBQUFmU1VSQlZIamE3TUVCQVFBQUFJSWcvNjl1U0VBQkFQQmdBQUFBLy84REFBbjRBQUdqRTV5NkFBQUFBRWxGVGtTdVFtQ0M"},{ name : "__ASSET__:bitmap_LoadBarContur", data : "aVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQU40QUFBQVJDQVlBQUFDeTJSTFdBQUFBQ1hCSVdYTUFBQXNUQUFBTEV3RUFtcHdZQUFBN2hXbFVXSFJZVFV3NlkyOXRMbUZrYjJKbExuaHRjQUFBQUFBQVBEOTRjR0ZqYTJWMElHSmxaMmx1UFNMdnU3OGlJR2xrUFNKWE5VMHdUWEJEWldocFNIcHlaVk42VGxSamVtdGpPV1FpUHo0S1BIZzZlRzF3YldWMFlTQjRiV3h1Y3pwNFBTSmhaRzlpWlRwdWN6cHRaWFJoTHlJZ2VEcDRiWEIwYXowaVFXUnZZbVVnV0UxUUlFTnZjbVVnTlM0MUxXTXdNVFFnTnprdU1UVXhORGd4TENBeU1ERXpMekF6THpFekxURXlPakE1T2pFMUlDQWdJQ0FnSUNBaVBnb2dJQ0E4Y21SbU9sSkVSaUI0Yld4dWN6cHlaR1k5SW1oMGRIQTZMeTkzZDNjdWR6TXViM0puTHpFNU9Ua3ZNREl2TWpJdGNtUm1MWE41Ym5SaGVDMXVjeU1pUGdvZ0lDQWdJQ0E4Y21SbU9rUmxjMk55YVhCMGFXOXVJSEprWmpwaFltOTFkRDBpSWdvZ0lDQWdJQ0FnSUNBZ0lDQjRiV3h1Y3pwNGJYQTlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzhpQ2lBZ0lDQWdJQ0FnSUNBZ0lIaHRiRzV6T21SalBTSm9kSFJ3T2k4dmNIVnliQzV2Y21jdlpHTXZaV3hsYldWdWRITXZNUzR4THlJS0lDQWdJQ0FnSUNBZ0lDQWdlRzFzYm5NNmNHaHZkRzl6YUc5d1BTSm9kSFJ3T2k4dmJuTXVZV1J2WW1VdVkyOXRMM0JvYjNSdmMyaHZjQzh4TGpBdklnb2dJQ0FnSUNBZ0lDQWdJQ0I0Yld4dWN6cDRiWEJOVFQwaWFIUjBjRG92TDI1ekxtRmtiMkpsTG1OdmJTOTRZWEF2TVM0d0wyMXRMeUlLSUNBZ0lDQWdJQ0FnSUNBZ2VHMXNibk02YzNSRmRuUTlJbWgwZEhBNkx5OXVjeTVoWkc5aVpTNWpiMjB2ZUdGd0x6RXVNQzl6Vkhsd1pTOVNaWE52ZFhKalpVVjJaVzUwSXlJS0lDQWdJQ0FnSUNBZ0lDQWdlRzFzYm5NNmRHbG1aajBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5MGFXWm1MekV1TUM4aUNpQWdJQ0FnSUNBZ0lDQWdJSGh0Ykc1ek9tVjRhV1k5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdlpYaHBaaTh4TGpBdklqNEtJQ0FnSUNBZ0lDQWdQSGh0Y0RwRGNtVmhkRzl5Vkc5dmJENUJaRzlpWlNCUWFHOTBiM05vYjNBZ1EwTWdLRmRwYm1SdmQzTXBQQzk0YlhBNlEzSmxZWFJ2Y2xSdmIydytDaUFnSUNBZ0lDQWdJRHg0YlhBNlEzSmxZWFJsUkdGMFpUNHlNREUwTFRBekxUSTNWREUyT2pJeE9qRTNLekF5T2pBd1BDOTRiWEE2UTNKbFlYUmxSR0YwWlQ0S0lDQWdJQ0FnSUNBZ1BIaHRjRHBOYjJScFpubEVZWFJsUGpJd01UVXRNRFV0TVROVU1EQTZOVGc2TWpJck1ETTZNREE4TDNodGNEcE5iMlJwWm5sRVlYUmxQZ29nSUNBZ0lDQWdJQ0E4ZUcxd09rMWxkR0ZrWVhSaFJHRjBaVDR5TURFMUxUQTFMVEV6VkRBd09qVTRPakl5S3pBek9qQXdQQzk0YlhBNlRXVjBZV1JoZEdGRVlYUmxQZ29nSUNBZ0lDQWdJQ0E4WkdNNlptOXliV0YwUG1sdFlXZGxMM0J1Wnp3dlpHTTZabTl5YldGMFBnb2dJQ0FnSUNBZ0lDQThjR2h2ZEc5emFHOXdPa052Ykc5eVRXOWtaVDR6UEM5d2FHOTBiM05vYjNBNlEyOXNiM0pOYjJSbFBnb2dJQ0FnSUNBZ0lDQThlRzF3VFUwNlNXNXpkR0Z1WTJWSlJENTRiWEF1YVdsa09tSXlOekEyWVdNeUxXRmhPV1l0WmpVME5pMWlZVFF5TFdSa01HRm1ZemN6WXpObU9Ed3ZlRzF3VFUwNlNXNXpkR0Z1WTJWSlJENEtJQ0FnSUNBZ0lDQWdQSGh0Y0UxTk9rUnZZM1Z0Wlc1MFNVUStlRzF3TG1ScFpEbzVNV0kxTWpSalpTMWxPVE15TFRGaU5ESXRPV0U1T0MwMU16RXdZVEF6T1RCa01EUThMM2h0Y0UxTk9rUnZZM1Z0Wlc1MFNVUStDaUFnSUNBZ0lDQWdJRHg0YlhCTlRUcFBjbWxuYVc1aGJFUnZZM1Z0Wlc1MFNVUStlRzF3TG1ScFpEbzVNV0kxTWpSalpTMWxPVE15TFRGaU5ESXRPV0U1T0MwMU16RXdZVEF6T1RCa01EUThMM2h0Y0UxTk9rOXlhV2RwYm1Gc1JHOWpkVzFsYm5SSlJENEtJQ0FnSUNBZ0lDQWdQSGh0Y0UxTk9raHBjM1J2Y25rK0NpQWdJQ0FnSUNBZ0lDQWdJRHh5WkdZNlUyVnhQZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjbVJtT214cElISmtaanB3WVhKelpWUjVjR1U5SWxKbGMyOTFjbU5sSWo0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITjBSWFowT21GamRHbHZiajVqY21WaGRHVmtQQzl6ZEVWMmREcGhZM1JwYjI0K0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpkRVYyZERwcGJuTjBZVzVqWlVsRVBuaHRjQzVwYVdRNk9URmlOVEkwWTJVdFpUa3pNaTB4WWpReUxUbGhPVGd0TlRNeE1HRXdNemt3WkRBMFBDOXpkRVYyZERwcGJuTjBZVzVqWlVsRVBnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQThjM1JGZG5RNmQyaGxiajR5TURFMExUQXpMVEkzVkRFMk9qSXhPakUzS3pBeU9qQXdQQzl6ZEVWMmREcDNhR1Z1UGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGMzUkZkblE2YzI5bWRIZGhjbVZCWjJWdWRENUJaRzlpWlNCUWFHOTBiM05vYjNBZ1EwTWdLRmRwYm1SdmQzTXBQQzl6ZEVWMmREcHpiMlowZDJGeVpVRm5aVzUwUGdvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4TDNKa1pqcHNhVDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSEprWmpwc2FTQnlaR1k2Y0dGeWMyVlVlWEJsUFNKU1pYTnZkWEpqWlNJK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpkRVYyZERwaFkzUnBiMjQrYzJGMlpXUThMM04wUlhaME9tRmpkR2x2Ymo0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ1BITjBSWFowT21sdWMzUmhibU5sU1VRK2VHMXdMbWxwWkRvek5XTmpOV05sT1Mwd09USTBMV0ZoTkdNdFlURmhPQzA1WlRrd05UUXlaVEprT0RjOEwzTjBSWFowT21sdWMzUmhibU5sU1VRK0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lEeHpkRVYyZERwM2FHVnVQakl3TVRRdE1ETXRNamRVTVRZNk16RTZOVE1yTURJNk1EQThMM04wUlhaME9uZG9aVzQrQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emRFVjJkRHB6YjJaMGQyRnlaVUZuWlc1MFBrRmtiMkpsSUZCb2IzUnZjMmh2Y0NCRFF5QW9WMmx1Wkc5M2N5azhMM04wUlhaME9uTnZablIzWVhKbFFXZGxiblErQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUR4emRFVjJkRHBqYUdGdVoyVmtQaTg4TDNOMFJYWjBPbU5vWVc1blpXUStDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lEd3ZjbVJtT214cFBnb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBOGNtUm1PbXhwSUhKa1pqcHdZWEp6WlZSNWNHVTlJbEpsYzI5MWNtTmxJajRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOMFJYWjBPbUZqZEdsdmJqNXpZWFpsWkR3dmMzUkZkblE2WVdOMGFXOXVQZ29nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0E4YzNSRmRuUTZhVzV6ZEdGdVkyVkpSRDU0YlhBdWFXbGtPbUl5TnpBMllXTXlMV0ZoT1dZdFpqVTBOaTFpWVRReUxXUmtNR0ZtWXpjell6Tm1PRHd2YzNSRmRuUTZhVzV6ZEdGdVkyVkpSRDRLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEhOMFJYWjBPbmRvWlc0K01qQXhOUzB3TlMweE0xUXdNRG8xT0RveU1pc3dNem93TUR3dmMzUkZkblE2ZDJobGJqNEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE4wUlhaME9uTnZablIzWVhKbFFXZGxiblErUVdSdlltVWdVR2h2ZEc5emFHOXdJRU5ESUNoWGFXNWtiM2R6S1R3dmMzUkZkblE2YzI5bWRIZGhjbVZCWjJWdWRENEtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdQSE4wUlhaME9tTm9ZVzVuWldRK0x6d3ZjM1JGZG5RNlkyaGhibWRsWkQ0S0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnUEM5eVpHWTZiR2srQ2lBZ0lDQWdJQ0FnSUNBZ0lEd3ZjbVJtT2xObGNUNEtJQ0FnSUNBZ0lDQWdQQzk0YlhCTlRUcElhWE4wYjNKNVBnb2dJQ0FnSUNBZ0lDQThkR2xtWmpwUGNtbGxiblJoZEdsdmJqNHhQQzkwYVdabU9rOXlhV1Z1ZEdGMGFXOXVQZ29nSUNBZ0lDQWdJQ0E4ZEdsbVpqcFlVbVZ6YjJ4MWRHbHZiajQzTWpBd01EQXZNVEF3TURBOEwzUnBabVk2V0ZKbGMyOXNkWFJwYjI0K0NpQWdJQ0FnSUNBZ0lEeDBhV1ptT2xsU1pYTnZiSFYwYVc5dVBqY3lNREF3TUM4eE1EQXdNRHd2ZEdsbVpqcFpVbVZ6YjJ4MWRHbHZiajRLSUNBZ0lDQWdJQ0FnUEhScFptWTZVbVZ6YjJ4MWRHbHZibFZ1YVhRK01qd3ZkR2xtWmpwU1pYTnZiSFYwYVc5dVZXNXBkRDRLSUNBZ0lDQWdJQ0FnUEdWNGFXWTZRMjlzYjNKVGNHRmpaVDQyTlRVek5Ud3ZaWGhwWmpwRGIyeHZjbE53WVdObFBnb2dJQ0FnSUNBZ0lDQThaWGhwWmpwUWFYaGxiRmhFYVcxbGJuTnBiMjQrTWpJeVBDOWxlR2xtT2xCcGVHVnNXRVJwYldWdWMybHZiajRLSUNBZ0lDQWdJQ0FnUEdWNGFXWTZVR2w0Wld4WlJHbHRaVzV6YVc5dVBqRTNQQzlsZUdsbU9sQnBlR1ZzV1VScGJXVnVjMmx2Ymo0S0lDQWdJQ0FnUEM5eVpHWTZSR1Z6WTNKcGNIUnBiMjQrQ2lBZ0lEd3ZjbVJtT2xKRVJqNEtQQzk0T25odGNHMWxkR0UrQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDaUFnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUFvZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0NpQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQUtJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnQ2lBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBS0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lBb2dJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdDancvZUhCaFkydGxkQ0JsYm1ROUluY2lQejZ2cnhjUUFBQUFJR05JVWswQUFIb2xBQUNBZ3dBQStmOEFBSURvQUFCU0NBQUJGVmdBQURxWEFBQVhiOWRhSDVBQUFBQkxTVVJCVkhqYTdOTXhFUUF3Q0FDeFVrdjFYMU1JQUFsc1RJbUV2L3ZJLytvQXE2NEVZRHd3SG1BOE1CNWdQREFlWUR3d0htQThNQjRZRHpBZUdBOHdIaGdQR0RVQUFBRC8vd01BbE1zREJWV0hscEFBQUFBQVNVVk9SSzVDWUlJPQ"},{ name : "__ASSET__:bitmap_LoadMeter", data : ""},{ name : "__ASSET__:bitmap_LoadBarFill", data : ""}];
var __map_reserved = {}
var ArrayBuffer = $global.ArrayBuffer || js_html_compat_ArrayBuffer;
if(ArrayBuffer.prototype.slice == null) {
	ArrayBuffer.prototype.slice = js_html_compat_ArrayBuffer.sliceImpl;
}
var DataView = $global.DataView || js_html_compat_DataView;
var Float32Array = $global.Float32Array || js_html_compat_Float32Array._new;
var Uint8Array = $global.Uint8Array || js_html_compat_Uint8Array._new;
var this1 = new Uint32Array(256);
lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16 = this1;
var _g = 0;
while(_g < 256) {
	var i = _g++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__alpha16[i] = Math.ceil(i * 257.00392156862745);
}
var this2 = new Uint8Array(510);
lime_math_color__$RGBA_RGBA_$Impl_$.__clamp = this2;
var _g1 = 0;
while(_g1 < 255) {
	var i1 = _g1++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i1] = i1;
}
var _g11 = 255;
var _g2 = 511;
while(_g11 < _g2) {
	var i2 = _g11++;
	lime_math_color__$RGBA_RGBA_$Impl_$.__clamp[i2] = 255;
}
lime_system_CFFI.available = false;
lime_system_CFFI.enabled = false;
if(window.createjs != null) {
	createjs.Sound.alternateExtensions = ["ogg","mp3","wav"];
}
openfl_display_DisplayObject.__instanceCount = 0;
openfl_display_DisplayObject.__worldRenderDirty = 0;
openfl_display_DisplayObject.__worldTransformDirty = 0;
openfl_display_DisplayObject.__cacheAsBitmapMode = false;
Main.created = false;
Batching.instances = new haxe_ds_IntMap();
Batching.count = 0;
Config.fontsShorts = { Aalgrs : "fonts/Calibri_gdi.ttf"};
Config.currentLevel = 0;
Config.maxLevel = 0;
Config.saveMaxLevel = 0;
Config.okCoef = 20;
Config.coinsCoef = 0.5;
Config.graphicScale = 1;
Config.locale = "ru";
Config.logToConsole = false;
openfl_text_Font.__registeredFonts = [];
Menu.wasRemake = false;
InformWindow.isActive = false;
LocalSaves.storeName = "chess";
LocalSaves.localPath = null;
Localization.locale = "en";
MainMenu.isFirstInit = true;
openfl_display_BitmapData.__isGLES = null;
SponsorLogo.resourceType = "image/png";
SponsorLogo.resourceName = "__ASSET__:bitmap_SponsorLogo";
GameLogo.resourceType = "image/png";
GameLogo.resourceName = "__ASSET__:bitmap_GameLogo";
LoadMeter.resourceType = "image/png";
LoadMeter.resourceName = "__ASSET__:bitmap_LoadMeter";
LoadBarContur.resourceType = "image/png";
LoadBarContur.resourceName = "__ASSET__:bitmap_LoadBarContur";
LoadBarFill.resourceType = "image/png";
LoadBarFill.resourceName = "__ASSET__:bitmap_LoadBarFill";
SpriteJson.resourceName = "__ASSET__:file_SpriteJson";
Xml.Element = 0;
Xml.PCData = 1;
Xml.CData = 2;
Xml.Comment = 3;
Xml.DocType = 4;
Xml.ProcessingInstruction = 5;
Xml.Document = 6;
backgammon_ai_Agent.STRATEGY_ENABLED = false;
backgammon_ai_StratRating.allowPipCompare = true;
backgammon_ai_PubEvalAgentLogic.wr = [0,-0.1716,0.2701,0.29906,-0.08471,0,-1.40375,-1.05121,0.07217,-0.01351,0,-1.29506,-2.16183,0.13246,-1.03508,0,-2.29847,-2.34631,0.17253,0.08302,0,-1.27266,-2.87401,-0.07456,-0.3424,0,-1.3464,-2.46556,-0.13022,-0.01591,0,0.27448,0.60015,0.48302,0.25236,0,0.39521,0.68178,0.05281,0.09266,0,0.24855,-0.06844,-0.37646,0.05685,0,0.17405,0.0043,0.74427,0.00576,0,0.12392,0.31202,-0.91035,-0.1627,0,0.01418,-0.10839,-0.02781,-0.88035,0,1.07274,2.00366,1.16242,0.2252,0,0.85631,1.06349,1.49549,0.18966,0,0.37183,-0.50352,-0.14818,0.12039,0,0.13681,0.13978,1.11245,-0.12707,0,-0.22082,0.20178,-0.06285,-0.52728,0,-0.13597,-0.19412,-0.09308,-1.26062,0,3.05454,5.16874,1.5068,5.35,0,2.19605,3.8539,0.88296,2.30052,0,0.92321,1.08744,-0.11696,-0.7856,0,-0.09795,-0.8305,-1.09167,-4.94251,0,-1.00316,-3.66465,-2.56906,-9.67677,0,-2.77982,-7.26713,-3.40177,-12.3225,0,3.4204];
backgammon_ai_PubEvalAgentLogic.wc = [0.25696,-0.66937,-1.66135,-2.02487,-2.53398,-0.16092,-1.11725,-1.06654,-0.9283,-1.99558,-1.10388,-0.80802,0.09856,-0.62086,-1.27999,-0.5922,-0.73667,0.89032,-0.38933,-1.59847,-1.50197,-0.60966,1.56166,-0.47389,-1.8039,-0.83425,-0.97741,-1.41371,0.245,0.1097,-1.36476,-1.05572,1.1542,0.11069,-0.38319,-0.74816,-0.59244,0.81116,-0.39511,0.11424,-0.73169,-0.56074,1.09792,0.15977,0.13786,-1.18435,-0.43363,1.06169,-0.21329,0.04798,-0.94373,-0.22982,1.22737,-0.13099,-0.06295,-0.75882,-0.13658,1.78389,0.30416,0.36797,-0.69851,0.13003,1.2307,0.40868,-0.21081,-0.64073,0.31061,1.59554,0.65718,0.25429,-0.80789,0.0824,1.78964,0.54304,0.41174,-1.06161,0.07851,2.01451,0.49786,0.91936,-0.9075,0.05941,1.8312,0.58722,1.28777,-0.83711,-0.33248,2.64983,0.52698,0.82132,-0.58897,-1.18223,3.35809,0.62017,0.57353,-0.07276,-0.36214,4.37655,0.45481,0.21746,0.10504,-0.61977,3.54001,0.04612,-0.18108,0.63211,-0.87046,2.47673,-0.48016,-1.27157,0.86505,-1.11342,1.24612,-0.82385,-2.77082,1.23606,-1.59529,0.10438,-1.30206,-4.1152,5.62596,-2.758];
backgammon_ai_bg_BgMove.instanceCount = 0;
backgammon_ai_bg_BgMove._instancePool = [];
backgammon_ai_bg_BgMove._instanceHead = 0;
backgammon_ai_bg_BgMove._dropped = [];
backgammon_ai_bg_BgMove._cloning = false;
backgammon_ai_bg_BgMoveGenerator.instanceCount = 0;
backgammon_ai_bg_BgMoveGenerator.gmls = 0;
backgammon_ai_bg_BgMoveList.instanceCount = 0;
backgammon_ai_bg_BgMoveList._instancePool = [];
backgammon_ai_rep_board_BoardRep.instanceCount = 0;
backgammon_ai_rep_board_BoardRep._instancePool = [];
backgammon_ai_rep_board_BoardRep._instanceHead = 0;
backgammon_ai_rep_board_BoardRep._dropped = [];
backgammon_ai_rep_moves_MoveRep.instanceCount = 0;
backgammon_ai_rep_moves_MoveRep._instancePool = [];
backgammon_ai_rep_moves_MoveRep._instanceHead = 0;
backgammon_ai_rep_moves_MoveRep._dropped = [];
backgammon_ai_rep_moves_MoveRepGenerator.instanceCount = 0;
backgammon_ai_rep_moves_MoveRepList.instanceCount = 0;
backgammon_model_enum1_Color.Red = new backgammon_model_enum1_Color("Red",0,1);
backgammon_model_enum1_Color.White = new backgammon_model_enum1_Color("White",1,2);
backgammon_model_enum1_Difficulty.Easy = new backgammon_model_enum1_Difficulty(0,"Easy");
backgammon_model_enum1_Difficulty.Medium = new backgammon_model_enum1_Difficulty(1,"Medium");
backgammon_model_enum1_Difficulty.Hard = new backgammon_model_enum1_Difficulty(2,"Hard");
backgammon_model_enum1_Difficulty.Expert = new backgammon_model_enum1_Difficulty(3,"Expert");
backgammon_model_enum1_Difficulty.NA = new backgammon_model_enum1_Difficulty(4,"NA");
backgammon_model_logic_Move.instanceCount = 0;
backgammon_model_logic_Move._instancePool = [];
backgammon_model_logic_Move._instanceHead = 0;
backgammon_model_logic_Move._dropped = [];
// googleAnalytics_Campaign.TYPE_DIRECT = "direct";
// googleAnalytics_Campaign.TYPE_ORGANIC = "organic";
// googleAnalytics_Campaign.TYPE_REFERRAL = "referral";
// googleAnalytics_Config.ERROR_SEVERITY_SILENCE = 0;
// googleAnalytics_Config.ERROR_SEVERITY_TRACE = 1;
// googleAnalytics_Config.ERROR_SEVERITY_EXCEPTIONS = 2;
// googleAnalytics_CustomVariable.SCOPE_VISITOR = 1;
// googleAnalytics_CustomVariable.SCOPE_SESSION = 2;
// googleAnalytics_CustomVariable.SCOPE_PAGE = 3;
// googleAnalytics_Page.REFERRER_INTERNAL = "0";
// googleAnalytics_Tracker.VERSION = "5.2.5";
// googleAnalytics_URLParser.parts = ["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];
// googleAnalytics_internals_X10.OBJECT_KEY_NUM = 1;
// googleAnalytics_internals_X10.TYPE_KEY_NUM = 2;
// googleAnalytics_internals_X10.LABEL_KEY_NUM = 3;
// googleAnalytics_internals_X10.VALUE_VALUE_NUM = 1;
// googleAnalytics_internals_request_Request.TYPE_PAGE = null;
// googleAnalytics_internals_request_Request.TYPE_EVENT = "event";
// googleAnalytics_internals_request_Request.TYPE_TRANSACTION = "tran";
// googleAnalytics_internals_request_Request.TYPE_ITEM = "item";
// googleAnalytics_internals_request_Request.TYPE_SOCIAL = "social";
// googleAnalytics_internals_request_Request.TYPE_CUSTOMVARIABLE = "var";
// googleAnalytics_internals_request_Request.X10_CUSTOMVAR_NAME_PROJECT_ID = "8";
// googleAnalytics_internals_request_Request.X10_CUSTOMVAR_VALUE_PROJECT_ID = "9";
// googleAnalytics_internals_request_Request.X10_CUSTOMVAR_SCOPE_PROJECT_ID = "11";
// googleAnalytics_internals_request_Request.CAMPAIGN_DELIMITER = "|";
// googleAnalytics_internals_request_EventRequest.X10_EVENT_PROJECT_ID = "5";
haxe_Serializer.USE_CACHE = false;
haxe_Serializer.USE_ENUM_INDEX = false;
haxe_Serializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Serializer.BASE64_CODES = null;
haxe_Unserializer.DEFAULT_RESOLVER = new haxe__$Unserializer_DefaultResolver();
haxe_Unserializer.BASE64 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789%:";
haxe_Unserializer.CODES = null;
haxe_crypto_Base64.CHARS = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
haxe_crypto_Base64.BYTES = haxe_io_Bytes.ofString(haxe_crypto_Base64.CHARS);
haxe_ds_ObjectMap.count = 0;
haxe_io_FPHelper.i64tmp = new haxe__$Int64__$_$_$Int64(0,0);
haxe_xml_Parser.escapes = (function($this) {
	var $r;
	var h = new haxe_ds_StringMap();
	if(__map_reserved.lt != null) {
		h.setReserved("lt","<");
	} else {
		h.h["lt"] = "<";
	}
	if(__map_reserved.gt != null) {
		h.setReserved("gt",">");
	} else {
		h.h["gt"] = ">";
	}
	if(__map_reserved.amp != null) {
		h.setReserved("amp","&");
	} else {
		h.h["amp"] = "&";
	}
	if(__map_reserved.quot != null) {
		h.setReserved("quot","\"");
	} else {
		h.h["quot"] = "\"";
	}
	if(__map_reserved.apos != null) {
		h.setReserved("apos","'");
	} else {
		h.h["apos"] = "'";
	}
	$r = h;
	return $r;
}(this));
js_Boot.__toStr = { }.toString;
js_html_compat_Float32Array.BYTES_PER_ELEMENT = 4;
js_html_compat_Uint8Array.BYTES_PER_ELEMENT = 1;
lime_Assets.cache = new lime_AssetCache();
lime_Assets.libraries = new haxe_ds_StringMap();
lime_Assets.onChange = new lime_app_Event_$Void_$Void();
lime_Assets.initialized = false;
lime__$backend_html5_HTML5Window.windowID = 0;
lime_app_Preloader.images = new haxe_ds_StringMap();
lime_app_Preloader.loaders = new haxe_ds_StringMap();
lime_audio_openal_AL.NONE = 0;
lime_audio_openal_AL.FALSE = 0;
lime_audio_openal_AL.TRUE = 1;
lime_audio_openal_AL.SOURCE_RELATIVE = 514;
lime_audio_openal_AL.CONE_INNER_ANGLE = 4097;
lime_audio_openal_AL.CONE_OUTER_ANGLE = 4098;
lime_audio_openal_AL.PITCH = 4099;
lime_audio_openal_AL.POSITION = 4100;
lime_audio_openal_AL.DIRECTION = 4101;
lime_audio_openal_AL.VELOCITY = 4102;
lime_audio_openal_AL.LOOPING = 4103;
lime_audio_openal_AL.BUFFER = 4105;
lime_audio_openal_AL.GAIN = 4106;
lime_audio_openal_AL.MIN_GAIN = 4109;
lime_audio_openal_AL.MAX_GAIN = 4110;
lime_audio_openal_AL.ORIENTATION = 4111;
lime_audio_openal_AL.SOURCE_STATE = 4112;
lime_audio_openal_AL.INITIAL = 4113;
lime_audio_openal_AL.PLAYING = 4114;
lime_audio_openal_AL.PAUSED = 4115;
lime_audio_openal_AL.STOPPED = 4116;
lime_audio_openal_AL.BUFFERS_QUEUED = 4117;
lime_audio_openal_AL.BUFFERS_PROCESSED = 4118;
lime_audio_openal_AL.REFERENCE_DISTANCE = 4128;
lime_audio_openal_AL.ROLLOFF_FACTOR = 4129;
lime_audio_openal_AL.CONE_OUTER_GAIN = 4130;
lime_audio_openal_AL.MAX_DISTANCE = 4131;
lime_audio_openal_AL.SEC_OFFSET = 4132;
lime_audio_openal_AL.SAMPLE_OFFSET = 4133;
lime_audio_openal_AL.BYTE_OFFSET = 4134;
lime_audio_openal_AL.SOURCE_TYPE = 4135;
lime_audio_openal_AL.STATIC = 4136;
lime_audio_openal_AL.STREAMING = 4137;
lime_audio_openal_AL.UNDETERMINED = 4144;
lime_audio_openal_AL.FORMAT_MONO8 = 4352;
lime_audio_openal_AL.FORMAT_MONO16 = 4353;
lime_audio_openal_AL.FORMAT_STEREO8 = 4354;
lime_audio_openal_AL.FORMAT_STEREO16 = 4355;
lime_audio_openal_AL.FREQUENCY = 8193;
lime_audio_openal_AL.BITS = 8194;
lime_audio_openal_AL.CHANNELS = 8195;
lime_audio_openal_AL.SIZE = 8196;
lime_audio_openal_AL.NO_ERROR = 0;
lime_audio_openal_AL.INVALID_NAME = 40961;
lime_audio_openal_AL.INVALID_ENUM = 40962;
lime_audio_openal_AL.INVALID_VALUE = 40963;
lime_audio_openal_AL.INVALID_OPERATION = 40964;
lime_audio_openal_AL.OUT_OF_MEMORY = 40965;
lime_audio_openal_AL.VENDOR = 45057;
lime_audio_openal_AL.VERSION = 45058;
lime_audio_openal_AL.RENDERER = 45059;
lime_audio_openal_AL.EXTENSIONS = 45060;
lime_audio_openal_AL.DOPPLER_FACTOR = 49152;
lime_audio_openal_AL.SPEED_OF_SOUND = 49155;
lime_audio_openal_AL.DOPPLER_VELOCITY = 49153;
lime_audio_openal_AL.DISTANCE_MODEL = 53248;
lime_audio_openal_AL.INVERSE_DISTANCE = 53249;
lime_audio_openal_AL.INVERSE_DISTANCE_CLAMPED = 53250;
lime_audio_openal_AL.LINEAR_DISTANCE = 53251;
lime_audio_openal_AL.LINEAR_DISTANCE_CLAMPED = 53252;
lime_audio_openal_AL.EXPONENT_DISTANCE = 53253;
lime_audio_openal_AL.EXPONENT_DISTANCE_CLAMPED = 53254;
lime_audio_openal_ALC.FALSE = 0;
lime_audio_openal_ALC.TRUE = 1;
lime_audio_openal_ALC.FREQUENCY = 4103;
lime_audio_openal_ALC.REFRESH = 4104;
lime_audio_openal_ALC.SYNC = 4105;
lime_audio_openal_ALC.MONO_SOURCES = 4112;
lime_audio_openal_ALC.STEREO_SOURCES = 4113;
lime_audio_openal_ALC.NO_ERROR = 0;
lime_audio_openal_ALC.INVALID_DEVICE = 40961;
lime_audio_openal_ALC.INVALID_CONTEXT = 40962;
lime_audio_openal_ALC.INVALID_ENUM = 40963;
lime_audio_openal_ALC.INVALID_VALUE = 40964;
lime_audio_openal_ALC.OUT_OF_MEMORY = 40965;
lime_audio_openal_ALC.ATTRIBUTES_SIZE = 4098;
lime_audio_openal_ALC.ALL_ATTRIBUTES = 4099;
lime_audio_openal_ALC.DEFAULT_DEVICE_SPECIFIER = 4100;
lime_audio_openal_ALC.DEVICE_SPECIFIER = 4101;
lime_audio_openal_ALC.EXTENSIONS = 4102;
lime_audio_openal_ALC.ENUMERATE_ALL_EXT = 1;
lime_audio_openal_ALC.DEFAULT_ALL_DEVICES_SPECIFIER = 4114;
lime_audio_openal_ALC.ALL_DEVICES_SPECIFIER = 4115;
lime_graphics_Image.__base64Chars = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
lime_graphics_Image.__origin_hostname = window.location.hostname;
lime_graphics_Image.__origin_port = window.location.port;
lime_graphics_Image.__origin_protocol = window.location.protocol;
lime_graphics_cairo__$CairoFTFontFace_CairoFTFontFace_$Impl_$.FT_LOAD_FORCE_AUTOHINT = 32;
lime_graphics_opengl_GL.DEPTH_BUFFER_BIT = 256;
lime_graphics_opengl_GL.STENCIL_BUFFER_BIT = 1024;
lime_graphics_opengl_GL.COLOR_BUFFER_BIT = 16384;
lime_graphics_opengl_GL.POINTS = 0;
lime_graphics_opengl_GL.LINES = 1;
lime_graphics_opengl_GL.LINE_LOOP = 2;
lime_graphics_opengl_GL.LINE_STRIP = 3;
lime_graphics_opengl_GL.TRIANGLES = 4;
lime_graphics_opengl_GL.TRIANGLE_STRIP = 5;
lime_graphics_opengl_GL.TRIANGLE_FAN = 6;
lime_graphics_opengl_GL.ZERO = 0;
lime_graphics_opengl_GL.ONE = 1;
lime_graphics_opengl_GL.SRC_COLOR = 768;
lime_graphics_opengl_GL.ONE_MINUS_SRC_COLOR = 769;
lime_graphics_opengl_GL.SRC_ALPHA = 770;
lime_graphics_opengl_GL.ONE_MINUS_SRC_ALPHA = 771;
lime_graphics_opengl_GL.DST_ALPHA = 772;
lime_graphics_opengl_GL.ONE_MINUS_DST_ALPHA = 773;
lime_graphics_opengl_GL.DST_COLOR = 774;
lime_graphics_opengl_GL.ONE_MINUS_DST_COLOR = 775;
lime_graphics_opengl_GL.SRC_ALPHA_SATURATE = 776;
lime_graphics_opengl_GL.FUNC_ADD = 32774;
lime_graphics_opengl_GL.BLEND_EQUATION = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_RGB = 32777;
lime_graphics_opengl_GL.BLEND_EQUATION_ALPHA = 34877;
lime_graphics_opengl_GL.FUNC_SUBTRACT = 32778;
lime_graphics_opengl_GL.FUNC_REVERSE_SUBTRACT = 32779;
lime_graphics_opengl_GL.BLEND_DST_RGB = 32968;
lime_graphics_opengl_GL.BLEND_SRC_RGB = 32969;
lime_graphics_opengl_GL.BLEND_DST_ALPHA = 32970;
lime_graphics_opengl_GL.BLEND_SRC_ALPHA = 32971;
lime_graphics_opengl_GL.CONSTANT_COLOR = 32769;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_COLOR = 32770;
lime_graphics_opengl_GL.CONSTANT_ALPHA = 32771;
lime_graphics_opengl_GL.ONE_MINUS_CONSTANT_ALPHA = 32772;
lime_graphics_opengl_GL.BLEND_COLOR = 32773;
lime_graphics_opengl_GL.ARRAY_BUFFER = 34962;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER = 34963;
lime_graphics_opengl_GL.ARRAY_BUFFER_BINDING = 34964;
lime_graphics_opengl_GL.ELEMENT_ARRAY_BUFFER_BINDING = 34965;
lime_graphics_opengl_GL.STREAM_DRAW = 35040;
lime_graphics_opengl_GL.STATIC_DRAW = 35044;
lime_graphics_opengl_GL.DYNAMIC_DRAW = 35048;
lime_graphics_opengl_GL.BUFFER_SIZE = 34660;
lime_graphics_opengl_GL.BUFFER_USAGE = 34661;
lime_graphics_opengl_GL.CURRENT_VERTEX_ATTRIB = 34342;
lime_graphics_opengl_GL.FRONT = 1028;
lime_graphics_opengl_GL.BACK = 1029;
lime_graphics_opengl_GL.FRONT_AND_BACK = 1032;
lime_graphics_opengl_GL.CULL_FACE = 2884;
lime_graphics_opengl_GL.BLEND = 3042;
lime_graphics_opengl_GL.DITHER = 3024;
lime_graphics_opengl_GL.STENCIL_TEST = 2960;
lime_graphics_opengl_GL.DEPTH_TEST = 2929;
lime_graphics_opengl_GL.SCISSOR_TEST = 3089;
lime_graphics_opengl_GL.POLYGON_OFFSET_FILL = 32823;
lime_graphics_opengl_GL.SAMPLE_ALPHA_TO_COVERAGE = 32926;
lime_graphics_opengl_GL.SAMPLE_COVERAGE = 32928;
lime_graphics_opengl_GL.NO_ERROR = 0;
lime_graphics_opengl_GL.INVALID_ENUM = 1280;
lime_graphics_opengl_GL.INVALID_VALUE = 1281;
lime_graphics_opengl_GL.INVALID_OPERATION = 1282;
lime_graphics_opengl_GL.OUT_OF_MEMORY = 1285;
lime_graphics_opengl_GL.CW = 2304;
lime_graphics_opengl_GL.CCW = 2305;
lime_graphics_opengl_GL.LINE_WIDTH = 2849;
lime_graphics_opengl_GL.ALIASED_POINT_SIZE_RANGE = 33901;
lime_graphics_opengl_GL.ALIASED_LINE_WIDTH_RANGE = 33902;
lime_graphics_opengl_GL.CULL_FACE_MODE = 2885;
lime_graphics_opengl_GL.FRONT_FACE = 2886;
lime_graphics_opengl_GL.DEPTH_RANGE = 2928;
lime_graphics_opengl_GL.DEPTH_WRITEMASK = 2930;
lime_graphics_opengl_GL.DEPTH_CLEAR_VALUE = 2931;
lime_graphics_opengl_GL.DEPTH_FUNC = 2932;
lime_graphics_opengl_GL.STENCIL_CLEAR_VALUE = 2961;
lime_graphics_opengl_GL.STENCIL_FUNC = 2962;
lime_graphics_opengl_GL.STENCIL_FAIL = 2964;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_FAIL = 2965;
lime_graphics_opengl_GL.STENCIL_PASS_DEPTH_PASS = 2966;
lime_graphics_opengl_GL.STENCIL_REF = 2967;
lime_graphics_opengl_GL.STENCIL_VALUE_MASK = 2963;
lime_graphics_opengl_GL.STENCIL_WRITEMASK = 2968;
lime_graphics_opengl_GL.STENCIL_BACK_FUNC = 34816;
lime_graphics_opengl_GL.STENCIL_BACK_FAIL = 34817;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_FAIL = 34818;
lime_graphics_opengl_GL.STENCIL_BACK_PASS_DEPTH_PASS = 34819;
lime_graphics_opengl_GL.STENCIL_BACK_REF = 36003;
lime_graphics_opengl_GL.STENCIL_BACK_VALUE_MASK = 36004;
lime_graphics_opengl_GL.STENCIL_BACK_WRITEMASK = 36005;
lime_graphics_opengl_GL.VIEWPORT = 2978;
lime_graphics_opengl_GL.SCISSOR_BOX = 3088;
lime_graphics_opengl_GL.COLOR_CLEAR_VALUE = 3106;
lime_graphics_opengl_GL.COLOR_WRITEMASK = 3107;
lime_graphics_opengl_GL.UNPACK_ALIGNMENT = 3317;
lime_graphics_opengl_GL.PACK_ALIGNMENT = 3333;
lime_graphics_opengl_GL.MAX_TEXTURE_SIZE = 3379;
lime_graphics_opengl_GL.MAX_VIEWPORT_DIMS = 3386;
lime_graphics_opengl_GL.SUBPIXEL_BITS = 3408;
lime_graphics_opengl_GL.RED_BITS = 3410;
lime_graphics_opengl_GL.GREEN_BITS = 3411;
lime_graphics_opengl_GL.BLUE_BITS = 3412;
lime_graphics_opengl_GL.ALPHA_BITS = 3413;
lime_graphics_opengl_GL.DEPTH_BITS = 3414;
lime_graphics_opengl_GL.STENCIL_BITS = 3415;
lime_graphics_opengl_GL.POLYGON_OFFSET_UNITS = 10752;
lime_graphics_opengl_GL.POLYGON_OFFSET_FACTOR = 32824;
lime_graphics_opengl_GL.TEXTURE_BINDING_2D = 32873;
lime_graphics_opengl_GL.SAMPLE_BUFFERS = 32936;
lime_graphics_opengl_GL.SAMPLES = 32937;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_VALUE = 32938;
lime_graphics_opengl_GL.SAMPLE_COVERAGE_INVERT = 32939;
lime_graphics_opengl_GL.COMPRESSED_TEXTURE_FORMATS = 34467;
lime_graphics_opengl_GL.DONT_CARE = 4352;
lime_graphics_opengl_GL.FASTEST = 4353;
lime_graphics_opengl_GL.NICEST = 4354;
lime_graphics_opengl_GL.GENERATE_MIPMAP_HINT = 33170;
lime_graphics_opengl_GL.BYTE = 5120;
lime_graphics_opengl_GL.UNSIGNED_BYTE = 5121;
lime_graphics_opengl_GL.SHORT = 5122;
lime_graphics_opengl_GL.UNSIGNED_SHORT = 5123;
lime_graphics_opengl_GL.INT = 5124;
lime_graphics_opengl_GL.UNSIGNED_INT = 5125;
lime_graphics_opengl_GL.FLOAT = 5126;
lime_graphics_opengl_GL.DEPTH_COMPONENT = 6402;
lime_graphics_opengl_GL.ALPHA = 6406;
lime_graphics_opengl_GL.RGB = 6407;
lime_graphics_opengl_GL.RGBA = 6408;
lime_graphics_opengl_GL.BGR_EXT = 32992;
lime_graphics_opengl_GL.BGRA_EXT = 32993;
lime_graphics_opengl_GL.LUMINANCE = 6409;
lime_graphics_opengl_GL.LUMINANCE_ALPHA = 6410;
lime_graphics_opengl_GL.UNSIGNED_SHORT_4_4_4_4 = 32819;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_5_5_1 = 32820;
lime_graphics_opengl_GL.UNSIGNED_SHORT_5_6_5 = 33635;
lime_graphics_opengl_GL.FRAGMENT_SHADER = 35632;
lime_graphics_opengl_GL.VERTEX_SHADER = 35633;
lime_graphics_opengl_GL.MAX_VERTEX_ATTRIBS = 34921;
lime_graphics_opengl_GL.MAX_VERTEX_UNIFORM_VECTORS = 36347;
lime_graphics_opengl_GL.MAX_VARYING_VECTORS = 36348;
lime_graphics_opengl_GL.MAX_COMBINED_TEXTURE_IMAGE_UNITS = 35661;
lime_graphics_opengl_GL.MAX_VERTEX_TEXTURE_IMAGE_UNITS = 35660;
lime_graphics_opengl_GL.MAX_TEXTURE_IMAGE_UNITS = 34930;
lime_graphics_opengl_GL.MAX_FRAGMENT_UNIFORM_VECTORS = 36349;
lime_graphics_opengl_GL.SHADER_TYPE = 35663;
lime_graphics_opengl_GL.DELETE_STATUS = 35712;
lime_graphics_opengl_GL.LINK_STATUS = 35714;
lime_graphics_opengl_GL.VALIDATE_STATUS = 35715;
lime_graphics_opengl_GL.ATTACHED_SHADERS = 35717;
lime_graphics_opengl_GL.ACTIVE_UNIFORMS = 35718;
lime_graphics_opengl_GL.ACTIVE_ATTRIBUTES = 35721;
lime_graphics_opengl_GL.SHADING_LANGUAGE_VERSION = 35724;
lime_graphics_opengl_GL.CURRENT_PROGRAM = 35725;
lime_graphics_opengl_GL.NEVER = 512;
lime_graphics_opengl_GL.LESS = 513;
lime_graphics_opengl_GL.EQUAL = 514;
lime_graphics_opengl_GL.LEQUAL = 515;
lime_graphics_opengl_GL.GREATER = 516;
lime_graphics_opengl_GL.NOTEQUAL = 517;
lime_graphics_opengl_GL.GEQUAL = 518;
lime_graphics_opengl_GL.ALWAYS = 519;
lime_graphics_opengl_GL.KEEP = 7680;
lime_graphics_opengl_GL.REPLACE = 7681;
lime_graphics_opengl_GL.INCR = 7682;
lime_graphics_opengl_GL.DECR = 7683;
lime_graphics_opengl_GL.INVERT = 5386;
lime_graphics_opengl_GL.INCR_WRAP = 34055;
lime_graphics_opengl_GL.DECR_WRAP = 34056;
lime_graphics_opengl_GL.VENDOR = 7936;
lime_graphics_opengl_GL.RENDERER = 7937;
lime_graphics_opengl_GL.VERSION = 7938;
lime_graphics_opengl_GL.NEAREST = 9728;
lime_graphics_opengl_GL.LINEAR = 9729;
lime_graphics_opengl_GL.NEAREST_MIPMAP_NEAREST = 9984;
lime_graphics_opengl_GL.LINEAR_MIPMAP_NEAREST = 9985;
lime_graphics_opengl_GL.NEAREST_MIPMAP_LINEAR = 9986;
lime_graphics_opengl_GL.LINEAR_MIPMAP_LINEAR = 9987;
lime_graphics_opengl_GL.TEXTURE_MAG_FILTER = 10240;
lime_graphics_opengl_GL.TEXTURE_MIN_FILTER = 10241;
lime_graphics_opengl_GL.TEXTURE_WRAP_S = 10242;
lime_graphics_opengl_GL.TEXTURE_WRAP_T = 10243;
lime_graphics_opengl_GL.TEXTURE_2D = 3553;
lime_graphics_opengl_GL.TEXTURE = 5890;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP = 34067;
lime_graphics_opengl_GL.TEXTURE_BINDING_CUBE_MAP = 34068;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_X = 34069;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_X = 34070;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Y = 34071;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Y = 34072;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_POSITIVE_Z = 34073;
lime_graphics_opengl_GL.TEXTURE_CUBE_MAP_NEGATIVE_Z = 34074;
lime_graphics_opengl_GL.MAX_CUBE_MAP_TEXTURE_SIZE = 34076;
lime_graphics_opengl_GL.TEXTURE0 = 33984;
lime_graphics_opengl_GL.TEXTURE1 = 33985;
lime_graphics_opengl_GL.TEXTURE2 = 33986;
lime_graphics_opengl_GL.TEXTURE3 = 33987;
lime_graphics_opengl_GL.TEXTURE4 = 33988;
lime_graphics_opengl_GL.TEXTURE5 = 33989;
lime_graphics_opengl_GL.TEXTURE6 = 33990;
lime_graphics_opengl_GL.TEXTURE7 = 33991;
lime_graphics_opengl_GL.TEXTURE8 = 33992;
lime_graphics_opengl_GL.TEXTURE9 = 33993;
lime_graphics_opengl_GL.TEXTURE10 = 33994;
lime_graphics_opengl_GL.TEXTURE11 = 33995;
lime_graphics_opengl_GL.TEXTURE12 = 33996;
lime_graphics_opengl_GL.TEXTURE13 = 33997;
lime_graphics_opengl_GL.TEXTURE14 = 33998;
lime_graphics_opengl_GL.TEXTURE15 = 33999;
lime_graphics_opengl_GL.TEXTURE16 = 34000;
lime_graphics_opengl_GL.TEXTURE17 = 34001;
lime_graphics_opengl_GL.TEXTURE18 = 34002;
lime_graphics_opengl_GL.TEXTURE19 = 34003;
lime_graphics_opengl_GL.TEXTURE20 = 34004;
lime_graphics_opengl_GL.TEXTURE21 = 34005;
lime_graphics_opengl_GL.TEXTURE22 = 34006;
lime_graphics_opengl_GL.TEXTURE23 = 34007;
lime_graphics_opengl_GL.TEXTURE24 = 34008;
lime_graphics_opengl_GL.TEXTURE25 = 34009;
lime_graphics_opengl_GL.TEXTURE26 = 34010;
lime_graphics_opengl_GL.TEXTURE27 = 34011;
lime_graphics_opengl_GL.TEXTURE28 = 34012;
lime_graphics_opengl_GL.TEXTURE29 = 34013;
lime_graphics_opengl_GL.TEXTURE30 = 34014;
lime_graphics_opengl_GL.TEXTURE31 = 34015;
lime_graphics_opengl_GL.ACTIVE_TEXTURE = 34016;
lime_graphics_opengl_GL.REPEAT = 10497;
lime_graphics_opengl_GL.CLAMP_TO_EDGE = 33071;
lime_graphics_opengl_GL.MIRRORED_REPEAT = 33648;
lime_graphics_opengl_GL.FLOAT_VEC2 = 35664;
lime_graphics_opengl_GL.FLOAT_VEC3 = 35665;
lime_graphics_opengl_GL.FLOAT_VEC4 = 35666;
lime_graphics_opengl_GL.INT_VEC2 = 35667;
lime_graphics_opengl_GL.INT_VEC3 = 35668;
lime_graphics_opengl_GL.INT_VEC4 = 35669;
lime_graphics_opengl_GL.BOOL = 35670;
lime_graphics_opengl_GL.BOOL_VEC2 = 35671;
lime_graphics_opengl_GL.BOOL_VEC3 = 35672;
lime_graphics_opengl_GL.BOOL_VEC4 = 35673;
lime_graphics_opengl_GL.FLOAT_MAT2 = 35674;
lime_graphics_opengl_GL.FLOAT_MAT3 = 35675;
lime_graphics_opengl_GL.FLOAT_MAT4 = 35676;
lime_graphics_opengl_GL.SAMPLER_2D = 35678;
lime_graphics_opengl_GL.SAMPLER_CUBE = 35680;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_ENABLED = 34338;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_SIZE = 34339;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_STRIDE = 34340;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_TYPE = 34341;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_NORMALIZED = 34922;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_POINTER = 34373;
lime_graphics_opengl_GL.VERTEX_ATTRIB_ARRAY_BUFFER_BINDING = 34975;
lime_graphics_opengl_GL.VERTEX_PROGRAM_POINT_SIZE = 34370;
lime_graphics_opengl_GL.POINT_SPRITE = 34913;
lime_graphics_opengl_GL.COMPILE_STATUS = 35713;
lime_graphics_opengl_GL.LOW_FLOAT = 36336;
lime_graphics_opengl_GL.MEDIUM_FLOAT = 36337;
lime_graphics_opengl_GL.HIGH_FLOAT = 36338;
lime_graphics_opengl_GL.LOW_INT = 36339;
lime_graphics_opengl_GL.MEDIUM_INT = 36340;
lime_graphics_opengl_GL.HIGH_INT = 36341;
lime_graphics_opengl_GL.FRAMEBUFFER = 36160;
lime_graphics_opengl_GL.RENDERBUFFER = 36161;
lime_graphics_opengl_GL.RGBA4 = 32854;
lime_graphics_opengl_GL.RGB5_A1 = 32855;
lime_graphics_opengl_GL.RGB565 = 36194;
lime_graphics_opengl_GL.DEPTH_COMPONENT16 = 33189;
lime_graphics_opengl_GL.STENCIL_INDEX = 6401;
lime_graphics_opengl_GL.STENCIL_INDEX8 = 36168;
lime_graphics_opengl_GL.DEPTH_STENCIL = 34041;
lime_graphics_opengl_GL.RENDERBUFFER_WIDTH = 36162;
lime_graphics_opengl_GL.RENDERBUFFER_HEIGHT = 36163;
lime_graphics_opengl_GL.RENDERBUFFER_INTERNAL_FORMAT = 36164;
lime_graphics_opengl_GL.RENDERBUFFER_RED_SIZE = 36176;
lime_graphics_opengl_GL.RENDERBUFFER_GREEN_SIZE = 36177;
lime_graphics_opengl_GL.RENDERBUFFER_BLUE_SIZE = 36178;
lime_graphics_opengl_GL.RENDERBUFFER_ALPHA_SIZE = 36179;
lime_graphics_opengl_GL.RENDERBUFFER_DEPTH_SIZE = 36180;
lime_graphics_opengl_GL.RENDERBUFFER_STENCIL_SIZE = 36181;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE = 36048;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_OBJECT_NAME = 36049;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL = 36050;
lime_graphics_opengl_GL.FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE = 36051;
lime_graphics_opengl_GL.COLOR_ATTACHMENT0 = 36064;
lime_graphics_opengl_GL.DEPTH_ATTACHMENT = 36096;
lime_graphics_opengl_GL.STENCIL_ATTACHMENT = 36128;
lime_graphics_opengl_GL.DEPTH_STENCIL_ATTACHMENT = 33306;
lime_graphics_opengl_GL.NONE = 0;
lime_graphics_opengl_GL.FRAMEBUFFER_COMPLETE = 36053;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_ATTACHMENT = 36054;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT = 36055;
lime_graphics_opengl_GL.FRAMEBUFFER_INCOMPLETE_DIMENSIONS = 36057;
lime_graphics_opengl_GL.FRAMEBUFFER_UNSUPPORTED = 36061;
lime_graphics_opengl_GL.FRAMEBUFFER_BINDING = 36006;
lime_graphics_opengl_GL.RENDERBUFFER_BINDING = 36007;
lime_graphics_opengl_GL.MAX_RENDERBUFFER_SIZE = 34024;
lime_graphics_opengl_GL.INVALID_FRAMEBUFFER_OPERATION = 1286;
lime_graphics_opengl_GL.UNPACK_FLIP_Y_WEBGL = 37440;
lime_graphics_opengl_GL.UNPACK_PREMULTIPLY_ALPHA_WEBGL = 37441;
lime_graphics_opengl_GL.CONTEXT_LOST_WEBGL = 37442;
lime_graphics_opengl_GL.UNPACK_COLORSPACE_CONVERSION_WEBGL = 37443;
lime_graphics_opengl_GL.BROWSER_DEFAULT_WEBGL = 37444;
lime_math__$ColorMatrix_ColorMatrix_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,0.0,1.0,0.0];
lime_math_Matrix3.__identity = new lime_math_Matrix3();
lime_math__$Matrix4_Matrix4_$Impl_$.__identity = [1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0,0.0,0.0,0.0,0.0,1.0];
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_SSL = 1;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_WIN32 = 2;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ALL = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_NOTHING = 0;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_DEFAULT = 3;
lime_net_curl__$CURL_CURL_$Impl_$.GLOBAL_ACK_EINTR = 4;
lime_system_BackgroundWorker.MESSAGE_COMPLETE = "__COMPLETE__";
lime_system_BackgroundWorker.MESSAGE_ERROR = "__ERROR__";
lime_system_CFFI.__moduleNames = null;
lime_text__$TextDirection_TextDirection_$Impl_$.INVALID = 0;
lime_text__$TextDirection_TextDirection_$Impl_$.LEFT_TO_RIGHT = 4;
lime_text__$TextDirection_TextDirection_$Impl_$.RIGHT_TO_LEFT = 5;
lime_text__$TextDirection_TextDirection_$Impl_$.TOP_TO_BOTTOM = 6;
lime_text__$TextDirection_TextDirection_$Impl_$.BOTTOM_TO_TOP = 7;
lime_text__$TextScript_TextScript_$Impl_$.COMMON = "Zyyy";
lime_text__$TextScript_TextScript_$Impl_$.INHERITED = "Zinh";
lime_text__$TextScript_TextScript_$Impl_$.UNKNOWN = "Zzzz";
lime_text__$TextScript_TextScript_$Impl_$.ARABIC = "Arab";
lime_text__$TextScript_TextScript_$Impl_$.ARMENIAN = "Armn";
lime_text__$TextScript_TextScript_$Impl_$.BENGALI = "Beng";
lime_text__$TextScript_TextScript_$Impl_$.CYRILLIC = "Cyrl";
lime_text__$TextScript_TextScript_$Impl_$.DEVANAGARI = "Deva";
lime_text__$TextScript_TextScript_$Impl_$.GEORGIAN = "Geor";
lime_text__$TextScript_TextScript_$Impl_$.GREEK = "Grek";
lime_text__$TextScript_TextScript_$Impl_$.GUJARATI = "Gujr";
lime_text__$TextScript_TextScript_$Impl_$.GURMUKHI = "Guru";
lime_text__$TextScript_TextScript_$Impl_$.HANGUL = "Hang";
lime_text__$TextScript_TextScript_$Impl_$.HAN = "Hani";
lime_text__$TextScript_TextScript_$Impl_$.HEBREW = "Hebr";
lime_text__$TextScript_TextScript_$Impl_$.HIRAGANA = "Hira";
lime_text__$TextScript_TextScript_$Impl_$.KANNADA = "Knda";
lime_text__$TextScript_TextScript_$Impl_$.KATAKANA = "Kana";
lime_text__$TextScript_TextScript_$Impl_$.LAO = "Laoo";
lime_text__$TextScript_TextScript_$Impl_$.LATIN = "Latn";
lime_text__$TextScript_TextScript_$Impl_$.MALAYALAM = "Mlym";
lime_text__$TextScript_TextScript_$Impl_$.ORIYA = "Orya";
lime_text__$TextScript_TextScript_$Impl_$.TAMIL = "Taml";
lime_text__$TextScript_TextScript_$Impl_$.TELUGA = "Telu";
lime_text__$TextScript_TextScript_$Impl_$.THAI = "Thai";
lime_text__$TextScript_TextScript_$Impl_$.TIBETAN = "Tibt";
lime_text__$TextScript_TextScript_$Impl_$.BOPOMOFO = "Bopo";
lime_text__$TextScript_TextScript_$Impl_$.BRAILLE = "Brai";
lime_text__$TextScript_TextScript_$Impl_$.CANADIAN_SYLLABICS = "Cans";
lime_text__$TextScript_TextScript_$Impl_$.CHEROKEE = "Cher";
lime_text__$TextScript_TextScript_$Impl_$.ETHIOPIC = "Ethi";
lime_text__$TextScript_TextScript_$Impl_$.KHMER = "Khmr";
lime_text__$TextScript_TextScript_$Impl_$.MONGOLIAN = "Mong";
lime_text__$TextScript_TextScript_$Impl_$.MYANMAR = "Mymr";
lime_text__$TextScript_TextScript_$Impl_$.OGHAM = "Ogam";
lime_text__$TextScript_TextScript_$Impl_$.RUNIC = "Runr";
lime_text__$TextScript_TextScript_$Impl_$.SINHALA = "Sinh";
lime_text__$TextScript_TextScript_$Impl_$.SYRIAC = "Syrc";
lime_text__$TextScript_TextScript_$Impl_$.THAANA = "Thaa";
lime_text__$TextScript_TextScript_$Impl_$.YI = "Yiii";
lime_text__$TextScript_TextScript_$Impl_$.DESERET = "Dsrt";
lime_text__$TextScript_TextScript_$Impl_$.GOTHIC = "Goth";
lime_text__$TextScript_TextScript_$Impl_$.OLD_ITALIC = "Ital";
lime_text__$TextScript_TextScript_$Impl_$.BUHID = "Buhd";
lime_text__$TextScript_TextScript_$Impl_$.HANUNOO = "Hano";
lime_text__$TextScript_TextScript_$Impl_$.TAGALOG = "Tglg";
lime_text__$TextScript_TextScript_$Impl_$.TAGBANWA = "Tagb";
lime_text__$TextScript_TextScript_$Impl_$.CYPRIOT = "Cprt";
lime_text__$TextScript_TextScript_$Impl_$.LIMBU = "Limb";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_B = "Linb";
lime_text__$TextScript_TextScript_$Impl_$.OSMANYA = "Osma";
lime_text__$TextScript_TextScript_$Impl_$.SHAVIAN = "Shaw";
lime_text__$TextScript_TextScript_$Impl_$.TAI_LE = "Tale";
lime_text__$TextScript_TextScript_$Impl_$.UGARITIC = "Ugar";
lime_text__$TextScript_TextScript_$Impl_$.BUGINESE = "Bugi";
lime_text__$TextScript_TextScript_$Impl_$.COPTIC = "Copt";
lime_text__$TextScript_TextScript_$Impl_$.GLAGOLITIC = "Glag";
lime_text__$TextScript_TextScript_$Impl_$.KHAROSHTHI = "Khar";
lime_text__$TextScript_TextScript_$Impl_$.NEW_TAI_LUE = "Talu";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERSIAN = "Xpeo";
lime_text__$TextScript_TextScript_$Impl_$.SYLOTI_NAGRI = "Sylo";
lime_text__$TextScript_TextScript_$Impl_$.TIFINAGH = "Tfng";
lime_text__$TextScript_TextScript_$Impl_$.BALINESE = "Bali";
lime_text__$TextScript_TextScript_$Impl_$.CUNEIFORM = "Xsux";
lime_text__$TextScript_TextScript_$Impl_$.NKO = "Nkoo";
lime_text__$TextScript_TextScript_$Impl_$.PHAGS_PA = "Phag";
lime_text__$TextScript_TextScript_$Impl_$.PHOENICIAN = "Phnx";
lime_text__$TextScript_TextScript_$Impl_$.CARIAN = "Cari";
lime_text__$TextScript_TextScript_$Impl_$.CHAM = "Cham";
lime_text__$TextScript_TextScript_$Impl_$.KAYAH_LI = "Kali";
lime_text__$TextScript_TextScript_$Impl_$.LEPCHA = "Lepc";
lime_text__$TextScript_TextScript_$Impl_$.LYCIAN = "Lyci";
lime_text__$TextScript_TextScript_$Impl_$.LYDIAN = "Lydi";
lime_text__$TextScript_TextScript_$Impl_$.OL_CHIKI = "Olck";
lime_text__$TextScript_TextScript_$Impl_$.REJANG = "Rjng";
lime_text__$TextScript_TextScript_$Impl_$.SAURASHTRA = "Saur";
lime_text__$TextScript_TextScript_$Impl_$.SUNDANESE = "Sund";
lime_text__$TextScript_TextScript_$Impl_$.VAI = "Vaii";
lime_text__$TextScript_TextScript_$Impl_$.AVESTAN = "Avst";
lime_text__$TextScript_TextScript_$Impl_$.BAMUM = "Bamu";
lime_text__$TextScript_TextScript_$Impl_$.EGYPTIAN_HIEROGLYPHS = "Egyp";
lime_text__$TextScript_TextScript_$Impl_$.IMPERIAL_ARAMAIC = "Armi";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PAHLAVI = "Phli";
lime_text__$TextScript_TextScript_$Impl_$.INSCRIPTIONAL_PARTHIAN = "Prti";
lime_text__$TextScript_TextScript_$Impl_$.JAVANESE = "Java";
lime_text__$TextScript_TextScript_$Impl_$.KAITHI = "Kthi";
lime_text__$TextScript_TextScript_$Impl_$.LISU = "Lisu";
lime_text__$TextScript_TextScript_$Impl_$.MEETEI_MAYEK = "Mtei";
lime_text__$TextScript_TextScript_$Impl_$.OLD_SOUTH_ARABIAN = "Sarb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_TURKIC = "Orkh";
lime_text__$TextScript_TextScript_$Impl_$.SAMARITAN = "Samr";
lime_text__$TextScript_TextScript_$Impl_$.TAI_THAM = "Lana";
lime_text__$TextScript_TextScript_$Impl_$.TAI_VIET = "Tavt";
lime_text__$TextScript_TextScript_$Impl_$.BATAK = "Batk";
lime_text__$TextScript_TextScript_$Impl_$.BRAHMI = "Brah";
lime_text__$TextScript_TextScript_$Impl_$.MANDAIC = "Mand";
lime_text__$TextScript_TextScript_$Impl_$.CHAKMA = "Cakm";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_CURSIVE = "Merc";
lime_text__$TextScript_TextScript_$Impl_$.MEROITIC_HIEROGLYPHS = "Mero";
lime_text__$TextScript_TextScript_$Impl_$.MIAO = "Plrd";
lime_text__$TextScript_TextScript_$Impl_$.SHARADA = "Shrd";
lime_text__$TextScript_TextScript_$Impl_$.SORA_SOMPENG = "Sora";
lime_text__$TextScript_TextScript_$Impl_$.TAKRI = "Takr";
lime_text__$TextScript_TextScript_$Impl_$.BASSA_VAH = "Bass";
lime_text__$TextScript_TextScript_$Impl_$.CAUCASIAN_ALBANIAN = "Aghb";
lime_text__$TextScript_TextScript_$Impl_$.DUPLOYAN = "Dupl";
lime_text__$TextScript_TextScript_$Impl_$.ELBASAN = "Elba";
lime_text__$TextScript_TextScript_$Impl_$.GRANTHA = "Gran";
lime_text__$TextScript_TextScript_$Impl_$.KHOJKI = "Khoj";
lime_text__$TextScript_TextScript_$Impl_$.KHUDAWADI = "Sind";
lime_text__$TextScript_TextScript_$Impl_$.LINEAR_A = "Lina";
lime_text__$TextScript_TextScript_$Impl_$.MAHAJANI = "Mahj";
lime_text__$TextScript_TextScript_$Impl_$.MANICHAEAN = "Mani";
lime_text__$TextScript_TextScript_$Impl_$.MENDE_KIKAKUI = "Mend";
lime_text__$TextScript_TextScript_$Impl_$.MODI = "Modi";
lime_text__$TextScript_TextScript_$Impl_$.MRO = "Mroo";
lime_text__$TextScript_TextScript_$Impl_$.NABATAEAN = "Nbat";
lime_text__$TextScript_TextScript_$Impl_$.OLD_NORTH_ARABIAN = "Narb";
lime_text__$TextScript_TextScript_$Impl_$.OLD_PERMIC = "Perm";
lime_text__$TextScript_TextScript_$Impl_$.PAHAWH_HMONG = "Hmng";
lime_text__$TextScript_TextScript_$Impl_$.PALMYRENE = "Palm";
lime_text__$TextScript_TextScript_$Impl_$.PAU_CIN_HAU = "Pauc";
lime_text__$TextScript_TextScript_$Impl_$.PSALTER_PAHLAVI = "Phlp";
lime_text__$TextScript_TextScript_$Impl_$.SIDDHAM = "Sidd";
lime_text__$TextScript_TextScript_$Impl_$.TIRHUTA = "Tirh";
lime_text__$TextScript_TextScript_$Impl_$.WARANG_CITI = "Wara";
lime_ui_Gamepad.devices = new haxe_ds_IntMap();
lime_ui_Gamepad.onConnect = new lime_app_Event_$lime_$ui_$Gamepad_$Void();
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_X = 0;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.LEFT_Y = 1;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_X = 2;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.RIGHT_Y = 3;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_LEFT = 4;
lime_ui__$GamepadAxis_GamepadAxis_$Impl_$.TRIGGER_RIGHT = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.A = 0;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.B = 1;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.X = 2;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.Y = 3;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.BACK = 4;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.GUIDE = 5;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.START = 6;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_STICK = 7;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_STICK = 8;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.LEFT_SHOULDER = 9;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.RIGHT_SHOULDER = 10;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_UP = 11;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_DOWN = 12;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_LEFT = 13;
lime_ui__$GamepadButton_GamepadButton_$Impl_$.DPAD_RIGHT = 14;
lime_ui_Joystick.devices = new haxe_ds_IntMap();
lime_ui_Joystick.onConnect = new lime_app_Event_$lime_$ui_$Joystick_$Void();
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.CENTER = 0;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN = 4;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.LEFT = 8;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.RIGHT = 2;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP = 1;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_LEFT = 12;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.DOWN_RIGHT = 6;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_LEFT = 9;
lime_ui__$JoystickHatPosition_JoystickHatPosition_$Impl_$.UP_RIGHT = 3;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNKNOWN = 0;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSPACE = 8;
lime_ui__$KeyCode_KeyCode_$Impl_$.TAB = 9;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN = 13;
lime_ui__$KeyCode_KeyCode_$Impl_$.ESCAPE = 27;
lime_ui__$KeyCode_KeyCode_$Impl_$.SPACE = 32;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXCLAMATION = 33;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUOTE = 34;
lime_ui__$KeyCode_KeyCode_$Impl_$.HASH = 35;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOLLAR = 36;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERCENT = 37;
lime_ui__$KeyCode_KeyCode_$Impl_$.AMPERSAND = 38;
lime_ui__$KeyCode_KeyCode_$Impl_$.SINGLE_QUOTE = 39;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_PARENTHESIS = 40;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_PARENTHESIS = 41;
lime_ui__$KeyCode_KeyCode_$Impl_$.ASTERISK = 42;
lime_ui__$KeyCode_KeyCode_$Impl_$.PLUS = 43;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMMA = 44;
lime_ui__$KeyCode_KeyCode_$Impl_$.MINUS = 45;
lime_ui__$KeyCode_KeyCode_$Impl_$.PERIOD = 46;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLASH = 47;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_0 = 48;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_1 = 49;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_2 = 50;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_3 = 51;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_4 = 52;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_5 = 53;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_6 = 54;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_7 = 55;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_8 = 56;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMBER_9 = 57;
lime_ui__$KeyCode_KeyCode_$Impl_$.COLON = 58;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEMICOLON = 59;
lime_ui__$KeyCode_KeyCode_$Impl_$.LESS_THAN = 60;
lime_ui__$KeyCode_KeyCode_$Impl_$.EQUALS = 61;
lime_ui__$KeyCode_KeyCode_$Impl_$.GREATER_THAN = 62;
lime_ui__$KeyCode_KeyCode_$Impl_$.QUESTION = 63;
lime_ui__$KeyCode_KeyCode_$Impl_$.AT = 64;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_BRACKET = 91;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKSLASH = 92;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_BRACKET = 93;
lime_ui__$KeyCode_KeyCode_$Impl_$.CARET = 94;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDERSCORE = 95;
lime_ui__$KeyCode_KeyCode_$Impl_$.GRAVE = 96;
lime_ui__$KeyCode_KeyCode_$Impl_$.A = 97;
lime_ui__$KeyCode_KeyCode_$Impl_$.B = 98;
lime_ui__$KeyCode_KeyCode_$Impl_$.C = 99;
lime_ui__$KeyCode_KeyCode_$Impl_$.D = 100;
lime_ui__$KeyCode_KeyCode_$Impl_$.E = 101;
lime_ui__$KeyCode_KeyCode_$Impl_$.F = 102;
lime_ui__$KeyCode_KeyCode_$Impl_$.G = 103;
lime_ui__$KeyCode_KeyCode_$Impl_$.H = 104;
lime_ui__$KeyCode_KeyCode_$Impl_$.I = 105;
lime_ui__$KeyCode_KeyCode_$Impl_$.J = 106;
lime_ui__$KeyCode_KeyCode_$Impl_$.K = 107;
lime_ui__$KeyCode_KeyCode_$Impl_$.L = 108;
lime_ui__$KeyCode_KeyCode_$Impl_$.M = 109;
lime_ui__$KeyCode_KeyCode_$Impl_$.N = 110;
lime_ui__$KeyCode_KeyCode_$Impl_$.O = 111;
lime_ui__$KeyCode_KeyCode_$Impl_$.P = 112;
lime_ui__$KeyCode_KeyCode_$Impl_$.Q = 113;
lime_ui__$KeyCode_KeyCode_$Impl_$.R = 114;
lime_ui__$KeyCode_KeyCode_$Impl_$.S = 115;
lime_ui__$KeyCode_KeyCode_$Impl_$.T = 116;
lime_ui__$KeyCode_KeyCode_$Impl_$.U = 117;
lime_ui__$KeyCode_KeyCode_$Impl_$.V = 118;
lime_ui__$KeyCode_KeyCode_$Impl_$.W = 119;
lime_ui__$KeyCode_KeyCode_$Impl_$.X = 120;
lime_ui__$KeyCode_KeyCode_$Impl_$.Y = 121;
lime_ui__$KeyCode_KeyCode_$Impl_$.Z = 122;
lime_ui__$KeyCode_KeyCode_$Impl_$.DELETE = 127;
lime_ui__$KeyCode_KeyCode_$Impl_$.CAPS_LOCK = 1073741881;
lime_ui__$KeyCode_KeyCode_$Impl_$.F1 = 1073741882;
lime_ui__$KeyCode_KeyCode_$Impl_$.F2 = 1073741883;
lime_ui__$KeyCode_KeyCode_$Impl_$.F3 = 1073741884;
lime_ui__$KeyCode_KeyCode_$Impl_$.F4 = 1073741885;
lime_ui__$KeyCode_KeyCode_$Impl_$.F5 = 1073741886;
lime_ui__$KeyCode_KeyCode_$Impl_$.F6 = 1073741887;
lime_ui__$KeyCode_KeyCode_$Impl_$.F7 = 1073741888;
lime_ui__$KeyCode_KeyCode_$Impl_$.F8 = 1073741889;
lime_ui__$KeyCode_KeyCode_$Impl_$.F9 = 1073741890;
lime_ui__$KeyCode_KeyCode_$Impl_$.F10 = 1073741891;
lime_ui__$KeyCode_KeyCode_$Impl_$.F11 = 1073741892;
lime_ui__$KeyCode_KeyCode_$Impl_$.F12 = 1073741893;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRINT_SCREEN = 1073741894;
lime_ui__$KeyCode_KeyCode_$Impl_$.SCROLL_LOCK = 1073741895;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAUSE = 1073741896;
lime_ui__$KeyCode_KeyCode_$Impl_$.INSERT = 1073741897;
lime_ui__$KeyCode_KeyCode_$Impl_$.HOME = 1073741898;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_UP = 1073741899;
lime_ui__$KeyCode_KeyCode_$Impl_$.END = 1073741901;
lime_ui__$KeyCode_KeyCode_$Impl_$.PAGE_DOWN = 1073741902;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT = 1073741903;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT = 1073741904;
lime_ui__$KeyCode_KeyCode_$Impl_$.DOWN = 1073741905;
lime_ui__$KeyCode_KeyCode_$Impl_$.UP = 1073741906;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUM_LOCK = 1073741907;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DIVIDE = 1073741908;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MULTIPLY = 1073741909;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MINUS = 1073741910;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS = 1073741911;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_ENTER = 1073741912;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_1 = 1073741913;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_2 = 1073741914;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_3 = 1073741915;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_4 = 1073741916;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_5 = 1073741917;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_6 = 1073741918;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_7 = 1073741919;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_8 = 1073741920;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_9 = 1073741921;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_0 = 1073741922;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERIOD = 1073741923;
lime_ui__$KeyCode_KeyCode_$Impl_$.APPLICATION = 1073741925;
lime_ui__$KeyCode_KeyCode_$Impl_$.POWER = 1073741926;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EQUALS = 1073741927;
lime_ui__$KeyCode_KeyCode_$Impl_$.F13 = 1073741928;
lime_ui__$KeyCode_KeyCode_$Impl_$.F14 = 1073741929;
lime_ui__$KeyCode_KeyCode_$Impl_$.F15 = 1073741930;
lime_ui__$KeyCode_KeyCode_$Impl_$.F16 = 1073741931;
lime_ui__$KeyCode_KeyCode_$Impl_$.F17 = 1073741932;
lime_ui__$KeyCode_KeyCode_$Impl_$.F18 = 1073741933;
lime_ui__$KeyCode_KeyCode_$Impl_$.F19 = 1073741934;
lime_ui__$KeyCode_KeyCode_$Impl_$.F20 = 1073741935;
lime_ui__$KeyCode_KeyCode_$Impl_$.F21 = 1073741936;
lime_ui__$KeyCode_KeyCode_$Impl_$.F22 = 1073741937;
lime_ui__$KeyCode_KeyCode_$Impl_$.F23 = 1073741938;
lime_ui__$KeyCode_KeyCode_$Impl_$.F24 = 1073741939;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXECUTE = 1073741940;
lime_ui__$KeyCode_KeyCode_$Impl_$.HELP = 1073741941;
lime_ui__$KeyCode_KeyCode_$Impl_$.MENU = 1073741942;
lime_ui__$KeyCode_KeyCode_$Impl_$.SELECT = 1073741943;
lime_ui__$KeyCode_KeyCode_$Impl_$.STOP = 1073741944;
lime_ui__$KeyCode_KeyCode_$Impl_$.AGAIN = 1073741945;
lime_ui__$KeyCode_KeyCode_$Impl_$.UNDO = 1073741946;
lime_ui__$KeyCode_KeyCode_$Impl_$.CUT = 1073741947;
lime_ui__$KeyCode_KeyCode_$Impl_$.COPY = 1073741948;
lime_ui__$KeyCode_KeyCode_$Impl_$.PASTE = 1073741949;
lime_ui__$KeyCode_KeyCode_$Impl_$.FIND = 1073741950;
lime_ui__$KeyCode_KeyCode_$Impl_$.MUTE = 1073741951;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_UP = 1073741952;
lime_ui__$KeyCode_KeyCode_$Impl_$.VOLUME_DOWN = 1073741953;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COMMA = 1073741957;
lime_ui__$KeyCode_KeyCode_$Impl_$.ALT_ERASE = 1073741977;
lime_ui__$KeyCode_KeyCode_$Impl_$.SYSTEM_REQUEST = 1073741978;
lime_ui__$KeyCode_KeyCode_$Impl_$.CANCEL = 1073741979;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR = 1073741980;
lime_ui__$KeyCode_KeyCode_$Impl_$.PRIOR = 1073741981;
lime_ui__$KeyCode_KeyCode_$Impl_$.RETURN2 = 1073741982;
lime_ui__$KeyCode_KeyCode_$Impl_$.SEPARATOR = 1073741983;
lime_ui__$KeyCode_KeyCode_$Impl_$.OUT = 1073741984;
lime_ui__$KeyCode_KeyCode_$Impl_$.OPER = 1073741985;
lime_ui__$KeyCode_KeyCode_$Impl_$.CLEAR_AGAIN = 1073741986;
lime_ui__$KeyCode_KeyCode_$Impl_$.CRSEL = 1073741987;
lime_ui__$KeyCode_KeyCode_$Impl_$.EXSEL = 1073741988;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_00 = 1073742000;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_000 = 1073742001;
lime_ui__$KeyCode_KeyCode_$Impl_$.THOUSAND_SEPARATOR = 1073742002;
lime_ui__$KeyCode_KeyCode_$Impl_$.DECIMAL_SEPARATOR = 1073742003;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_UNIT = 1073742004;
lime_ui__$KeyCode_KeyCode_$Impl_$.CURRENCY_SUBUNIT = 1073742005;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_PARENTHESIS = 1073742006;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_PARENTHESIS = 1073742007;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LEFT_BRACE = 1073742008;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_RIGHT_BRACE = 1073742009;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_TAB = 1073742010;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BACKSPACE = 1073742011;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_A = 1073742012;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_B = 1073742013;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_C = 1073742014;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_D = 1073742015;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_E = 1073742016;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_F = 1073742017;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_XOR = 1073742018;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_POWER = 1073742019;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PERCENT = 1073742020;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_LESS_THAN = 1073742021;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_GREATER_THAN = 1073742022;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AMPERSAND = 1073742023;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_AMPERSAND = 1073742024;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_VERTICAL_BAR = 1073742025;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DOUBLE_VERTICAL_BAR = 1073742026;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_COLON = 1073742027;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HASH = 1073742028;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_SPACE = 1073742029;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_AT = 1073742030;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_EXCLAMATION = 1073742031;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_STORE = 1073742032;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_RECALL = 1073742033;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_CLEAR = 1073742034;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_ADD = 1073742035;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_SUBTRACT = 1073742036;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_MULTIPLY = 1073742037;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_MEM_DIVIDE = 1073742038;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_PLUS_MINUS = 1073742039;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR = 1073742040;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_CLEAR_ENTRY = 1073742041;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_BINARY = 1073742042;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_OCTAL = 1073742043;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_DECIMAL = 1073742044;
lime_ui__$KeyCode_KeyCode_$Impl_$.NUMPAD_HEXADECIMAL = 1073742045;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_CTRL = 1073742048;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_SHIFT = 1073742049;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_ALT = 1073742050;
lime_ui__$KeyCode_KeyCode_$Impl_$.LEFT_META = 1073742051;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_CTRL = 1073742052;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_SHIFT = 1073742053;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_ALT = 1073742054;
lime_ui__$KeyCode_KeyCode_$Impl_$.RIGHT_META = 1073742055;
lime_ui__$KeyCode_KeyCode_$Impl_$.MODE = 1073742081;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_NEXT = 1073742082;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PREVIOUS = 1073742083;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_STOP = 1073742084;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_PLAY = 1073742085;
lime_ui__$KeyCode_KeyCode_$Impl_$.AUDIO_MUTE = 1073742086;
lime_ui__$KeyCode_KeyCode_$Impl_$.MEDIA_SELECT = 1073742087;
lime_ui__$KeyCode_KeyCode_$Impl_$.WWW = 1073742088;
lime_ui__$KeyCode_KeyCode_$Impl_$.MAIL = 1073742089;
lime_ui__$KeyCode_KeyCode_$Impl_$.CALCULATOR = 1073742090;
lime_ui__$KeyCode_KeyCode_$Impl_$.COMPUTER = 1073742091;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_SEARCH = 1073742092;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_HOME = 1073742093;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BACK = 1073742094;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_FORWARD = 1073742095;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_STOP = 1073742096;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_REFRESH = 1073742097;
lime_ui__$KeyCode_KeyCode_$Impl_$.APP_CONTROL_BOOKMARKS = 1073742098;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_DOWN = 1073742099;
lime_ui__$KeyCode_KeyCode_$Impl_$.BRIGHTNESS_UP = 1073742100;
lime_ui__$KeyCode_KeyCode_$Impl_$.DISPLAY_SWITCH = 1073742101;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_TOGGLE = 1073742102;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_DOWN = 1073742103;
lime_ui__$KeyCode_KeyCode_$Impl_$.BACKLIGHT_UP = 1073742104;
lime_ui__$KeyCode_KeyCode_$Impl_$.EJECT = 1073742105;
lime_ui__$KeyCode_KeyCode_$Impl_$.SLEEP = 1073742106;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NONE = 0;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_SHIFT = 1;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_SHIFT = 2;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_CTRL = 64;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_CTRL = 128;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_ALT = 256;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_ALT = 512;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.LEFT_META = 1024;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.RIGHT_META = 2048;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.NUM_LOCK = 4096;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CAPS_LOCK = 8192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.MODE = 16384;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.CTRL = 192;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.SHIFT = 3;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.ALT = 768;
lime_ui__$KeyModifier_KeyModifier_$Impl_$.META = 3072;
lime_ui_Touch.onEnd = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onMove = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_ui_Touch.onStart = new lime_app_Event_$lime_$ui_$Touch_$Void();
lime_utils_Bytes.cffi_lime_bytes_from_data_pointer = lime_system_CFFI.load("lime","lime_bytes_from_data_pointer",2,false);
lime_utils_Bytes.cffi_lime_bytes_get_data_pointer = lime_system_CFFI.load("lime","lime_bytes_get_data_pointer",1,false);
lime_utils_Bytes.cffi_lime_bytes_read_file = lime_system_CFFI.load("lime","lime_bytes_read_file",1,false);
lime_utils__$Float32Array_Float32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$Int16Array_Int16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$Int32Array_Int32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt16Array_UInt16Array_$Impl_$.BYTES_PER_ELEMENT = 2;
lime_utils__$UInt32Array_UInt32Array_$Impl_$.BYTES_PER_ELEMENT = 4;
lime_utils__$UInt8Array_UInt8Array_$Impl_$.BYTES_PER_ELEMENT = 1;
motion_actuators_SimpleActuator.actuators = [];
motion_actuators_SimpleActuator.actuatorsLength = 0;
motion_actuators_SimpleActuator.addedEvent = false;
motion_Actuate.defaultActuator = motion_actuators_SimpleActuator;
motion_Actuate.defaultEase = motion_easing_Expo.get_easeOut();
motion_Actuate.targetLibraries = new haxe_ds_ObjectMap();
openfl_Assets.cache = new openfl_AssetCache();
openfl_Assets.dispatcher = new openfl_events_EventDispatcher();
openfl_display_LoaderInfo.__rootURL = window.document.URL;
openfl_system_ApplicationDomain.currentDomain = new openfl_system_ApplicationDomain(null);
openfl_geom_Matrix.__identity = new openfl_geom_Matrix();
openfl_geom_Matrix.__temp = new openfl_geom_Matrix();
openfl_Lib.current = new openfl_display_MovieClip();
openfl_Lib.__sentWarnings = new haxe_ds_StringMap();
openfl__$internal_renderer_GraphicsPaths.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_GraphicsPaths.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_cairo_CairoGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_cairo_CairoGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_cairo_CairoGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_canvas_CanvasGraphics.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_canvas_CanvasGraphics.fillCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_canvas_CanvasGraphics.strokeCommands = new openfl__$internal_renderer_DrawCommandBuffer();
openfl__$internal_renderer_opengl_GLBitmap.fbData = [];
openfl__$internal_renderer_opengl_GLRenderer.glContextId = 0;
openfl__$internal_renderer_opengl_GLRenderer.glContexts = [];
openfl__$internal_renderer_opengl_shaders2_Shader.UID = 0;
openfl__$internal_renderer_opengl_shaders2_DefaultShader.VERTEX_SRC = ["attribute vec2 " + "openfl_aPosition" + ";","attribute vec2 " + "openfl_aTexCoord0" + ";","attribute vec4 " + "openfl_aColor" + ";","uniform mat3 " + "openfl_uProjectionMatrix" + ";","uniform bool " + "openfl_uUseColorTransform" + ";","varying vec2 " + "openfl_vTexCoord" + ";","varying vec4 " + "openfl_vColor" + ";","void main(void) {","   gl_Position = vec4((" + "openfl_uProjectionMatrix" + " * vec3(" + "openfl_aPosition" + ", 1.0)).xy, 0.0, 1.0);","   " + "openfl_vTexCoord" + " = " + "openfl_aTexCoord0" + ";","   if(" + "openfl_uUseColorTransform" + ")","   \t" + "openfl_vColor" + " = " + "openfl_aColor" + ";","   else","   \t" + "openfl_vColor" + " = vec4(" + "openfl_aColor" + ".rgb * " + "openfl_aColor" + ".a, " + "openfl_aColor" + ".a);","}"];
openfl__$internal_renderer_opengl_utils_PathBuiler.__currentWinding = 0;
openfl__$internal_renderer_opengl_utils_PathBuiler.__fillIndex = 0;
openfl_geom_Rectangle.__temp = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.fillVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.drawTrianglesVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aTexCoord0"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5121,true,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.primitiveVertexAttributes = [new openfl__$internal_renderer_opengl_utils_VertexAttribute(2,5126,false,"openfl_aPosition"),new openfl__$internal_renderer_opengl_utils_VertexAttribute(4,5126,false,"openfl_aColor")];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.graphicsDataPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.bucketPool = [];
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.SIN45 = 0.70710678118654752440084436210485;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.TAN22 = 0.4142135623730950488016887242097;
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectPosition = new openfl_geom_Point();
openfl__$internal_renderer_opengl_utils_GraphicsRenderer.objectBounds = new openfl_geom_Rectangle();
openfl__$internal_renderer_opengl_utils_ShaderManager.compiledShadersCache = new haxe_ds_StringMap();
openfl__$internal_renderer_opengl_utils_SpriteBatch.VERTS_PER_SPRITE = 4;
openfl__$internal_text_TextEngine.UTF8_TAB = 9;
openfl__$internal_text_TextEngine.UTF8_ENDLINE = 10;
openfl__$internal_text_TextEngine.UTF8_SPACE = 32;
openfl__$internal_text_TextEngine.UTF8_HYPHEN = 45;
openfl__$internal_text_TextEngine.__defaultFonts = new haxe_ds_StringMap();
openfl_display__$BlendMode_BlendMode_$Impl_$.ADD = 0;
openfl_display__$BlendMode_BlendMode_$Impl_$.ALPHA = 1;
openfl_display__$BlendMode_BlendMode_$Impl_$.DARKEN = 2;
openfl_display__$BlendMode_BlendMode_$Impl_$.DIFFERENCE = 3;
openfl_display__$BlendMode_BlendMode_$Impl_$.ERASE = 4;
openfl_display__$BlendMode_BlendMode_$Impl_$.HARDLIGHT = 5;
openfl_display__$BlendMode_BlendMode_$Impl_$.INVERT = 6;
openfl_display__$BlendMode_BlendMode_$Impl_$.LAYER = 7;
openfl_display__$BlendMode_BlendMode_$Impl_$.LIGHTEN = 8;
openfl_display__$BlendMode_BlendMode_$Impl_$.MULTIPLY = 9;
openfl_display__$BlendMode_BlendMode_$Impl_$.NORMAL = 10;
openfl_display__$BlendMode_BlendMode_$Impl_$.OVERLAY = 11;
openfl_display__$BlendMode_BlendMode_$Impl_$.SCREEN = 12;
openfl_display__$BlendMode_BlendMode_$Impl_$.SHADER = 13;
openfl_display__$BlendMode_BlendMode_$Impl_$.SUBTRACT = 14;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.NONE = 0;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.ROUND = 1;
openfl_display__$CapsStyle_CapsStyle_$Impl_$.SQUARE = 2;
openfl_display__$GradientType_GradientType_$Impl_$.LINEAR = 0;
openfl_display__$GradientType_GradientType_$Impl_$.RADIAL = 1;
openfl_display_Graphics.TILE_SCALE = 1;
openfl_display_Graphics.TILE_ROTATION = 2;
openfl_display_Graphics.TILE_RGB = 4;
openfl_display_Graphics.TILE_ALPHA = 8;
openfl_display_Graphics.TILE_TRANS_2x2 = 16;
openfl_display_Graphics.TILE_RECT = 32;
openfl_display_Graphics.TILE_ORIGIN = 64;
openfl_display_Graphics.TILE_BLEND_NORMAL = 0;
openfl_display_Graphics.TILE_BLEND_ADD = 65536;
openfl_display_Graphics.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Graphics.TILE_BLEND_SCREEN = 262144;
openfl_display_Graphics.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Graphics.TILE_BLEND_DARKEN = 1048576;
openfl_display_Graphics.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Graphics.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Graphics.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Graphics.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Graphics.TILE_BLEND_INVERT = 33554432;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.LINEAR_RGB = 0;
openfl_display__$InterpolationMethod_InterpolationMethod_$Impl_$.RGB = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.BEVEL = 0;
openfl_display__$JointStyle_JointStyle_$Impl_$.MITER = 1;
openfl_display__$JointStyle_JointStyle_$Impl_$.ROUND = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.HORIZONTAL = 0;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NONE = 1;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.NORMAL = 2;
openfl_display__$LineScaleMode_LineScaleMode_$Impl_$.VERTICAL = 3;
openfl_display_OpenGLView.CONTEXT_LOST = "glcontextlost";
openfl_display_OpenGLView.CONTEXT_RESTORED = "glcontextrestored";
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.ALWAYS = 0;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.AUTO = 1;
openfl_display__$PixelSnapping_PixelSnapping_$Impl_$.NEVER = 2;
openfl_display_Shader.uniformRegex = new EReg("^\\s*uniform\\s+(sampler(?:2D|Cube)|[bi]?vec[234]|float|int|bool|mat[234])\\s+(\\w+)\\s*(?:\\[(\\d+)\\])?\\s*;.*$","gmi");
openfl_display_Shader.aPosition = "openfl_aPosition";
openfl_display_Shader.aTexCoord = "openfl_aTexCoord0";
openfl_display_Shader.aColor = "openfl_aColor";
openfl_display_Shader.uSampler = "openfl_uSampler0";
openfl_display_Shader.uProjectionMatrix = "openfl_uProjectionMatrix";
openfl_display_Shader.uColorMultiplier = "openfl_uColorMultiplier";
openfl_display_Shader.uColorOffset = "openfl_uColorOffset";
openfl_display_Shader.uObjectSize = "openfl_uObjectSize";
openfl_display_Shader.uTextureSize = "openfl_uTextureSize";
openfl_display_Shader.vTexCoord = "openfl_vTexCoord";
openfl_display_Shader.vColor = "openfl_vColor";
openfl_display_Shader.vertexHeader = ["attribute vec2 " + openfl_display_Shader.aPosition + ";","attribute vec2 " + openfl_display_Shader.aTexCoord + ";","attribute vec4 " + openfl_display_Shader.aColor + ";","uniform mat3 " + openfl_display_Shader.uProjectionMatrix + ";","uniform vec2 " + openfl_display_Shader.uObjectSize + ";","uniform vec2 " + openfl_display_Shader.uTextureSize + ";","varying vec2 " + openfl_display_Shader.vTexCoord + ";","varying vec4 " + openfl_display_Shader.vColor + ";"];
openfl_display_Shader.fragmentHeader = ["uniform sampler2D " + openfl_display_Shader.uSampler + ";","uniform vec4 " + openfl_display_Shader.uColorMultiplier + ";","uniform vec4 " + openfl_display_Shader.uColorOffset + ";","uniform vec2 " + openfl_display_Shader.uObjectSize + ";","uniform vec2 " + openfl_display_Shader.uTextureSize + ";","varying vec2 " + openfl_display_Shader.vTexCoord + ";","varying vec4 " + openfl_display_Shader.vColor + ";","vec4 colorTransform(const vec4 color, const vec4 tint, const vec4 multiplier, const vec4 offset) {","   vec4 unmultiply = vec4(color.rgb / color.a, color.a);","   vec4 result = unmultiply * tint * multiplier;","   result = result + offset;","   result = clamp(result, 0., 1.);","   result = vec4(result.rgb * result.a, result.a);","   return result;","}"];
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.PAD = 0;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REFLECT = 1;
openfl_display__$SpreadMethod_SpreadMethod_$Impl_$.REPEAT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM = 0;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_LEFT = 1;
openfl_display__$StageAlign_StageAlign_$Impl_$.BOTTOM_RIGHT = 2;
openfl_display__$StageAlign_StageAlign_$Impl_$.LEFT = 3;
openfl_display__$StageAlign_StageAlign_$Impl_$.RIGHT = 4;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP = 5;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_LEFT = 6;
openfl_display__$StageAlign_StageAlign_$Impl_$.TOP_RIGHT = 7;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN = 0;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.FULL_SCREEN_INTERACTIVE = 1;
openfl_display__$StageDisplayState_StageDisplayState_$Impl_$.NORMAL = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.BEST = 0;
openfl_display__$StageQuality_StageQuality_$Impl_$.HIGH = 1;
openfl_display__$StageQuality_StageQuality_$Impl_$.LOW = 2;
openfl_display__$StageQuality_StageQuality_$Impl_$.MEDIUM = 3;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.EXACT_FIT = 0;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_BORDER = 1;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.NO_SCALE = 2;
openfl_display__$StageScaleMode_StageScaleMode_$Impl_$.SHOW_ALL = 3;
openfl_display_Tilesheet.TILE_SCALE = 1;
openfl_display_Tilesheet.TILE_ROTATION = 2;
openfl_display_Tilesheet.TILE_RGB = 4;
openfl_display_Tilesheet.TILE_ALPHA = 8;
openfl_display_Tilesheet.TILE_TRANS_2x2 = 16;
openfl_display_Tilesheet.TILE_RECT = 32;
openfl_display_Tilesheet.TILE_ORIGIN = 64;
openfl_display_Tilesheet.TILE_TRANS_COLOR = 128;
openfl_display_Tilesheet.TILE_BLEND_NORMAL = 0;
openfl_display_Tilesheet.TILE_BLEND_ADD = 65536;
openfl_display_Tilesheet.TILE_BLEND_MULTIPLY = 131072;
openfl_display_Tilesheet.TILE_BLEND_SCREEN = 262144;
openfl_display_Tilesheet.TILE_BLEND_SUBTRACT = 524288;
openfl_display_Tilesheet.TILE_BLEND_DARKEN = 1048576;
openfl_display_Tilesheet.TILE_BLEND_LIGHTEN = 2097152;
openfl_display_Tilesheet.TILE_BLEND_OVERLAY = 4194304;
openfl_display_Tilesheet.TILE_BLEND_HARDLIGHT = 8388608;
openfl_display_Tilesheet.TILE_BLEND_DIFFERENCE = 16777216;
openfl_display_Tilesheet.TILE_BLEND_INVERT = 33554432;
openfl_display_Tilesheet.__defaultPoint = new openfl_geom_Point(0,0);
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NEGATIVE = 0;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.NONE = 1;
openfl_display__$TriangleCulling_TriangleCulling_$Impl_$.POSITIVE = 2;
openfl_display3D_Context3D.TEXTURE_MAX_ANISOTROPY_EXT = 34046;
openfl_display3D_Context3D.MAX_SAMPLERS = 8;
openfl_display3D_Context3D.MAX_TEXTURE_MAX_ANISOTROPY_EXT = 34047;
openfl_display3D_Context3D.anisotropySupportTested = false;
openfl_display3D_Context3D.supportsAnisotropy = false;
openfl_display3D_Context3D.maxSupportedAnisotropy = 256;
openfl_display3D_Context3DClearMask.ALL = 17664;
openfl_display3D_Context3DClearMask.COLOR = 16384;
openfl_display3D_Context3DClearMask.DEPTH = 256;
openfl_display3D_Context3DClearMask.STENCIL = 1024;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.ALWAYS = 519;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.EQUAL = 514;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER = 516;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.GREATER_EQUAL = 518;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS = 513;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.LESS_EQUAL = 515;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NEVER = 512;
openfl_display3D__$Context3DCompareMode_Context3DCompareMode_$Impl_$.NOT_EQUAL = 517;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.BACK = 1028;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT = 1029;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.FRONT_AND_BACK = 1032;
openfl_display3D__$Context3DTriangleFace_Context3DTriangleFace_$Impl_$.NONE = 0;
openfl_display3D_textures_Texture.internalFormat = -1;
openfl_errors_Error.DEFAULT_TO_STRING = "Error";
openfl_events_Event.ACTIVATE = "activate";
openfl_events_Event.ADDED = "added";
openfl_events_Event.ADDED_TO_STAGE = "addedToStage";
openfl_events_Event.CANCEL = "cancel";
openfl_events_Event.CHANGE = "change";
openfl_events_Event.CLOSE = "close";
openfl_events_Event.COMPLETE = "complete";
openfl_events_Event.CONNECT = "connect";
openfl_events_Event.CONTEXT3D_CREATE = "context3DCreate";
openfl_events_Event.DEACTIVATE = "deactivate";
openfl_events_Event.ENTER_FRAME = "enterFrame";
openfl_events_Event.ID3 = "id3";
openfl_events_Event.INIT = "init";
openfl_events_Event.MOUSE_LEAVE = "mouseLeave";
openfl_events_Event.OPEN = "open";
openfl_events_Event.REMOVED = "removed";
openfl_events_Event.REMOVED_FROM_STAGE = "removedFromStage";
openfl_events_Event.RENDER = "render";
openfl_events_Event.RESIZE = "resize";
openfl_events_Event.SCROLL = "scroll";
openfl_events_Event.SELECT = "select";
openfl_events_Event.SOUND_COMPLETE = "soundComplete";
openfl_events_Event.TAB_CHILDREN_CHANGE = "tabChildrenChange";
openfl_events_Event.TAB_ENABLED_CHANGE = "tabEnabledChange";
openfl_events_Event.TAB_INDEX_CHANGE = "tabIndexChange";
openfl_events_Event.UNLOAD = "unload";
openfl_events_ActivityEvent.ACTIVITY = "activity";
openfl_events_TextEvent.LINK = "link";
openfl_events_TextEvent.TEXT_INPUT = "textInput";
openfl_events_ErrorEvent.ERROR = "error";
openfl_events_FocusEvent.FOCUS_IN = "focusIn";
openfl_events_FocusEvent.FOCUS_OUT = "focusOut";
openfl_events_FocusEvent.KEY_FOCUS_CHANGE = "keyFocusChange";
openfl_events_FocusEvent.MOUSE_FOCUS_CHANGE = "mouseFocusChange";
openfl_events_FullScreenEvent.FULL_SCREEN = "fullScreen";
openfl_events_FullScreenEvent.FULL_SCREEN_INTERACTIVE_ACCEPTED = "fullScreenInteractiveAccepted";
openfl_events_GameInputEvent.DEVICE_ADDED = "deviceAdded";
openfl_events_GameInputEvent.DEVICE_REMOVED = "deviceRemoved";
openfl_events_GameInputEvent.DEVICE_UNUSABLE = "deviceUnusable";
openfl_events_HTTPStatusEvent.HTTP_RESPONSE_STATUS = "httpResponseStatus";
openfl_events_HTTPStatusEvent.HTTP_STATUS = "httpStatus";
openfl_events_IOErrorEvent.IO_ERROR = "ioError";
openfl_events_KeyboardEvent.KEY_DOWN = "keyDown";
openfl_events_KeyboardEvent.KEY_UP = "keyUp";
openfl_events_MouseEvent.CLICK = "click";
openfl_events_MouseEvent.DOUBLE_CLICK = "doubleClick";
openfl_events_MouseEvent.MIDDLE_CLICK = "middleClick";
openfl_events_MouseEvent.MIDDLE_MOUSE_DOWN = "middleMouseDown";
openfl_events_MouseEvent.MIDDLE_MOUSE_UP = "middleMouseUp";
openfl_events_MouseEvent.MOUSE_DOWN = "mouseDown";
openfl_events_MouseEvent.MOUSE_MOVE = "mouseMove";
openfl_events_MouseEvent.MOUSE_OUT = "mouseOut";
openfl_events_MouseEvent.MOUSE_OVER = "mouseOver";
openfl_events_MouseEvent.MOUSE_UP = "mouseUp";
openfl_events_MouseEvent.MOUSE_WHEEL = "mouseWheel";
openfl_events_MouseEvent.RIGHT_CLICK = "rightClick";
openfl_events_MouseEvent.RIGHT_MOUSE_DOWN = "rightMouseDown";
openfl_events_MouseEvent.RIGHT_MOUSE_UP = "rightMouseUp";
openfl_events_MouseEvent.ROLL_OUT = "rollOut";
openfl_events_MouseEvent.ROLL_OVER = "rollOver";
openfl_events_NetStatusEvent.NET_STATUS = "netStatus";
openfl_events_ProgressEvent.PROGRESS = "progress";
openfl_events_ProgressEvent.SOCKET_DATA = "socketData";
openfl_events_SecurityErrorEvent.SECURITY_ERROR = "securityError";
openfl_events_TouchEvent.TOUCH_BEGIN = "touchBegin";
openfl_events_TouchEvent.TOUCH_END = "touchEnd";
openfl_events_TouchEvent.TOUCH_MOVE = "touchMove";
openfl_events_TouchEvent.TOUCH_OUT = "touchOut";
openfl_events_TouchEvent.TOUCH_OVER = "touchOver";
openfl_events_TouchEvent.TOUCH_ROLL_OUT = "touchRollOut";
openfl_events_TouchEvent.TOUCH_ROLL_OVER = "touchRollOver";
openfl_events_TouchEvent.TOUCH_TAP = "touchTap";
openfl_external_ExternalInterface.available = true;
openfl_external_ExternalInterface.marshallExceptions = false;
openfl_filters__$BlurFilter_BlurShader.__meta__ = { fields : { vertex : { vertex : null}, fragment : { fragment : null}, get_uRadius : { noCompletion : null}, set_uRadius : { noCompletion : null}}};
openfl_filters__$DropShadowFilter_DropShadowShader.__meta__ = { fields : { vertex : { vertex : null}, fragment : { fragment : null}, get_uRadius : { noCompletion : null}, set_uRadius : { noCompletion : null}, get_uShift : { noCompletion : null}, set_uShift : { noCompletion : null}, get_uColor : { noCompletion : null}, set_uColor : { noCompletion : null}}};
openfl_filters__$GlowFilter_GlowShader.__meta__ = { fields : { vertex : { vertex : null}, fragment : { fragment : null}, get_uRadius : { noCompletion : null}, set_uRadius : { noCompletion : null}, get_uColor : { noCompletion : null}, set_uColor : { noCompletion : null}}};
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.AXIS_ANGLE = 0;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.EULER_ANGLES = 1;
openfl_geom__$Orientation3D_Orientation3D_$Impl_$.QUATERNION = 2;
openfl_media_Sound.__registeredSounds = new haxe_ds_StringMap();
openfl_net_NetConnection.CONNECT_SUCCESS = "connectSuccess";
openfl_net_SharedObject.defaultObjectEncoding = 3;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.FLUSHED = 0;
openfl_net__$SharedObjectFlushStatus_SharedObjectFlushStatus_$Impl_$.PENDING = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.BINARY = 0;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.TEXT = 1;
openfl_net__$URLLoaderDataFormat_URLLoaderDataFormat_$Impl_$.VARIABLES = 2;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.DELETE = 0;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.GET = 1;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.HEAD = 2;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.OPTIONS = 3;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.POST = 4;
openfl_net__$URLRequestMethod_URLRequestMethod_$Impl_$.PUT = 5;
openfl_system_SecurityDomain.currentDomain = new openfl_system_SecurityDomain();
openfl_system_System.useCodePage = false;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.ADVANCED = 0;
openfl_text__$AntiAliasType_AntiAliasType_$Impl_$.NORMAL = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD = 0;
openfl_text__$FontStyle_FontStyle_$Impl_$.BOLD_ITALIC = 1;
openfl_text__$FontStyle_FontStyle_$Impl_$.ITALIC = 2;
openfl_text__$FontStyle_FontStyle_$Impl_$.REGULAR = 3;
openfl_text__$FontType_FontType_$Impl_$.DEVICE = 0;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED = 1;
openfl_text__$FontType_FontType_$Impl_$.EMBEDDED_CFF = 2;
openfl_text__$GridFitType_GridFitType_$Impl_$.NONE = 0;
openfl_text__$GridFitType_GridFitType_$Impl_$.PIXEL = 1;
openfl_text__$GridFitType_GridFitType_$Impl_$.SUBPIXEL = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.CENTER = 0;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.LEFT = 1;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.NONE = 2;
openfl_text__$TextFieldAutoSize_TextFieldAutoSize_$Impl_$.RIGHT = 3;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.DYNAMIC = 0;
openfl_text__$TextFieldType_TextFieldType_$Impl_$.INPUT = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.CENTER = 0;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.END = 1;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.JUSTIFY = 2;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.LEFT = 3;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.RIGHT = 4;
openfl_text__$TextFormatAlign_TextFormatAlign_$Impl_$.START = 5;
openfl_ui_GameInput.isSupported = true;
openfl_ui_GameInput.numDevices = 0;
openfl_ui_GameInput.__deviceList = [];
openfl_ui_GameInput.__devices = new haxe_ds_ObjectMap();
openfl_ui_GameInput.__instances = [];
openfl_ui_GameInputDevice.MAX_BUFFER_SIZE = 32000;
openfl_ui_Keyboard.NUMBER_0 = 48;
openfl_ui_Keyboard.NUMBER_1 = 49;
openfl_ui_Keyboard.NUMBER_2 = 50;
openfl_ui_Keyboard.NUMBER_3 = 51;
openfl_ui_Keyboard.NUMBER_4 = 52;
openfl_ui_Keyboard.NUMBER_5 = 53;
openfl_ui_Keyboard.NUMBER_6 = 54;
openfl_ui_Keyboard.NUMBER_7 = 55;
openfl_ui_Keyboard.NUMBER_8 = 56;
openfl_ui_Keyboard.NUMBER_9 = 57;
openfl_ui_Keyboard.A = 65;
openfl_ui_Keyboard.B = 66;
openfl_ui_Keyboard.C = 67;
openfl_ui_Keyboard.D = 68;
openfl_ui_Keyboard.E = 69;
openfl_ui_Keyboard.F = 70;
openfl_ui_Keyboard.G = 71;
openfl_ui_Keyboard.H = 72;
openfl_ui_Keyboard.I = 73;
openfl_ui_Keyboard.J = 74;
openfl_ui_Keyboard.K = 75;
openfl_ui_Keyboard.L = 76;
openfl_ui_Keyboard.M = 77;
openfl_ui_Keyboard.N = 78;
openfl_ui_Keyboard.O = 79;
openfl_ui_Keyboard.P = 80;
openfl_ui_Keyboard.Q = 81;
openfl_ui_Keyboard.R = 82;
openfl_ui_Keyboard.S = 83;
openfl_ui_Keyboard.T = 84;
openfl_ui_Keyboard.U = 85;
openfl_ui_Keyboard.V = 86;
openfl_ui_Keyboard.W = 87;
openfl_ui_Keyboard.X = 88;
openfl_ui_Keyboard.Y = 89;
openfl_ui_Keyboard.Z = 90;
openfl_ui_Keyboard.NUMPAD_0 = 96;
openfl_ui_Keyboard.NUMPAD_1 = 97;
openfl_ui_Keyboard.NUMPAD_2 = 98;
openfl_ui_Keyboard.NUMPAD_3 = 99;
openfl_ui_Keyboard.NUMPAD_4 = 100;
openfl_ui_Keyboard.NUMPAD_5 = 101;
openfl_ui_Keyboard.NUMPAD_6 = 102;
openfl_ui_Keyboard.NUMPAD_7 = 103;
openfl_ui_Keyboard.NUMPAD_8 = 104;
openfl_ui_Keyboard.NUMPAD_9 = 105;
openfl_ui_Keyboard.NUMPAD_MULTIPLY = 106;
openfl_ui_Keyboard.NUMPAD_ADD = 107;
openfl_ui_Keyboard.NUMPAD_ENTER = 108;
openfl_ui_Keyboard.NUMPAD_SUBTRACT = 109;
openfl_ui_Keyboard.NUMPAD_DECIMAL = 110;
openfl_ui_Keyboard.NUMPAD_DIVIDE = 111;
openfl_ui_Keyboard.F1 = 112;
openfl_ui_Keyboard.F2 = 113;
openfl_ui_Keyboard.F3 = 114;
openfl_ui_Keyboard.F4 = 115;
openfl_ui_Keyboard.F5 = 116;
openfl_ui_Keyboard.F6 = 117;
openfl_ui_Keyboard.F7 = 118;
openfl_ui_Keyboard.F8 = 119;
openfl_ui_Keyboard.F9 = 120;
openfl_ui_Keyboard.F10 = 121;
openfl_ui_Keyboard.F11 = 122;
openfl_ui_Keyboard.F12 = 123;
openfl_ui_Keyboard.F13 = 124;
openfl_ui_Keyboard.F14 = 125;
openfl_ui_Keyboard.F15 = 126;
openfl_ui_Keyboard.BACKSPACE = 8;
openfl_ui_Keyboard.TAB = 9;
openfl_ui_Keyboard.ALTERNATE = 18;
openfl_ui_Keyboard.ENTER = 13;
openfl_ui_Keyboard.COMMAND = 15;
openfl_ui_Keyboard.SHIFT = 16;
openfl_ui_Keyboard.CONTROL = 17;
openfl_ui_Keyboard.BREAK = 19;
openfl_ui_Keyboard.CAPS_LOCK = 20;
openfl_ui_Keyboard.NUMPAD = 21;
openfl_ui_Keyboard.ESCAPE = 27;
openfl_ui_Keyboard.SPACE = 32;
openfl_ui_Keyboard.PAGE_UP = 33;
openfl_ui_Keyboard.PAGE_DOWN = 34;
openfl_ui_Keyboard.END = 35;
openfl_ui_Keyboard.HOME = 36;
openfl_ui_Keyboard.LEFT = 37;
openfl_ui_Keyboard.RIGHT = 39;
openfl_ui_Keyboard.UP = 38;
openfl_ui_Keyboard.DOWN = 40;
openfl_ui_Keyboard.INSERT = 45;
openfl_ui_Keyboard.DELETE = 46;
openfl_ui_Keyboard.NUMLOCK = 144;
openfl_ui_Keyboard.SEMICOLON = 186;
openfl_ui_Keyboard.EQUAL = 187;
openfl_ui_Keyboard.COMMA = 188;
openfl_ui_Keyboard.MINUS = 189;
openfl_ui_Keyboard.PERIOD = 190;
openfl_ui_Keyboard.SLASH = 191;
openfl_ui_Keyboard.BACKQUOTE = 192;
openfl_ui_Keyboard.LEFTBRACKET = 219;
openfl_ui_Keyboard.BACKSLASH = 220;
openfl_ui_Keyboard.RIGHTBRACKET = 221;
openfl_ui_Keyboard.QUOTE = 222;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.DEFLATE = 0;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.LZMA = 1;
openfl_utils__$CompressionAlgorithm_CompressionAlgorithm_$Impl_$.ZLIB = 2;
openfl_utils__$Endian_Endian_$Impl_$.BIG_ENDIAN = 0;
openfl_utils__$Endian_Endian_$Impl_$.LITTLE_ENDIAN = 1;
ApplicationMain.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
